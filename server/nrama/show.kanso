{
    "settings": {
        "name": "nrama",
        "load": "lib/app",
        "modules": "lib",
        "templates": "templates",
        "attachments": [
            "static",
            "xdm",
            "bkmrklt"
        ],
        "base_template": "base.html"
    },
    "lib": {
        "app": "/**\n * Values exported from this module will automatically be used to generate\n * the design doc pushed to CouchDB.\n */\n\nmodule.exports = {\n    types: require('./types'),\n    shows: require('./shows'),\n    lists: require('./lists'),\n    views: require('./views'),\n    updates: require('./updates'),\n    filters: require('./filters'),\n    rewrites: require('./rewrites'),\n    validate_doc_update: require('./validate'),\n    events: require('./events')\n};\n\n\n",
        "bibtex": "/**\n * Modified from\n * http://bibtex-js.googlecode.com/svn/trunk/src/bibtex_js.js\n * MIT License\n * Copyright (c) 2010 henrik.muehe\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * \n */\n\n// Issues:\n//  no comment handling within strings\n//  no string concatenation\n//  no variable values yet\n\n// Grammar implemented here:\n//  bibtex -> (string | preamble | comment | entry)*;\n//  string -> '@STRING' '{' key_equals_value '}';\n//  preamble -> '@PREAMBLE' '{' value '}';\n//  comment -> '@COMMENT' '{' value '}';\n//  entry -> '@' key '{' key ',' key_value_list '}';\n//  key_value_list -> key_equals_value (',' key_equals_value)*;\n//  key_equals_value -> key '=' value;\n//  value -> value_quotes | value_braces | key;\n//  value_quotes -> '\"' .*? '\"'; // not quite\n//  value_braces -> '{' .*? '\"'; // not quite\nfunction BibtexParser() {\n  this.pos = 0;\n  this.input = \"\";\n  \n  this.entries = {};\n  this.strings = {\n      JAN: \"January\",\n      FEB: \"February\",\n      MAR: \"March\",      \n      APR: \"April\",\n      MAY: \"May\",\n      JUN: \"June\",\n      JUL: \"July\",\n      AUG: \"August\",\n      SEP: \"September\",\n      OCT: \"October\",\n      NOV: \"November\",\n      DEC: \"December\"\n  };\n  this.currentKey = \"\";\n  this.currentEntry = \"\";\n  \n\n  this.setInput = function(t) {\n    this.input = t;\n  }\n  \n  this.getEntries = function() {\n      return this.entries;\n  }\n\n  this.isWhitespace = function(s) {\n    return (s == ' ' || s == '\\r' || s == '\\t' || s == '\\n');\n  }\n\n  this.match = function(s) {\n    this.skipWhitespace();\n    if (this.input.substring(this.pos, this.pos+s.length) == s) {\n      this.pos += s.length;\n    } else {\n      throw \"Token mismatch, expected \" + s + \", found \" + this.input.substring(this.pos);\n    }\n    this.skipWhitespace();\n  }\n\n  this.tryMatch = function(s) {\n    this.skipWhitespace();\n    if (this.input.substring(this.pos, this.pos+s.length) == s) {\n      return true;\n    } else {\n      return false;\n    }\n    this.skipWhitespace();\n  }\n\n  this.skipWhitespace = function() {\n    while (this.isWhitespace(this.input[this.pos])) {\n      this.pos++;\n    }\n    if (this.input[this.pos] == \"%\") {\n      while(this.input[this.pos] != \"\\n\") {\n        this.pos++;\n      }\n      this.skipWhitespace();\n    }\n  }\n\n  this.value_braces = function() {\n    var bracecount = 0;\n    this.match(\"{\");\n    var start = this.pos;\n    while(true) {\n      if (this.input[this.pos] == '}' && this.input[this.pos-1] != '\\\\') {\n        if (bracecount > 0) {\n          bracecount--;\n        } else {\n          var end = this.pos;\n          this.match(\"}\");\n          return this.input.substring(start, end);\n        }\n      } else if (this.input[this.pos] == '{') {\n        bracecount++;\n      } else if (this.pos == this.input.length-1) {\n        throw \"Unterminated value\";\n      }\n      this.pos++;\n    }\n  }\n\n  this.value_quotes = function() {\n    this.match('\"');\n    var start = this.pos;\n    while(true) {\n      if (this.input[this.pos] == '\"' && this.input[this.pos-1] != '\\\\') {\n          var end = this.pos;\n          this.match('\"');\n          return this.input.substring(start, end);\n      } else if (this.pos == this.input.length-1) {\n        throw \"Unterminated value:\" + this.input.substring(start);\n      }\n      this.pos++;\n    }\n  }\n  \n  this.single_value = function() {\n    var start = this.pos;\n    if (this.tryMatch(\"{\")) {\n      return this.value_braces();\n    } else if (this.tryMatch('\"')) {\n      return this.value_quotes();\n    } else {\n      var k = this.key();\n      if (this.strings[k.toUpperCase()]) {\n        return this.strings[k];\n      } else if (k.match(\"^[0-9]+$\")) {\n        return k;\n      } else {\n        throw \"Value expected:\" + this.input.substring(start);\n      }\n    }\n  }\n  \n  this.value = function() {\n    var values = [];\n    values.push(this.single_value());\n    while (this.tryMatch(\"#\")) {\n      this.match(\"#\");\n      values.push(this.single_value());\n    }\n    return values.join(\"\");\n  }\n\n  this.key = function() {\n    var start = this.pos;\n    while(true) {\n      if (this.pos == this.input.length) {\n        throw \"Runaway key\";\n      }\n    \n      if (this.input[this.pos].match(\"[a-zA-Z0-9_:\\\\./-]\")) {\n        this.pos++\n      } else {\n        return this.input.substring(start, this.pos).toUpperCase();\n      }\n    }\n  }\n\n  this.key_equals_value = function() {\n    var key = this.key();\n    if (this.tryMatch(\"=\")) {\n      this.match(\"=\");\n      var val = this.value();\n      return [ key, val ];\n    } else {\n      throw \"... = value expected, equals sign missing:\" + this.input.substring(this.pos);\n    }\n  }\n\n  this.key_value_list = function() {\n    var kv = this.key_equals_value();\n    this.entries[this.currentEntry][kv[0]] = kv[1];\n    while (this.tryMatch(\",\")) {\n      this.match(\",\");\n      // fixes problems with commas at the end of a list\n      if (this.tryMatch(\"}\")) {\n        break;\n      }\n      kv = this.key_equals_value();\n      this.entries[this.currentEntry][kv[0]] = kv[1];\n    }\n  }\n\n  this.entry_body = function() {\n    this.currentEntry = this.key();\n    this.entries[this.currentEntry] = new Object();    \n    this.match(\",\");\n    this.key_value_list();\n  }\n\n  this.directive = function () {\n    this.match(\"@\");\n    return \"@\"+this.key();\n  }\n\n  this.string = function () {\n    var kv = this.key_equals_value();\n    this.strings[kv[0].toUpperCase()] = kv[1];\n  }\n\n  this.preamble = function() {\n    this.value();\n  }\n\n  this.comment = function() {\n    this.value(); // this is wrong\n  }\n\n  this.entry = function() {\n    this.entry_body();\n  }\n\n  this.bibtex = function() {\n    while(this.tryMatch(\"@\")) {\n      var d = this.directive().toUpperCase();\n      this.match(\"{\");\n      if (d == \"@STRING\") {\n        this.string();\n      } else if (d == \"@PREAMBLE\") {\n        this.preamble();\n      } else if (d == \"@COMMENT\") {\n        this.comment();\n      } else {\n        this.entry();\n      }\n      this.match(\"}\");\n    }\n  }\n}\n\nfunction BibtexDisplay() {\n  this.fixValue = function (value) {\n    value = value.replace(/\\\\glqq\\s?/g, \"&bdquo;\");\n    value = value.replace(/\\\\grqq\\s?/g, '&rdquo;');\n    value = value.replace(/\\\\ /g, '&nbsp;');\n    value = value.replace(/\\\\url/g, '');\n    value = value.replace(/---/g, '&mdash;');\n    value = value.replace(/{\\\\\"a}/g, '&auml;');\n    value = value.replace(/\\{\\\\\"o\\}/g, '&ouml;');\n    value = value.replace(/{\\\\\"u}/g, '&uuml;');\n    value = value.replace(/{\\\\\"A}/g, '&Auml;');\n    value = value.replace(/{\\\\\"O}/g, '&Ouml;');\n    value = value.replace(/{\\\\\"U}/g, '&Uuml;');\n    value = value.replace(/\\\\ss/g, '&szlig;');\n    value = value.replace(/\\{(.*?)\\}/g, '$1');\n    return value;\n  }\n  \n  this.displayBibtex2 = function(i, o) {\n    var b = new BibtexParser();\n    b.setInput(i);\n    b.bibtex();\n\n    var e = b.getEntries();\n    var old = o.find(\"*\");\n  \n    for (var item in e) {\n      var tpl = $(\".bibtex_template\").clone().removeClass('bibtex_template');\n      tpl.addClass(\"unused\");\n      \n      for (var key in e[item]) {\n      \n        var fields = tpl.find(\".\" + key.toLowerCase());\n        for (var i = 0; i < fields.size(); i++) {\n          var f = $(fields[i]);\n          f.removeClass(\"unused\");\n          var value = this.fixValue(e[item][key]);\n          if (f.is(\"a\")) {\n            f.attr(\"href\", value);\n          } else {\n            var currentHTML = f.html() || \"\";\n            if (currentHTML.match(\"%\")) {\n              // \"complex\" template field\n              f.html(currentHTML.replace(\"%\", value));\n            } else {\n              // simple field\n              f.html(value);\n            }\n          }\n        }\n      }\n    \n      var emptyFields = tpl.find(\"span .unused\");\n      emptyFields.each(function (key,f) {\n        if (f.innerHTML.match(\"%\")) {\n          f.innerHTML = \"\";\n        }\n      });\n    \n      o.append(tpl);\n      tpl.show();\n    }\n    \n    old.remove();\n  }\n\n\n  this.displayBibtex = function(input, output) {\n    // parse bibtex input\n    var b = new BibtexParser();\n    b.setInput(input);\n    b.bibtex();\n    \n    // save old entries to remove them later\n    var old = output.find(\"*\");    \n\n    // iterate over bibTeX entries\n    var entries = b.getEntries();\n    for (var entryKey in entries) {\n      var entry = entries[entryKey];\n      \n      // find template\n      var tpl = $(\".bibtex_template\").clone().removeClass('bibtex_template');\n      \n      // find all keys in the entry\n      var keys = [];\n      for (var key in entry) {\n        keys.push(key.toUpperCase());\n      }\n      \n      // find all ifs and check them\n      var removed = false;\n      do {\n        // find next if\n        var conds = tpl.find(\".if\");\n        if (conds.size() == 0) {\n          break;\n        }\n        \n        // check if\n        var cond = conds.first();\n        cond.removeClass(\"if\");\n        var ifTrue = true;\n        var classList = cond.attr('class').split(' ');\n        $.each( classList, function(index, cls){\n          if(keys.indexOf(cls.toUpperCase()) < 0) {\n            ifTrue = false;\n          }\n          cond.removeClass(cls);\n        });\n        \n        // remove false ifs\n        if (!ifTrue) {\n          cond.remove();\n        }\n      } while (true);\n      \n      // fill in remaining fields \n      for (var index in keys) {\n        var key = keys[index];\n        var value = entry[key] || \"\";\n        tpl.find(\"span:not(a).\" + key.toLowerCase()).html(this.fixValue(value));\n        tpl.find(\"a.\" + key.toLowerCase()).attr('href', this.fixValue(value));\n      }\n      \n      output.append(tpl);\n      tpl.show();\n    }\n    \n    // remove old entries\n    old.remove();\n  }\n\n}\n\nfunction bibtex_js_draw() {\n    // check for template, add default\n    if ($(\".bibtex_template\").size() == 0) {\n      $(\"body\").append(\"<div class=\\\"bibtex_template\\\"><div class=\\\"if author\\\" style=\\\"font-weight: bold;\\\">\\n  <span class=\\\"if year\\\">\\n    <span class=\\\"year\\\"></span>, \\n  </span>\\n  <span class=\\\"author\\\"></span>\\n  <span class=\\\"if url\\\" style=\\\"margin-left: 20px\\\">\\n    <a class=\\\"url\\\" style=\\\"color:black; font-size:10px\\\">(view online)</a>\\n  </span>\\n</div>\\n<div style=\\\"margin-left: 10px; margin-bottom:5px;\\\">\\n  <span class=\\\"title\\\"></span>\\n</div></div>\");\n    }    \n    $(\".bibtex_template\").hide();\n    (new BibtexDisplay()).displayBibtex($(\"#bibtex_input\").val(), $(\"#bibtex_display\"));\n}\n\n\n\n/**\n * Parses a string into bibtex\n */\nexports.BibtexParser = BibtexParser;",
        "events": "/**\n * Bindings to Kanso events\n *\n * (most of this is taken from the kanso admin app example,\n *      https://github.com/caolan/kanso/blob/master/admin/lib/app.js)\n */\n\nvar events = require('kanso/events'),\n    session = require('kanso/session'),\n    templates = require('kanso/templates'),\n    events = require('kanso/events'),\n    db = require('kanso/db');\n\n\n\n/**\n * The init method fires when the app is initially loaded from a page rendered\n * by CouchDB.  (DOESN'T SEEM TO WORK)\n */\nevents.on('init', function () {\n    bindSessionControls();\n});\n\n\n/**\n * The sessionChange event fires when the app is first loaded and the user's\n * session information becomes available. It is also fired whenever a change\n * to the user's session is detected, for example after logging in or out.\n */\nevents.on('sessionChange', function (userCtx, req) {\n    $('#session').replaceWith(templates.render('session.html', req, userCtx));\n    $('#registration').replaceWith(templates.render('registration.html', req, userCtx));\n});\n\n\n\n/**\n * The updateFailure event fires when an update function returns a document as\n * the first part of an array, but the client-side request to update the\n * document fails.\n */\n\nevents.on('updateFailure', function (err, info, req, res, doc) {\n    alert(err.message || err.toString());\n});\n\n\n// --- nrama only after here\n\n/**\n * afterResponse is not documented, but I think it fires after the\n * document has been rendered by the client (and not after rendering by the server)\n */\nevents.on('afterResponse', function(info, req, res) {\n\tif( req.client && typeof $ !=='undefined' ) {\n        $('._timeago').timeago();\n        $('._sort-me').sortlist();\n        $('textarea._nrama-note-content').autogrow();\n\t}\n});\n\n\n/**\n * --- modified from the kanso admin app\n * it's live = call only once\n */\nvar bindSessionControls = function () {\n    $('#session .logout a').die().live('click', function (ev) {\n        ev.preventDefault();\n        session.logout();\n        return false;\n    });\n    $('.login a').die().live('click', function (ev) {\n        ev.preventDefault();\n        var div = $('<div><h2>Login</h2></div>');\n        div.append('<form id=\"login_form\" action=\"/_session\" method=\"POST\">' +\n            '<div class=\"general_errors\"></div>' +\n            '<div class=\"username field\">' +\n                '<label for=\"id_name\">Username</label>' +\n                '<input id=\"id_name\" name=\"name\" type=\"text\" />' +\n                '<div class=\"errors\"></div>' +\n            '</div>' +\n            '<div class=\"password field\">' +\n                '<label for=\"id_password\">Password</label>' +\n                '<input id=\"id_password\" name=\"password\" type=\"password\" />' +\n                '<div class=\"errors\"></div>' +\n            '</div>' +\n            '<div class=\"actions\">' +\n                '<input type=\"button\" id=\"id_cancel\" value=\"Cancel\" />' +\n                '<input type=\"submit\" id=\"id_login\" value=\"Login\" />' +\n            '</div>' +\n        '</form>');\n        $('#id_cancel', div).click(function () {\n            $.modal.close();\n        });\n        $('form', div).submit(function (ev) {\n            ev.preventDefault();\n            var username = $('input[name=\"name\"]', div).val();\n            var password = $('input[name=\"password\"]', div).val();\n            console.log($('.username .errors', div));\n            $('.username .errors', div).text(\n                username ? '': 'Please enter a username'\n            );\n            $('.password .errors', div).text(\n                password ? '': 'Please enter a password'\n            );\n            if (username && password) {\n                session.login(username, password, function (err) {\n                    $('.general_errors', div).text(err ? err.toString(): '');\n                    if (!err) {\n                        $(div).fadeOut('slow', function () {\n                            $.modal.close();\n                        });\n                    }\n                });\n            }\n            return false;\n        });\n        div.modal({autoResize: true, overlayClose: true});\n        return false;\n    });\n    $('.signup a').die().live('click', function (ev) {\n        ev.preventDefault();\n        var div = $('<div><h2>Create an account</h2></div>');\n        div.append(\"<p>It's free.</p>\");\n        div.append('<form id=\"signup_form\" action=\"/_session\" method=\"POST\">' +\n            '<div class=\"general_errors\"></div>' +\n            '<div class=\"username field\">' +\n                '<label for=\"id_name\">Username</label>' +\n                '<input id=\"id_name\" name=\"name\" type=\"text\" />' +\n                '<div class=\"errors\"></div>' +\n            '</div>' +\n            '<div class=\"password field\">' +\n                '<label for=\"id_password\">Password</label>' +\n                '<input id=\"id_password\" name=\"password\" type=\"password\" />' +\n                '<div class=\"errors\"></div>' +\n            '</div>' +\n            '<div class=\"actions\">' +\n                '<input type=\"button\" id=\"id_cancel\" value=\"Cancel\" />' +\n                '<input type=\"submit\" id=\"id_create\" value=\"Create\" />' +\n            '</div>' +\n        '</form>');\n        $('#id_cancel', div).click(function () {\n            $.modal.close();\n        });\n        $('form', div).submit(function (ev) {\n            ev.preventDefault();\n            var username = $('input[name=\"name\"]', div).val();\n            var password = $('input[name=\"password\"]', div).val();\n            console.log($('.username .errors', div));\n            $('.username .errors', div).text(\n                username ? '': 'Please enter a username'\n            );\n            $('.password .errors', div).text(\n                password ? '': 'Please enter a password'\n            );\n            if (username && password) {\n                session.signup(username, password, function (error) {\n                    $('.general_errors', div).text(error ? error.toString(): '');\n                    if( error ) {\n                        if( error.status === 409 || error.error === 'conflict' ) {\n                            $('.general_errors', div).text('That username is already taken');\n                        }\n                    } else {\n                        session.login(username, password, function (error) {\n                            $('.general_errors', div).text(error ? error.toString(): '');\n                            $(div).fadeOut('slow', function () {\n                                $.modal.close();\n                            });\n                        });\n                    }\n                });\n            }\n            return false;\n        });\n        div.modal({autoResize: true, overlayClose: true});\n        return false;\n    });\n};",
        "filters": "/**\n * Filter functions to be exported from the design doc.\n */\n",
        "lists": "/**\n * List functions to be exported from the design doc.\n */\nvar templates = require('kanso/templates'),\n    events = require('kanso/events'),\n    db = require('kanso/db'),\n    _ = require('./underscore')._,\n    nrama_init = require('./nrama2_init').init;\n\n\n/**\n * set the title element for a page based on the query\n */\nvar make_title = function(what, req) {\n    var title = 'Note-o-rama : ';\n    if( req.query && req.query.user ) {\n        title += req.query.user+\"'s \"+what;\n    } else {\n        title += what;\n    }\n    return title;\n}\n\n/**\n * The templates need to know what's in the path of the current url and how to\n * include parts of that in creating links.\n * This may include garbage like 'group' and 'descending' parameters.\n *\n * Use: e.g. <a href=\"{baseURL}{query_user_url}/authors/{author}\">{author}</a>\n *  will provide a link to /users/user/authors/author from a page with a user in its path,\n *  and a link to /authors/author from a page with no such link.\n */\nvar _make_query_urls = function( req) {\n    var query_urls = {}\n    _(req.query).each(function(value, key){\n        query_urls['query_'+key] = value;\n        query_urls['query_'+key+'_url'] = '/'+key+'s/'+encodeURIComponent( value );\n    });\n    return query_urls;\n}\n\n/**\n * used in templates : true if broswer-rendered and the current notes & quotes are the user's\n *  (combine the two things because we're mainly interested in whether the user can edit)\n */\nvar _is_users_own_page = function(req) {\n    return {\n        is_users_own_page : req.client && req.query.user && req.query.user==req.userCtx.name\n    };\n}\n\n\n/**\n *\n */\nvar make_universal_template_data = function(req) {\n    var universal_template_data = _.extend(\n        _make_query_urls(req),\n        _is_users_own_page(req),\n        { req_client : req.client }\n    );\n\n    //TODO remove (for testing only)\n    if( req.client ) {\n        window.req = req;\n        window.utd = universal_template_data;\n        window._ = _;\n    }\n    \n    return universal_template_data;\n}\n\nexports.all_users = function (head, req) {\n\n    start({code: 200, headers: {'Content-Type': 'text/html'}});\n\n    // fetch all the rows\n    var users = [];\n    var row;\n    while( row = getRow() ) {\n        var updated_time = '';\n        try {\n            updated_time = new Date(parseInt(row.value.max)).toISOString()\n        } catch(e) {}\n        users.push({\n            user_id : row.key,\n            updated_time : updated_time    //this is time a source was updated\n        });\n    }\n\n    // generate the markup for a list of users\n    var content = templates.render('all_users.html', req, _({\n            users : users\n        }).extend( make_universal_template_data(req) )\n    );\n\n    return {title: make_title('users',req), content: content};\n\n};\n\n\n/**\n * list all sources for single user or for all users\n * works with view userId_source\n * The sources are listed in the order they were last updated\n */\nexports.sources = function(head, req) {\n    start({code: 200, headers: {'Content-Type': 'text/html'}});\n\n    var sources = [];\n    var row;\n    while( row = getRow() ) {\n        if( row.doc ) {\n            var thing = row.doc;\n            if( thing.type && thing.type == 'source' ) {\n                if( thing.page_id ) {\n                    thing.page_id_enc = encodeURIComponent(thing.page_id);\n                }\n                if( thing.updated ) {\n                    thing.updated_time = new Date(thing.updated).toISOString();   //human-readable\n                }\n                sources.push(thing);\n            }\n        }\n    }\n    \n    var content = templates.render('sources.html', req, _({\n            sources : sources\n        }).extend( make_universal_template_data(req) )\n    );\n    \n    return {title: make_title('sources',req), content: content };\n};\n\n\n/**\n * list authors (and their sources)\n * use with userId_author view\n *\n * Here we exploit the fact that the rows are sorted by author.\n * The query should provide author_index_in_key to specify where in the view-provided\n *   key an author's name can be found.\n */\nexports.authors = function (head, req) {\n\n    start({code: 200, headers: {'Content-Type': 'text/html'}});\n\n    var authors = [];   //keys will be authors, values will be a list of sources\n    var author_index_in_key = parseInt( req.query.author_index_in_key );\n\n    var row = getRow();\n    while( row ) {\n        if( !row || !row.key || !row.key[author_index_in_key] ) {\n            row = getRow();\n            continue;\n        }\n        var current_author = row.key[author_index_in_key];\n        author_sources = {\n            author_name : current_author,\n            sources : [row.doc]\n        };\n        row = getRow();\n        while( row && row.key[author_index_in_key] == current_author ) {\n            author_sources.sources.push(row.doc)\n            row = getRow();\n        }\n        authors.push(author_sources);\n    }\n\n    var content = templates.render('authors.html', req, _({\n            authors : authors\n        }).extend( make_universal_template_data(req) )\n    );\n\n    return {title: make_title('authors',req), content: content};\n\n};\n\n/**\n * tag cloud for [all users' | a user's] tags\n * user with views: tags_all and tags\n *\n * the query should include tag_index_in_key which specifies the index of the tag\n *   in the key provided by the view\n */\nexports.tags = function(head, req) {\n    start({code: 200, headers: {'Content-Type': 'text/html'}});\n\n    var tag_index_in_key = parseInt( req.query.tag_index_in_key );\n    \n    var tags = [];\n    \n    var row ;\n    while( row = getRow() ) {\n        if( !row.key || !row.key[tag_index_in_key] ) {\n            continue;\n        }\n        tags.push({\n           text : row.key[tag_index_in_key],\n           weight : row.value,\n           url : \"/\"\n        });\n    }\n    var content = templates.render('tags.html', req, _({\n            tags : tags\n        }).extend( make_universal_template_data(req) )\n    );\n\n    if( req.client ) {\n        window.tags = tags; //todo remove\n        $(document).one('nrama_page_loaded', function(){\n            $('#tag_cloud').jQCloud(tags, {\n                callback : function() {\n                    $('#tag_cloud a').each(function(){\n                        $(this).attr('href', req.userCtx.baseURL + (req.query.user ? '/users/'+encodeURIComponent(req.query.user) : '') + '/tags/'+ $(this).text());\n                    });\n                }\n            });\n        });\n    }\n\n\n    return {title: make_title('tags',req), content: content};\n}\n\n/**\n * Written for single or multi-users.\n * TODO factor out common parts with exports.quotes\n * (most of this is duplicated, and the nrama part is VERBATIM)\n */\nexports.flow = function(head, req) {\n    start({code: 200, headers: {'Content-Type': 'text/html'}});\n\n    var find_source = {};   //indexed by _id\n    var find_quote = {};    //indexed by quote_hash, priority to the first we find\n    var find_note = {}; //indexed by _id\n   \n    var row;\n    while( row  = getRow() ) {\n        var thing = row.doc;        // <-- NB must be used with ?include_docs=true\n        \n        if( !thing || !thing.type ) {\n            continue;\n        }\n        \n        if( thing.type == 'source' ) {\n            var source = thing;\n            find_source[source._id] = source;\n            source.updated_time = new Date(source.updated).toISOString();   //nb should not persist this property\n        }\n        if( thing.type == 'quote' ) {\n            var quote = thing;\n            if( !find_quote[quote.hash] ) {\n                find_quote[quote.hash] = quote;\n                quote.users = [];   //nb should not persist this property (quotes are not updated)\n            }\n            find_quote[quote.hash].users.push(quote.user_id);\n        }\n        if( thing.type == 'note' ) {\n            var note = thing;\n            find_note[note._id] = note;\n        }\n    }\n\n    //attach notes to quotes\n    var notes = _.values(find_note);\n    var note_orphan_ids = [];   //ids of notes with no quote found; \n    _.each(notes, function(note) {\n        var quote = find_quote[note.quote_hash];\n        if( !quote ) {\n            note_orphan_ids.push(note._id);\n        }else {\n            if( !quote.notes ){\n                quote.notes = [];\n            }\n            quote.notes.push(note);\n        }\n    });\n    // for now we don't do anything with the note orphans\n    \n    //attach sources to quotes\n    var quotes = _.values(find_quote);\n    _.each(quotes, function(quote){\n        quote.source = find_source[quote.source_id]; //may be undefined\n    });\n    \n    if( req.client ) {\n        window.quotes = quotes; //TODO debug only\n\n        $(document).one('nrama_page_loaded', function(){\n            $('._sort-me').sortlist();\n            $('textarea._nrama-note-content').autogrow();\n        });\n    }\n    \n    var content = templates.render('flow.html', req, _({\n            quotes : quotes\n        }).extend( make_universal_template_data(req) )\n    );\n\n\n    // -- configure nrama, attach event listners (copied verbatim from exports.quotes)\n    if( req.client ) {\n        \n        var nrama = nrama_init(find_source);\n        window.nrama = nrama;                   //TODO remove!\n        \n        $(document).one('nrama_page_loaded', function(){\n            $('._nrama-note').each(function(){\n                var $note = $(this);\n                var note_id = $note.attr('id');\n                $note.data('nrama_note', find_note[note_id]);\n            });\n            \n            //save after notes have been edited\n            $('textarea._nrama-note-content').one('blur', nrama.notes.update_on_blur);\n            \n            //configure add a note\n            $('.add-a-note').die().live('click', function(){\n                console.log('add a note ...');\n                var $quote = $(this).parents('._nrama-quote').first();\n                var quote = find_quote[$quote.attr('id')];\n                var note = nrama.notes.create(quote);\n                //add to page data\n                find_note[note._id] = note;\n                //display note\n                var note_html = '<li id=\"'+note._id+'\" class=\"_nrama-note\"><textarea class=\"_nrama-note-content\">'+note.content+'</textarea></li>';\n                var $note = $(note_html);\n                $('ul.notes',$quote).prepend($note);\n                $note = $('#'+note._id);        //overwrite after prepend\n                $note.data('nrama_note',note);\n                $('textarea', $note).focus().select().one('blur', nrama.notes.update_on_blur);\n                $note.hide().show(500, function(){ $('#'+note._id).autogrow().focus().select(); });\n                console.log('done');\n            });\n            \n            //TODO can only do this if user owns the quote!!!\n            \n            //configure delete a quote\n            var delete_on_meta_click = function(e){\n                if( !e.altKey && !e.metaKey ) {\n                    return;\n                }\n                var $quote = $(this).parents('._nrama-quote').first();\n                var quote = find_quote[ $quote.attr('id') ];\n                if( quote.user_id[0] != '*' ) {\n                    if( !req.userCtx || req.userCtx.name != quote.user_id ) {\n                        console.log('cannot delete another users quotes');\n                        return;\n                    }\n                }\n                var $notes =  $('._nrama-note', $quote);  \n                if( $notes.length != 0 ) {\n                    //don't delete quotes with notes attached ...\n                    $quote.css({'border-top':'1px dashed red',\n                                     'border-bottom':'1px dashed red'})\n                    //... instead make the relevant notes bounce\n                    $notes.effect('bounce', function(){\n                        $quote.css({'border-top':'none',\n                                         'border-bottom':'none'},500);\n                    });\n                    return;\n                }\n                //remove the quote\n                $quote.css('background-color','orange');\n                nrama.persist.rm(quote, function(error, data){\n                    if( error ) {\n                        nrama._debug({msg:'nrama: error removing quote',error:error});\n                    } else {\n                        $quote.css('background-color','red').\n                            animate({'background-color':'black'}, function(){\n                                $quote.remove();\n                            });\n                    }\n                });\n            }\n            $('.quote-content').die().live('click', delete_on_meta_click);\n        });\n    }\n    \n    \n\n    return {title: make_title('flow',req), content: content};\n\n}\n\n\n\n/**\n * lists quotes organised by source.\n * can handle one or more sources.\n * makes no assumptions about keys or values; can only be used with include_docs\n * \n * for use with\n *   -  /sources/:source\n *   -  /users/:user/sources/:source\n *   - /tags/:tag\n *   - /users/:user/tags/:tag\n */\nexports.quotes = function(head, req) {\n    start({code: 200, headers: {'Content-Type': 'text/html'}});\n\n    var find_source = {};   //indexed by page_id, the first source we find gets priority\n    var find_quote = {};    //indexed by quote_hash \n    var notes_for_quotes = {};\n    var find_note = {}; //indexed by _id\n   \n    var row;\n    while( row  = getRow() ) {\n        var thing = row.doc;        // <-- NB must be used with ?include_docs=true\n        \n        if( !thing || !thing.type ) {\n            continue;\n        }\n        \n        if( thing.type == 'source' ) {\n            var source = thing;\n            if( !find_source[source.page_id] ) {\n                find_source[source.page_id] = source;\n                source.updated_time = new Date(source.updated).toISOString();   //nb should not persist this property\n                source.users = [];          //nb should not persist this property\n            }\n            find_source[source.page_id].users.push(source.user_id);\n        }\n        if( thing.type == 'quote' ) {\n            var quote = thing;\n            if( !find_quote[quote.hash] ) {\n                find_quote[quote.hash] = quote;\n                quote.users = [];   //nb should not persist this property (quotes are not updated)\n            }\n            find_quote[quote.hash].users.push(quote.user_id);\n        }\n        if( thing.type == 'note' ) {\n            var note = thing;\n            find_note[note._id] = note;\n            if( !notes_for_quotes[note.quote_hash]  ) {\n                notes_for_quotes[note.quote_hash] = [];\n            }\n            notes_for_quotes[note.quote_hash].push(note);\n        }\n    }\n\n    // -- attach notes to quotes and quotes to sources\n    var quotes = _(find_quote).values();\n    var orphaned_quotes = [];        //for now we don't do anything with oprhans\n    _(quotes).each(function(quote) {\n        quote.notes = notes_for_quotes[quote.hash] || [];\n        var source = find_source[quote.page_id];\n        if( !source ) {\n            orphaned_quotes.push(quote);\n        } else{\n            if( !source.quotes ) {\n                source.quotes = [];\n            }\n            source.quotes.push(quote);\n        }\n    });\n    var sources = _(find_source).values();\n\n    // -- for each source, sort its quotes by page_order\n    var array_comparitor = function(a,b){\n        if( a.length == 0 ) {\n            return b.length == 0 ? 0 : -1 /*b first*/;\n        }\n        if( b.length == 0 ) {\n            return a.length == 0 ? 0 : 1 /* a first */;\n        }\n        var left = a[0];\n        var right = b[0];\n        if( left == right ) {\n            return array_comparitor(a.slice(1),b.slice(1)); //nb slice does not modify in place\n        }\n        return left - right /* +ve = a first */;\n    };\n    var page_order_comparitor = function(a,b) {\n        // -- arrays\n        if( a instanceof Array && b instanceof Array ) {\n            return array_comparitor(a,b);\n        } else {\n            if( a instanceof Array ) { return 1; } //arrays before everything else\n            if( b instanceof Array ) { return -1; }\n        }\n        // -- numbers\n        var a_num = parseFloat(a),\n            b_num = parseFloat(b),\n            _is_num = function(n){ return !isNaN(n) && isFinite(n); }  //thank you http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric\n            a_is_num = _is_num(a_num),\n            b_is_num = _is_num(b_num);\n        if( a_is_num && b_is_num ) {  \n            return a_num - b_num;\n        } else {\n            if( a_num ) { return 1; }\n            if( b_num ) { return -1; }\n        }\n        // -- whatever else\n        return a > b ? 1 : (a < b ? -1 : 0);\n    }\n    var quote_sorter = function(a,b){ return page_order_comparitor(a.page_order, b.page_order) };    // <-- NB b,a because we want ascending order\n    _(sources).each(function(source){\n        var source_quotes = source.quotes;\n        if( source_quotes ) {\n            source_quotes.sort(quote_sorter);\n        }\n    });\n    \n    \n    // -- configure nrama, attach event listners\n    if( req.client ) {\n        \n        var nrama = nrama_init(find_source);\n        window.nrama = nrama;                   //TODO remove!\n        \n        $(document).one('nrama_page_loaded', function(){\n            $('._nrama-note').each(function(){\n                var $note = $(this);\n                var note_id = $note.attr('id');\n                $note.data('nrama_note', find_note[note_id]);\n            });\n            \n            //save after notes have been edited\n            $('textarea._nrama-note-content').one('blur', nrama.notes.update_on_blur);\n            \n            //configure add a note\n            $('.add-a-note').die().live('click', function(){\n                console.log('add a note ...');\n                var $quote = $(this).parents('._nrama-quote').first();\n                var quote = find_quote[$quote.attr('id')];\n                var note = nrama.notes.create(quote);\n                //add to page data\n                find_note[note._id] = note;\n                //display note\n                var note_html = '<li id=\"'+note._id+'\" class=\"_nrama-note\"><textarea class=\"_nrama-note-content\">'+note.content+'</textarea></li>';\n                var $note = $(note_html);\n                $('ul.notes',$quote).prepend($note);\n                $note = $('#'+note._id);        //overwrite after prepend\n                $note.data('nrama_note',note);\n                $('textarea', $note).focus().select().one('blur', nrama.notes.update_on_blur);\n                $note.hide().show(500, function(){ $('#'+note._id).autogrow().focus().select(); });\n                console.log('done');\n            });\n            \n            //TODO can only do this if user owns the quote!!!\n            \n            //configure delete a quote\n            var delete_on_meta_click = function(e){\n                if( !e.altKey && !e.metaKey ) {\n                    return;\n                }\n                var $quote = $(this).parents('._nrama-quote').first();\n                var quote = find_quote[ $quote.attr('id') ];\n                if( quote.user_id[0] != '*' ) {\n                    if( !req.userCtx || req.userCtx.name != quote.user_id ) {\n                        console.log('cannot delete another users quotes');\n                        return;\n                    }\n                }\n                var $notes =  $('._nrama-note', $quote);  \n                if( $notes.length != 0 ) {\n                    //don't delete quotes with notes attached ...\n                    $quote.css({'border-top':'1px dashed red',\n                                     'border-bottom':'1px dashed red'})\n                    //... instead make the relevant notes bounce\n                    $notes.effect('bounce', function(){\n                        $quote.css({'border-top':'none',\n                                         'border-bottom':'none'},500);\n                    });\n                    return;\n                }\n                //remove the quote\n                $quote.css('background-color','orange');\n                nrama.persist.rm(quote, function(error, data){\n                    if( error ) {\n                        nrama._debug({msg:'nrama: error removing quote',error:error});\n                    } else {\n                        $quote.css('background-color','red').\n                            animate({'background-color':'black'}, function(){\n                                $quote.remove();\n                            });\n                    }\n                });\n            }\n            $('.quote-content').die().live('click', delete_on_meta_click);\n        });\n    }\n    \n    \n    \n    //TODO remove !\n    if( req.client ) {\n        window.sources = sources;\n        window.find_quote = find_quote;\n    }\n    var content = templates.render('quotes.html', req, _({\n            sources : sources,\n            no_sources : (sources.length == 0)  //because !![] == true\n        }).extend( make_universal_template_data(req) )\n    );\n\n    return {title: make_title('notes',req), content: content };\n}\n\n\n\n",
        "md5": "/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 0;   /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad  = \"\";  /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_md5(s)    { return rstr2hex(rstr_md5(str2rstr_utf8(s))); }\nfunction b64_md5(s)    { return rstr2b64(rstr_md5(str2rstr_utf8(s))); }\nfunction any_md5(s, e) { return rstr2any(rstr_md5(str2rstr_utf8(s)), e); }\nfunction hex_hmac_md5(k, d)\n  { return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction b64_hmac_md5(k, d)\n  { return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction any_hmac_md5(k, d, e)\n  { return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction md5_vm_test()\n{\n  return hex_md5(\"abc\").toLowerCase() == \"900150983cd24fb0d6963f7d28e17f72\";\n}\n\n/*\n * Calculate the MD5 of a raw string\n */\nfunction rstr_md5(s)\n{\n  return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-MD5, of a key and some data (raw strings)\n */\nfunction rstr_hmac_md5(key, data)\n{\n  var bkey = rstr2binl(key);\n  if(bkey.length > 16) bkey = binl_md5(bkey, key.length * 8);\n\n  var ipad = Array(16), opad = Array(16);\n  for(var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\n  return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input)\n{\n  try { hexcase } catch(e) { hexcase=0; }\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n  for(var i = 0; i < input.length; i++)\n  {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\n           +  hex_tab.charAt( x        & 0x0F);\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input)\n{\n  try { b64pad } catch(e) { b64pad=''; }\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n  for(var i = 0; i < len; i += 3)\n  {\n    var triplet = (input.charCodeAt(i) << 16)\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\n    for(var j = 0; j < 4; j++)\n    {\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\n    }\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding)\n{\n  var divisor = encoding.length;\n  var i, j, q, x, quotient;\n\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n  var dividend = Array(Math.ceil(input.length / 2));\n  for(i = 0; i < dividend.length; i++)\n  {\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\n  }\n\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. All remainders are stored for later\n   * use.\n   */\n  var full_length = Math.ceil(input.length * 8 /\n                                    (Math.log(encoding.length) / Math.log(2)));\n  var remainders = Array(full_length);\n  for(j = 0; j < full_length; j++)\n  {\n    quotient = Array();\n    x = 0;\n    for(i = 0; i < dividend.length; i++)\n    {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if(quotient.length > 0 || q > 0)\n        quotient[quotient.length] = q;\n    }\n    remainders[j] = x;\n    dividend = quotient;\n  }\n\n  /* Convert the remainders to the output string */\n  var output = \"\";\n  for(i = remainders.length - 1; i >= 0; i--)\n    output += encoding.charAt(remainders[i]);\n\n  return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input)\n{\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while(++i < input.length)\n  {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\n    {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n\n    /* Encode output as utf-8 */\n    if(x <= 0x7F)\n      output += String.fromCharCode(x);\n    else if(x <= 0x7FF)\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0xFFFF)\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0x1FFFFF)\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\n                                    0x80 | ((x >>> 12) & 0x3F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n  }\n  return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\n  return output;\n}\n\nfunction str2rstr_utf16be(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\n                                   input.charCodeAt(i)        & 0xFF);\n  return output;\n}\n\n/*\n * Convert a raw string to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binl(input)\n{\n  var output = Array(input.length >> 2);\n  for(var i = 0; i < output.length; i++)\n    output[i] = 0;\n  for(var i = 0; i < input.length * 8; i += 8)\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (i%32);\n  return output;\n}\n\n/*\n * Convert an array of little-endian words to a string\n */\nfunction binl2rstr(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length * 32; i += 8)\n    output += String.fromCharCode((input[i>>5] >>> (i % 32)) & 0xFF);\n  return output;\n}\n\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\nfunction binl_md5(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << ((len) % 32);\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n\n    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n  return Array(a, b, c, d);\n}\n\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\nfunction md5_cmn(q, a, b, x, s, t)\n{\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);\n}\nfunction md5_ff(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n}\nfunction md5_gg(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n}\nfunction md5_hh(a, b, c, d, x, s, t)\n{\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5_ii(a, b, c, d, x, s, t)\n{\n  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nexports.b64_hmac_md5 = b64_hmac_md5;",
        "nrama2_init": "/**\n * Call this (not nrama2) to load the functions.\n * NB can only be called client side!\n * \n */\nvar db = require('kanso/db'),\n    utils = require('kanso/utils'),\n    session = require('kanso/session'),\n    _ = require('./underscore')._,\n    BibtexParser = require('./bibtex').BibtexParser,      //nb this is more uptodate than that incl. with kanso 0.0.7\n    b64_hmac_md5 = require('./md5').b64_hmac_md5,\n    uuid_sync = require('./uuid');\n    nrama_constructors = require('./nrama2');\n\n/**\n * requires global $\n */\nvar _init = function(){\n    if( typeof window === 'undefined' || typeof document === 'undefine' ) {\n        throw new Error(\"nrama.init can only be run in the browser (window or document not defined)\");\n    }\n    if( typeof $ === 'undefined' ) {\n        throw new Error(\"nrama.init requires global $ (jQuery)\");\n    }\n\n    var lib = {\n        '$' : $,\n        '_' : _,\n        BibtexParser : BibtexParser,\n        b64_hmac_md5 : b64_hmac_md5\n    };\n    \n    // temporary patch (kanso's db lacks updates)\n    if( !db.doUpdate ) {\n        db.doUpdate = function( doc, update_name, callback ) {\n            var url = utils.getBaseURL() + '/update/' + update_name +'/' + db.encode( doc._id );\n            var req = {\n                type: 'PUT',\n                url: url,\n                data: JSON.stringify(doc),\n                processData: false,\n                contentType: 'application/json',\n                expect_json:false               //as of couchdb 1.1.0, updates seem to defy attempts to alter headers & return text/html header.\n            };\n            db.request(req, callback);\n        };\n    }\n    var nrama = {};\n    nrama.uuid = nrama_constructors._make_uuid(uuid_sync);\n    nrama.settings = _.extend( nrama_constructors._make_settings( nrama.uuid ), {\n        // -- internals\n        is_embedded : false,     //set to false when being used on the server\n        debug : true,\n        user_id : '*ERROR',\n        // -- quotes & note settings\n        note_style : {},\n        note_inner_style : {},\n        note_editor_style : {}\n    });\n    nrama._debug = nrama_constructors._make_debug(nrama.settings, window, lib);\n    nrama.log = nrama_constructors._make_logging(nrama.settings, $);\n    nrama.db = db;\n    nrama.session = session;\n    nrama.persist = nrama_constructors._make_persist(nrama.db, nrama.session, nrama.uuid, nrama._debug);\n    nrama.sources = nrama_constructors._make_sources(nrama.settings, nrama.persist, nrama._debug, lib);\n    \n    nrama.notes = nrama_constructors._make_notes(nrama.settings, nrama.uuid, nrama.persist,\n                                                 nrama.sources, null/*quotes*/, nrama._debug);\n    \n    /**\n     * return urls for various things (varies depending on current url)\n     */\n    nrama.kanso_urls = {}\n    nrama.kanso_urls.tag = function(tag, req) {\n        return req.userCtx.baseURL + (req.query.user ? '/users/'+encodeURIComponent(req.query.user) : '') + '/tags/'+ tag;\n    }\n    \n    \n    return nrama;\n};\n\n\nexports.init = _.once(_init);",
        "rewrites": "/**\n * Rewrite settings to be exported from the design doc\n *\n * NB : for nrama, the parameter names matter because req.query is used\n *      in templating.  Their names must match the urls used to access them,\n *      e.g. ':user' for something reprenseted in a url as /users/:user\n *\n */\n\nmodule.exports = [\n    {from: '/static/*', to: 'static/*'},\n    {from: '/xdm/*', to: 'xdm/*'},\n    // -- for the nrama application\n    {\n        from : '/sources',              //all sources\n        to : '_list/sources/source',\n        query : {\n            include_docs : 'true',  //for some reason it must be 'true', not true.\n            descending : 'true'\n        } \n    },\n    {\n        from: '/users',                   //list all users; intended as an entry point for search engines : TODO needs updating!\n        to: '_list/all_users/all_user_ids',\n        method : 'GET',\n        query : {\n          group : 'true'\n        } \n    },\n    {\n        from : '/users/:user',      //currently all sources for a particular user, probably modified in future\n        to : '_list/flow/quotes',\n        query : {\n            end_key: [\":user\"],\n            start_key : [\":user\", {}],\n            include_docs : 'true',\n            descending : 'true'\n        } \n    },\n    {\n        from : '/users/:user/sources',      //currently all sources for a particular user, probably modified in future\n        to : '_list/sources/userId_source',\n        query : {\n            end_key: [\":user\"],\n            start_key : [\":user\", {}],\n            include_docs : 'true',\n            descending : 'true'\n        } \n    },\n    {\n        from : '/authors',\n        to : '_list/authors/author_userId',\n        query : {\n            include_docs : 'true',\n            descending : 'false',\n            reduce : 'false',\n            author_index_in_key : '0'\n        }\n    },\n    {\n        from : '/authors/:author',   //all sources for an author \n        to : '_list/authors/author_userId',\n        query : {\n            start_key :  [\":author\"],\n            end_key : [\":author\", {}],\n            include_docs : 'true',\n            descending : 'false',\n            reduce : 'false',\n            author_index_in_key : '0'\n        }\n    },\n    {\n        from : '/users/:user/authors',              //list a user's authors\n        to : '_list/authors/userId_author',\n        query : {\n            start_key : [\":user\"],\n            end_key : [\":user\",{}],\n            reduce : 'false',\n            include_docs : 'true',   //docs are sources \n            author_index_in_key : '1'\n        }\n    },\n    {\n        from : '/users/:user/authors/:author',    //all sources for an author & user\n        to : '_list/authors/author_userId',\n        query : {\n            start_key :  [\":author\", \":user\"],\n            end_key : [\":author\", \":user\", {}],\n            include_docs : 'true',\n            descending : 'false',\n            reduce : 'false',\n            author_index_in_key : '0'\n        }\n    },\n    {\n        from : '/sources/:source',                  //everyone's notes on a source\n        to : '_list/quotes/pageId_userId',\n        query : {\n            startkey : [\":source\"],\n            endkey : [\":source\",{}],\n            include_docs : 'true'\n        }\n    },\n    {\n        from : '/users/:user/sources/:source',    //the user's notes on a source\n        to : '_list/quotes/pageId_userId',\n        query : {\n            key : [\":source\",\":user\"],\n            include_docs : 'true'\n        }\n    },\n    {\n        from : '/tags',                         //all tags, with frequency\n        to : '_list/tags/tags_all',\n        query : {\n            group : 'true',\n            tag_index_in_key : '0'\n        }\n    },\n    {\n        from : '/tags/:tag',                   //show everything marked with a particular tag\n        to : '_list/quotes/tags',\n        query : {\n            endkey : [\":tag\"],\n            startkey : [\":tag\", {}],\n            reduce : 'false',\n            descending : 'true',\n            include_docs : 'true'\n        }\n    },\n    {\n        from : '/tags/:tag/recent',            //same as previous but with flow\n        to : '_list/flow/tags',\n        query : {\n            endkey : [\":tag\"],\n            startkey : [\":tag\", {}],\n            reduce : 'false',\n            descending : 'true',\n            include_docs : 'true'\n        }\n    },\n    {\n        from : '/users/:user/tags',\n        to : '_list/tags/tags_user',\n        query : {\n            startkey : [\":user\"],\n            endkey : [\":user\", {}],\n            group_level : '2',\n            tag_index_in_key : '1'\n        }\n    },\n    {\n        from : '/users/:user/tags/:tag',                 //show everything of a users' marked with a particular tag\n        to : '_list/quotes/tags',\n        query : {\n          endkey : [\":tag\",\":user\"],\n          startkey : [\":tag\", \":user\", {}],\n          reduce : 'false',\n          descending : 'true',\n          include_docs : 'true'\n        }\n    },\n    {\n        from : '/users/:user/tags/:tag/recent',                 //show everything of a users' marked with a particular tag\n        to : '_list/flow/tags',\n        query : {\n          endkey : [\":tag\",\":user\"],\n          startkey : [\":tag\", \":user\", {}],\n          reduce : 'false',\n          descending : 'true',\n          include_docs : 'true'\n        }\n    },\n    \n    // -- for the bookmarklet/embeded client\n    {\n        from : '/update/source/:id',\n        to : '_update/source/:id'\n    },\n    \n    // -- generic\n    { from: '/', to: '_show/welcome' },\n    {from: '*', to: '_show/not_found'}\n];\n",
        "shows": "/**\n * Show functions to be exported from the design doc.\n */\n\nvar templates = require('kanso/templates'),\n    uuid_sync = require('./uuid');\n    nrama_constructors = require('./nrama2');\n\nvar nrama = {};\nnrama.uuid = nrama_constructors._make_uuid(uuid_sync);\n\nexports.welcome = function (doc, req) {\n    var data = {\n        anon_user_name : '*'+nrama.uuid(true).slice(0,10)\n    };\n\n    return {\n        title: 'Note-o-rama : note - quote - analyse',\n        content: templates.render('welcome.html', req, data)\n    };\n};\n\nexports.not_found = function (doc, req) {\n    return {\n        title: '404 - Not Found',\n        content: templates.render('404.html', req, {})\n    };\n};\n",
        "types": "/**\n * Kanso document types to export\n */\nvar Type = require('kanso/types').Type,\n    fields = require('kanso/fields'),\n    widgets = require('kanso/widgets');\n\n\n",
        "underscore": "//     Underscore.js 1.1.7\n//     (c) 2011 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore is freely distributable under the MIT license.\n//     Portions of Underscore are inspired or borrowed from Prototype,\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\n//     For all details and documentation:\n//     http://documentcloud.github.com/underscore\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice            = ArrayProto.slice,\n      unshift          = ArrayProto.unshift,\n      toString         = ObjProto.toString,\n      hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) { return new wrapper(obj); };\n\n  // Export the Underscore object for **CommonJS**, with backwards-compatibility\n  // for the old `require()` API. If we're not in CommonJS, add `_` to the\n  // global object.\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = _;\n    _._ = _;\n  } else {\n    // Exported as a string, for Closure Compiler \"advanced\" mode.\n    root['_'] = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.1.7';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    return results;\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = memo !== void 0;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(\"Reduce of empty array with no initial value\");\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return memo !== void 0 ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var reversed = (_.isArray(obj) ? obj.slice() : _.toArray(obj)).reverse();\n    return _.reduce(reversed, iterator, memo, context);\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    each(obj, function(value, index, list) {\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator = iterator || _.identity;\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result |= iterator.call(context, value, index, list)) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if a given value is included in the array or object using `===`.\n  // Aliased as `contains`.\n  _.include = _.contains = function(obj, target) {\n    var found = false;\n    if (obj == null) return found;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    any(obj, function(value) {\n      if (found = value === target) return true;\n    });\n    return found;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    return _.map(obj, function(value) {\n      return (method.call ? method || value : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Return the maximum element or (element-based computation).\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj)) return Math.max.apply(Math, obj);\n    var result = {computed : -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj)) return Math.min.apply(Math, obj);\n    var result = {computed : Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, iterator, context) {\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value : value,\n        criteria : iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria, b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  };\n\n  // Groups the object's values by a criterion produced by an iterator\n  _.groupBy = function(obj, iterator) {\n    var result = {};\n    each(obj, function(value, index) {\n      var key = iterator(value, index);\n      (result[key] || (result[key] = [])).push(value);\n    });\n    return result;\n  };\n\n  // Use a comparator function to figure out at what index an object should\n  // be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator) {\n    iterator || (iterator = _.identity);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >> 1;\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely convert anything iterable into a real, live array.\n  _.toArray = function(iterable) {\n    if (!iterable)                return [];\n    if (iterable.toArray)         return iterable.toArray();\n    if (_.isArray(iterable))      return slice.call(iterable);\n    if (_.isArguments(iterable))  return slice.call(iterable);\n    return _.values(iterable);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    return _.toArray(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head`. The **guard** check allows it to work\n  // with `_.map`.\n  _.first = _.head = function(array, n, guard) {\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail`.\n  // Especially useful on the arguments object. Passing an **index** will return\n  // the rest of the values in the array from that index onward. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = function(array, index, guard) {\n    return slice.call(array, (index == null) || guard ? 1 : index);\n  };\n\n  // Get the last element of an array.\n  _.last = function(array) {\n    return array[array.length - 1];\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, function(value){ return !!value; });\n  };\n\n  // Return a completely flattened version of an array.\n  _.flatten = function(array) {\n    return _.reduce(array, function(memo, value) {\n      if (_.isArray(value)) return memo.concat(_.flatten(value));\n      memo[memo.length] = value;\n      return memo;\n    }, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted) {\n    return _.reduce(array, function(memo, el, i) {\n      if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el))) memo[memo.length] = el;\n      return memo;\n    }, []);\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays. (Aliased as \"intersect\" for back-compat.)\n  _.intersection = _.intersect = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and another.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array, other) {\n    return _.filter(array, function(value){ return !_.include(other, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var args = slice.call(arguments);\n    var length = _.max(_.pluck(args, 'length'));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) results[i] = _.pluck(args, \"\" + i);\n    return results;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i, l;\n    if (isSorted) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n    for (i = 0, l = array.length; i < l; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item) {\n    if (array == null) return -1;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\n    var i = array.length;\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while(idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Binding with arguments is also known as `curry`.\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\n  // We check for `func.bind` first, to fail fast when `func` is undefined.\n  _.bind = function(func, obj) {\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    var args = slice.call(arguments, 2);\n    return function() {\n      return func.apply(obj, args.concat(slice.call(arguments)));\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length == 0) funcs = _.functions(obj);\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return hasOwnProperty.call(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(func, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Internal function used to implement `_.throttle` and `_.debounce`.\n  var limit = function(func, wait, debounce) {\n    var timeout;\n    return function() {\n      var context = this, args = arguments;\n      var throttler = function() {\n        timeout = null;\n        func.apply(context, args);\n      };\n      if (debounce) clearTimeout(timeout);\n      if (debounce || !timeout) timeout = setTimeout(throttler, wait);\n    };\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n  _.throttle = function(func, wait) {\n    return limit(func, wait, false);\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds.\n  _.debounce = function(func, wait) {\n    return limit(func, wait, true);\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      return memo = func.apply(this, arguments);\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func].concat(slice.call(arguments));\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = slice.call(arguments);\n    return function() {\n      var args = slice.call(arguments);\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) { return func.apply(this, arguments); }\n    };\n  };\n\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (hasOwnProperty.call(obj, key)) keys[keys.length] = key;\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    return _.map(obj, _.identity);\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        if (source[prop] !== void 0) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        if (obj[prop] == null) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    // Check object identity.\n    if (a === b) return true;\n    // Different types?\n    var atype = typeof(a), btype = typeof(b);\n    if (atype != btype) return false;\n    // Basic equality test (watch out for coercions).\n    if (a == b) return true;\n    // One is falsy and the other truthy.\n    if ((!a && b) || (a && !b)) return false;\n    // Unwrap any wrapped objects.\n    if (a._chain) a = a._wrapped;\n    if (b._chain) b = b._wrapped;\n    // One of them implements an isEqual()?\n    if (a.isEqual) return a.isEqual(b);\n    if (b.isEqual) return b.isEqual(a);\n    // Check dates' integer values.\n    if (_.isDate(a) && _.isDate(b)) return a.getTime() === b.getTime();\n    // Both are NaN?\n    if (_.isNaN(a) && _.isNaN(b)) return false;\n    // Compare regular expressions.\n    if (_.isRegExp(a) && _.isRegExp(b))\n      return a.source     === b.source &&\n             a.global     === b.global &&\n             a.ignoreCase === b.ignoreCase &&\n             a.multiline  === b.multiline;\n    // If a is not an object by this point, we can't handle it.\n    if (atype !== 'object') return false;\n    // Check for different array lengths before comparing contents.\n    if (a.length && (a.length !== b.length)) return false;\n    // Nothing else worked, deep compare the contents.\n    var aKeys = _.keys(a), bKeys = _.keys(b);\n    // Different object sizes?\n    if (aKeys.length != bKeys.length) return false;\n    // Recursive comparison of contents.\n    for (var key in a) if (!(key in b) || !_.isEqual(a[key], b[key])) return false;\n    return true;\n  };\n\n  // Is a given array or object empty?\n  _.isEmpty = function(obj) {\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (hasOwnProperty.call(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType == 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Is a given variable an arguments object?\n  _.isArguments = function(obj) {\n    return !!(obj && hasOwnProperty.call(obj, 'callee'));\n  };\n\n  // Is a given value a function?\n  _.isFunction = function(obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  };\n\n  // Is a given value a string?\n  _.isString = function(obj) {\n    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n  };\n\n  // Is a given value a number?\n  _.isNumber = function(obj) {\n    return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));\n  };\n\n  // Is the given value `NaN`? `NaN` happens to be the only value in JavaScript\n  // that does not equal itself.\n  _.isNaN = function(obj) {\n    return obj !== obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false;\n  };\n\n  // Is a given value a date?\n  _.isDate = function(obj) {\n    return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);\n  };\n\n  // Is the given value a regular expression?\n  _.isRegExp = function(obj) {\n    return !!(obj && obj.test && obj.exec && (obj.ignoreCase || obj.ignoreCase === false));\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iterator, context) {\n    for (var i = 0; i < n; i++) iterator.call(context, i);\n  };\n\n  // Add your own custom functions to the Underscore object, ensuring that\n  // they're correctly added to the OOP wrapper as well.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name){\n      addToWrapper(name, _[name] = obj[name]);\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(str, data) {\n    var c  = _.templateSettings;\n    var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' +\n      'with(obj||{}){__p.push(\\'' +\n      str.replace(/\\\\/g, '\\\\\\\\')\n         .replace(/'/g, \"\\\\'\")\n         .replace(c.interpolate, function(match, code) {\n           return \"',\" + code.replace(/\\\\'/g, \"'\") + \",'\";\n         })\n         .replace(c.evaluate || null, function(match, code) {\n           return \"');\" + code.replace(/\\\\'/g, \"'\")\n                              .replace(/[\\r\\n\\t]/g, ' ') + \"__p.push('\";\n         })\n         .replace(/\\r/g, '\\\\r')\n         .replace(/\\n/g, '\\\\n')\n         .replace(/\\t/g, '\\\\t')\n         + \"');}return __p.join('');\";\n    var func = new Function('obj', tmpl);\n    return data ? func(data) : func;\n  };\n\n  // The OOP Wrapper\n  // ---------------\n\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  var wrapper = function(obj) { this._wrapped = obj; };\n\n  // Expose `wrapper.prototype` as `_.prototype`\n  _.prototype = wrapper.prototype;\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj, chain) {\n    return chain ? _(obj).chain() : obj;\n  };\n\n  // A method to easily add functions to the OOP wrapper.\n  var addToWrapper = function(name, func) {\n    wrapper.prototype[name] = function() {\n      var args = slice.call(arguments);\n      unshift.call(args, this._wrapped);\n      return result(func.apply(_, args), this._chain);\n    };\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      method.apply(this._wrapped, arguments);\n      return result(this._wrapped, this._chain);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n  });\n\n  // Start chaining a wrapped Underscore object.\n  wrapper.prototype.chain = function() {\n    this._chain = true;\n    return this;\n  };\n\n  // Extracts the result from a wrapped and chained object.\n  wrapper.prototype.value = function() {\n    return this._wrapped;\n  };\n\n})();",
        "updates": "/**\n * Update functions to be exported from the design doc.\n */\n\nvar utils = require('./utils'),\n    _ = require('./underscore')._;  //nb NOT the version shipped with kanso 0.0.7 -- that lacks _.union\n\n\n\n/**\n * This will only accept json data (no submission)\n *  to remove kanso wrapping around it, modify the _design entry to: {\n   \"source\": \"function(doc, req){var fn = require(\\\"lib/app\\\")[\\\"updates\\\"][\\\"source\\\"];return fn(doc,req);}\"\n}\n */\nexports.source = function (doc, req) {\n\n    var make_error = function(msg) {\n        var form_str;\n        for( var i in req.form ) { form_str+=i+' : '+ req.form[i]+ '\\n'; };\n        return [null, {\n            code: 400,  //doesn't currently work, see https://issues.apache.org/jira/browse/COUCHDB-648\n            headers: {\"Content-Type\" : \"application/json\"}, //doesn't currently work\n            body: '{\"error\":\"'+msg+'\",\"req_form\":\"'+form_str+'\",\"req_body\":\"'+req.body+'\"}'\n        }];\n    };\n    \n    if( !doc ) {\n        //create new source\n        //var data = req.form;\n        var data = JSON.parse(req.body);\n        \n        if( !data._id ) {\n            return make_error('error: no doc_id supplied in submitted data');\n        }\n        if ( !data.type || !data.type == 'source' ) {\n            return make_error('error: type missing or not set to source.');\n        }\n        var new_source = _.extend({}, data, {\n            _id : data._id,\n            created : new Date().getTime(),\n            updated : new Date().getTime()\n        });\n        return [new_source, 'created'];\n    } else {\n        additions = JSON.parse(req.body);\n        //-- append tags \n        var new_tags = _.union(doc.tags||[], additions.tags||[]);\n        doc = _.extend(doc, additions, {tags:new_tags});\n        \n        doc.updated = new Date().getTime();\n        return [doc,  'updated'\n          /*{\n            code: 200,  //doesn't currently work, see https://issues.apache.org/jira/browse/COUCHDB-648\n            //headers: {\"Content-Type\" : \"application/json\"}, //doesn't seem to work either\n            headers: {\"Content-Type\" : 'text/html'},        //this is what you get \n            body: 'updated'\n          }*/\n        ];\n    }\n};\n\n\n",
        "utils": "/**\n * utilities for nrama\n *\n * Copyright (c) 2011 Stephen A. Butterfill, http://note-o-rama.com\n * \n */\n\n ",
        "uuid": "(function() {\n  /*\n  * Generate a RFC4122(v4) UUID\n  *\n  * Documentation at https://github.com/broofa/node-uuid\n  *\n  * MIT & GPL dual license\n  */\n\n  // Use node.js Buffer class if available, otherwise use the Array class\n  var BufferClass = typeof(Buffer) == 'function' ? Buffer : Array;\n\n  // Buffer used for generating string uuids\n  var _buf = new BufferClass(16);\n\n  // Cache number <-> hex string for octet values\n  var toString = [];\n  var toNumber = {};\n  for (var i = 0; i < 256; i++) {\n    toString[i] = (i + 0x100).toString(16).substr(1);\n    toNumber[toString[i]] = i;\n  }\n\n  function parse(s) {\n    var buf = new BufferClass(16);\n    var i = 0;\n    s.toLowerCase().replace(/[0-9a-f][0-9a-f]/g, function(octet) {\n      buf[i++] = toNumber[octet];\n    });\n    return buf;\n  }\n\n  function unparse(buf) {\n    var tos = toString, b = buf;\n    return tos[b[0]] + tos[b[1]] + tos[b[2]] + tos[b[3]] + '-' +\n           tos[b[4]] + tos[b[5]] + '-' +\n           tos[b[6]] + tos[b[7]] + '-' +\n           tos[b[8]] + tos[b[9]] + '-' +\n           tos[b[10]] + tos[b[11]] + tos[b[12]] +\n           tos[b[13]] + tos[b[14]] + tos[b[15]];\n  }\n\n  var b32 = 0x100000000, ff = 0xff;\n  function uuid(fmt, buf, offset) {\n    var b = fmt != 'binary' ? _buf : (buf ? buf : new BufferClass(16));\n    var i = buf && offset || 0;\n\n    var r = Math.random()*b32;\n    b[i++] = r & ff;\n    b[i++] = r>>>8 & ff;\n    b[i++] = r>>>16 & ff;\n    b[i++] = r>>>24 & ff;\n    r = Math.random()*b32;\n    b[i++] = r & ff;\n    b[i++] = r>>>8 & ff;\n    b[i++] = r>>>16 & 0x0f | 0x40; // See RFC4122 sect. 4.1.3\n    b[i++] = r>>>24 & ff;\n    r = Math.random()*b32;\n    b[i++] = r & 0x3f | 0x80; // See RFC4122 sect. 4.4\n    b[i++] = r>>>8 & ff;\n    b[i++] = r>>>16 & ff;\n    b[i++] = r>>>24 & ff;\n    r = Math.random()*b32;\n    b[i++] = r & ff;\n    b[i++] = r>>>8 & ff;\n    b[i++] = r>>>16 & ff;\n    b[i++] = r>>>24 & ff;\n\n    return fmt === undefined ? unparse(b) : b;\n  };\n\n  uuid.parse = parse;\n  uuid.unparse = unparse;\n  uuid.BufferClass = BufferClass;\n\n  if (typeof(module) != 'undefined') {\n    module.exports = uuid;\n  } else {\n    // In browser? Set as top-level function\n    this.uuid = uuid;\n  }\n})();",
        "validate": "/**\n * The validate_doc_update function to be exported from the design doc.\n */\n\nvar types = require('kanso/types'),\n    app_types = require('./types');\n\n\nmodule.exports = function (newDoc, oldDoc, userCtx) {\n    types.validate_doc_update(app_types, newDoc, oldDoc, userCtx);\n    \n    /**\n     * if user_id of a documentcontains @, must be logged in as that user to make changes\n     */\n    var verify_user = function verify_user(user_id) {\n        if( user_id && user_id[0] != '*' ) {\n            if (userCtx.name == null ) {\n                throw({forbidden: 'This user must be logged in to make changes (* policy). user_id:'+user_id});\n            }\n            if( userCtx.name != user_id ) {\n                throw({forbidden: 'This user cannot make changes to another user\\'s documents (* policy).user_id:'+user_id});\n            }\n        }\n    }\n    if( newDoc ) {\n        verify_user(newDoc.user_id);\n    }\n    if( oldDoc ) {\n        verify_user(oldDoc.user_id);\n    }\n    \n};\n",
        "views": "/**\n * View functions to be exported from the design doc.\n */\n\n// === for the bookmarklet (/other) client\n\n/**\n * to request all notes or all quotes on a particular source,\n *   either for a particular user or for all users\n * TODO : should probably skip doc.type and provide everything\n */\nexports.pageId_type_userId = {\n    map : function(doc) {\n        if( doc.page_id && doc.type ) {\n            if( doc.user_id ) {\n                emit([doc.page_id, doc.type, doc.user_id],doc);\n            } else {\n            //no user_id\n            emit([doc.page_id, doc.type, null],doc);\n            }\n        }\n    }\n};\n\n\n\n// === for the couchApp\n\n/**\n * all users\n * http://localhost:5984/nrama/_design/nrama/_view/all_user_ids\n*/ \nexports.all_user_ids = {\n    map : function(doc) {\n        if( doc.type == 'source' && doc.updated) {\n            emit(doc.user_id, doc.updated);\n        }\n    },\n    reduce : '_stats'\n};\n\n/**\n * to display all sources (for all users) ordered by most recently updated\n */\nexports.source = {\n    map : function(doc) {\n        if( doc.type && doc.type == \"source\" ) {\n            if( doc.updated && doc.page_id ) {\n                emit([doc.updated, doc.page_id], null);\n            }\n        }\n    }\n};\n\n/**\n * to display all sources for a particular user\n */\nexports.userId_source = {\n    map : function(doc) {\n        if( doc.type && doc.type == \"source\" ) {\n            if( doc.user_id && doc.page_id && doc.updated ) {\n                emit([doc.user_id, doc.updated], null);\n            }\n        }\n    }\n};\n\n/**\n * to display [all users' | a user's] notes on a single source.\n * e.g.\n *   http://localhost:5984/nrama/_design/nrama/_view/pageId_userId?key=[\"http://en.wikipedia.org/wiki/Komodo_dragons?h=i\",\"steve@gmail.com\"]\n */\nexports.pageId_userId= {\n  map : function(doc) {\n    if( doc.user_id && doc.page_id ) {\n      emit([doc.page_id, doc.user_id], null);\n    }\n  }\n};\n\n\n// -- author views\n//    these differ almost only in order of emissions but don't have elegant way to express this relation\n\n/**\n * to display a user's authors and, for each author, the sources\n */\nexports.userId_author = {\n  map : function(doc) {\n    if( doc.type && doc.type == 'source' ) {\n      if( doc.AUTHOR && doc.user_id ) {\n        var year = doc.YEAR || 0;    //order is [null, 1965, 1990, 2000],  (typically reversed)\n        for( idx in doc.AUTHOR ) {\n          emit( [ doc.user_id, doc.AUTHOR[idx], 5000-year ], 1 );\n        }\n      }\n    }\n  },\n  reduce : \"_count\"\n}\n/**\n * to display all sources by an author, or all of a user's sources by an author,\n * sorted by year.\n * & to display all authors with each author's sources \n * (We are treating authors like tags; authors tag sources, not notes)\n */\nexports.author_userId = {\n  map : function(doc) {\n    if( doc.type && doc.type == 'source' ) {\n      if( doc.AUTHOR && doc.user_id ) {\n        var year_order = 5000 - parseInt(doc.YEAR) || 5000;    //order is [null, 1965, 1990, 2000],  (typically reversed)\n        for( idx in doc.AUTHOR ) {\n          emit( [doc.AUTHOR[idx], doc.user_id, year_order], 1 );\n        }\n      }\n    }\n  },\n  reduce : \"_count\"\n};\n\n\n// -- tags\n\n/**\n * to display all tags\n */\nexports.tags_all= {\n  map : function(doc) {\n    if( doc.type && doc.type == 'note' ) {\n      if( doc.tags ) {\n        for( idx in doc.tags ) {\n          var tag = doc.tags[idx];\n          emit([tag], 1);\n        }\n      }\n    }\n  },\n  reduce : '_count'\n};\nexports.tags_user= {\n  map : function(doc) {\n    if( doc.type && doc.type == 'note' ) {\n      if( doc.tags && doc.user_id ) {\n        for( idx in doc.tags ) {\n          var tag = doc.tags[idx];\n          emit([doc.user_id, tag], 1);\n        }\n      }\n    }\n  },\n  reduce : '_count'\n};\n/**\n * to show [all users' | a user's] notes on a tag organised by source,\n *   where the sources are sorted by most recently updated\n *\n * used with include_docs, it will grab triples of a note, a source & a quote.\n * see http://blog.couchbase.com/what%E2%80%99s-new-apache-couchdb-011-%E2%80%94-part-two-views-joins-redux-raw-collation-speed\n */\nexports.tags = {\n  map : function(doc) {\n    if( doc.type && doc.type == 'note' ) {\n      var note = doc;\n      if( note.tags ) {\n        if( note.user_id && note.source_id && note.quote_id && note.updated) {\n          for( var idx in note.tags ) {\n            var tag = note.tags[idx];\n            emit([ tag, note.user_id, note.updated ], null);                  //include the note iteself\n            emit([ tag, note.user_id, note.updated ], {_id:note.source_id});  //include the source\n            emit([ tag, note.user_id, note.updated ], {_id:note.quote_id});   //include the quote\n          }\n        }\n      }\n    }\n  },\n  reduce : \"_count\"\n};\n\n/**\n * for the flow, show notes by recency.  Allows a quote-centred view rather than\n *  source-centred.\n *\n * Wasteful -- emits source for every note and again for every quote.\n * Because quotes are emitted in order of CREATION (not in order notes are updated,\n * this view ends up being out of order).\n * If limited, there might be notes with missing quotes (this could happen where\n * there is a delay between creating a quote and adding a note).\n * (Could fix both problems by having updates to notes causing quotes to be updated\n * too, just as sources are.)\n *\n * Like tags, it provides note-quote-source triples and must be used with\n *  include_docs\n */ \nexports.quotes = {\n  map : function(doc) {\n    if( doc.type && doc.user_id && doc.source_id && doc.updated ) {\n      if( doc.type == 'note' && doc.quote_id ) {\n        var note = doc;\n        emit([ note.user_id, note.updated ], null);                  //include the note iteself\n        emit([ note.user_id, note.updated ], {_id:note.source_id});  //include the source\n        //emit([ note.user_id, note.updated ], {_id:note.quote_id});   //include the quote\n      }\n      if( doc.type == 'quote' ) {\n        var quote = doc;\n        emit([ quote.user_id, quote.created ], null);\n        emit([ quote.user_id, quote.created ], {_id:quote.source_id})\n      }\n    }\n  }\n};",
        "nrama2": "/**\n * note-o-rama, second attempt\n * Copyright (c) 2011 Stephen A. Butterfill\n *\n * For dependencies see lib.js\n *\n * To run as bookmarklet (change url; delete the 'now' param if not in developent mode):\n *   javascript:(function(){delete module;delete exports;_nrama_bkmklt=true;_nrama_user='steve';document.body.appendChild(document.createElement('script')).src='http://localhost:5984/nrama/_design/nrama/bkmrklt/nrama2.js?now=new Date().getTime()'; })();\n *\n * To embed in page:\n *   <script src='lib.min.js\" ></script>\n *   <script>\n *     _nrama_bkmklt = false;\n *   </script>\n *   <script src=\"nrama2_base.js\" ></script>\n *\n * To use as a commonJS module (see near the end for a list of dependencies):\n *   nrama = require('./nrama');\n *   \n * NB: nrama will only work if users accept cookies from all websites (because XDM needed)\n *\n * TODO -- load settings from server for logged-in users\n */\n\n/*\n    This file is part of Note-o-rama.\n\n    Note-o-rama is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    Note-o-rama is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with Note-o-rama.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Wrapping for both <script> and commonJS require() use\n * Thanks to http://caolanmcmahon.com/posts/writing_for_node_and_the_browser\n * The function may be called with exports undefined to prevent execution (this\n * is to allow checking nrama not already loaded, see below).\n */\n(function(exports){\n    var _NRAMA_LIB_URL = \"http://localhost:5984/nrama/_design/nrama/bkmrklt/lib.min.js\"; //where to load lib from (for bookmarklet only)\n\n    /**\n     * fix uuids so that it doesn't include dashes (no good for couchDB)\n     * also include a trailing N to mark the source\n     */\n    exports._make_uuid = function(uuid) {\n        var new_uuid = function (use_b36/*optional*/){\n            if( use_b36 ) {\n                return parseInt(uuid().replace(/-/g,''), 16).toString(36);\n            } else {\n                return  uuid().replace(/-/g,'')+'N';\n            }\n        }\n        return new_uuid;\n    };\n\n    /**\n     * These are some settings for embedded mode (bkmrklt or <script>).\n     * Others are added during init (see page_id and root_node).\n     * When used on the server, some settings are overriden.\n     */\n    exports._make_settings = function(nrama_uuid){\n        var $ = jQuery;\n        var settings = {\n            // -- internals\n            is_embedded : true,     //set to false when being used on the server\n            debug : true,\n            db_name : 'nrama',\n            //xdm_url: 'http://noteorama.iriscouch.com/_design/nrama/_rewrite/xdm/provider.html',\n            xdm_url : 'http://localhost:5984/nrama/_design/nrama/_rewrite/xdm/provider.html',\n            //xdm_url : 'http://localhost:5984/nrama/_design/nrama/_rewrite/xdm/provider.debug.html',\n            // -- user identification\n            user_id : '*'+nrama_uuid(true).slice(0,10), //default to random anonymous user\n            password : 'new',   //TODO think of clever way to store this\n            me_only : true,    //show only my notes and quotes\n            // -- quotes & note settings\n            note_default_text : 'type now',\n            background_color : '#FCF6CF',   //for quotes\n            background_color_other : 'rgba(240,240,240,0.5)',   //color for other ppl's notes and quotes (TODO)\n            note_background_color : 'rgba(240,240,240,0.9)', \n            persist_started_color : '#FFBF00',  //#FFBF00=orange\n            note_width : 150, //pixels\n            max_quote_length : 5000,  //useful because prevents\n            // -- styling\n            style : {   //applies to note_editor & dialogs\n                fontFamily : \"Palatino, 'Palatino Linotype', Georgia, Times, 'Times New Roman', serif\",\n                fontSize : '12px',\n                color : 'rgb(0,0,0)'\n            },\n            note_style : {\n                'border' : '1px solid',\n                'background-color' : 'rgb(229,229,299)',    //default in case options.note_background_color fails\n                'border-color' : '#CDC0B0',\n                'box-shadow' : '0 0 8px rgba(0,0,0,0.2)',\n                '-moz-box-shadow' : '0 0 8px rgba(0,0,0,0.2)',\n                '-webkit-box-shadow' : '0 0 8px rgba(0,0,0,0.2)',\n                'padding' : '3px',\n                'cursor' : 'move',\n                'height' : 'auto',\n                'z-index' : '9998' //try to ensure always on top\n            },\n            note_inner_style : {},\n            note_editor_style : {\n                'wrap' : 'soft',\n                'padding-left' : '1px',\n                'padding-top' : '1px',\n                'padding-right' : '0px',\n                'padding-bottom' : '0px',\n                'border' : 'none',\n                'resize' : 'none',      //remove draggable resize handle in chrome\n                'line-height' : '1.3em',\n                'background-color' : 'inherit',\n                'text-shadow' : '1px 1px 20px rgba(250,250,250,1), -1px -1px 20px rgba(250,250,250,1), 0 0 1px rgba(250,250,250,1)',\n                '-moz-text-shadow' : '1px 1px 20px rgba(250,250,250,1), -1px -1px 20px rgba(250,250,250,1), 0 0 1px rgba(250,250,250,1)',\n                '-webkit-text-shadow' : '1px 1px 20px rgba(250,250,250,1), -1px -1px 20px rgba(250,250,250,1), 0 0 1px rgba(250,250,250,1)'\n            },\n            simplemodal : {\n                autoResize: true,\n                overlayClose: true,\n                zIndex : 32000,\n                overlayCss : { 'background-color' : '#000' },\n                containerCss : {\n                    height : 'auto',\n                    backgroundColor : '#fff',\n                    border: '8px solid #444',\n                    padding: '12px'\n                },\n                onShow : function(){\n                    _.delay( function() { $('.simplemodal-container').css({height:'auto'}); }, 50 )\n                }\n            }\n        };\n        settings.note_style.width = settings.note_width+\"px\";\n        settings.note_editor_style.width = settings.note_width+\"px\";\n        $.extend(settings.note_editor_style, settings.style);\n        $.extend(settings.simplemodal.containerCss, settings.style);\n        return settings;\n    };\n        \n\n    /**\n     * caution : if settings.debug, this will add to window (if defined)\n     */\n    exports._make_debug = function(settings, window) {\n        var $ = jQuery;\n        var _debug = function(){};    //does nothing if not debugging\n        if( settings.debug && typeof window !== 'undefined' ) {\n            //window.$=jQuery;                        //<-- nb breaks noConflict\n            _debug = function _debug(){\n                var map_or_array = arguments.length == 1 ? arguments[0] : arguments;\n                $.each(map_or_array, function(key,val){\n                        if( isFinite(key) ) {\n                            key = 'a'+key;      //allows us to handle arrays\n                        }\n                        if( typeof $.log === 'function' ) {\n                            $.log('nrama_debug setting '+key+'='+val);\n                            window[key]=val;\n                        }\n                });\n            };\n            //convenience callback for testing async\n            window.cb = function(){ $.log('window.cb called, sending arguments to _debug'); _debug(arguments); }; \n        }\n        return _debug;\n    };\n    \n    /**\n     * caution: extends $\n     */\n    exports._make_logging = function(settings, $) {\n        var logger = function(){ return false; };\n        if( settings.debug ) {\n            logger = function(){\n                // will not log anything unless in debug mode\n                try {\n                    var args = Array.prototype.slice.call(arguments);\n                    $.each(args, function(idx, arg){\n                        console.log(arg);\n                    });\n                    return true;\n                } catch(e) {\n                    return false;\n                }\n            }\n        }\n        $.extend({\"log\":logger});\n        return logger;\n    };\n\n    /**\n     * @returns the rpc transport for xdm \n     */\n    exports._make_rpc = function(settings, easyXDM, $) {\n        var rpc = {};\n        rpc.$ = $;\n        \n        //local functions allow communication from the server to user\n        var local = {};\n        local.get_version = {\n            method : function(success, error){ success(\"0.2\"); }\n        };\n        local.msg = {\n            method : function(message, success, error){\n                if( typeof message === 'string' ) {\n                    alert(message);\n                    success('done');\n                }\n            }\n        };\n        /**\n         * display a dialog using jQuery.simplemodal, minimsing xss vulnerabilities\n         */\n        local.modal = {\n            method : function(div_str, success, error){\n                if( typeof div_str === 'string') {\n                    var $div = rpc.$('<div>'+div_str+'</div>');\n                    rpc.$('#id_ok', $div).click(function () {\n                        rpc.$.modal.close();\n                        success('ok');          //nb this only triggers cb on remote end (no function is passed)\n                    });\n                    $div.beResetCSS().modal(settings.simplemodal);\n                }\n            }\n        };\n        var rpc_names = ['db_saveDoc', 'db_removeDoc', 'db_getView', 'db_doUpdate',\n                         'session_login', 'session_logout', 'session_info'];\n        var remote = { };\n        rpc.$.each(rpc_names, function(idx,name){\n            remote[name] = {};      //create a stub      \n        });\n        if( settings.debug ) {\n            remote.test = {};\n        }\n        \n        var _rpc = new easyXDM.Rpc({ remote:settings.xdm_url },{ remote:remote, local:local });\n        //ideally _rpc would be all we need, but some tweaking is needed ...\n        \n        /**\n         * get rpc to work with kanso.db and kanso.session : callback arguments passed as an array.\n         * (See the corresponding wrappers in xdm/provider.js|html to get full picture.)\n         * wrap_unarray is for undoing the effects of executing callbacks with all parameters\n         * collapsed into an array (easyXDM only allows for callbacks with a single parameter).\n         */\n        var _callback_wrapper = function(fn){\n            return function(){\n                var new_args = arguments[0];\n                fn.apply(null, new_args);\n            }\n        };\n        var _wrap_unarray = function( method ) {\n            return function( ) {\n                var new_arguments = _.map(arguments, function(arg){\n                    if( typeof(arg) == 'function' ) {\n                        return _callback_wrapper(arg);    //wrap because we're putting parameters into array for xdm\n                    }\n                    return arg;\n                });\n                method.apply(null, new_arguments);  \n            }\n        }\n\n        // finally, add the rpc functions\n        rpc.$.each(rpc_names, function(idx,name){\n            rpc[name] = _wrap_unarray( _rpc[name] );      \n        });\n        \n        return rpc;\n    };\n    \n    \n    /**\n     * @return a subset of kanso's db module, same API\n     * Any 403 Forbidden errors will trigger a custom event, 'nrama_403'\n     */\n    exports._make_db = function(rpc, $) {\n        var db = {};\n        db.$ = $;\n        \n        /**\n         * we want to capture 403 (forbidden) errors so that the user can login\n         * caution : assumes last argument is the unique callback (as node js)\n         */\n        var _wrap_403_callback = function( callback ) {\n            return function(error, data) {\n                if( error && ( error.status === 403 || error.error === 'forbidden' ) ) {\n                    var user_id = '';\n                    try {\n                        user_id = error.message.slice(error.message.indexOf('user_id:')+8);\n                    } catch(e) {}\n                    db.$(document).trigger('nrama_403', user_id);\n                }\n                callback(error, data);\n            }\n        };\n        var _wrap_403 = function( fn ) {\n            return function() {\n                var args = Array.prototype.slice.call(arguments);\n                args[args.length-1] = _wrap_403_callback( args[args.length-1] );\n                return fn.apply(null, args);\n            }\n        }\n        db.saveDoc = _wrap_403( rpc.db_saveDoc );\n        db.removeDoc = _wrap_403( rpc.db_removeDoc );\n        db.getView = _wrap_403( rpc.db_getView );\n        db.doUpdate = _wrap_403( rpc.db_doUpdate )\n        \n        return db;\n    };\n\n    /**\n     * @return a subset of kanso's session module, same API\n     */\n    exports._make_session = function(rpc) {\n        return {\n            login : rpc.session_login,\n            logout : rpc.session_logout,\n            info : rpc.session_info \n        };\n    };\n\n\n    /**\n     * @param db{Object} implements (a subset of) kanso's db module\n     * @param session{Object} implements (a subset of) kanso's session module\n     * @param uuid{function} returns a uuid synchroniously\n     */\n    exports._make_persist = function(db, session, uuid, _debug) {\n        persist = {};\n        persist.$ = jQuery;\n\n        //log errors (used to wrap callbacks from db & session)\n        var _debug_wrap = function(name, callback) {\n            return function(error, data){\n                if( error ) {\n                    _debug({msg:'nrama_'+name+': error',error:error});\n                }\n                callback(error, data);\n            }\n        };\n    \n        /**\n         * save a note or a quote (or that JSON.stringify will work on, really).\n         * NB: If successful, will update a _rev property on thing and insert _id\n         * NB: if options.clone_on_conflict, @param thing will have its properties updated  incl. new _id\n         */\n        persist.save = function(thing, options/*optional*/, callback/*required*/ ) {\n            if( !callback ) {\n                callback = options;\n                options = {}\n            }\n            var defaults = {\n                clone_on_conflict : false   //e.g. set to true used when saving notes\n            };\n            var settings = persist.$.extend(true, {}, defaults, options);\n\n            db.saveDoc(thing, function(error, data){\n                if( error ) {\n                    if( settings.clone_on_conflict ) {\n                        if( error.status == 409 || error.error == \"conflict\")  {\n                            persist.$.log('nrama_persist.save: conflict on save for '+(thing.type || '')+' '+thing._id+' --- started cloning');\n                            persist.clone(thing, callback);\n                            return;\n                        }\n                    }\n                    _debug({msg:'nrama_persist.save: error',error:error});\n                } else {\n                    thing._rev = data.rev;\n                    thing._id = data.id;\n                }\n                callback(error, data);\n            });\n        };\n            \n        /**\n         * create and persist a clone of a note or quote, updating the\n         * passed thing in place.\n         */\n        persist.clone = function(thing, callback) {\n            var new_id = uuid();\n            var updates = {\n                _id : new_id,\n                replaces_id : thing._id };\n            var cloned_thing = persist.$.extend(true, {}, thing, updates); \n            delete cloned_thing._rev;  //revision is no longer valid\n            persist.save(cloned_thing, function(error, data){\n                if( !error ) {\n                    thing = cloned_thing;   //messy\n                }\n                callback(error,data);   \n            });\n        };\n\n        /**\n         * assumes that thing.type (e.g. 'source') is the name of the couchdb update function\n         * thing must have .type and ._id attributes\n         */\n        persist.update = function(thing, callback) {\n            db.doUpdate( thing, encodeURIComponent( thing.type ), _debug_wrap('persist.update', callback) );\n        };\n\n        /**\n         * deletes a quote or note from the server providing it has a '_rev' property.\n         * if no _rev property, nothing happens but this is callback'ed as success.\n         *  (we exploit this -- absence of _rev means it's not been persisted)\n         */\n        persist.rm = function(thing, callback) {\n            if( !thing._rev ) {\n                callback(null, { deleted:false, message:'nrama_persist.rm did not delete because '+(thing.type ||'')+' '+(thing._id || '')+' has no _rev'});\n            }\n            db.removeDoc(thing, _debug_wrap('persist.rm',callback));\n        };\n            \n        /**\n         * loads data for a page (e.g. all quotes)\n         * @param options.page_id is the page to load stuff for (required)\n         * @param options.type{String} specifies which type of objects to load (required)\n         * @param options.user_id{String} [optional] omit if loading for all users\n         */\n        persist.load = function(options, callback) {\n            var defaults = {\n                page_id : undefined, type : null, user_id : null,\n                success : null, error : null\n            };\n            var load_settings = persist.$.extend({}, defaults, options);\n            \n            var query;\n            if( !load_settings.type ) {\n                query = {startkey:'[\"'+load_settings.page_id+'\"]', endkey:'[\"'+load_settings.page_id+'\",{}]'};\n            } else { //type is specified\n                if( !load_settings.user_id ) {\n                    query = {\n                        startkey:'[\"'+load_settings.page_id+'\",\"'+load_settings.type+'\"]',\n                        endkey:'[\"'+load_settings.page_id+'\",\"'+load_settings.type+'\",{}]'\n                    };\n                } else {    //type and user_id are specified\n                    query = {key:'[\"'+load_settings.page_id+'\",\"'+load_settings.type+'\",\"'+load_settings.user_id+'\"]' };\n                }\n            }\n            db.getView('pageId_type_userId', query, _debug_wrap('persist.load',callback));\n        };\n    \n        return persist;\n    };\n\n\n    /**\n     * Ways of serializing and restoring rangy range objects.\n     * These would ideally work across browsers; rangy_1_2 claims not to.  \n     * (Having multiple ways allow us to upgrade the method of serialization\n     * while still being able to correctly deserialize quotes created with older\n     * methods.)\n     * @param lib{map} provides rangy\n     */\n    exports._make_serializers = function(settings, lib){\n        var serializers = {\n            rangy_1_2 : {\n                id : 'rangy_1_2',   // id must match the name\n                serialize : function(range) {\n                    // second param means do not compute checksum (because adding highlights to page screws it up)\n                    return lib.rangy.serializeRange(range, true, settings.root_node);\n                },\n                deserialize : function(text) {\n                    return lib.rangy.deserializeRange(text, settings.root_node);\n                }\n            }\n        }\n        serializers.current = serializers.rangy_1_2;   // the serializer to be used in creating new quotes\n        return serializers;\n    };\n\n\n\n    /**\n     * for each page_id with notes, each user must create a source.  \n     *  @param lib{map} provides dependencies : \n     *    - b64_hmac_md5    from md5.js \n     *    - BibtexParser    from bibtex.js\n     *    - $               from jQuery\n     */\n    exports._make_sources = function(settings, persist, _debug, lib/*optional*/) {\n        var sources = {};\n        lib.$.extend(sources, lib); //add lib.b64_hmac_md5 etc to sources\n        \n        /**\n         * @returns the id of a source record for the user and page\n         * @param o{map} should contain user_id and page_id\n         */\n        sources.calculate_id = function(o) {\n            return 'source_'+sources.b64_hmac_md5(o.user_id, o.page_id);\n        };\n        \n        /**\n         * @param attrs must contain page_id & user_id ; can be note or quote\n         */\n        sources.create = function(attrs) {\n            var defaults = {\n                tags : []     //the persist.update will append, not remove tags\n            };\n            if( settings.is_embedded ) {\n                defaults.page_title = document.title;\n                defaults.url = document.location.href;\n            }\n            var source = sources.$.extend(true, defaults, attrs);\n            source._id = sources.calculate_id(source);  //nb must overwrite _id in case called with note or quote object!\n            source.type = 'source';\n            return source;\n        }\n        \n        /**\n         * Create or update a source.\n         * @param source must contain (TITLE or page_title), url, page_id\n         *      & user_id if update is being called to create a new source\n         * Can be called with either a source or a note or a quote\n         * Caution: if called with source, source will be modified in place.\n         */\n        sources.update = function(thing, callback) {\n            var source = ( thing.type == 'source' ? thing : sources.create(thing) );\n            persist.update(source, callback);\n        }\n\n        /**\n         * call update once per source only (but if it fails, will repeat next\n         * time it is called)\n         * can be called with either a source or a note or a quote \n         */\n        var _update_memo = [];\n        sources.update_once = function(thing, callback) {\n            var source_id = ( thing.type == 'source' ? thing._id : thing.source_id );\n            var already_done = ( sources._.indexOf(_update_memo, source_id) != -1 );\n            if( already_done  ) {\n                callback(null, 'already done');\n                return;\n            }\n            sources.update(thing, function(error, data){\n                if(!error){\n                    _update_memo.push(source_id);\n                }\n                callback(error, data);\n            });\n        };\n        \n        /**\n         * This should return an array of strings which canonically represent authors\n         * @param authors{string} is the authors.\n         * TODO: make this work (see js-bibtex?)\n         */\n        var _parse_authors = function( authors/*String*/ ) {\n            _debug({authors:authors});\n            return authors.split(' and ');\n        };\n        /**\n         * quickly attempt to guess whether something is bibtex\n         */\n        // like this: @text { = , }\n        var _bib_rex = /(^|[^0-9A-Z&\\/\\?]+)(@)([0-9A-Z_]*[A-Z_]+[a-z0-9_]*)([\\s\\S]*?{)([\\s\\S]*?=)([\\s\\S]*?,)([\\s\\S]*?})/gi\n        sources.detect_bibtex = function( text ) {\n            return !!( text.match(_bib_rex) );\n        }\n        /**\n         * given a string, attempts to parse it as bibtex and update the source\n         * with the results.\n         * @param thing can be a source, quote or note\n         * E.g.\n         *   b='@incollection{Baillargeon:1995lu,\tAddress = {Oxford},\tAuthor = {Baillargeon, Ren{\\'e}e and Kotovsky, Laura and Needham, Amy},\tBooktitle = {Causal cognition. A multidisciplinary debate},\tDate-Added = {2010-08-04 17:40:21 +0100},\tDate-Modified = {2010-08-04 17:40:38 +0100},\tEditor = {Sperber, Dan and Premack, David},\tPages = {79-115},\tPublisher = {Clarendon},\tTitle = {The Acquisition of Physical Knowledge In Infancy},\tYear = {1995}}'\n         */\n        sources.update_from_bibtex = function(bib_str, thing, callback) {\n            var parser = new sources.BibtexParser();\n            var results;\n            try {\n                parser.setInput(bib_str);\n                parser.bibtex();\n                results = parser.getEntries();\n            } catch(e) {\n                _debug(\"caught error parsing bibtex\",e)\n                callback('error parsing bibtex '+e);\n                return;\n            }\n            if( sources._.size(results) != 1 ) {\n                callback('nrama_sources.parse_bibtex: input contained '+sources._.size(results)+' entries ('+bib_str+')');\n                return;\n            }\n            var entry = sources._.toArray(results)[0];\n            if( entry.AUTHOR ) {\n                entry.AUTHOR_TEXT = entry.AUTHOR;\n                entry.AUTHOR = _parse_authors(entry.AUTHOR_TEXT);\n            }\n            entry.bibtex = bib_str;\n            var source = sources.create(thing);\n            source = sources.$.extend(true, {}, source, entry);\n            sources.update(source, callback);\n        };\n        return sources;\n    };\n    \n    \n    /**\n     * This is only intended to work embedded in a page, not on the server.\n     * lib must include\n            b64_hmac_md5 \n            rangy \n            $ ( jQuery )\n            _ : window._\n     */\n    exports._make_quotes = function(settings, uuid, persist,\n                                    sources, serializers, _debug,\n                                    lib) {\n        var quotes = {};\n        lib.$.extend(quotes, lib);  //add items in lib to quotes\n\n        /**\n         * @returns a hash for determining whether two quotes are the same\n         *     across different users.\n         */\n        quotes.calculate_hash = function(quote) {\n            var hash = quotes.b64_hmac_md5(quote.page_id, quote.content);\n            return hash;\n        };\n            \n        /**\n         * @param range is a Rangy range object\n         */\n        quotes.create = function(range) {\n            var new_quote = {\n                _id : 'q_'+uuid(),  \n                type : 'quote',\n                content : quotes.$.trim( range.toString() ),\n                background_color : settings.background_color,\n                url : document.location.href,\n                page_id : settings.page_id,  \n                page_title : document.title,\n                //the xpointer to the quote (well, it isn't actually an xpointer but  any serialized representation of the raneg)\n                xptr : serializers.current.serialize(range),\n                //the name of the method used to seralise\n                xptr_method : serializers.current.id,\n                page_order : quotes.calculate_page_order(range),\n                created : new Date().getTime(),\n                updated : new Date().getTime(),\n                user_id : settings.user_id\n            };\n            new_quote.hash = quotes.calculate_hash(new_quote);\n            new_quote.source_id = sources.calculate_id({\n                user_id : new_quote.user_id,\n                page_id : new_quote.page_id\n            });\n            return new_quote;\n        };\n        \n        quotes.save = function(quote, options/*optional*/, callback) {\n            if( !callback ) {\n                callback = options;\n                options = {};\n            }\n            //update the source before saving any quotes\n            sources.update_once(quote, function(error, data) {\n                if( error ) {\n                    quotes.$.log('error in nrama_quotes.save is due to call to sources.update_once.')\n                    callback(error, data);\n                    return;\n                }\n                persist.save(quote, options, callback);\n            });\n        },\n        \n        /**\n         * attempt to highlight quote into the HTML document.  May fail if range\n         * cannot be decoded; fails silently.  Nodes added to the DOM will have the\n         * quote object stored with jQuery.data (key:'nrama_quote')\n         *\n         * Checks that quote not already on page; will not re-display if it is.\n         *\n         * depends Rangy + its highlight module\n         *\n         * @returns true if successful (or quote already displayed), false otherwise\n         */\n        quotes.display = function(quote) {\n            if( quotes.$('.'+quote._id).length != 0 ) {\n                return true;  //quote already displayed\n            }\n            var range = quotes.get_range(quote);\n            if( range == null ) {\n                return false;\n            }\n            var _rangy_highlighter = quotes.rangy.createCssClassApplier(\"_nrama-quote \"+quote._id,false);\n            try{\n                _rangy_highlighter.applyToRange(range);\n            } catch(error) { //seems to be rare\n                if( settings.debug ) {\n                    quotes.$.log(\"nrama: error using Randy's createCssClassApplier.applyToRange, re-throwing\");\n                    throw error;\n                } else {\n                    return false;   //silently fail if not in debug mode\n                }\n            }\n            quotes.$('.'+quote._id).css('background-color',quote.background_color).data('nrama_quote',quote);\n            return true;\n        };\n        \n        /**\n         * remove a quote's highlights from the HTML document.\n         * leaves jQuery.data('nrama_quote') and _id as class intact, so quote can\n         *   still be found (todo: not sure this is a good idea!).\n         * todo -- this would ideally remove the elements so that subsequent quotes\n         *  had more reliable xpointers (as long as we don't have a way of getting\n         *  good xpointers).\n         */\n        quotes.undisplay = function(quote) {\n            quotes.$('.'+quote._id).\n                removeClass('_nrama-quote').\n                css({'border-top':'none', 'border-bottom':'none', 'box-shadow':'none'}).\n                //removeClass(quote._id). //not sure whether I want to do this yet\n                css('background-color','red').\n                animate({'background-color':'black'}, function(){\n                    quotes.$(this).css('background-color','inherit');\n                });\n        };\n        \n        quotes.flash = function(quote_id) {\n            var $quote_nodes = quotes.$('.'+quote_id);\n            $quote_nodes.css({'border-top':'1px dashed black',\n                             'border-bottom':'1px dashed black',\n                             'box-shadow':'0 0 20px' + settings.background_color });\n            window.setTimeout(function(){\n                $quote_nodes.css({'border-top':'none', 'border-bottom':'none', 'box-shadow':'none'});            \n            },600);\n        };\n        \n        /**\n         * request quote delete from server and remove from page if successful\n         */\n        quotes.remove = function(quote) {\n            quotes.$('.'+quote._id).css('background-color','orange');\n            persist.rm(quote, function(error, data){\n                if( !error ) {\n                    quotes.undisplay(quote);\n                }\n            });\n        };\n        \n        /**\n         * load quotes from server and display on this page\n         */\n        quotes.load = function(page_id, callback) {\n            var user_id = settings.me_only ? settings.user_id : undefined;\n            persist.load({\n                page_id : page_id,\n                type : 'quote',\n                user_id : user_id\n            }, function(error, data){\n                if( !error && data ) {\n                    quotes.$.log('nrama_quotes.load got ' + ( data.rows ? data.rows.length : 0 ) + ' quotes from server for user '+user_id);\n                    //need to sort quotes by the time they were added to page for best chance of displaying them\n                    var _sorter = function(a,b){ return a.value.created - b.value.created };\n                    data.rows.sort(_sorter);\n                    var _failing_quotes = []\n                    quotes.$.each(data.rows, function(index, row){\n                        var quote = row.value;\n                        var success = quotes.display(quote);  //this won't re-display quotes already present\n                        if( !success ) {\n                            _failing_quotes.push(quote._id);\n                        }\n                    });\n                    if( _failing_quotes.length > 0 ) {\n                        quotes.$.log('failed to display '+_failing_quotes.length+' quotes, _ids: '+_failing_quotes.join('\\n\\t'));\n                    }\n                }\n                callback(error, data);\n           });\n        };\n        \n        /**\n         * @returns the range for the specified quote or null if not possible.\n         * caution: this may fail once the quote has been highlighted!\n         */\n        quotes.get_range = function(quote) {\n            var method = quote.xptr_method || '_method_unspecified'; //method for recovering the range from the quote\n            if( ! (method in serializers) ) {\n                quotes.$.log('unknown xptr_method ('+method+') for quote '+quote._id);\n                return null;\n            }\n            try {\n                var serializer = serializers[method];\n                return serializer.deserialize(quote.xptr);\n            } catch(error) {\n                //quotes.$.log('nrama_quotes.display FAIL with range = '+quote.xptr+'\\n\\t for quote '+quote._id);\n                //_debug({catch_error:error});  //not usually informative\n                return null;\n            }\n        };\n        \n        /**\n         * @returns a quote object (or null if not found)\n         */\n        quotes.get_from_page = function(quote_id) {\n            return quotes.$('.'+quote_id).first().data('nrama_quote') || null;\n        };\n        \n        /**\n         * @param range{Rangy}\n         * @returns an array representing the order this quote probably appears\n         * on the page.  Assumes that earlier in DOM means earlier on screen.\n         * (the alternative would be to use height, but that fails for columns\n         * & varying height)\n         */\n        quotes.calculate_page_order = function calculate_page_order(range) {\n            var doc_height = quotes.$(settings.root_node).height();\n            var doc_width = quotes.$(settings.root_node).width();\n            //todo\n            var node = range.startContainer;\n            var page_order = [range.startOffset];   //create in reverse order, will reverse it\n            while ( node && node != document.body ) {\n                page_order.push(quotes.rangy.dom.getNodeIndex(node, true));\n                node = node.parentNode;\n            }\n            page_order.reverse();\n            return page_order;\n        };\n        \n        /**\n         * calculate the offset (.top, .left) of a quote\n         */\n        quotes.offset = function(quote_id) {\n            return quotes.$('.'+quote_id).first().offset();\n        };\n        \n        return quotes;\n    };\n    \n    \n    /**\n     *  @param quotes can be set to null; if provided it is used to position noes\n     */\n    exports._make_notes = function(settings, uuid, persist,\n                               sources, quotes, _debug) {\n        var notes = {};\n        var $ = jQuery;\n        /**\n         * Create a new note for a specified quote.\n         */\n        notes.create = function(quote){\n            var new_note = {\n                _id : 'n_'+uuid(),  \n                type : 'note',\n                content : settings.note_default_text,\n                quote_id : quote._id,\n                quote_hash : quote.hash,    //can attach to the same quote from other users\n                tags : [],                  //will cache the #s to save us parsing text in creating a view\n                background_color : settings.note_background_color,\n                width : settings.note_width,\n                page_id : quote.page_id,  \n                created : new Date().getTime(),\n                updated : new Date().getTime(),\n                user_id : quote.user_id\n            };\n            new_note.source_id = sources.calculate_id({\n                user_id : new_note.user_id,\n                page_id : new_note.page_id\n            });\n            return new_note;\n        };\n            \n        /**\n         * extract tags from note\n         * losely based on lines 106-7 of https://raw.github.com/bcherry/twitter-text-js/master/twitter-text.js\n         */\n        var _hashtag_regex = /(^|[^0-9A-Z&\\/\\?]+)(#|＃)([0-9A-Z_]*[A-Z_]+[a-z0-9_]*)/gi;\n        notes.get_tags = function(note) {\n            var tags = [];\n            note.content.replace(_hashtag_regex, function(match, before, hash, hashText) {\n                tags.push(hashText);  \n            });\n            return tags;\n        };\n            \n        notes.save = function(note, options/*optional*/, callback) {\n            if( !callback ) {\n                callback = options;\n                options = {};\n            }\n            //extract and store the tags\n            note.tags = notes.get_tags(note);\n            //update the source before saving any quotes\n            sources.update_once(note, function(error, data) {\n                if( error ) {\n                    $.log('error in nrama_notes.save, due to call to nrama_sources.update_once.')\n                    callback(error, data);\n                } else {\n                    persist.save(note, options, callback);\n                }\n            });\n        };\n            \n        var _zindex_counter = 10000; //used for bringing notes to the front and to ensure new notes are on top\n        notes.bring_to_front = function($note) {\n            $note.css('z-index', _zindex_counter++);  //move note to frong\n        }\n\n        /**\n         * dispaly a note on the page -- i.e. create and style the HTML and add it\n         * to the approriate part of the document (the #_nrama_notes).\n         * If note does not have position info (either because it is newly created,\n         * or because it was created on the server), attempt to position it near the quote.\n         */\n        notes.display = function(note, options) {\n            var options_defaults = {\n                focus : true        //set focus to the note's textarea after creating it?\n            };\n            var display_settings = $.extend(true, {}, options_defaults, options );\n            \n            // --- apply some positioning defaults to notes\n            var note_defaults = {};\n            var viewport_width = $(window).width();\n            //shift quotes horizontally by 1/30 of viewport_width\n            var random_shift = function(){return Math.floor(Math.random()*(viewport_width/30))};\n            var note_right_gap = Math.min(15, viewport_width/65);\n            note_defaults.left = viewport_width - note_right_gap - (note.width || settings.note_width) - random_shift();\n            //to get default for top we need position of associated quote --- only compute this if we really need it\n            if( !note.top ) {\n                var quote_offset = null;\n                if( note.quote_id && quotes ) {\n                    quote_offset = quotes.offset(note.quote_id);    //may return null if can't be computed\n                }\n                if( quote_offset ) {\n                    note_defaults.top = quote_offset.top + random_shift();\n                } else {\n                    note_defaults.top = 0 + random_shift(); //put note at top of screen if can't do better\n                    $.log(\"nrama unable to get default position for note \" + note._id + \" because no quote offset found for quote \" + note.quote_id + \"(has the quote been added to the page?)\");\n                }\n            } \n            note = $.extend(true, {}, note_defaults, note );\n            \n            // -- check the note container div exists, append to document.body if not\n            if( $('#_nrama_notes').length == 0 ) {\n                $('<div id=\"_nrama_notes\"></div>').appendTo('body').\n                    css({position:\"absolute\", left:\"0px\", top:\"0px\",width:\"0%\", height:\"0%\"});\n            }\n\n            // --- start properly here\n            if( $('#'+note._id).length != 0 ) {  \n                notes.undisplay(note); //If note already displayed, undisplay it first.\n            }\n            var pos_attrs = {\n                \"position\":\"absolute\",\n                \"left\":note.left+\"px\",\n                \"top\":note.top+\"px\"\n            };\n            var textarea = $('<textarea></textarea>').\n                                val(note.content).\n                                css(settings.note_editor_style).\n                                one('blur', notes.update_on_blur).  //make sure edits are saved\n                                autogrow();\n            var inner_div = $('<div></div>').css(settings.note_inner_style).\n                                append(textarea);\n            var edit_note = $('<div></div').\n                                attr('id',note._id).\n                                addClass('_nrama-note').\n                                beResetCSS().\n                                css(pos_attrs).\n                                css(settings.note_style).\n                                css('z-index',_zindex_counter++).\n                                css('background-color', note.background_color || settings.note_background_color).\n                                data('nrama_note',note).\n                                append(inner_div).\n                                appendTo('#_nrama_notes').\n                                draggable({ cursor:'move', opacity:0.66, stop:notes.update_on_drag }).\n                                hide().show(\"scale\",{},200, function(){\n                                    if( display_settings.focus ) {\n                                        textarea.focus().select();\n                                    }\n                                }\n                            );\n        };\n            \n        /**\n         * remove HTML node represening note from the page\n         */\n        notes.undisplay = function(note) {\n            $('#'+note._id).remove();\n        };\n\n        // -- call this to re-enable note when error saving or deleting\n        var _finally = function _finally($note, restore_background ){\n            var $textarea = $('textarea', $note);\n            //make changes to textarea possible & ensure they trigger updates\n            $textarea.removeAttr(\"disabled\");\n            $textarea.unbind('blur', notes.update_on_blur).one('blur', notes.update_on_blur);  //make sure edits are saved\n            if( restore_background ) {\n                $textarea.parents('._nrama-note').css({backgroundColor:settings.note_background_color});\n            }\n        };\n        /**\n         * event handler for blur event on TEXTAREA of $note\n         * This handles display, logic & persistence.\n         * if & when successfully persisted, the note is stored as a jquery.data attr\n         * on the $note (key:nrama_note)\n         */\n        notes.update_on_blur = function(e) {\n            var $textarea = $(this);\n            $textarea.unbind('blur', notes.update_on_blur).\n                attr(\"disabled\", \"disabled\");   //disable text area while attempting to persist\n            $note = $textarea.parents('._nrama-note').first();\n            $note.css('background-color', settings.persist_started_color);\n            \n            \n            // -- delete note if note content is empty\n            var new_content = $textarea.val();\n            if( $.trim(new_content) == '' ) {\n                $.log(\"nrama_notes.update -- deleting note \"+$note.attr('id'));\n                notes.remove($note); \n                return;\n            }\n            \n            var note = $note.data('nrama_note');\n            \n            // -- if content unchanged, do nothing (so moving a note won't trigger a change)\n            var old_content = note.content;\n            if( old_content == new_content ) {\n                _finally($note, true);\n                return;\n            }\n    \n            var updates = {\n                content : new_content,\n                updated : new Date().getTime()\n            };\n            if( settings.is_embedded ) {\n                $.extend(updates, {\n                    background_color : settings.note_background_color,\n                    left : $note.offset().left,\n                    top : $note.offset().top,\n                    doc_height : $(document).height(),\n                    doc_width : $(document).width()\n                });\n            }\n            var new_note = $.extend(true, {}, note, updates);   \n            \n            notes.save(new_note, {clone_on_conflict:true}, function(error,data){\n                if( error ) {\n                    $note.css({backgroundColor : settings.persist_failed_color});\n                    _finally($note, false);\n                } else {\n                    //$.log(\"nrama_notes.update_on_blur: was persisted note _id:\"+new_note._id+\" for quote:\"+new_note.quote_id);\n                    $note.attr('id',new_note._id); //may have changed (save can clone)\n                    $note = $('#'+new_note._id);   //have to update after changing id attribute\n                    $note.data('nrama_note', new_note);\n                    //check for bibtex (do this after save to avoid conflicts)\n                    if( sources.detect_bibtex(new_note.content) ) {\n                        sources.update_from_bibtex(new_note.content, new_note, function(error, data){\n                            if( !error ) {\n                                $('#'+note._id).css({border:'1px solid #01DF01'})\n                            }\n                            _finally( $note, true );\n                        });\n                    } else {\n                        _finally( $note, true );\n                    }\n                }\n            });\n        };\n            \n        notes.update_on_drag = function(e) {\n            var $textarea = $('textarea', $(this) ).first();\n            if( $textarea.attr('disabled') ) {\n                $.log('nrama_notes.update_on_drag: save currently in progress');\n                return;\n            }\n            $.log(\"nrama_notes.update_on_drag starting\");\n            $textarea.attr('disabled','disabled');\n            var $note =  $(this);\n            var note = $note.data('nrama_note');\n            var updates = {\n                left : $note.offset().left,\n                top : $note.offset().top,\n                doc_height : $(document).height(),\n                doc_width : $(document).width()\n            };\n            note = $.extend(true, note, updates);   \n            notes.save(note, {clone_on_conflict:false}, function(error, data){\n                //errors are ignored -- note location not critical\n                $textarea.removeAttr('disabled');\n            });\n        };\n        \n        /**\n         * request delete from server & remove from document if succeeds\n         */\n        notes.remove = function($note) {\n            var note_id = $note.attr('id');\n            $note.css('background-color','red');\n            var note = $note.data('nrama_note');\n            persist.rm(note, function(error, data){\n                if( error ) {\n                    _finally($note, false);\n                } else {\n                    $.log(\"nrama_notes.remove deleted note \"+note_id+\" from server.\");\n                    $('#'+note_id).hide('puff',{},300+Math.floor(Math.random()*600), function(){\n                        $('#'+note_id).remove();\n                    });\n                }\n            });\n        };\n    \n        /**\n         * load notes from server and display on this page\n         * run after quotes have been loaded and displayed in case notes need positioning\n         */\n        notes.load = function(page_id, callback) {\n            var user_id = settings.me_only ? settings.user_id : undefined;\n            persist.load({\n                page_id : page_id,\n                type : 'note',\n                user_id : user_id\n            }, function(error, data){\n                if( error ) {\n                    _debug({msg:'nrama_notes.load error:', error:error})\n                    callback(error, data);\n                    return;\n                }\n                $.log('nrama_notes.load got ' + ( data ? (data.rows ? data.rows.length : 0 ) : 0) + ' notes from server for user '+user_id);\n                if( data && data.rows ) {\n                    $.each(data.rows, function(index,row){\n                        var note = row.value;\n                        notes.display(note, {focus:false});\n                    });\n                }\n                callback(error, data);\n            });\n        };\n            \n        /**\n         * @returns _ids of notes if @param quote has notes attached\n         */\n        notes.find = function(quote) {\n            var _ids = [];\n            $('._nrama-note').each(function(){\n                var rel_quote_id = $(this).data('nrama_note').quote_id;\n                if( rel_quote_id == quote._id ) {\n                    _ids.push($(this).attr('id'));  //add _id of the note to the list\n                }\n            });\n            return _ids;\n        };\n        \n        return notes;\n    };\n    \n    \n    \n    \n    /**\n     * for dialogs (todo -- move event handlers)\n     */\n    exports._make_ui = function(settings, session, _debug){\n        var $ = jQuery;\n        var ui = {};\n        \n        var _update_user_id = function(data) {\n            if( data && data.userCtx && data.userCtx.name ) {\n                var logged_in_as = data.userCtx.name;\n                if( logged_in_as != settings.user_id ) {\n                    //username has changed\n                    ui.dialogs.warn_user_discrepancy(logged_in_as);\n                    settings.user_id = logged_in_as;\n                }\n            }\n        };\n        /** \n         * may update settings.user_id.  may result in modal dialog warning\n         */\n        ui.info = function(callback){\n            session.info(function(error, data){\n                if( !error ) {\n                    _update_user_id(data);\n                }\n                callback(error,data);\n            });\n        };\n        /**\n         * may update settings.user_id.  may result in modal dialog warning\n         */\n        ui.login = function(username, password, callback){\n            session.login(username, password, function(error,data){\n                if( !error ) {\n                    _update_user_id(data);\n                }\n                callback(error,data);\n            });\n        };\n\n\n        ui.dialogs = {};\n        /**\n         * switch user_id if logged in; otherwise check whether configured for\n         * anonymous user and request user to log in if not.\n         */\n        ui.dialogs.login_if_necessary = function(callback) {\n            ui.info( function(error,data) {\n                if( data && data.userCtx && data.userCtx.name ) {\n                    callback(null, 'already logged in');\n                } else {\n                    //not logged in\n                    if( settings.user_id && settings.user_id[0] == '*' ) {\n                        //anonymous\n                        callback(null, 'anonymous user');\n                    } else {\n                        ui.dialogs.login(settings.user_id, callback);\n                    }\n                }\n            });\n        };\n        \n        /**\n         * dispaly a login dialog.\n         * @param callback{Function} will be called with an error if the user cancels.\n         */\n        ui.dialogs.login = function(username, msg/*optional*/, callback) {\n            if( !callback ) {\n                callback = msg;\n                msg = '';\n            }\n            var last_error = {message:'you cancelled'};  //report results of last error if user cancels\n            var $div = $('<div><h2><a href=\"http://www.note-o-rama.com\" target=\"_blank\">Note-o-rama</a> : login</h2></div>');\n            $div.append('<form id=\"login_form\" action=\"/_session\" method=\"POST\">' +\n                '<div class=\"general_errors\">'+msg+'</div>' +\n                '<div class=\"username field\">' +\n                    '<label for=\"id_name\">Username</label>' +\n                    '<input id=\"id_name\" name=\"name\" type=\"text\" />' +\n                    '<div class=\"errors\">&nbsp;</div>' +\n                '</div>' +\n                '<div class=\"password field\">' +\n                    '<label for=\"id_password\">Password</label>' +\n                    '<input id=\"id_password\" name=\"password\" type=\"password\" />' +\n                    '<div class=\"errors\">&nbsp;</div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                    '<input type=\"button\" id=\"id_cancel\" value=\"Cancel\" />' +\n                    '<input type=\"submit\" id=\"id_login\" value=\"Login\" />' +\n                '</div>' +\n            '</form>');\n            $div.beResetCSS();\n            $('.general_errors, .errors', $div).css({color:'red'});\n            $('#id_name',$div).val(username||'');\n            $('#id_cancel', $div).click(function () {\n                $.modal.close();\n                callback(last_error);\n            });\n            $('form', $div).submit(function (ev) {\n                ev.preventDefault();\n                var username = $('input[name=\"name\"]', $div).val();\n                var password = $('input[name=\"password\"]', $div).val();\n                $('.username .errors', $div).text(\n                    username ? '': 'Please enter a username'\n                );\n                $('.password .errors', $div).text(\n                    password ? '': 'Please enter a password'\n                );\n                if (username && password) {\n                    ui.login(username, password, function (error, data) {\n                        _debug({error:error});\n                        if( error ) {\n                            last_error = error;\n                            var error_msg = error.message || \"Error \"+(error.status || '')+\" logging in (network connection?)\";\n                            $('.general_errors', $div).text(error_msg);\n                        } else {\n                            $($div).fadeOut('slow', function () {\n                                $.modal.close();\n                                callback(null, data);\n                            });\n                        }\n                    });\n                }\n                return false;\n            });\n            $div.modal(settings.simplemodal);\n            _.delay( function(){\n                if( username ) {\n                    $('#id_password').focus();\n                }\n            }, 50 );\n        };\n        \n        ui.dialogs.warn_user_discrepancy = function(name, callback) {\n            if( !callback ) { callback = function(){}; }\n            var who = settings.user_id[0]=='*' ? 'anonymous users' : settings.user_id;\n            $.log('user logged in as '+name+' but this bookmarklet was configured for '+who );\n            callback(null, 'not implemented yet');\n        };\n        return ui;\n    };\n\n\n    /**\n     * put nrama together when used as bkmrklt or embedded <script>\n     * (see nrama2_init.js for the corresponing init for the server parts)\n     * caution: some init requires page load to be complete\n     * @param callback{Function} is called when init done.\n     */\n    var _nrama_init = function(nrama, jQuery, callback) {\n        nrama.$ = jQuery;\n\n        nrama.uuid = exports._make_uuid(uuid);\n\n        nrama.settings = exports._make_settings(nrama.uuid);\n        //detect user if set by bkmrklt or script (will be overriden by session cookies)\n        if( typeof _nrama_user !== 'undefined' && _nrama_user ) {\n            nrama.settings.user_id = _nrama_user;\n        }\n\n        nrama._debug = exports._make_debug(nrama.settings, window);\n        nrama.log = exports._make_logging(nrama.settings, nrama.$);\n        nrama.rpc = exports._make_rpc(nrama.settings, easyXDM, nrama.$);\n        nrama.db = exports._make_db(nrama.rpc, nrama.$);\n        nrama.session = exports._make_session(nrama.rpc);\n        nrama.persist = exports._make_persist(nrama.db, nrama.session, nrama.uuid, nrama._debug);\n        \n        var lib = {\n            b64_hmac_md5 : window.b64_hmac_md5,\n            rangy : window.rangy,\n            BibtexParser : window.BibtexParser,\n            $ : jQuery,\n            _ : window._\n        };\n        nrama.serializers = exports._make_serializers(nrama.settings, lib);\n        nrama.sources = exports._make_sources(nrama.settings, nrama.persist, nrama._debug, lib);\n        nrama.quotes = exports._make_quotes(nrama.settings, nrama.uuid, nrama.persist,\n                                            nrama.sources, nrama.serializers, nrama._debug,\n                                            lib);\n        nrama.notes = exports._make_notes(nrama.settings, nrama.uuid, nrama.persist,\n                                          nrama.sources, nrama.quotes, nrama._debug);\n        nrama.ui = exports._make_ui(nrama.settings, nrama.session, nrama._debug);\n\n        /**\n         * main setup:\n         *  - init dependencies & nrama\n         *  - load notes & quotes;\n         *  - configure events (select to create quote, etc)\n         */\n        nrama.$(document).ready(function(){\n            /**\n             * nrama.settings.page_id is a value s.t. two page instances have the same page_id exactly\n             *   when we want to load the same notes & quotes onto those pages.  This is really\n             *   hard to compute (e.g. DOI helps but if different users see an article with\n             *   different formatting, should we load the same notes & quotes?  Probably.)\n             * In future this might be doi or similar\n             */\n            nrama.settings.page_id = window.location.protocol+\"//\"+window.location.host+window.location.pathname;  //the url with no ?query or #anchor details\n            //remove trailing slash\n            var last = nrama.settings.page_id.length-1;\n            if( nrama.settings.page_id[last]=='/' ) {\n                nrama.settings.page_id = nrama.settings.page_id.slice(0,last);\n            }\n            \n            /**\n             * this is the node within which notes and quotes are possible and\n             * relative to which their locations are defined.\n             * Might eventually be configured per-site\n             */\n            //nrama.settings.root_node = nrama.$('#readOverlay')[0]; \n            nrama.settings.root_node = document.body;\n    \n            rangy.init();\n    \n            nrama.$.log('nrama: starting ...');\n            nrama.ui.dialogs.login_if_necessary(function(error, ignore){\n                if( error ) {\n                    nrama._debug({msg:'error logging in',error:error});\n                } else {\n                    //_.defer means wait until callstack cleared\n                    _.defer(nrama.quotes.load, nrama.settings.page_id, function(error, data){\n                        _.defer(nrama.notes.load, nrama.settings.page_id, nrama._debug );\n                    });\n                }\n            });\n            \n            // --- configure events ---\n            \n            // deal with 403 Forbidden events (session expires, etc)\n            nrama.$(document).bind('nrama_403', function(e, user_id){\n                nrama.ui.dialogs.login(user_id, 'Please login and re-try.', nrama._debug);\n            });\n            \n            //throttle2 is like _.throttle(fn) but this calls fn BEFORE timout\n            var throttle2 = function(func) {\n                var timeout;\n                return function() {\n                    var context = this,\n                        args = arguments;\n                    var reset_timeout = function() {\n                        timeout = null;\n                    };\n                    if( !timeout ) {\n                        timeout = setTimeout(reset_timeout, nrama.settings.event_delay);\n                        func.apply(context, args);\n                    }\n                };\n            };\n            \n            // highlighting text creates a quote\n            var create_quote_from_selection = function(e){\n                if( e.shiftKey || e.ctrlKey || e.altKey || e.metaKey) {\n                    //any modifier key cancels quote creation\n                    return;\n                }\n                //nrama.$.log(\"nrama2 caught mouse up\");\n                var selection = rangy.getSelection();\n                if( selection.isCollapsed ) {\n                    return;\n                }\n                var range = selection.getRangeAt(0);\n                //check that not too much text has been selected (avoid accidental selecting loads of doc)\n                if( nrama.settings.max_quote_length > 0 ) {\n                    if( range.toString().length > nrama.settings.max_quote_length ){\n                        nrama.$.log('nrama no quote -- ' + range.toString().length + ' characters selected.');\n                        return;\n                    }\n                }\n                var quote = nrama.quotes.create(range);\n                if( quote.content != '' ) {\n                    nrama.quotes.save(quote, function(error, data){\n                        //(todo -- some indicate that it has failed?\n                        if( !error ) {\n                            nrama.quotes.display(quote);   //display the quote only after it has been saved\n                        }\n                    });\n                    nrama._debug((function(){ var a={}; a[quote._id]=quote; return a; })()); \n                }\n            };\n            nrama.$(document).bind(\"mouseup\", throttle2(create_quote_from_selection) );\n            \n            //click a quote to create a note\n            var create_note_from_quote_click = function(e){\n                if( e.shiftKey || e.ctrlKey ) {\n                    //shift key cancels notecreation, so does ctrl\n                    return;\n                }\n                if( e.altKey || e.metaKey ) {\n                    //alt key causes quote deletion (in separate handler)\n                    return;\n                }   \n                var quote = nrama.$(this).data('nrama_quote');\n                var note = nrama.notes.create(quote);\n                nrama.notes.display(note);\n            };\n            nrama.$('._nrama-quote').live('click', throttle2(create_note_from_quote_click) );\n            \n            // alt- or meta-click a quote to delete it (after checking there are no linked notes)\n            nrama.$('._nrama-quote').live('click', function(e){\n                if( e.altKey || e.metaKey ) {\n                    var quote = nrama.$(this).data('nrama_quote');\n                    var note_ids = nrama.notes.find(quote);\n                    if( note_ids.length != 0 ) {\n                        //don't delete quotes with notes attached ...\n                        var $quote_nodes = nrama.$('.'+quote._id);\n                        $quote_nodes.css({'border-top':'1px dashed red',\n                                         'border-bottom':'1px dashed red'})\n                        //... instead make the relevant notes bounce\n                        var idstr = '#' + note_ids.join(', #');\n                        nrama.$(idstr).effect('bounce', function(){\n                            $quote_nodes.css({'border-top':'none',\n                                             'border-bottom':'none'},500)\n                        });\n                        return;\n                    }\n                    nrama.quotes.remove(quote);\n                }\n            });\n        \n            //click on a note to enable editing, bring it to the front and flash the associated quote\n            nrama.$('._nrama-note textarea').live('click',function(e){\n                var $textarea = nrama.$(this);\n                var $note = nrama.$(this).parents('._nrama-note').first();\n                nrama.notes.bring_to_front($note);\n                var note= $note.data('nrama_note');\n                nrama.quotes.flash(note.quote_id);\n            });\n            \n            //tabbing out of a note doesn't move to next note (because weird).\n            //thank you http://stackoverflow.com/questions/1314450/jquery-how-to-capture-the-tab-keypress-within-a-textbox\n            nrama.$('._nrama-note').live('keydown',function(e){\n                if( e.which == 9 ) {\n                    nrama.$('textarea', this).blur();\n                    e.preventDefault();\n                }\n            });\n            \n            // === init done\n            callback();\n        });\n    }\n    \n    /**\n     * IT ALL STARTS HERE\n     * Determine how to initialize depending on whether bookmarklet or embedded in page\n     */\n    if( typeof exports !== 'undefined' ) {    //exports undefined means nrama is already loaded -- bookmarklet may be called more than once)\n\n        if( typeof _nrama_bkmklt === 'undefined' && typeof require !== 'undefined' ) {\n            //this script is being used as a commonJS module\n            //already defined exports; initialisation is handled in another module.\n        } else {\n            if( typeof _nrama_bkmklt === 'undefined' || !_nrama_bkmklt ) {\n                //run as embedded <script> \n                _nrama_init(exports, jQuery, function(){\n                    exports._initalized = true;\n                });\n            } else {\n                // run in bookmarklet mode\n                // first remove head -- for some reason this seems to help avoid clashes in FF\n                var old_head = document.head.innerHTML;\n                var restore_document_head = function(){\n                    document.head.innerHTML = old_head;\n                }; \n                try {\n                    document.head.innerHTML = '';\n                } catch(e) {\n                    //alt. method -- can't set innerHTML with safari (others?)\n                    var head = document.head;\n                    var children = [];\n                    while(head.firstChild){\n                        var child = head.firstChild;\n                        if( child.nodeName !== 'SCRIPT' ) {\n                            children.push( child );\n                        }\n                        head.removeChild( child )\n                    }\n                    restore_document_head = function(){\n                        while( children.length ) {\n                            head.appendChild( children.pop() );\n                        }\n                    }\n                }\n     \n                // load libraries & only start work after they loaded\n                // adapted from jQuery ajaxTransport, thank you also http://stackoverflow.com/questions/756382/bookmarklet-wait-until-javascript-is-loaded\n                var loadScript2 = function(url, callback) {\n                    var head = document.head || document.getElementsByTagName( \"head\" )[0] || document.documentElement;\n                    var script = document.createElement( \"script\" );\n                    //script.charset = set this?$\n                    script.src = url;\n                    script.onload = script.onreadystatechange = function( _, isAbort ) {\n                        if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n                            // Handle memory leak in IE\n                            script.onload = script.onreadystatechange = null;\n                            // Remove the script\n                            if ( head && script.parentNode ) {\n                                head.removeChild( script );\n                            }\n                            // Dereference the script\n                            script = undefined;\n                            if ( !isAbort ) {\n                                callback( 200, \"success\" );\n                            }\n                        }\n                    };\n                    // Use insertBefore instead of appendChild  to circumvent an IE6 bug.\n                    head.insertBefore( script, head.firstChild );\n                }\n                loadScript2(_NRAMA_LIB_URL, function() {\n                    jQuery.noConflict();\n                    _nrama_init(exports, jQuery, function(){\n                        restore_document_head();\n                        exports._initalized = true;\n                    });\n                });\n            }\n        }\n    }\n// if exports is not defined, or if _nrama_bkmklt exists, attach everything to this.nrama\n//     but if nrama is already defined, do nothing (send undefined)\n// otherwise behave as a commonJS module\n})(\n    ( typeof exports !== 'undefined' && typeof _nrama_bkmklt === 'undefined' ) ?\n        exports\n    :(\n        ( typeof nrama === 'undefined' || !nrama._initalized ) ?\n            nrama={}\n        :\n            undefined   //prevent execution if nrama already defined\n    )\n);   "
    },
    "_attachments": {
        "xdm/db.ex-kanso.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/easyXDM.min.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/jquery.couch.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/json2.min.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/json2.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/kanso.js": {
            "content_type": "application/javascript",
            "data": "LypnbG9iYWwgd2luZG93OiBmYWxzZSwgJDogZmFsc2UsIHBhZ2VUcmFja2VyOiBmYWxzZSwga2Fuc286IHRydWUgKi8KCi8qKgogKiBib290c3RyYXBwZWQga2Fuc28gY29kZSwKICogcmVxdWlyZWQgYmVmb3JlIHRoZSBjb21tb25qcyBlbnZpcm9ubWVudCBpcyBhdmFpbGFibGUuCiAqLwoKKGZ1bmN0aW9uIChleHBvcnRzKSB7CgogICAgZXhwb3J0cy5tb2R1bGVDYWNoZSA9IHt9OwoKICAgIGV4cG9ydHMubm9ybWFsaXplUGF0aCA9IGZ1bmN0aW9uIChwKSB7CiAgICAgICAgdmFyIHBhdGggPSBbXTsKICAgICAgICB2YXIgcGFydHMgPSBwLnNwbGl0KCcvJyk7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBpZiAocGFydHNbaV0gPT09ICcuLicpIHsKICAgICAgICAgICAgICAgIHBhdGgucG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAocGFydHNbaV0gIT09ICcuJykgewogICAgICAgICAgICAgICAgcGF0aC5wdXNoKHBhcnRzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcGF0aC5qb2luKCcvJyk7CiAgICB9OwoKICAgIGV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uIChwKSB7CiAgICAgICAgaWYgKHAgPT09ICcvJykgewogICAgICAgICAgICByZXR1cm4gcDsKICAgICAgICB9CiAgICAgICAgdmFyIHBhcnRzID0gcC5zcGxpdCgnLycpOwogICAgICAgIHBhcnRzLnBvcCgpOwogICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDEgJiYgcGFydHNbMF0gPT09ICcnKSB7CiAgICAgICAgICAgIHJldHVybiAnLyc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7CiAgICB9OwoKICAgIGV4cG9ydHMuY3JlYXRlUmVxdWlyZSA9IGZ1bmN0aW9uIChjdXJyZW50KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgICAgICAgICAgdmFyIHBhdGg7CiAgICAgICAgICAgIGlmICh0YXJnZXQuY2hhckF0KDApID09PSAnLicpIHsKICAgICAgICAgICAgICAgIHZhciBkaXIgPSBleHBvcnRzLmRpcm5hbWUoY3VycmVudCk7CiAgICAgICAgICAgICAgICBwYXRoID0gZXhwb3J0cy5ub3JtYWxpemVQYXRoKGRpciArICcvJyArIHRhcmdldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBwYXRoID0gZXhwb3J0cy5ub3JtYWxpemVQYXRoKHRhcmdldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG0gPSBrYW5zby5tb2R1bGVDYWNoZVtwYXRoXTsKICAgICAgICAgICAgaWYgKCFtKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1Y2ggbW9kdWxlOiAnICsgcGF0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFtLmxvYWRlZCkgewogICAgICAgICAgICAgICAgbS5leHBvcnRzID0ge307CiAgICAgICAgICAgICAgICAvLyBzZXQgdGhpcyB0byB0cnVlICpiZWZvcmUqIGNhbGxpbmcgbS5sb2FkIHNvIGNpcmN1bGFyCiAgICAgICAgICAgICAgICAvLyByZXF1aXJlcyBkb24ndCBibG93IHRoZSBjYWxsIHN0YWNrCiAgICAgICAgICAgICAgICBtLmxvYWRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBtLmxvYWQobSwgbS5leHBvcnRzLCBleHBvcnRzLmNyZWF0ZVJlcXVpcmUocGF0aCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBtLmV4cG9ydHM7CiAgICAgICAgfTsKICAgIH07CgogICAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAndW5kZWZpbmVkJykgewogICAgICAgIC8vIG1ha2UgcmVxdWlyZSBhdmFpbGFibGUgZ2xvYmFsbHksIHVubGVzcyBhbHJlYWR5IGluIGEgY29tbW9uanMKICAgICAgICAvLyBlbnZpcm9ubWVudAogICAgICAgIHRoaXMucmVxdWlyZSA9IGV4cG9ydHMuY3JlYXRlUmVxdWlyZSgnJyk7CiAgICB9CgogICAgZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBrYW5zbyA9IHJlcXVpcmUoJ2thbnNvL2NvcmUnKTsKICAgICAgICBmb3IgKHZhciBrIGluIGthbnNvKSB7CiAgICAgICAgICAgIGlmIChrYW5zby5oYXNPd25Qcm9wZXJ0eShrKSkgewogICAgICAgICAgICAgICAgZXhwb3J0c1trXSA9IGthbnNvW2tdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGthbnNvLmluaXQoKTsKICAgIH07Cgp9KCh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5rYW5zbyA9IHt9OiBtb2R1bGUuZXhwb3J0cykpOwoKCi8qKgogKiBsaWIvYXBwLmpzIGFkZHMgdGhlIHdyYXBwZWQgYW5kIGNvbmNhdGVuYXRlZCBsaXN0IG9mIGNvbW1vbmpzIG1vZHVsZXMgYWZ0ZXIKICogdGhpcyBjb2RlLgogKi8KCgo="
        },
        "xdm/make-xdm-all.sh": {
            "content_type": "application/x-sh",
            "data": "IyEgL2Jpbi9iYXNoCgpjYXQganF1ZXJ5Lm1pbi5qcyA+eGRtLWFsbC5qcwplY2hvICcnID4+eGRtLWFsbC5qcwpjYXQgZGIuZXgta2Fuc28uanMgfCBqc21pbiAgPj54ZG0tYWxsLmpzCmVjaG8gJycgPj54ZG0tYWxsLmpzCmNhdCBzZXNzaW9uLmV4LWthbnNvLmpzIHwganNtaW4gPj54ZG0tYWxsLmpzCmVjaG8gJycgPj54ZG0tYWxsLmpzCmNhdCBlYXN5WERNLm1pbi5qcyA+PnhkbS1hbGwuanMKZWNobyAnJyA+PnhkbS1hbGwuanMKdWdsaWZ5anMgcHJvdmlkZXIuanMgPj54ZG0tYWxsLmpzCg=="
        },
        "xdm/provider.debug.html": {
            "content_type": "text/html",
            "data": "PCFkb2N0eXBlIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPm5yYW1hIHhkbS1jb3VjaGRiIHByb3ZpZGVyPC90aXRsZT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImpxdWVyeS5taW4uanMiPjwvc2NyaXB0PgogICAgPCEtLSBmb3IgY291Y2hkYiAtLT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiA+CiAgICAgICAvLyBzZXR0aW5ncyByZXF1aXJlZCBmb3IgZGIuZXgta2Fuc28uanMgJiBzZXNzaW9uLmV4LWthbnNvLmpzCiAgICAgICAvLyBOQiBjaGFuZ2UgdGhlc2UKICAgICAgIHNldHRpbmdzID0gewogICAgICAgICAgIG5hbWUgOiAnbnJhbWEnLCAgICAgICAgIC8vc2hvdWxkIGJlIHNhbWUgYXMgJ25hbWUnIGluIGthbnNvLmpzb24gaW4gdGhlIHJvb3Qgb2YgeW91ciBwcm9qZWN0CiAgICAgICAgICAgYmFzZVVSTCA6ICcvbnJhbWEvX2Rlc2lnbi9ucmFtYS9fcmV3cml0ZScgICAgLy91c2VkIHRvIGJ1aWxkIHVybCBmb3IgcmVxdWVzdHMKICAgICAgIH0KICAgIDwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iZGIuZXgta2Fuc28uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0ic2Vzc2lvbi5leC1rYW5zby5qcyI+PC9zY3JpcHQ+CiAgICA8IS0tIGZvciB4ZG0gLS0+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJlYXN5WERNLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgIGVhc3lYRE0uRG9tSGVscGVyLnJlcXVpcmVzSlNPTigianNvbjIuanMiKTsKICAgIDwvc2NyaXB0PgogICAgCiAgICA8IS0tIGV4cG9zZXMgZnVuY3Rpb25zIHRocm91Z2ggcnBjIC0tPgogICAgPHNjcmlwdCBzcmM9InByb3ZpZGVyLmpzIj48L3NjcmlwdD4KCiAgPC9oZWFkPgogIDxib2R5PgogICAgPHNjcmlwdD4KICAgICAgLy90byBoZWxwIGNoZWNraW5nIGl0cyB3b3JraW5nIHdoZW4gbG9hZGVkIGluIHRoZSBicm93c2VyCiAgICAgIGNiPWZ1bmN0aW9uKCl7IGNvbnNvbGUubG9nKCdzdWNjZXNzJyk7IGZvcihpIGluIGFyZ3VtZW50cyl7IGNvbnNvbGUubG9nKGkrJzonK2FyZ3VtZW50c1tpXSk7IHdpbmRvd1snYScraV09YXJndW1lbnRzW2ldOyB9IH07CiAgICAgIGNiZT1mdW5jdGlvbigpeyBjb25zb2xlLmxvZygnZXJyb3InKTsgZm9yKGkgaW4gYXJndW1lbnRzKXsgY29uc29sZS5sb2coaSsnOicrYXJndW1lbnRzW2ldKTsgd2luZG93WydhJytpXT1hcmd1bWVudHNbaV07IH0gIH07CiAgICAgIG89e2NyZWF0ZWQ6bmV3IERhdGUoKS5nZXRUaW1lKCksZmllbGQ6J3ZhbHVlIGZvciBtc3RldmUnLGFudW06TWF0aC5yYW5kb20oMSkqMTB9O28uYW51bQogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+CgoK"
        },
        "xdm/provider.html": {
            "content_type": "text/html",
            "data": "PCFkb2N0eXBlIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPk5vdGUtby1yYW1hIHhkbS1jb3VjaGRiIHByb3ZpZGVyPC90aXRsZT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiA+CiAgICAgICAvLyBzZXR0aW5ncyByZXF1aXJlZCBmb3IgZGIuZXgta2Fuc28uanMgJiBzZXNzaW9uLmV4LWthbnNvLmpzCiAgICAgICBzZXR0aW5ncyA9IHsKICAgICAgICAgICBuYW1lIDogJ25yYW1hJywgICAgICAgICAKICAgICAgICAgICBiYXNlVVJMIDogJy9ucmFtYS9fZGVzaWduL25yYW1hL19yZXdyaXRlJyAgICAKICAgICAgIH0KICAgIDwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0ieGRtLWFsbC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgIGVhc3lYRE0uRG9tSGVscGVyLnJlcXVpcmVzSlNPTigianNvbjIuanMiKTsKICAgIDwvc2NyaXB0PgogIDwvaGVhZD4KICA8Ym9keT4KICA8L2JvZHk+CjwvaHRtbD4KCg=="
        },
        "xdm/provider.js": {
            "content_type": "application/javascript",
            "data": "LyoqCiAqIEhvdyB0byBtYWtlIGNvdWNoZGIgd29yayB3aXRoIGVhc3lYRE0ncyBycGMuCiAqIAogKiB3ZSdsbCBoYXZlIHRvIGRvIHNvbWUgd3JhcHBpbmcgdG8gbWFrZSBlYXN5WERNIHBsYXkgbmljZWx5OgogKiAKICogIDEuIHdoZW4gZWFzeVhETSBleGVjdXRlcyB0aGUgcmVtb3RlIGNhbGxzIGl0IGNhbGxzIHRoZSBtZXRob2RzIGRlZmluZWQgaGVyZQogKiAgd2l0aCBUV08gY2FsbGJhY2tzLCBzdWNjZXNzIGFuZCBlcnJvci4gIFRoaXMgbWVzc2VzIHVwIGhvdyBkYi5ucmFtYS5qcyAmCiAqICBzZXNzaW9uLm5yYW1hLmpzIGhhbmRsZSB0aGUgb3B0aW9uYWwgcGFyYW1ldGVycyAod2hpY2ggaXMgYSB3ZWFrbmVzcykuIFNlZQogKiAgbGluZSAyNzU4IGluIGVhc3lYRE0uZGVidWcuanMKICoKICogIDIuIGVhc3lYRE0gd3JhcHMgY2FsbGJhY2tzIGluIHN1Y2ggYSB3YXkgdGhhdCBvbmx5IHRoZSBmaXJzdCBwYXJhbWV0ZXIKICogIGlzIHBhc3NlZCB1cCB0byB0aGUgb3JpZ2luYWwgY2FsbGJhY2sgKGxpbmUgMjcyOCBpbiBlYXN5WERNLmRlYnVnLmpzKS4KICoKICogIFRvIGFyb3VuZCB0aGVzZSBwb2ludHMsIHdlIHdyYXAgdGhlIG1ldGhvZHMgc28gYXMgdG8gKGkpIGRlbGV0ZSB0aGUgZmluYWwKICogIGFyZ3VtZW50IHdpdGggd2hpY2ggdGhleSBhcmUgY2FsbGVkLCBhbmQgKGlpKSBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGgKICogIHBhcmFtZXRlcnMgYXMgYW4gYXJyYXkuICBUaGlzIChpaSkgcmVxdWlyZXMgY29tcGxlbWVudGFyeSB3cmFwcGluZyBhdCB0aGUKICogIG90aGVyIGVuZCAodGhlIGNvbnN1bWVyKS4KICovCgovKgogICAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgTm90ZS1vLXJhbWEuCgogICAgTm90ZS1vLXJhbWEgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgoKICAgIE5vdGUtby1yYW1hIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCBOb3RlLW8tcmFtYS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KKi8KCgp2YXIgX2FycmF5X3dyYXAgPSBmdW5jdGlvbihmbikgewogICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICAgIGZuKGFyZ3MpOwogICAgfQp9CnZhciBfd3JhcCA9IGZ1bmN0aW9uKGZuKSB7CiAgICByZXR1cm4gewogICAgICAgIG1ldGhvZCA6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciB3cmFwcGVkX2FyZ3VtZW50cyA9IFtdOwogICAgICAgICAgICAkLmVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihpZHgsIGFyZyl7CiAgICAgICAgICAgICAgICBpZiggdHlwZW9mIGFyZyA9PT0gImZ1bmN0aW9uIiApIHsKICAgICAgICAgICAgICAgICAgICB3cmFwcGVkX2FyZ3VtZW50cy5wdXNoKCBfYXJyYXlfd3JhcChhcmcpICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHdyYXBwZWRfYXJndW1lbnRzLnB1c2goYXJnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbGFzdCBhcmd1bWVudCAtLSBpdCdzIGEgY2FsbGJhY2sgKGV2aWx5IGluc2VydGVkIGJ5IGVhc3lYRE0gdG8gY29uZnVzZSB1cykKICAgICAgICAgICAgdmFyIGxlbiA9IHdyYXBwZWRfYXJndW1lbnRzLmxlbmd0aDsKICAgICAgICAgICAgd3JhcHBlZF9hcmd1bWVudHMuc3BsaWNlKGxlbi0xLDEpOwogICAgICAgICAgICBmbi5hcHBseSh0aGlzLHdyYXBwZWRfYXJndW1lbnRzKTsKICAgICAgICB9CiAgICB9Cn0KdmFyIGxvY2FsID0gewogICAgdGVzdCA6IHsKICAgICAgICBtZXRob2QgOiBmdW5jdGlvbihvYmplY3QsIG9uX3N1Y2Nlc3MsIG9uX2Vycm9yKSB7CiAgICAgICAgICAgIHJldHVybiBvbl9zdWNjZXNzKG9iamVjdCk7CiAgICAgICAgfQogICAgfSwKICAgIGRiX3NhdmVEb2MgOiBfd3JhcCggZGIuc2F2ZURvYyApLAogICAgZGJfcmVtb3ZlRG9jIDogX3dyYXAoIGRiLnJlbW92ZURvYyApLAogICAgZGJfZ2V0VmlldyA6IF93cmFwKCBkYi5nZXRWaWV3ICksCiAgICBkYl9kb1VwZGF0ZSA6IF93cmFwKCBkYi5kb1VwZGF0ZSApLAogICAgc2Vzc2lvbl9sb2dpbjogX3dyYXAoIHNlc3Npb24ubG9naW4gKSwKICAgIHNlc3Npb25fbG9nb3V0IDogX3dyYXAoIHNlc3Npb24ubG9nb3V0ICksCiAgICBzZXNzaW9uX2luZm8gOiBfd3JhcCggc2Vzc2lvbi5pbmZvICkKfTsKLyoKICAvLyBzaG9ydGN1dCBmb3IgdGVzdGluZwokLmVhY2goZGIsIGZ1bmN0aW9uKGtleSwgbWV0aG9kKXsKICBpZiggdHlwZW9mKG1ldGhvZCk9PT0iZnVuY3Rpb24iKSB7CiAgICAgIGNvbnNvbGUubG9nKCdkYl8nK2tleSk7CiAgICAgIGV4cG9zZVsnZGJfJytrZXldID0gbWV0aG9kX2FycmF5X3dyYXAobWV0aG9kKTsKICB9Cn0pOwokLmVhY2goc2Vzc2lvbiwgZnVuY3Rpb24oa2V5LCBtZXRob2QpewogIGlmKCB0eXBlb2YobWV0aG9kKT09PSJmdW5jdGlvbiIpIHsKICAgICAgY29uc29sZS5sb2coJ3Nlc3Npb25fJytrZXkpOwogICAgICBleHBvc2VbJ3Nlc3Npb25fJytrZXldID0gbWV0aG9kX2FycmF5X3dyYXAobWV0aG9kKTsKICB9Cn0pOwoqLwovL3N0dWJzIGZvciByZW1vdGUgbWV0aG9kcwp2YXIgcmVtb3RlID0gewogICAgZ2V0X3ZlcnNpb24gOiB7fSwKICAgIG1zZyA6IHt9LAogICAgbW9kYWwgOiB7fQp9Owp2YXIgb25SZWFkeSA9IGZ1bmN0aW9uKCl7CiAgICAvL3Rlc3QxCiAgICAvKgogICAgX3JwYy5nZXRfdmVyc2lvbihmdW5jdGlvbih2ZXJzaW9uKXsKICAgICAgICBfcnBjLm1zZygnaGVsbG8gZnJvbSByZW1vdGUgdG8gbnJhbWEgY2xpZW50IHZlcnNpb24gJyt2ZXJzaW9uKTsKICAgIH0pOwogICAgKi8KICAgIAogICAgLy90ZXN0MgogICAgLyoKICAgIF9ycGMuZ2V0X3ZlcnNpb24oIGZ1bmN0aW9uKHZlcnNpb24pewogICAgICAgIF9ycGMubW9kYWwobWFrZV9tb2RhbF9zdHIodmVyc2lvbikpOwogICAgfSk7CiAgICAqLwp9Owp2YXIgX3JwYyA9IG5ldyBlYXN5WERNLlJwYyh7IG9uUmVhZHk6b25SZWFkeSB9LCB7bG9jYWw6bG9jYWwsIHJlbW90ZTpyZW1vdGV9ICk7CgovKioKICogVGhpcyBpcyBob3cgdG8gZG8gdGhlIHNhbWUgZm9yIGpxdWVyeS5jb3VjaC5kYiBpbnN0ZWFkCiAqIE5vdGUgdGhhdCBjYWxsYmFja3MgY2Fubm90IGJlIHdyYXBwZWQgaW4gb2JqZWN0cyB3aGVuIHBhc3NlZCBhcyBwYXJhbWV0ZXJzCiAqIAp2YXIgJGRiID0gJC5jb3VjaC5kYignbnJhbWEnKTsgIC8vIDwtLSB5b3VyIGRiIG5hbWUgZ29lcyBoZXJlCnZhciBleHBvc2UgPSB7CiAgICB0ZXN0IDogewogICAgICAgIG1ldGhvZCA6IGZ1bmN0aW9uKG9uX3N1Y2Nlc3MsIG9uX2Vycm9yLCBvYmplY3QpIHsKICAgICAgICAgICAgcmV0dXJuIG9uX3N1Y2Nlc3MoJ3RoYXQgd29ya2VkIScsIG9iamVjdCk7CiAgICAgICAgfQogICAgfSwKICAgICRsb2dpbiA6IHsKICAgICAgICBtZXRob2QgOiBmdW5jdGlvbihuYW1lLCBwYXNzd29yZCwgc3VjY2VzcywgZXJyb3IpIHsKICAgICAgICAgICAgJC5jb3VjaC5sb2dpbih7CiAgICAgICAgICAgICAgICBuYW1lOm5hbWUsCiAgICAgICAgICAgICAgICBwYXNzd29yZDpwYXNzd29yZCwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6c3VjY2VzcywKICAgICAgICAgICAgICAgIGVycm9yOmVycm9yCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0sCiAgICAkbG9nb3V0IDogewogICAgICAgIG1ldGhvZCA6IGZ1bmN0aW9uKHN1Y2Nlc3MsIGVycm9yKSB7CiAgICAgICAgICAgICQuY291Y2gubG9nb3V0KHtzdWNjZXNzOnN1Y2Nlc3MsIGVycm9yOmVycm9yfSk7CiAgICAgICAgfQogICAgfSwKICAgICRzZXNzaW9uIDogewogICAgICAgIG1ldGhvZCA6IGZ1bmN0aW9uKHN1Y2Nlc3MsZXJyb3IpIHsKICAgICAgICAgICAgJC5jb3VjaC5zZXNzaW9uKHtzdWNjZXNzOnN1Y2Nlc3MsIGVycm9yOmVycm9yfSk7CiAgICAgICAgfQogICAgfSwKICAgICRzYXZlRG9jIDogewogICAgICAgIG1ldGhvZCA6IGZ1bmN0aW9uKGRvYywgc3VjY2VzcywgZXJyb3IpIHsKICAgICAgICAgICAgJGRiLnNhdmVEb2MoZG9jLCB7c3VjY2VzczpzdWNjZXNzLCBlcnJvcjplcnJvcn0pOwogICAgICAgIH0KICAgIH0KICAgIC8vIGV0Ywp9OwogKi8KCgovKioKICogdGhpcyBpcyBmb3IgdGVzdGluZyBtb2RhbCAtLS0gY2FuIGJlIGRpcGxheWVkIG9uIHRoZSBjbGllbnQKICoKdmFyIG1ha2VfbW9kYWxfc3RyID0gZnVuY3Rpb24odmVyc2lvbikgewogICAgdmFyICRtb2RhbCA9ICQoJzxkaXY+PGgyPlVwZGF0ZSBOZWVkZWQ8L2gyPjwvZGl2PicpOwogICAgJG1vZGFsLmFwcGVuZCgnPGZvcm0gaWQ9ImluZm9fZm9ybSI+JyArCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJpbmZvIj4nICsKICAgICAgICAgICAgICAgICc8cD5QbGVhc2UgdXBkYXRlIHlvdXIgYm9va21hcmtsZXQsIHRoaXMgdmVyc2lvbiAoJyt2ZXJzaW9uKycpIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQ8L3A+JyArCiAgICAgICAgICAgICAgICAnPHA+PGEgaHJlZj0iaHR0cDovL3d3dy5ub3RlLW8tcmFtYS5jb20iPmdldCB0aGUgbmV3IHZlcnNpb248L2E+PC9wPicgKwogICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJhY3Rpb25zIj4nICsKICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT0iYnV0dG9uIiBpZD0iaWRfb2siIHZhbHVlPSJPSyIgLz4nICsKICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICc8L2Zvcm0+Jyk7CiAgICBtb2RhbF9zdHI9JG1vZGFsLmh0bWwoKTsKICAgIHJldHVybiBtb2RhbF9zdHI7Cn0KKi8KCmZuID0gZnVuY3Rpb24oKXsKICAgICQuZWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGlkeCwgYXJnKXsKICAgICAgICBjb25zb2xlLmxvZyhhcmcpOwogICAgfSk7Cn0="
        },
        "xdm/provider.min.js": {
            "content_type": "application/javascript",
            "data": "LyoqCiAqIEhvdyB0byBtYWtlIGNvdWNoZGIgd29yayB3aXRoIGVhc3lYRE0ncyBycGMuCiAqIAogKiB3ZSdsbCBoYXZlIHRvIGRvIHNvbWUgd3JhcHBpbmcgdG8gbWFrZSBlYXN5WERNIHBsYXkgbmljZWx5OgogKiAKICogIDEuIHdoZW4gZWFzeVhETSBleGVjdXRlcyB0aGUgcmVtb3RlIGNhbGxzIGl0IGNhbGxzIHRoZSBtZXRob2RzIGRlZmluZWQgaGVyZQogKiAgd2l0aCBUV08gY2FsbGJhY2tzLCBzdWNjZXNzIGFuZCBlcnJvci4gIFRoaXMgbWVzc2VzIHVwIGhvdyBkYi5ucmFtYS5qcyAmCiAqICBzZXNzaW9uLm5yYW1hLmpzIGhhbmRsZSB0aGUgb3B0aW9uYWwgcGFyYW1ldGVycyAod2hpY2ggaXMgYSB3ZWFrbmVzcykuIFNlZQogKiAgbGluZSAyNzU4IGluIGVhc3lYRE0uZGVidWcuanMKICoKICogIDIuIGVhc3lYRE0gd3JhcHMgY2FsbGJhY2tzIGluIHN1Y2ggYSB3YXkgdGhhdCBvbmx5IHRoZSBmaXJzdCBwYXJhbWV0ZXIKICogIGlzIHBhc3NlZCB1cCB0byB0aGUgb3JpZ2luYWwgY2FsbGJhY2sgKGxpbmUgMjcyOCBpbiBlYXN5WERNLmRlYnVnLmpzKS4KICoKICogIFRvIGFyb3VuZCB0aGVzZSBwb2ludHMsIHdlIHdyYXAgdGhlIG1ldGhvZHMgc28gYXMgdG8gKGkpIGRlbGV0ZSB0aGUgZmluYWwKICogIGFyZ3VtZW50IHdpdGggd2hpY2ggdGhleSBhcmUgY2FsbGVkLCBhbmQgKGlpKSBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGgKICogIHBhcmFtZXRlcnMgYXMgYW4gYXJyYXkuICBUaGlzIChpaSkgcmVxdWlyZXMgY29tcGxlbWVudGFyeSB3cmFwcGluZyBhdCB0aGUKICogIG90aGVyIGVuZCAodGhlIGNvbnN1bWVyKS4KICovdmFyIF9hcnJheV93cmFwPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3ZhciBiPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7YShiKX19LF93cmFwPWZ1bmN0aW9uKGEpe3JldHVybnttZXRob2Q6ZnVuY3Rpb24oKXt2YXIgYj1bXTskLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGEsYyl7dHlwZW9mIGM9PSJmdW5jdGlvbiI/Yi5wdXNoKF9hcnJheV93cmFwKGMpKTpiLnB1c2goYyl9KTt2YXIgYz1iLmxlbmd0aDtiLnNwbGljZShjLTEsMSksYS5hcHBseSh0aGlzLGIpfX19LGxvY2FsPXt0ZXN0OnttZXRob2Q6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiKGEpfX0sZGJfc2F2ZURvYzpfd3JhcChkYi5zYXZlRG9jKSxkYl9yZW1vdmVEb2M6X3dyYXAoZGIucmVtb3ZlRG9jKSxkYl9nZXRWaWV3Ol93cmFwKGRiLmdldFZpZXcpLGRiX2RvVXBkYXRlOl93cmFwKGRiLmRvVXBkYXRlKSxzZXNzaW9uX2xvZ2luOl93cmFwKHNlc3Npb24ubG9naW4pLHNlc3Npb25fbG9nb3V0Ol93cmFwKHNlc3Npb24ubG9nb3V0KSxzZXNzaW9uX2luZm86X3dyYXAoc2Vzc2lvbi5pbmZvKX0scmVtb3RlPXtnZXRfdmVyc2lvbjp7fSxtc2c6e30sbW9kYWw6e319LG9uUmVhZHk9ZnVuY3Rpb24oKXt9LF9ycGM9bmV3IGVhc3lYRE0uUnBjKHtvblJlYWR5Om9uUmVhZHl9LHtsb2NhbDpsb2NhbCxyZW1vdGU6cmVtb3RlfSk7Zm49ZnVuY3Rpb24oKXskLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGEsYil7Y29uc29sZS5sb2coYil9KX0="
        },
        "xdm/session.ex-kanso.js": {
            "content_type": "application/javascript",
            "data": "LyoqCiAqIG1vZGlmaWVkIHRvIHVzZSBpbiBicm93c2VyIGluZGVwZW5kZW50bHkgb2YgdGhlIHdob2xlIGthbnNvIGFwcAogKiBTb21lIG1ldGhvZHMgaGF2ZSBiZWVuIHJlbW92ZWQgKGUuZy4gc2lnbnVwLCB3aGljaCB3b3VsZCBhZGQgZGVwZW5kZW5jaWVzKS4KICoKICogY29udmVydGVkIGZyb20gQ29tbW9uSlMgdG8gb3JkaW5hcnksIGVtYmVkZGFibGUgSlM6CiAqICBleHBvcnRzIGJlY29tZXMgc2Vzc2lvbgogKgogKiBkZXBlbmRzOiBkYi5ucmFtYS5qcwogKgogKiBNb2RpZnlpbmcgaW5kaXZpZHVhbCBmdW5jdGlvbnMgaGFzIGJlZW4gYXZvaWRlZDogdGhleSBhcmUgZWl0aGVyIGRlbGV0ZWQgb3Igc3R1YmJlZC4KICogCiAqIEZ1bmN0aW9ucyByZWxhdGVkIHRvIHRoZSBtYW5hZ2VtZW50IG9mIHVzZXIgc2Vzc2lvbnMgYW5kIGFjY291bnQgaW5mb3JtYXRpb24uCiAqCiAqIEBtb2R1bGUKICovCgovLyBUaGlzIGlzIG5vIGxvbmdlciBDb21tb25KUwpzZXNzaW9uID0ge307CihmdW5jdGlvbihleHBvcnRzKXsKCiAgICAvKioKICAgICAqIGFkZGVkIGZvciBleC1rYW5zbyA6IGZha2UgdGhlIHBhcnRzIG9mIGthbnNvL3V0aWxzIHRoYXQgd2UgbmVlZAogICAgICovIAogICAgdXRpbHMgPSB7CiAgICAgICAgaXNCcm93c2VyIDogZnVuY3Rpb24oKXsgcmV0dXJuIHRydWU7IH0sCiAgICAgICAgZ2V0QmFzZVVSTCA6IGZ1bmN0aW9uKCl7IHJldHVybiBzZXR0aW5ncy5iYXNlVVJMOyB9IAogICAgfTsKCiAgICAvKioKICAgICAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICAgICAqLwogICAgLyoKICAgIHZhciBkYiA9IHJlcXVpcmUoJy4vZGInKSwgICAgICAgLy90aGlzIGlzIHJlcXVpcmVkIAogICAgICAgIHNoYTEgPSByZXF1aXJlKCcuL3NoYTEnKSwgICAvL25vdCByZXF1aXJlZAogICAgICAgIGNvb2tpZXMgPSByZXF1aXJlKCcuL2Nvb2tpZXMnKSwgLy9ub3QgcmVxdWlyZWQKICAgICAgICBldmVudHMgPSByZXF1aXJlKCcuL2V2ZW50cycpICAvL25vdCByZXF1aXJlZAogICAgICAgIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpOyAgLy9zZWUgYWJvdmUKICAgICovCiAgICAKICAgIAogICAgLyoqCiAgICAgKiBleHBvcnRzLmZha2VSZXF1ZXN0IGRlbGV0ZWQKICAgICAqLwogICAgCiAgICAvKioKICAgICAqIGV4cG9ydHMuc2Vzc2lvbkNoYW5nZSBzdHViYmVkCiAgICAgKi8KICAgIGV4cG9ydHMuc2Vzc2lvbkNoYW5nZSA9IGZ1bmN0aW9uICh1c2VyQ3R4LCBjYWxsYmFjaykgewogICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0KICAgIH07CiAgICAKICAgIC8qKgogICAgICogTG9ncyBvdXQgdGhlIGN1cnJlbnQgdXNlci4KICAgICAqCiAgICAgKiBAbmFtZSBsb2dvdXQoY2FsbGJhY2spCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogICAgICogQGFwaSBwdWJsaWMKICAgICAqLwogICAgZXhwb3J0cy5sb2dvdXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbG9nb3V0IGNhbm5vdCBiZSBjYWxsZWQgc2VydmVyLXNpZGUnKTsKICAgICAgICB9CiAgICAgICAgZGIucmVxdWVzdCh7CiAgICAgICAgICAgIHR5cGU6ICJERUxFVEUiLAogICAgICAgICAgICB1cmw6ICIvX3Nlc3Npb24iLCAvLyBkb24ndCBuZWVkIGJhc2VVUkwsIC9fc2Vzc2lvbiBhbHdheXMgYXZhaWxhYmxlCiAgICAgICAgICAgIHVzZXJuYW1lOiAiXyIsCiAgICAgICAgICAgIHBhc3N3b3JkIDogIl8iCiAgICAgICAgfSwKICAgICAgICBmdW5jdGlvbiAoZXJyLCByZXNwKSB7CiAgICAgICAgICAgIGlmIChyZXNwICYmIHJlc3Aub2spIHsKICAgICAgICAgICAgICAgIHV0aWxzLnVzZXJDdHggPSB7bmFtZTogbnVsbCwgcm9sZXM6IFtdfTsKICAgICAgICAgICAgICAgIHV0aWxzLnNlc3Npb24gPSB7dXNlckN0eDogdXRpbHMudXNlckN0eH07CiAgICAgICAgICAgICAgICBleHBvcnRzLnNlc3Npb25DaGFuZ2UodXRpbHMudXNlckN0eCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3ApOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9OwogICAgCiAgICAvKioKICAgICAqIEF0dGVtcHQgdG8gbG9naW4gdXNpbmcgdGhlIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBwcm92aWRlZC4KICAgICAqCiAgICAgKiBAbmFtZSBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQsIGNhbGxiYWNrKQogICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJuYW1lCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFzc3dvcmQKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAgICAgKiBAYXBpIHB1YmxpYwogICAgICovCiAgICAKICAgIGV4cG9ydHMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkLCBjYWxsYmFjaykgewogICAgICAgIGlmICghdXRpbHMuaXNCcm93c2VyKCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsb2dpbiBjYW5ub3QgYmUgY2FsbGVkIHNlcnZlci1zaWRlJyk7CiAgICAgICAgfQogICAgICAgIGRiLnJlcXVlc3QoewogICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgIHVybDogIi9fc2Vzc2lvbiIsCiAgICAgICAgICAgIGRhdGE6IHtuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkfQogICAgICAgIH0sCiAgICAgICAgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgICAgICBpZiAocmVzcCAmJiByZXNwLm9rKSB7CiAgICAgICAgICAgICAgICAvLyBUT0RPOiBmb3Igc29tZSByZWFzb24gcmVzcC5uYW1lIGlzIHNldCB0byBudWxsIGluIHRoZSByZXNwb25zZQogICAgICAgICAgICAgICAgLy8gZXZlbiB0aG91Z2ggdGhlIHJvbGVzIGFyZSBjb3JyZWN0IGZvciB0aGUgdXNlciEgTG9vayBpbnRvIHRoaXMKICAgICAgICAgICAgICAgIC8vIGFuZCBzZWUgaWYgaXRzIGEgYnVnIGluIGNvdWNoZGIsIGZvciBub3csIGp1c3QgdXNpbmcgdGhlIHVzZXJuYW1lCiAgICAgICAgICAgICAgICAvLyBnaXZlbiB0byB0aGUgbG9naW4gZnVuY3Rpb24gaW5zdGVhZCwgc2luY2Ugd2Uga25vdyB0aGUgbG9naW4KICAgICAgICAgICAgICAgIC8vIHJlcXVlc3Qgd2FzIGFjY2VwdGVkLgogICAgICAgICAgICAgICAgLy91dGlscy51c2VyQ3R4ID0ge25hbWU6IHJlc3AubmFtZSwgcm9sZXM6IHJlc3Aucm9sZXN9OwogICAgICAgICAgICAgICAgdXRpbHMudXNlckN0eCA9IHtuYW1lOiB1c2VybmFtZSwgcm9sZXM6IHJlc3Aucm9sZXN9OwogICAgICAgICAgICAgICAgdXRpbHMuc2Vzc2lvbiA9IHt1c2VyQ3R4OiB1dGlscy51c2VyQ3R4fTsKICAgICAgICAgICAgICAgIGV4cG9ydHMuc2Vzc2lvbkNoYW5nZSh1dGlscy51c2VyQ3R4KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CiAgICAKICAgIAogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHVzZXIncyBzZXNzaW9uIGluZm9ybWF0aW9uLgogICAgICoKICAgICAqIEBuYW1lIGluZm8oY2FsbGJhY2spCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogICAgICogQGFwaSBwdWJsaWMKICAgICAqLwogICAgCiAgICBleHBvcnRzLmluZm8gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW5mbyBjYW5ub3QgYmUgY2FsbGVkIHNlcnZlci1zaWRlJyk7CiAgICAgICAgfQogICAgICAgIGRiLnJlcXVlc3QoewogICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgdXJsOiAiL19zZXNzaW9uIgogICAgICAgIH0sCiAgICAgICAgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgICAgICB2YXIgb2xkVXNlckN0eCA9IHV0aWxzLnVzZXJDdHg7CiAgICAgICAgICAgIHV0aWxzLnNlc3Npb24gPSByZXNwOwogICAgICAgICAgICB1dGlscy51c2VyQ3R4ID0gKHJlc3AgJiYgcmVzcC51c2VyQ3R4KSB8fCB7bmFtZTogbnVsbCwgcm9sZXM6IFtdfTsKICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgY2hlY2sgZm9yIGRpZmZlcmVuY2VzIGluIG1vcmUgdGhhbiBqdXN0IG5hbWU/CiAgICAgICAgICAgIGlmICghb2xkVXNlckN0eCB8fCBvbGRVc2VyQ3R4Lm5hbWUgIT09IHV0aWxzLnVzZXJDdHgubmFtZSkgewogICAgICAgICAgICAgICAgZXhwb3J0cy5zZXNzaW9uQ2hhbmdlKHV0aWxzLnVzZXJDdHgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfTsKICAgIAogICAgLyoqCiAgICAgKiBleHBvcnRzLnVzZXJEYiByZW1vdmVkCiAgICAgKi8KICAgIAogICAgCiAgICAvKioKICAgICAqIGV4cG9ydHMuc2lnbnVwICByZW1vdmVkCiAgICAgKi8KICAgIAp9KShzZXNzaW9uKTs="
        },
        "static/style.css": {
            "content_type": "text/css",
            "data": ""
        },
        "static/js/jquery.autogrow-textarea.js": {
            "content_type": "application/javascript",
            "data": "LyoqCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXozMDMvanF1ZXJ5LWdyYWItYmFnCiAqIE1JVCBsaWNlbmNlCiAqLwooZnVuY3Rpb24oJCkgewoKICAgIC8qCiAgICAgKiBBdXRvLWdyb3dpbmcgdGV4dGFyZWFzOyB0ZWNobmlxdWUgcmlwcGVkIGZyb20gRmFjZWJvb2sKICAgICAqLwogICAgJC5mbi5hdXRvZ3JvdyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAKICAgICAgICB0aGlzLmZpbHRlcigndGV4dGFyZWEnKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAKICAgICAgICAgICAgdmFyICR0aGlzICAgICAgID0gJCh0aGlzKSwKICAgICAgICAgICAgICAgIG1pbkhlaWdodCAgID0gJHRoaXMuaGVpZ2h0KCksCiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0ICA9ICR0aGlzLmNzcygnbGluZUhlaWdodCcpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHNoYWRvdyA9ICQoJzxkaXY+PC9kaXY+JykuY3NzKHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICdhYnNvbHV0ZScsCiAgICAgICAgICAgICAgICB0b3A6ICAgICAgICAtMTAwMDAsCiAgICAgICAgICAgICAgICBsZWZ0OiAgICAgICAtMTAwMDAsCiAgICAgICAgICAgICAgICB3aWR0aDogICAgICAkKHRoaXMpLndpZHRoKCkgLSBwYXJzZUludCgkdGhpcy5jc3MoJ3BhZGRpbmdMZWZ0JykpIC0gcGFyc2VJbnQoJHRoaXMuY3NzKCdwYWRkaW5nUmlnaHQnKSksCiAgICAgICAgICAgICAgICBmb250U2l6ZTogICAkdGhpcy5jc3MoJ2ZvbnRTaXplJyksCiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAkdGhpcy5jc3MoJ2ZvbnRGYW1pbHknKSwKICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICR0aGlzLmNzcygnbGluZUhlaWdodCcpLAogICAgICAgICAgICAgICAgcmVzaXplOiAgICAgJ25vbmUnCiAgICAgICAgICAgIH0pLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgCiAgICAgICAgICAgICAgICB2YXIgdGltZXMgPSBmdW5jdGlvbihzdHJpbmcsIG51bWJlcikgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCByID0gJyc7IGkgPCBudW1iZXI7IGkgKyspIHIgKz0gc3RyaW5nOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMudmFsdWUucmVwbGFjZSgvPC9nLCAnJmx0OycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xuJC8sICc8YnIvPiZuYnNwOycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cbi9nLCAnPGJyLz4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvIHsyLH0vZywgZnVuY3Rpb24oc3BhY2UpIHsgcmV0dXJuIHRpbWVzKCcmbmJzcDsnLCBzcGFjZS5sZW5ndGggLTEpICsgJyAnIH0pOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzaGFkb3cuaHRtbCh2YWwpOwogICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoJ2hlaWdodCcsIE1hdGgubWF4KHNoYWRvdy5oZWlnaHQoKSArIDIwLCBtaW5IZWlnaHQpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICQodGhpcykuY2hhbmdlKHVwZGF0ZSkua2V5dXAodXBkYXRlKS5rZXlkb3duKHVwZGF0ZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICB1cGRhdGUuYXBwbHkodGhpcyk7CiAgICAgICAgICAgIAogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIAogICAgfQogICAgCn0pKGpRdWVyeSk7"
        },
        "static/js/jquery.jqcloud.min.js": {
            "content_type": "application/javascript",
            "data": "LyohCiAqIGpRQ2xvdWQgUGx1Z2luIGZvciBqUXVlcnkKICoKICogVmVyc2lvbiAwLjIuNAogKgogKiBDb3B5cmlnaHQgMjAxMSwgTHVjYSBPbmdhcm8KICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKgogKiBEYXRlOiBTdW4gQXVnIDE0IDAwOjA5OjA3ICswMjAwIDIwMTEKICovCihmdW5jdGlvbihhKXthLmZuLmpRQ2xvdWQ9ZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzLGU9ZC5hdHRyKCJpZCIpLGY9e3dpZHRoOmQud2lkdGgoKSxoZWlnaHQ6ZC5oZWlnaHQoKSxjZW50ZXI6e3g6ZC53aWR0aCgpLzIseTpkLmhlaWdodCgpLzJ9LGRlbGF5ZWRNb2RlOmIubGVuZ3RoPjUwLHJhbmRvbUNsYXNzZXM6MH07dHlwZW9mIGM9PSJmdW5jdGlvbiImJihjPXtjYWxsYmFjazpjfSksYz1hLmV4dGVuZChmLGN8fHt9KSxkLmFkZENsYXNzKCJqcWNsb3VkIik7dmFyIGc9ZnVuY3Rpb24oKXt2YXIgZj1mdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEsYil7aWYoTWF0aC5hYnMoMiphLm9mZnNldExlZnQrYS5vZmZzZXRXaWR0aC0yKmIub2Zmc2V0TGVmdC1iLm9mZnNldFdpZHRoKTxhLm9mZnNldFdpZHRoK2Iub2Zmc2V0V2lkdGgmJk1hdGguYWJzKDIqYS5vZmZzZXRUb3ArYS5vZmZzZXRIZWlnaHQtMipiLm9mZnNldFRvcC1iLm9mZnNldEhlaWdodCk8YS5vZmZzZXRIZWlnaHQrYi5vZmZzZXRIZWlnaHQpcmV0dXJuITA7cmV0dXJuITF9LGQ9MDtmb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKWlmKGMoYSxiW2RdKSlyZXR1cm4hMDtyZXR1cm4hMX07Zm9yKGk9MDtpPGIubGVuZ3RoO2krKyliW2ldLndlaWdodD1wYXJzZUZsb2F0KGJbaV0ud2VpZ2h0LDEwKTtiLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS53ZWlnaHQ8Yi53ZWlnaHQ/MTphLndlaWdodD5iLndlaWdodD8tMTowfSk7dmFyIGc9MixoPVtdLGo9Yy53aWR0aC9jLmhlaWdodCxrPWZ1bmN0aW9uKGksayl7dmFyIGw9ZSsiX3dvcmRfIitpLG09IiMiK2wsbj10eXBlb2YgYy5yYW5kb21DbGFzc2VzPT0ibnVtYmVyIiYmYy5yYW5kb21DbGFzc2VzPjA/IiByIitNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSpjLnJhbmRvbUNsYXNzZXMpOmEuaXNBcnJheShjLnJhbmRvbUNsYXNzZXMpJiZjLnJhbmRvbUNsYXNzZXMubGVuZ3RoPjA/IiAiK2MucmFuZG9tQ2xhc3Nlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqYy5yYW5kb21DbGFzc2VzLmxlbmd0aCldOiIiLG89Ni4yOCpNYXRoLnJhbmRvbSgpLHA9MCxxPU1hdGgucm91bmQoKGsud2VpZ2h0LWJbYi5sZW5ndGgtMV0ud2VpZ2h0KS8oYlswXS53ZWlnaHQtYltiLmxlbmd0aC0xXS53ZWlnaHQpKjkpKzEscj1rLnVybCE9PXVuZGVmaW5lZD8iPGEgaHJlZj0nIitlbmNvZGVVUkkoay51cmwpLnJlcGxhY2UoLycvZywiJTI3IikrIic+IitrLnRleHQrIjwvYT4iOmsudGV4dDtkLmFwcGVuZCgiPHNwYW4gaWQ9JyIrbCsiJyBjbGFzcz0ndyIrcStuKyInIHRpdGxlPSciKyhrLnRpdGxlfHwiIikrIic+IityKyI8L3NwYW4+Iik7dmFyIHM9YShtLGQpLHQ9cy53aWR0aCgpLHU9cy5oZWlnaHQoKSx2PWMuY2VudGVyLngtdC8yLHc9Yy5jZW50ZXIueS11LzIseD1zWzBdLnN0eWxlO3gucG9zaXRpb249ImFic29sdXRlIix4LmxlZnQ9disicHgiLHgudG9wPXcrInB4Ijt3aGlsZShmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGwpLGgpKXArPWcsbys9KGklMj09PTA/MTotMSkqZyx2PWMuY2VudGVyLngtdC8yK3AqTWF0aC5jb3Mobykqaix3PWMuY2VudGVyLnkrcCpNYXRoLnNpbihvKS11LzIseC5sZWZ0PXYrInB4Iix4LnRvcD13KyJweCI7aC5wdXNoKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGwpKX0sbD1mdW5jdGlvbihhKXthPWF8fDAsYTxiLmxlbmd0aD8oayhhLGJbYV0pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsKGErMSl9LDEwKSk6dHlwZW9mIGMuY2FsbGJhY2s9PSJmdW5jdGlvbiImJmMuY2FsbGJhY2suY2FsbCh0aGlzKX07Yy5kZWxheWVkTW9kZXx8Yy5kZWxheWVkX21vZGU/bCgpOihhLmVhY2goYixrKSx0eXBlb2YgYy5jYWxsYmFjaz09ImZ1bmN0aW9uIiYmYy5jYWxsYmFjay5jYWxsKHRoaXMpKX07c2V0VGltZW91dChmdW5jdGlvbigpe2coKX0sMTApO3JldHVybiB0aGlzfX0pKGpRdWVyeSk="
        },
        "static/js/jquery.simplemodal-1.4.1.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "static/js/jquery.sortlist.js": {
            "content_type": "application/javascript",
            "data": "LyoqCiAqIGFkYXB0ZWQgYnkgU3RlcGhlbiBBLiBCdXR0ZXJmaWxsCiAqIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExMzQ5NzYvaG93LW1heS1pLXNvcnQtYS1saXN0LWFscGhhYmV0aWNhbGx5LXVzaW5nLWpxdWVyeQogKi8KKGZ1bmN0aW9uKCQpIHsKCiAgICAkLmZuLnNvcnRsaXN0ID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIHRoaXMuZmlsdGVyKCd1bCxvbCcpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciAkbGlzdCA9ICQodGhpcyk7CiAgICAgICAgICAgIHZhciAkaXRlbXMgPSAkbGlzdC5jaGlsZHJlbignbGknKQogICAgICAgICAgICB2YXIgaXRlbXMgPSAkaXRlbXMuZ2V0KCk7ICAvL3BsYWluIGFycmF5CiAgICAgICAgICAgIGl0ZW1zLnNvcnQoIGZ1bmN0aW9uKGEsYikgewogICAgICAgICAgICAgICAgdmFyIGNvbXBBID0gJC50cmltKCQoYSkudGV4dCgpLnRvVXBwZXJDYXNlKCkpOwogICAgICAgICAgICAgICAgdmFyIGNvbXBCID0gJC50cmltKCQoYikudGV4dCgpLnRvVXBwZXJDYXNlKCkpOwogICAgICAgICAgICAgICAgcmV0dXJuIChjb21wQSA8IGNvbXBCKSA/IC0xIDogKGNvbXBBID4gY29tcEIpID8gMSA6IDA7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkLmVhY2goaXRlbXMsIGZ1bmN0aW9uKGlkeCwgaXRlbSkgewogICAgICAgICAgICAgICAgLy92YXIgJGl0ZW0gPSAkKGl0ZW0pOwogICAgICAgICAgICAgICAgLy8kaXRlbS5oaWRlKDIwMCwgZnVuY3Rpb24oKXsgJGxpc3QuYXBwZW5kKCRpdGVtKTsgJGl0ZW0uc2hvdygyMDApOyB9KTsKICAgICAgICAgICAgICAgICRsaXN0LmFwcGVuZChpdGVtKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9Cn0pKGpRdWVyeSk7"
        },
        "static/js/jquery.timeago.js": {
            "content_type": "application/javascript",
            "data": "LyoKICogdGltZWFnbzogYSBqUXVlcnkgcGx1Z2luLCB2ZXJzaW9uOiAwLjkuMyAoMjAxMS0wMS0yMSkKICogQHJlcXVpcmVzIGpRdWVyeSB2MS4yLjMgb3IgbGF0ZXIKICoKICogVGltZWFnbyBpcyBhIGpRdWVyeSBwbHVnaW4gdGhhdCBtYWtlcyBpdCBlYXN5IHRvIHN1cHBvcnQgYXV0b21hdGljYWxseQogKiB1cGRhdGluZyBmdXp6eSB0aW1lc3RhbXBzIChlLmcuICI0IG1pbnV0ZXMgYWdvIiBvciAiYWJvdXQgMSBkYXkgYWdvIikuCiAqCiAqIEZvciB1c2FnZSBhbmQgZXhhbXBsZXMsIHZpc2l0OgogKiBodHRwOi8vdGltZWFnby55YXJwLmNvbS8KICoKICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVDoKICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKICoKICogQ29weXJpZ2h0IChjKSAyMDA4LTIwMTEsIFJ5YW4gTWNHZWFyeSAocnlhbm9uamF2YXNjcmlwdCAtW2F0XS0gbWNnZWFyeSBbKmRvdCpdIG9yZykKICovCihmdW5jdGlvbigkKSB7CiAgJC50aW1lYWdvID0gZnVuY3Rpb24odGltZXN0YW1wKSB7CiAgICBpZiAodGltZXN0YW1wIGluc3RhbmNlb2YgRGF0ZSkgewogICAgICByZXR1cm4gaW5Xb3Jkcyh0aW1lc3RhbXApOwogICAgfSBlbHNlIGlmICh0eXBlb2YgdGltZXN0YW1wID09PSAic3RyaW5nIikgewogICAgICByZXR1cm4gaW5Xb3JkcygkLnRpbWVhZ28ucGFyc2UodGltZXN0YW1wKSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gaW5Xb3JkcygkLnRpbWVhZ28uZGF0ZXRpbWUodGltZXN0YW1wKSk7CiAgICB9CiAgfTsKICB2YXIgJHQgPSAkLnRpbWVhZ287CgogICQuZXh0ZW5kKCQudGltZWFnbywgewogICAgc2V0dGluZ3M6IHsKICAgICAgcmVmcmVzaE1pbGxpczogNjAwMDAsCiAgICAgIGFsbG93RnV0dXJlOiBmYWxzZSwKICAgICAgc3RyaW5nczogewogICAgICAgIHByZWZpeEFnbzogbnVsbCwKICAgICAgICBwcmVmaXhGcm9tTm93OiBudWxsLAogICAgICAgIHN1ZmZpeEFnbzogImFnbyIsCiAgICAgICAgc3VmZml4RnJvbU5vdzogImZyb20gbm93IiwKICAgICAgICBzZWNvbmRzOiAibGVzcyB0aGFuIGEgbWludXRlIiwKICAgICAgICBtaW51dGU6ICJhYm91dCBhIG1pbnV0ZSIsCiAgICAgICAgbWludXRlczogIiVkIG1pbnV0ZXMiLAogICAgICAgIGhvdXI6ICJhYm91dCBhbiBob3VyIiwKICAgICAgICBob3VyczogImFib3V0ICVkIGhvdXJzIiwKICAgICAgICBkYXk6ICJhIGRheSIsCiAgICAgICAgZGF5czogIiVkIGRheXMiLAogICAgICAgIG1vbnRoOiAiYWJvdXQgYSBtb250aCIsCiAgICAgICAgbW9udGhzOiAiJWQgbW9udGhzIiwKICAgICAgICB5ZWFyOiAiYWJvdXQgYSB5ZWFyIiwKICAgICAgICB5ZWFyczogIiVkIHllYXJzIiwKICAgICAgICBudW1iZXJzOiBbXQogICAgICB9CiAgICB9LAogICAgaW5Xb3JkczogZnVuY3Rpb24oZGlzdGFuY2VNaWxsaXMpIHsKICAgICAgdmFyICRsID0gdGhpcy5zZXR0aW5ncy5zdHJpbmdzOwogICAgICB2YXIgcHJlZml4ID0gJGwucHJlZml4QWdvOwogICAgICB2YXIgc3VmZml4ID0gJGwuc3VmZml4QWdvOwogICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd0Z1dHVyZSkgewogICAgICAgIGlmIChkaXN0YW5jZU1pbGxpcyA8IDApIHsKICAgICAgICAgIHByZWZpeCA9ICRsLnByZWZpeEZyb21Ob3c7CiAgICAgICAgICBzdWZmaXggPSAkbC5zdWZmaXhGcm9tTm93OwogICAgICAgIH0KICAgICAgICBkaXN0YW5jZU1pbGxpcyA9IE1hdGguYWJzKGRpc3RhbmNlTWlsbGlzKTsKICAgICAgfQoKICAgICAgdmFyIHNlY29uZHMgPSBkaXN0YW5jZU1pbGxpcyAvIDEwMDA7CiAgICAgIHZhciBtaW51dGVzID0gc2Vjb25kcyAvIDYwOwogICAgICB2YXIgaG91cnMgPSBtaW51dGVzIC8gNjA7CiAgICAgIHZhciBkYXlzID0gaG91cnMgLyAyNDsKICAgICAgdmFyIHllYXJzID0gZGF5cyAvIDM2NTsKCiAgICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGUoc3RyaW5nT3JGdW5jdGlvbiwgbnVtYmVyKSB7CiAgICAgICAgdmFyIHN0cmluZyA9ICQuaXNGdW5jdGlvbihzdHJpbmdPckZ1bmN0aW9uKSA/IHN0cmluZ09yRnVuY3Rpb24obnVtYmVyLCBkaXN0YW5jZU1pbGxpcykgOiBzdHJpbmdPckZ1bmN0aW9uOwogICAgICAgIHZhciB2YWx1ZSA9ICgkbC5udW1iZXJzICYmICRsLm51bWJlcnNbbnVtYmVyXSkgfHwgbnVtYmVyOwogICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvJWQvaSwgdmFsdWUpOwogICAgICB9CgogICAgICB2YXIgd29yZHMgPSBzZWNvbmRzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5zZWNvbmRzLCBNYXRoLnJvdW5kKHNlY29uZHMpKSB8fAogICAgICAgIHNlY29uZHMgPCA5MCAmJiBzdWJzdGl0dXRlKCRsLm1pbnV0ZSwgMSkgfHwKICAgICAgICBtaW51dGVzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5taW51dGVzLCBNYXRoLnJvdW5kKG1pbnV0ZXMpKSB8fAogICAgICAgIG1pbnV0ZXMgPCA5MCAmJiBzdWJzdGl0dXRlKCRsLmhvdXIsIDEpIHx8CiAgICAgICAgaG91cnMgPCAyNCAmJiBzdWJzdGl0dXRlKCRsLmhvdXJzLCBNYXRoLnJvdW5kKGhvdXJzKSkgfHwKICAgICAgICBob3VycyA8IDQ4ICYmIHN1YnN0aXR1dGUoJGwuZGF5LCAxKSB8fAogICAgICAgIGRheXMgPCAzMCAmJiBzdWJzdGl0dXRlKCRsLmRheXMsIE1hdGguZmxvb3IoZGF5cykpIHx8CiAgICAgICAgZGF5cyA8IDYwICYmIHN1YnN0aXR1dGUoJGwubW9udGgsIDEpIHx8CiAgICAgICAgZGF5cyA8IDM2NSAmJiBzdWJzdGl0dXRlKCRsLm1vbnRocywgTWF0aC5mbG9vcihkYXlzIC8gMzApKSB8fAogICAgICAgIHllYXJzIDwgMiAmJiBzdWJzdGl0dXRlKCRsLnllYXIsIDEpIHx8CiAgICAgICAgc3Vic3RpdHV0ZSgkbC55ZWFycywgTWF0aC5mbG9vcih5ZWFycykpOwoKICAgICAgcmV0dXJuICQudHJpbShbcHJlZml4LCB3b3Jkcywgc3VmZml4XS5qb2luKCIgIikpOwogICAgfSwKICAgIHBhcnNlOiBmdW5jdGlvbihpc284NjAxKSB7CiAgICAgIHZhciBzID0gJC50cmltKGlzbzg2MDEpOwogICAgICBzID0gcy5yZXBsYWNlKC9cLlxkXGRcZCsvLCIiKTsgLy8gcmVtb3ZlIG1pbGxpc2Vjb25kcwogICAgICBzID0gcy5yZXBsYWNlKC8tLywiLyIpLnJlcGxhY2UoLy0vLCIvIik7CiAgICAgIHMgPSBzLnJlcGxhY2UoL1QvLCIgIikucmVwbGFjZSgvWi8sIiBVVEMiKTsKICAgICAgcyA9IHMucmVwbGFjZSgvKFtcK1wtXVxkXGQpXDo/KFxkXGQpLywiICQxJDIiKTsgLy8gLTA0OjAwIC0+IC0wNDAwCiAgICAgIHJldHVybiBuZXcgRGF0ZShzKTsKICAgIH0sCiAgICBkYXRldGltZTogZnVuY3Rpb24oZWxlbSkgewogICAgICAvLyBqUXVlcnkncyBgaXMoKWAgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBIVE1MNSBpbiBJRQogICAgICB2YXIgaXNUaW1lID0gJChlbGVtKS5nZXQoMCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAidGltZSI7IC8vICQoZWxlbSkuaXMoInRpbWUiKTsKICAgICAgdmFyIGlzbzg2MDEgPSBpc1RpbWUgPyAkKGVsZW0pLmF0dHIoImRhdGV0aW1lIikgOiAkKGVsZW0pLmF0dHIoInRpdGxlIik7CiAgICAgIHJldHVybiAkdC5wYXJzZShpc284NjAxKTsKICAgIH0KICB9KTsKCiAgJC5mbi50aW1lYWdvID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBzZWxmLmVhY2gocmVmcmVzaCk7CgogICAgdmFyICRzID0gJHQuc2V0dGluZ3M7CiAgICBpZiAoJHMucmVmcmVzaE1pbGxpcyA+IDApIHsKICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7IHNlbGYuZWFjaChyZWZyZXNoKTsgfSwgJHMucmVmcmVzaE1pbGxpcyk7CiAgICB9CiAgICByZXR1cm4gc2VsZjsKICB9OwoKICBmdW5jdGlvbiByZWZyZXNoKCkgewogICAgdmFyIGRhdGEgPSBwcmVwYXJlRGF0YSh0aGlzKTsKICAgIGlmICghaXNOYU4oZGF0YS5kYXRldGltZSkpIHsKICAgICAgJCh0aGlzKS50ZXh0KGluV29yZHMoZGF0YS5kYXRldGltZSkpOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfQoKICBmdW5jdGlvbiBwcmVwYXJlRGF0YShlbGVtZW50KSB7CiAgICBlbGVtZW50ID0gJChlbGVtZW50KTsKICAgIGlmICghZWxlbWVudC5kYXRhKCJ0aW1lYWdvIikpIHsKICAgICAgZWxlbWVudC5kYXRhKCJ0aW1lYWdvIiwgeyBkYXRldGltZTogJHQuZGF0ZXRpbWUoZWxlbWVudCkgfSk7CiAgICAgIHZhciB0ZXh0ID0gJC50cmltKGVsZW1lbnQudGV4dCgpKTsKICAgICAgaWYgKHRleHQubGVuZ3RoID4gMCkgewogICAgICAgIGVsZW1lbnQuYXR0cigidGl0bGUiLCB0ZXh0KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGVsZW1lbnQuZGF0YSgidGltZWFnbyIpOwogIH0KCiAgZnVuY3Rpb24gaW5Xb3JkcyhkYXRlKSB7CiAgICByZXR1cm4gJHQuaW5Xb3JkcyhkaXN0YW5jZShkYXRlKSk7CiAgfQoKICBmdW5jdGlvbiBkaXN0YW5jZShkYXRlKSB7CiAgICByZXR1cm4gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gZGF0ZS5nZXRUaW1lKCkpOwogIH0KCiAgLy8gZml4IGZvciBJRTYgc3Vja2FnZQogIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImFiYnIiKTsKICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0aW1lIik7Cn0oalF1ZXJ5KSk7"
        },
        "static/js/json2.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "bkmrklt/nrama2.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "static/img/nrama_demo.png": {
            "content_type": "image/png",
            "data": ""
        },
        "xdm/easyXDM.debug.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/jquery.min.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "static/js/jquery-1.5.2.min.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/xdm-all.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "xdm/xdm-all.js.old": {
            "content_type": "application/octet-stream",
            "data": ""
        },
        "static/js/jquery-ui.min.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "bkmrklt/lib.min.js": {
            "content_type": "application/javascript",
            "data": ""
        },
        "kanso.js": {
            "content_type": "application/javascript",
            "data": "LypnbG9iYWwgd2luZG93OiBmYWxzZSwgJDogZmFsc2UsIHBhZ2VUcmFja2VyOiBmYWxzZSwga2Fuc286IHRydWUgKi8KCi8qKgogKiBib290c3RyYXBwZWQga2Fuc28gY29kZSwKICogcmVxdWlyZWQgYmVmb3JlIHRoZSBjb21tb25qcyBlbnZpcm9ubWVudCBpcyBhdmFpbGFibGUuCiAqLwoKKGZ1bmN0aW9uIChleHBvcnRzKSB7CgogICAgZXhwb3J0cy5tb2R1bGVDYWNoZSA9IHt9OwoKICAgIGV4cG9ydHMubm9ybWFsaXplUGF0aCA9IGZ1bmN0aW9uIChwKSB7CiAgICAgICAgdmFyIHBhdGggPSBbXTsKICAgICAgICB2YXIgcGFydHMgPSBwLnNwbGl0KCcvJyk7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBpZiAocGFydHNbaV0gPT09ICcuLicpIHsKICAgICAgICAgICAgICAgIHBhdGgucG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAocGFydHNbaV0gIT09ICcuJykgewogICAgICAgICAgICAgICAgcGF0aC5wdXNoKHBhcnRzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcGF0aC5qb2luKCcvJyk7CiAgICB9OwoKICAgIGV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uIChwKSB7CiAgICAgICAgaWYgKHAgPT09ICcvJykgewogICAgICAgICAgICByZXR1cm4gcDsKICAgICAgICB9CiAgICAgICAgdmFyIHBhcnRzID0gcC5zcGxpdCgnLycpOwogICAgICAgIHBhcnRzLnBvcCgpOwogICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDEgJiYgcGFydHNbMF0gPT09ICcnKSB7CiAgICAgICAgICAgIHJldHVybiAnLyc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7CiAgICB9OwoKICAgIGV4cG9ydHMuY3JlYXRlUmVxdWlyZSA9IGZ1bmN0aW9uIChjdXJyZW50KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgICAgICAgICAgdmFyIHBhdGg7CiAgICAgICAgICAgIGlmICh0YXJnZXQuY2hhckF0KDApID09PSAnLicpIHsKICAgICAgICAgICAgICAgIHZhciBkaXIgPSBleHBvcnRzLmRpcm5hbWUoY3VycmVudCk7CiAgICAgICAgICAgICAgICBwYXRoID0gZXhwb3J0cy5ub3JtYWxpemVQYXRoKGRpciArICcvJyArIHRhcmdldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBwYXRoID0gZXhwb3J0cy5ub3JtYWxpemVQYXRoKHRhcmdldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG0gPSBrYW5zby5tb2R1bGVDYWNoZVtwYXRoXTsKICAgICAgICAgICAgaWYgKCFtKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1Y2ggbW9kdWxlOiAnICsgcGF0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFtLmxvYWRlZCkgewogICAgICAgICAgICAgICAgbS5leHBvcnRzID0ge307CiAgICAgICAgICAgICAgICAvLyBzZXQgdGhpcyB0byB0cnVlICpiZWZvcmUqIGNhbGxpbmcgbS5sb2FkIHNvIGNpcmN1bGFyCiAgICAgICAgICAgICAgICAvLyByZXF1aXJlcyBkb24ndCBibG93IHRoZSBjYWxsIHN0YWNrCiAgICAgICAgICAgICAgICBtLmxvYWRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBtLmxvYWQobSwgbS5leHBvcnRzLCBleHBvcnRzLmNyZWF0ZVJlcXVpcmUocGF0aCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBtLmV4cG9ydHM7CiAgICAgICAgfTsKICAgIH07CgogICAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAndW5kZWZpbmVkJykgewogICAgICAgIC8vIG1ha2UgcmVxdWlyZSBhdmFpbGFibGUgZ2xvYmFsbHksIHVubGVzcyBhbHJlYWR5IGluIGEgY29tbW9uanMKICAgICAgICAvLyBlbnZpcm9ubWVudAogICAgICAgIHRoaXMucmVxdWlyZSA9IGV4cG9ydHMuY3JlYXRlUmVxdWlyZSgnJyk7CiAgICB9CgogICAgZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBrYW5zbyA9IHJlcXVpcmUoJ2thbnNvL2NvcmUnKTsKICAgICAgICBmb3IgKHZhciBrIGluIGthbnNvKSB7CiAgICAgICAgICAgIGlmIChrYW5zby5oYXNPd25Qcm9wZXJ0eShrKSkgewogICAgICAgICAgICAgICAgZXhwb3J0c1trXSA9IGthbnNvW2tdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGthbnNvLmluaXQoKTsKICAgIH07Cgp9KCh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5rYW5zbyA9IHt9OiBtb2R1bGUuZXhwb3J0cykpOwoKCi8qKgogKiBsaWIvYXBwLmpzIGFkZHMgdGhlIHdyYXBwZWQgYW5kIGNvbmNhdGVuYXRlZCBsaXN0IG9mIGNvbW1vbmpzIG1vZHVsZXMgYWZ0ZXIKICogdGhpcyBjb2RlLgogKi8KCgovKioqKioqKioqKiBsaWIvYXBwICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL2FwcCJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogVmFsdWVzIGV4cG9ydGVkIGZyb20gdGhpcyBtb2R1bGUgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHVzZWQgdG8gZ2VuZXJhdGUKICogdGhlIGRlc2lnbiBkb2MgcHVzaGVkIHRvIENvdWNoREIuCiAqLwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgICB0eXBlczogcmVxdWlyZSgnLi90eXBlcycpLAogICAgc2hvd3M6IHJlcXVpcmUoJy4vc2hvd3MnKSwKICAgIGxpc3RzOiByZXF1aXJlKCcuL2xpc3RzJyksCiAgICB2aWV3czogcmVxdWlyZSgnLi92aWV3cycpLAogICAgdXBkYXRlczogcmVxdWlyZSgnLi91cGRhdGVzJyksCiAgICBmaWx0ZXJzOiByZXF1aXJlKCcuL2ZpbHRlcnMnKSwKICAgIHJld3JpdGVzOiByZXF1aXJlKCcuL3Jld3JpdGVzJyksCiAgICB2YWxpZGF0ZV9kb2NfdXBkYXRlOiByZXF1aXJlKCcuL3ZhbGlkYXRlJyksCiAgICBldmVudHM6IHJlcXVpcmUoJy4vZXZlbnRzJykKfTsKCgoKCn0pfTsKCi8qKioqKioqKioqIGxpYi9iaWJ0ZXggKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJsaWIvYmlidGV4Il0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qKgogKiBNb2RpZmllZCBmcm9tCiAqIGh0dHA6Ly9iaWJ0ZXgtanMuZ29vZ2xlY29kZS5jb20vc3ZuL3RydW5rL3NyYy9iaWJ0ZXhfanMuanMKICogTUlUIExpY2Vuc2UKICogQ29weXJpZ2h0IChjKSAyMDEwIGhlbnJpay5tdWVoZQogKgogKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KICogCiAqLwoKLy8gSXNzdWVzOgovLyAgbm8gY29tbWVudCBoYW5kbGluZyB3aXRoaW4gc3RyaW5ncwovLyAgbm8gc3RyaW5nIGNvbmNhdGVuYXRpb24KLy8gIG5vIHZhcmlhYmxlIHZhbHVlcyB5ZXQKCi8vIEdyYW1tYXIgaW1wbGVtZW50ZWQgaGVyZToKLy8gIGJpYnRleCAtPiAoc3RyaW5nIHwgcHJlYW1ibGUgfCBjb21tZW50IHwgZW50cnkpKjsKLy8gIHN0cmluZyAtPiAnQFNUUklORycgJ3snIGtleV9lcXVhbHNfdmFsdWUgJ30nOwovLyAgcHJlYW1ibGUgLT4gJ0BQUkVBTUJMRScgJ3snIHZhbHVlICd9JzsKLy8gIGNvbW1lbnQgLT4gJ0BDT01NRU5UJyAneycgdmFsdWUgJ30nOwovLyAgZW50cnkgLT4gJ0AnIGtleSAneycga2V5ICcsJyBrZXlfdmFsdWVfbGlzdCAnfSc7Ci8vICBrZXlfdmFsdWVfbGlzdCAtPiBrZXlfZXF1YWxzX3ZhbHVlICgnLCcga2V5X2VxdWFsc192YWx1ZSkqOwovLyAga2V5X2VxdWFsc192YWx1ZSAtPiBrZXkgJz0nIHZhbHVlOwovLyAgdmFsdWUgLT4gdmFsdWVfcXVvdGVzIHwgdmFsdWVfYnJhY2VzIHwga2V5OwovLyAgdmFsdWVfcXVvdGVzIC0+ICciJyAuKj8gJyInOyAvLyBub3QgcXVpdGUKLy8gIHZhbHVlX2JyYWNlcyAtPiAneycgLio/ICciJzsgLy8gbm90IHF1aXRlCmZ1bmN0aW9uIEJpYnRleFBhcnNlcigpIHsKICB0aGlzLnBvcyA9IDA7CiAgdGhpcy5pbnB1dCA9ICIiOwogIAogIHRoaXMuZW50cmllcyA9IHt9OwogIHRoaXMuc3RyaW5ncyA9IHsKICAgICAgSkFOOiAiSmFudWFyeSIsCiAgICAgIEZFQjogIkZlYnJ1YXJ5IiwKICAgICAgTUFSOiAiTWFyY2giLCAgICAgIAogICAgICBBUFI6ICJBcHJpbCIsCiAgICAgIE1BWTogIk1heSIsCiAgICAgIEpVTjogIkp1bmUiLAogICAgICBKVUw6ICJKdWx5IiwKICAgICAgQVVHOiAiQXVndXN0IiwKICAgICAgU0VQOiAiU2VwdGVtYmVyIiwKICAgICAgT0NUOiAiT2N0b2JlciIsCiAgICAgIE5PVjogIk5vdmVtYmVyIiwKICAgICAgREVDOiAiRGVjZW1iZXIiCiAgfTsKICB0aGlzLmN1cnJlbnRLZXkgPSAiIjsKICB0aGlzLmN1cnJlbnRFbnRyeSA9ICIiOwogIAoKICB0aGlzLnNldElucHV0ID0gZnVuY3Rpb24odCkgewogICAgdGhpcy5pbnB1dCA9IHQ7CiAgfQogIAogIHRoaXMuZ2V0RW50cmllcyA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5lbnRyaWVzOwogIH0KCiAgdGhpcy5pc1doaXRlc3BhY2UgPSBmdW5jdGlvbihzKSB7CiAgICByZXR1cm4gKHMgPT0gJyAnIHx8IHMgPT0gJ1xyJyB8fCBzID09ICdcdCcgfHwgcyA9PSAnXG4nKTsKICB9CgogIHRoaXMubWF0Y2ggPSBmdW5jdGlvbihzKSB7CiAgICB0aGlzLnNraXBXaGl0ZXNwYWNlKCk7CiAgICBpZiAodGhpcy5pbnB1dC5zdWJzdHJpbmcodGhpcy5wb3MsIHRoaXMucG9zK3MubGVuZ3RoKSA9PSBzKSB7CiAgICAgIHRoaXMucG9zICs9IHMubGVuZ3RoOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgIlRva2VuIG1pc21hdGNoLCBleHBlY3RlZCAiICsgcyArICIsIGZvdW5kICIgKyB0aGlzLmlucHV0LnN1YnN0cmluZyh0aGlzLnBvcyk7CiAgICB9CiAgICB0aGlzLnNraXBXaGl0ZXNwYWNlKCk7CiAgfQoKICB0aGlzLnRyeU1hdGNoID0gZnVuY3Rpb24ocykgewogICAgdGhpcy5za2lwV2hpdGVzcGFjZSgpOwogICAgaWYgKHRoaXMuaW5wdXQuc3Vic3RyaW5nKHRoaXMucG9zLCB0aGlzLnBvcytzLmxlbmd0aCkgPT0gcykgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHRoaXMuc2tpcFdoaXRlc3BhY2UoKTsKICB9CgogIHRoaXMuc2tpcFdoaXRlc3BhY2UgPSBmdW5jdGlvbigpIHsKICAgIHdoaWxlICh0aGlzLmlzV2hpdGVzcGFjZSh0aGlzLmlucHV0W3RoaXMucG9zXSkpIHsKICAgICAgdGhpcy5wb3MrKzsKICAgIH0KICAgIGlmICh0aGlzLmlucHV0W3RoaXMucG9zXSA9PSAiJSIpIHsKICAgICAgd2hpbGUodGhpcy5pbnB1dFt0aGlzLnBvc10gIT0gIlxuIikgewogICAgICAgIHRoaXMucG9zKys7CiAgICAgIH0KICAgICAgdGhpcy5za2lwV2hpdGVzcGFjZSgpOwogICAgfQogIH0KCiAgdGhpcy52YWx1ZV9icmFjZXMgPSBmdW5jdGlvbigpIHsKICAgIHZhciBicmFjZWNvdW50ID0gMDsKICAgIHRoaXMubWF0Y2goInsiKTsKICAgIHZhciBzdGFydCA9IHRoaXMucG9zOwogICAgd2hpbGUodHJ1ZSkgewogICAgICBpZiAodGhpcy5pbnB1dFt0aGlzLnBvc10gPT0gJ30nICYmIHRoaXMuaW5wdXRbdGhpcy5wb3MtMV0gIT0gJ1xcJykgewogICAgICAgIGlmIChicmFjZWNvdW50ID4gMCkgewogICAgICAgICAgYnJhY2Vjb3VudC0tOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgZW5kID0gdGhpcy5wb3M7CiAgICAgICAgICB0aGlzLm1hdGNoKCJ9Iik7CiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHRoaXMuaW5wdXRbdGhpcy5wb3NdID09ICd7JykgewogICAgICAgIGJyYWNlY291bnQrKzsKICAgICAgfSBlbHNlIGlmICh0aGlzLnBvcyA9PSB0aGlzLmlucHV0Lmxlbmd0aC0xKSB7CiAgICAgICAgdGhyb3cgIlVudGVybWluYXRlZCB2YWx1ZSI7CiAgICAgIH0KICAgICAgdGhpcy5wb3MrKzsKICAgIH0KICB9CgogIHRoaXMudmFsdWVfcXVvdGVzID0gZnVuY3Rpb24oKSB7CiAgICB0aGlzLm1hdGNoKCciJyk7CiAgICB2YXIgc3RhcnQgPSB0aGlzLnBvczsKICAgIHdoaWxlKHRydWUpIHsKICAgICAgaWYgKHRoaXMuaW5wdXRbdGhpcy5wb3NdID09ICciJyAmJiB0aGlzLmlucHV0W3RoaXMucG9zLTFdICE9ICdcXCcpIHsKICAgICAgICAgIHZhciBlbmQgPSB0aGlzLnBvczsKICAgICAgICAgIHRoaXMubWF0Y2goJyInKTsKICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0LnN1YnN0cmluZyhzdGFydCwgZW5kKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLnBvcyA9PSB0aGlzLmlucHV0Lmxlbmd0aC0xKSB7CiAgICAgICAgdGhyb3cgIlVudGVybWluYXRlZCB2YWx1ZToiICsgdGhpcy5pbnB1dC5zdWJzdHJpbmcoc3RhcnQpOwogICAgICB9CiAgICAgIHRoaXMucG9zKys7CiAgICB9CiAgfQogIAogIHRoaXMuc2luZ2xlX3ZhbHVlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc3RhcnQgPSB0aGlzLnBvczsKICAgIGlmICh0aGlzLnRyeU1hdGNoKCJ7IikpIHsKICAgICAgcmV0dXJuIHRoaXMudmFsdWVfYnJhY2VzKCk7CiAgICB9IGVsc2UgaWYgKHRoaXMudHJ5TWF0Y2goJyInKSkgewogICAgICByZXR1cm4gdGhpcy52YWx1ZV9xdW90ZXMoKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBrID0gdGhpcy5rZXkoKTsKICAgICAgaWYgKHRoaXMuc3RyaW5nc1trLnRvVXBwZXJDYXNlKCldKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nc1trXTsKICAgICAgfSBlbHNlIGlmIChrLm1hdGNoKCJeWzAtOV0rJCIpKSB7CiAgICAgICAgcmV0dXJuIGs7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgIlZhbHVlIGV4cGVjdGVkOiIgKyB0aGlzLmlucHV0LnN1YnN0cmluZyhzdGFydCk7CiAgICAgIH0KICAgIH0KICB9CiAgCiAgdGhpcy52YWx1ZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHZhbHVlcyA9IFtdOwogICAgdmFsdWVzLnB1c2godGhpcy5zaW5nbGVfdmFsdWUoKSk7CiAgICB3aGlsZSAodGhpcy50cnlNYXRjaCgiIyIpKSB7CiAgICAgIHRoaXMubWF0Y2goIiMiKTsKICAgICAgdmFsdWVzLnB1c2godGhpcy5zaW5nbGVfdmFsdWUoKSk7CiAgICB9CiAgICByZXR1cm4gdmFsdWVzLmpvaW4oIiIpOwogIH0KCiAgdGhpcy5rZXkgPSBmdW5jdGlvbigpIHsKICAgIHZhciBzdGFydCA9IHRoaXMucG9zOwogICAgd2hpbGUodHJ1ZSkgewogICAgICBpZiAodGhpcy5wb3MgPT0gdGhpcy5pbnB1dC5sZW5ndGgpIHsKICAgICAgICB0aHJvdyAiUnVuYXdheSBrZXkiOwogICAgICB9CiAgICAKICAgICAgaWYgKHRoaXMuaW5wdXRbdGhpcy5wb3NdLm1hdGNoKCJbYS16QS1aMC05XzpcXC4vLV0iKSkgewogICAgICAgIHRoaXMucG9zKysKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5zdWJzdHJpbmcoc3RhcnQsIHRoaXMucG9zKS50b1VwcGVyQ2FzZSgpOwogICAgICB9CiAgICB9CiAgfQoKICB0aGlzLmtleV9lcXVhbHNfdmFsdWUgPSBmdW5jdGlvbigpIHsKICAgIHZhciBrZXkgPSB0aGlzLmtleSgpOwogICAgaWYgKHRoaXMudHJ5TWF0Y2goIj0iKSkgewogICAgICB0aGlzLm1hdGNoKCI9Iik7CiAgICAgIHZhciB2YWwgPSB0aGlzLnZhbHVlKCk7CiAgICAgIHJldHVybiBbIGtleSwgdmFsIF07CiAgICB9IGVsc2UgewogICAgICB0aHJvdyAiLi4uID0gdmFsdWUgZXhwZWN0ZWQsIGVxdWFscyBzaWduIG1pc3Npbmc6IiArIHRoaXMuaW5wdXQuc3Vic3RyaW5nKHRoaXMucG9zKTsKICAgIH0KICB9CgogIHRoaXMua2V5X3ZhbHVlX2xpc3QgPSBmdW5jdGlvbigpIHsKICAgIHZhciBrdiA9IHRoaXMua2V5X2VxdWFsc192YWx1ZSgpOwogICAgdGhpcy5lbnRyaWVzW3RoaXMuY3VycmVudEVudHJ5XVtrdlswXV0gPSBrdlsxXTsKICAgIHdoaWxlICh0aGlzLnRyeU1hdGNoKCIsIikpIHsKICAgICAgdGhpcy5tYXRjaCgiLCIpOwogICAgICAvLyBmaXhlcyBwcm9ibGVtcyB3aXRoIGNvbW1hcyBhdCB0aGUgZW5kIG9mIGEgbGlzdAogICAgICBpZiAodGhpcy50cnlNYXRjaCgifSIpKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAga3YgPSB0aGlzLmtleV9lcXVhbHNfdmFsdWUoKTsKICAgICAgdGhpcy5lbnRyaWVzW3RoaXMuY3VycmVudEVudHJ5XVtrdlswXV0gPSBrdlsxXTsKICAgIH0KICB9CgogIHRoaXMuZW50cnlfYm9keSA9IGZ1bmN0aW9uKCkgewogICAgdGhpcy5jdXJyZW50RW50cnkgPSB0aGlzLmtleSgpOwogICAgdGhpcy5lbnRyaWVzW3RoaXMuY3VycmVudEVudHJ5XSA9IG5ldyBPYmplY3QoKTsgICAgCiAgICB0aGlzLm1hdGNoKCIsIik7CiAgICB0aGlzLmtleV92YWx1ZV9saXN0KCk7CiAgfQoKICB0aGlzLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubWF0Y2goIkAiKTsKICAgIHJldHVybiAiQCIrdGhpcy5rZXkoKTsKICB9CgogIHRoaXMuc3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGt2ID0gdGhpcy5rZXlfZXF1YWxzX3ZhbHVlKCk7CiAgICB0aGlzLnN0cmluZ3Nba3ZbMF0udG9VcHBlckNhc2UoKV0gPSBrdlsxXTsKICB9CgogIHRoaXMucHJlYW1ibGUgPSBmdW5jdGlvbigpIHsKICAgIHRoaXMudmFsdWUoKTsKICB9CgogIHRoaXMuY29tbWVudCA9IGZ1bmN0aW9uKCkgewogICAgdGhpcy52YWx1ZSgpOyAvLyB0aGlzIGlzIHdyb25nCiAgfQoKICB0aGlzLmVudHJ5ID0gZnVuY3Rpb24oKSB7CiAgICB0aGlzLmVudHJ5X2JvZHkoKTsKICB9CgogIHRoaXMuYmlidGV4ID0gZnVuY3Rpb24oKSB7CiAgICB3aGlsZSh0aGlzLnRyeU1hdGNoKCJAIikpIHsKICAgICAgdmFyIGQgPSB0aGlzLmRpcmVjdGl2ZSgpLnRvVXBwZXJDYXNlKCk7CiAgICAgIHRoaXMubWF0Y2goInsiKTsKICAgICAgaWYgKGQgPT0gIkBTVFJJTkciKSB7CiAgICAgICAgdGhpcy5zdHJpbmcoKTsKICAgICAgfSBlbHNlIGlmIChkID09ICJAUFJFQU1CTEUiKSB7CiAgICAgICAgdGhpcy5wcmVhbWJsZSgpOwogICAgICB9IGVsc2UgaWYgKGQgPT0gIkBDT01NRU5UIikgewogICAgICAgIHRoaXMuY29tbWVudCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZW50cnkoKTsKICAgICAgfQogICAgICB0aGlzLm1hdGNoKCJ9Iik7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBCaWJ0ZXhEaXNwbGF5KCkgewogIHRoaXMuZml4VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxnbHFxXHM/L2csICImYmRxdW87Iik7CiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcZ3JxcVxzPy9nLCAnJnJkcXVvOycpOwogICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXCAvZywgJyZuYnNwOycpOwogICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHVybC9nLCAnJyk7CiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLy0tLS9nLCAnJm1kYXNoOycpOwogICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC97XFwiYX0vZywgJyZhdW1sOycpOwogICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9ce1xcIm9cfS9nLCAnJm91bWw7Jyk7CiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3tcXCJ1fS9nLCAnJnV1bWw7Jyk7CiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3tcXCJBfS9nLCAnJkF1bWw7Jyk7CiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3tcXCJPfS9nLCAnJk91bWw7Jyk7CiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3tcXCJVfS9nLCAnJlV1bWw7Jyk7CiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcc3MvZywgJyZzemxpZzsnKTsKICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXHsoLio/KVx9L2csICckMScpOwogICAgcmV0dXJuIHZhbHVlOwogIH0KICAKICB0aGlzLmRpc3BsYXlCaWJ0ZXgyID0gZnVuY3Rpb24oaSwgbykgewogICAgdmFyIGIgPSBuZXcgQmlidGV4UGFyc2VyKCk7CiAgICBiLnNldElucHV0KGkpOwogICAgYi5iaWJ0ZXgoKTsKCiAgICB2YXIgZSA9IGIuZ2V0RW50cmllcygpOwogICAgdmFyIG9sZCA9IG8uZmluZCgiKiIpOwogIAogICAgZm9yICh2YXIgaXRlbSBpbiBlKSB7CiAgICAgIHZhciB0cGwgPSAkKCIuYmlidGV4X3RlbXBsYXRlIikuY2xvbmUoKS5yZW1vdmVDbGFzcygnYmlidGV4X3RlbXBsYXRlJyk7CiAgICAgIHRwbC5hZGRDbGFzcygidW51c2VkIik7CiAgICAgIAogICAgICBmb3IgKHZhciBrZXkgaW4gZVtpdGVtXSkgewogICAgICAKICAgICAgICB2YXIgZmllbGRzID0gdHBsLmZpbmQoIi4iICsga2V5LnRvTG93ZXJDYXNlKCkpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGRzLnNpemUoKTsgaSsrKSB7CiAgICAgICAgICB2YXIgZiA9ICQoZmllbGRzW2ldKTsKICAgICAgICAgIGYucmVtb3ZlQ2xhc3MoInVudXNlZCIpOwogICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5maXhWYWx1ZShlW2l0ZW1dW2tleV0pOwogICAgICAgICAgaWYgKGYuaXMoImEiKSkgewogICAgICAgICAgICBmLmF0dHIoImhyZWYiLCB2YWx1ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgY3VycmVudEhUTUwgPSBmLmh0bWwoKSB8fCAiIjsKICAgICAgICAgICAgaWYgKGN1cnJlbnRIVE1MLm1hdGNoKCIlIikpIHsKICAgICAgICAgICAgICAvLyAiY29tcGxleCIgdGVtcGxhdGUgZmllbGQKICAgICAgICAgICAgICBmLmh0bWwoY3VycmVudEhUTUwucmVwbGFjZSgiJSIsIHZhbHVlKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gc2ltcGxlIGZpZWxkCiAgICAgICAgICAgICAgZi5odG1sKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgCiAgICAgIHZhciBlbXB0eUZpZWxkcyA9IHRwbC5maW5kKCJzcGFuIC51bnVzZWQiKTsKICAgICAgZW1wdHlGaWVsZHMuZWFjaChmdW5jdGlvbiAoa2V5LGYpIHsKICAgICAgICBpZiAoZi5pbm5lckhUTUwubWF0Y2goIiUiKSkgewogICAgICAgICAgZi5pbm5lckhUTUwgPSAiIjsKICAgICAgICB9CiAgICAgIH0pOwogICAgCiAgICAgIG8uYXBwZW5kKHRwbCk7CiAgICAgIHRwbC5zaG93KCk7CiAgICB9CiAgICAKICAgIG9sZC5yZW1vdmUoKTsKICB9CgoKICB0aGlzLmRpc3BsYXlCaWJ0ZXggPSBmdW5jdGlvbihpbnB1dCwgb3V0cHV0KSB7CiAgICAvLyBwYXJzZSBiaWJ0ZXggaW5wdXQKICAgIHZhciBiID0gbmV3IEJpYnRleFBhcnNlcigpOwogICAgYi5zZXRJbnB1dChpbnB1dCk7CiAgICBiLmJpYnRleCgpOwogICAgCiAgICAvLyBzYXZlIG9sZCBlbnRyaWVzIHRvIHJlbW92ZSB0aGVtIGxhdGVyCiAgICB2YXIgb2xkID0gb3V0cHV0LmZpbmQoIioiKTsgICAgCgogICAgLy8gaXRlcmF0ZSBvdmVyIGJpYlRlWCBlbnRyaWVzCiAgICB2YXIgZW50cmllcyA9IGIuZ2V0RW50cmllcygpOwogICAgZm9yICh2YXIgZW50cnlLZXkgaW4gZW50cmllcykgewogICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2VudHJ5S2V5XTsKICAgICAgCiAgICAgIC8vIGZpbmQgdGVtcGxhdGUKICAgICAgdmFyIHRwbCA9ICQoIi5iaWJ0ZXhfdGVtcGxhdGUiKS5jbG9uZSgpLnJlbW92ZUNsYXNzKCdiaWJ0ZXhfdGVtcGxhdGUnKTsKICAgICAgCiAgICAgIC8vIGZpbmQgYWxsIGtleXMgaW4gdGhlIGVudHJ5CiAgICAgIHZhciBrZXlzID0gW107CiAgICAgIGZvciAodmFyIGtleSBpbiBlbnRyeSkgewogICAgICAgIGtleXMucHVzaChrZXkudG9VcHBlckNhc2UoKSk7CiAgICAgIH0KICAgICAgCiAgICAgIC8vIGZpbmQgYWxsIGlmcyBhbmQgY2hlY2sgdGhlbQogICAgICB2YXIgcmVtb3ZlZCA9IGZhbHNlOwogICAgICBkbyB7CiAgICAgICAgLy8gZmluZCBuZXh0IGlmCiAgICAgICAgdmFyIGNvbmRzID0gdHBsLmZpbmQoIi5pZiIpOwogICAgICAgIGlmIChjb25kcy5zaXplKCkgPT0gMCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIGNoZWNrIGlmCiAgICAgICAgdmFyIGNvbmQgPSBjb25kcy5maXJzdCgpOwogICAgICAgIGNvbmQucmVtb3ZlQ2xhc3MoImlmIik7CiAgICAgICAgdmFyIGlmVHJ1ZSA9IHRydWU7CiAgICAgICAgdmFyIGNsYXNzTGlzdCA9IGNvbmQuYXR0cignY2xhc3MnKS5zcGxpdCgnICcpOwogICAgICAgICQuZWFjaCggY2xhc3NMaXN0LCBmdW5jdGlvbihpbmRleCwgY2xzKXsKICAgICAgICAgIGlmKGtleXMuaW5kZXhPZihjbHMudG9VcHBlckNhc2UoKSkgPCAwKSB7CiAgICAgICAgICAgIGlmVHJ1ZSA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgY29uZC5yZW1vdmVDbGFzcyhjbHMpOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIHJlbW92ZSBmYWxzZSBpZnMKICAgICAgICBpZiAoIWlmVHJ1ZSkgewogICAgICAgICAgY29uZC5yZW1vdmUoKTsKICAgICAgICB9CiAgICAgIH0gd2hpbGUgKHRydWUpOwogICAgICAKICAgICAgLy8gZmlsbCBpbiByZW1haW5pbmcgZmllbGRzIAogICAgICBmb3IgKHZhciBpbmRleCBpbiBrZXlzKSB7CiAgICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdOwogICAgICAgIHZhciB2YWx1ZSA9IGVudHJ5W2tleV0gfHwgIiI7CiAgICAgICAgdHBsLmZpbmQoInNwYW46bm90KGEpLiIgKyBrZXkudG9Mb3dlckNhc2UoKSkuaHRtbCh0aGlzLmZpeFZhbHVlKHZhbHVlKSk7CiAgICAgICAgdHBsLmZpbmQoImEuIiArIGtleS50b0xvd2VyQ2FzZSgpKS5hdHRyKCdocmVmJywgdGhpcy5maXhWYWx1ZSh2YWx1ZSkpOwogICAgICB9CiAgICAgIAogICAgICBvdXRwdXQuYXBwZW5kKHRwbCk7CiAgICAgIHRwbC5zaG93KCk7CiAgICB9CiAgICAKICAgIC8vIHJlbW92ZSBvbGQgZW50cmllcwogICAgb2xkLnJlbW92ZSgpOwogIH0KCn0KCmZ1bmN0aW9uIGJpYnRleF9qc19kcmF3KCkgewogICAgLy8gY2hlY2sgZm9yIHRlbXBsYXRlLCBhZGQgZGVmYXVsdAogICAgaWYgKCQoIi5iaWJ0ZXhfdGVtcGxhdGUiKS5zaXplKCkgPT0gMCkgewogICAgICAkKCJib2R5IikuYXBwZW5kKCI8ZGl2IGNsYXNzPVwiYmlidGV4X3RlbXBsYXRlXCI+PGRpdiBjbGFzcz1cImlmIGF1dGhvclwiIHN0eWxlPVwiZm9udC13ZWlnaHQ6IGJvbGQ7XCI+XG4gIDxzcGFuIGNsYXNzPVwiaWYgeWVhclwiPlxuICAgIDxzcGFuIGNsYXNzPVwieWVhclwiPjwvc3Bhbj4sIFxuICA8L3NwYW4+XG4gIDxzcGFuIGNsYXNzPVwiYXV0aG9yXCI+PC9zcGFuPlxuICA8c3BhbiBjbGFzcz1cImlmIHVybFwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDIwcHhcIj5cbiAgICA8YSBjbGFzcz1cInVybFwiIHN0eWxlPVwiY29sb3I6YmxhY2s7IGZvbnQtc2l6ZToxMHB4XCI+KHZpZXcgb25saW5lKTwvYT5cbiAgPC9zcGFuPlxuPC9kaXY+XG48ZGl2IHN0eWxlPVwibWFyZ2luLWxlZnQ6IDEwcHg7IG1hcmdpbi1ib3R0b206NXB4O1wiPlxuICA8c3BhbiBjbGFzcz1cInRpdGxlXCI+PC9zcGFuPlxuPC9kaXY+PC9kaXY+Iik7CiAgICB9ICAgIAogICAgJCgiLmJpYnRleF90ZW1wbGF0ZSIpLmhpZGUoKTsKICAgIChuZXcgQmlidGV4RGlzcGxheSgpKS5kaXNwbGF5QmlidGV4KCQoIiNiaWJ0ZXhfaW5wdXQiKS52YWwoKSwgJCgiI2JpYnRleF9kaXNwbGF5IikpOwp9CgoKCi8qKgogKiBQYXJzZXMgYSBzdHJpbmcgaW50byBiaWJ0ZXgKICovCmV4cG9ydHMuQmlidGV4UGFyc2VyID0gQmlidGV4UGFyc2VyOwoKfSl9OwoKLyoqKioqKioqKiogbGliL2V2ZW50cyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi9ldmVudHMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIEJpbmRpbmdzIHRvIEthbnNvIGV2ZW50cwogKgogKiAobW9zdCBvZiB0aGlzIGlzIHRha2VuIGZyb20gdGhlIGthbnNvIGFkbWluIGFwcCBleGFtcGxlLAogKiAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9jYW9sYW4va2Fuc28vYmxvYi9tYXN0ZXIvYWRtaW4vbGliL2FwcC5qcykKICovCgp2YXIgZXZlbnRzID0gcmVxdWlyZSgna2Fuc28vZXZlbnRzJyksCiAgICBzZXNzaW9uID0gcmVxdWlyZSgna2Fuc28vc2Vzc2lvbicpLAogICAgdGVtcGxhdGVzID0gcmVxdWlyZSgna2Fuc28vdGVtcGxhdGVzJyksCiAgICBldmVudHMgPSByZXF1aXJlKCdrYW5zby9ldmVudHMnKSwKICAgIGRiID0gcmVxdWlyZSgna2Fuc28vZGInKTsKCgoKLyoqCiAqIFRoZSBpbml0IG1ldGhvZCBmaXJlcyB3aGVuIHRoZSBhcHAgaXMgaW5pdGlhbGx5IGxvYWRlZCBmcm9tIGEgcGFnZSByZW5kZXJlZAogKiBieSBDb3VjaERCLiAgKERPRVNOJ1QgU0VFTSBUTyBXT1JLKQogKi8KZXZlbnRzLm9uKCdpbml0JywgZnVuY3Rpb24gKCkgewogICAgYmluZFNlc3Npb25Db250cm9scygpOwp9KTsKCgovKioKICogVGhlIHNlc3Npb25DaGFuZ2UgZXZlbnQgZmlyZXMgd2hlbiB0aGUgYXBwIGlzIGZpcnN0IGxvYWRlZCBhbmQgdGhlIHVzZXIncwogKiBzZXNzaW9uIGluZm9ybWF0aW9uIGJlY29tZXMgYXZhaWxhYmxlLiBJdCBpcyBhbHNvIGZpcmVkIHdoZW5ldmVyIGEgY2hhbmdlCiAqIHRvIHRoZSB1c2VyJ3Mgc2Vzc2lvbiBpcyBkZXRlY3RlZCwgZm9yIGV4YW1wbGUgYWZ0ZXIgbG9nZ2luZyBpbiBvciBvdXQuCiAqLwpldmVudHMub24oJ3Nlc3Npb25DaGFuZ2UnLCBmdW5jdGlvbiAodXNlckN0eCwgcmVxKSB7CiAgICAkKCcjc2Vzc2lvbicpLnJlcGxhY2VXaXRoKHRlbXBsYXRlcy5yZW5kZXIoJ3Nlc3Npb24uaHRtbCcsIHJlcSwgdXNlckN0eCkpOwogICAgJCgnI3JlZ2lzdHJhdGlvbicpLnJlcGxhY2VXaXRoKHRlbXBsYXRlcy5yZW5kZXIoJ3JlZ2lzdHJhdGlvbi5odG1sJywgcmVxLCB1c2VyQ3R4KSk7Cn0pOwoKCgovKioKICogVGhlIHVwZGF0ZUZhaWx1cmUgZXZlbnQgZmlyZXMgd2hlbiBhbiB1cGRhdGUgZnVuY3Rpb24gcmV0dXJucyBhIGRvY3VtZW50IGFzCiAqIHRoZSBmaXJzdCBwYXJ0IG9mIGFuIGFycmF5LCBidXQgdGhlIGNsaWVudC1zaWRlIHJlcXVlc3QgdG8gdXBkYXRlIHRoZQogKiBkb2N1bWVudCBmYWlscy4KICovCgpldmVudHMub24oJ3VwZGF0ZUZhaWx1cmUnLCBmdW5jdGlvbiAoZXJyLCBpbmZvLCByZXEsIHJlcywgZG9jKSB7CiAgICBhbGVydChlcnIubWVzc2FnZSB8fCBlcnIudG9TdHJpbmcoKSk7Cn0pOwoKCi8vIC0tLSBucmFtYSBvbmx5IGFmdGVyIGhlcmUKCi8qKgogKiBhZnRlclJlc3BvbnNlIGlzIG5vdCBkb2N1bWVudGVkLCBidXQgSSB0aGluayBpdCBmaXJlcyBhZnRlciB0aGUKICogZG9jdW1lbnQgaGFzIGJlZW4gcmVuZGVyZWQgYnkgdGhlIGNsaWVudCAoYW5kIG5vdCBhZnRlciByZW5kZXJpbmcgYnkgdGhlIHNlcnZlcikKICovCmV2ZW50cy5vbignYWZ0ZXJSZXNwb25zZScsIGZ1bmN0aW9uKGluZm8sIHJlcSwgcmVzKSB7CglpZiggcmVxLmNsaWVudCAmJiB0eXBlb2YgJCAhPT0ndW5kZWZpbmVkJyApIHsKICAgICAgICAkKCcuX3RpbWVhZ28nKS50aW1lYWdvKCk7CiAgICAgICAgJCgnLl9zb3J0LW1lJykuc29ydGxpc3QoKTsKICAgICAgICAkKCd0ZXh0YXJlYS5fbnJhbWEtbm90ZS1jb250ZW50JykuYXV0b2dyb3coKTsKCX0KfSk7CgoKLyoqCiAqIC0tLSBtb2RpZmllZCBmcm9tIHRoZSBrYW5zbyBhZG1pbiBhcHAKICogaXQncyBsaXZlID0gY2FsbCBvbmx5IG9uY2UKICovCnZhciBiaW5kU2Vzc2lvbkNvbnRyb2xzID0gZnVuY3Rpb24gKCkgewogICAgJCgnI3Nlc3Npb24gLmxvZ291dCBhJykuZGllKCkubGl2ZSgnY2xpY2snLCBmdW5jdGlvbiAoZXYpIHsKICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHNlc3Npb24ubG9nb3V0KCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSk7CiAgICAkKCcubG9naW4gYScpLmRpZSgpLmxpdmUoJ2NsaWNrJywgZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2YXIgZGl2ID0gJCgnPGRpdj48aDI+TG9naW48L2gyPjwvZGl2PicpOwogICAgICAgIGRpdi5hcHBlbmQoJzxmb3JtIGlkPSJsb2dpbl9mb3JtIiBhY3Rpb249Ii9fc2Vzc2lvbiIgbWV0aG9kPSJQT1NUIj4nICsKICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImdlbmVyYWxfZXJyb3JzIj48L2Rpdj4nICsKICAgICAgICAgICAgJzxkaXYgY2xhc3M9InVzZXJuYW1lIGZpZWxkIj4nICsKICAgICAgICAgICAgICAgICc8bGFiZWwgZm9yPSJpZF9uYW1lIj5Vc2VybmFtZTwvbGFiZWw+JyArCiAgICAgICAgICAgICAgICAnPGlucHV0IGlkPSJpZF9uYW1lIiBuYW1lPSJuYW1lIiB0eXBlPSJ0ZXh0IiAvPicgKwogICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImVycm9ycyI+PC9kaXY+JyArCiAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgJzxkaXYgY2xhc3M9InBhc3N3b3JkIGZpZWxkIj4nICsKICAgICAgICAgICAgICAgICc8bGFiZWwgZm9yPSJpZF9wYXNzd29yZCI+UGFzc3dvcmQ8L2xhYmVsPicgKwogICAgICAgICAgICAgICAgJzxpbnB1dCBpZD0iaWRfcGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkIiB0eXBlPSJwYXNzd29yZCIgLz4nICsKICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJlcnJvcnMiPjwvZGl2PicgKwogICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJhY3Rpb25zIj4nICsKICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT0iYnV0dG9uIiBpZD0iaWRfY2FuY2VsIiB2YWx1ZT0iQ2FuY2VsIiAvPicgKwogICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPSJzdWJtaXQiIGlkPSJpZF9sb2dpbiIgdmFsdWU9IkxvZ2luIiAvPicgKwogICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgJzwvZm9ybT4nKTsKICAgICAgICAkKCcjaWRfY2FuY2VsJywgZGl2KS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQubW9kYWwuY2xvc2UoKTsKICAgICAgICB9KTsKICAgICAgICAkKCdmb3JtJywgZGl2KS5zdWJtaXQoZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZhciB1c2VybmFtZSA9ICQoJ2lucHV0W25hbWU9Im5hbWUiXScsIGRpdikudmFsKCk7CiAgICAgICAgICAgIHZhciBwYXNzd29yZCA9ICQoJ2lucHV0W25hbWU9InBhc3N3b3JkIl0nLCBkaXYpLnZhbCgpOwogICAgICAgICAgICBjb25zb2xlLmxvZygkKCcudXNlcm5hbWUgLmVycm9ycycsIGRpdikpOwogICAgICAgICAgICAkKCcudXNlcm5hbWUgLmVycm9ycycsIGRpdikudGV4dCgKICAgICAgICAgICAgICAgIHVzZXJuYW1lID8gJyc6ICdQbGVhc2UgZW50ZXIgYSB1c2VybmFtZScKICAgICAgICAgICAgKTsKICAgICAgICAgICAgJCgnLnBhc3N3b3JkIC5lcnJvcnMnLCBkaXYpLnRleHQoCiAgICAgICAgICAgICAgICBwYXNzd29yZCA/ICcnOiAnUGxlYXNlIGVudGVyIGEgcGFzc3dvcmQnCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmICh1c2VybmFtZSAmJiBwYXNzd29yZCkgewogICAgICAgICAgICAgICAgc2Vzc2lvbi5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQsIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAkKCcuZ2VuZXJhbF9lcnJvcnMnLCBkaXYpLnRleHQoZXJyID8gZXJyLnRvU3RyaW5nKCk6ICcnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICAgICAgICAgICAgICAkKGRpdikuZmFkZU91dCgnc2xvdycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQubW9kYWwuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pOwogICAgICAgIGRpdi5tb2RhbCh7YXV0b1Jlc2l6ZTogdHJ1ZSwgb3ZlcmxheUNsb3NlOiB0cnVlfSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSk7CiAgICAkKCcuc2lnbnVwIGEnKS5kaWUoKS5saXZlKCdjbGljaycsIGZ1bmN0aW9uIChldikgewogICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdmFyIGRpdiA9ICQoJzxkaXY+PGgyPkNyZWF0ZSBhbiBhY2NvdW50PC9oMj48L2Rpdj4nKTsKICAgICAgICBkaXYuYXBwZW5kKCI8cD5JdCdzIGZyZWUuPC9wPiIpOwogICAgICAgIGRpdi5hcHBlbmQoJzxmb3JtIGlkPSJzaWdudXBfZm9ybSIgYWN0aW9uPSIvX3Nlc3Npb24iIG1ldGhvZD0iUE9TVCI+JyArCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJnZW5lcmFsX2Vycm9ycyI+PC9kaXY+JyArCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJ1c2VybmFtZSBmaWVsZCI+JyArCiAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj0iaWRfbmFtZSI+VXNlcm5hbWU8L2xhYmVsPicgKwogICAgICAgICAgICAgICAgJzxpbnB1dCBpZD0iaWRfbmFtZSIgbmFtZT0ibmFtZSIgdHlwZT0idGV4dCIgLz4nICsKICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJlcnJvcnMiPjwvZGl2PicgKwogICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJwYXNzd29yZCBmaWVsZCI+JyArCiAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj0iaWRfcGFzc3dvcmQiPlBhc3N3b3JkPC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9ImlkX3Bhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIC8+JyArCiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iZXJyb3JzIj48L2Rpdj4nICsKICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAnPGRpdiBjbGFzcz0iYWN0aW9ucyI+JyArCiAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9ImJ1dHRvbiIgaWQ9ImlkX2NhbmNlbCIgdmFsdWU9IkNhbmNlbCIgLz4nICsKICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0iaWRfY3JlYXRlIiB2YWx1ZT0iQ3JlYXRlIiAvPicgKwogICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgJzwvZm9ybT4nKTsKICAgICAgICAkKCcjaWRfY2FuY2VsJywgZGl2KS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQubW9kYWwuY2xvc2UoKTsKICAgICAgICB9KTsKICAgICAgICAkKCdmb3JtJywgZGl2KS5zdWJtaXQoZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZhciB1c2VybmFtZSA9ICQoJ2lucHV0W25hbWU9Im5hbWUiXScsIGRpdikudmFsKCk7CiAgICAgICAgICAgIHZhciBwYXNzd29yZCA9ICQoJ2lucHV0W25hbWU9InBhc3N3b3JkIl0nLCBkaXYpLnZhbCgpOwogICAgICAgICAgICBjb25zb2xlLmxvZygkKCcudXNlcm5hbWUgLmVycm9ycycsIGRpdikpOwogICAgICAgICAgICAkKCcudXNlcm5hbWUgLmVycm9ycycsIGRpdikudGV4dCgKICAgICAgICAgICAgICAgIHVzZXJuYW1lID8gJyc6ICdQbGVhc2UgZW50ZXIgYSB1c2VybmFtZScKICAgICAgICAgICAgKTsKICAgICAgICAgICAgJCgnLnBhc3N3b3JkIC5lcnJvcnMnLCBkaXYpLnRleHQoCiAgICAgICAgICAgICAgICBwYXNzd29yZCA/ICcnOiAnUGxlYXNlIGVudGVyIGEgcGFzc3dvcmQnCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmICh1c2VybmFtZSAmJiBwYXNzd29yZCkgewogICAgICAgICAgICAgICAgc2Vzc2lvbi5zaWdudXAodXNlcm5hbWUsIHBhc3N3b3JkLCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAkKCcuZ2VuZXJhbF9lcnJvcnMnLCBkaXYpLnRleHQoZXJyb3IgPyBlcnJvci50b1N0cmluZygpOiAnJyk7CiAgICAgICAgICAgICAgICAgICAgaWYoIGVycm9yICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiggZXJyb3Iuc3RhdHVzID09PSA0MDkgfHwgZXJyb3IuZXJyb3IgPT09ICdjb25mbGljdCcgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZ2VuZXJhbF9lcnJvcnMnLCBkaXYpLnRleHQoJ1RoYXQgdXNlcm5hbWUgaXMgYWxyZWFkeSB0YWtlbicpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQsIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmdlbmVyYWxfZXJyb3JzJywgZGl2KS50ZXh0KGVycm9yID8gZXJyb3IudG9TdHJpbmcoKTogJycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChkaXYpLmZhZGVPdXQoJ3Nsb3cnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5tb2RhbC5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICBkaXYubW9kYWwoe2F1dG9SZXNpemU6IHRydWUsIG92ZXJsYXlDbG9zZTogdHJ1ZX0pOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0pOwp9OwoKfSl9OwoKLyoqKioqKioqKiogbGliL2ZpbHRlcnMgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJsaWIvZmlsdGVycyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogRmlsdGVyIGZ1bmN0aW9ucyB0byBiZSBleHBvcnRlZCBmcm9tIHRoZSBkZXNpZ24gZG9jLgogKi8KCgp9KX07CgovKioqKioqKioqKiBsaWIvbGlzdHMgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJsaWIvbGlzdHMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIExpc3QgZnVuY3Rpb25zIHRvIGJlIGV4cG9ydGVkIGZyb20gdGhlIGRlc2lnbiBkb2MuCiAqLwp2YXIgdGVtcGxhdGVzID0gcmVxdWlyZSgna2Fuc28vdGVtcGxhdGVzJyksCiAgICBldmVudHMgPSByZXF1aXJlKCdrYW5zby9ldmVudHMnKSwKICAgIGRiID0gcmVxdWlyZSgna2Fuc28vZGInKSwKICAgIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fLAogICAgbnJhbWFfaW5pdCA9IHJlcXVpcmUoJy4vbnJhbWEyX2luaXQnKS5pbml0OwoKCi8qKgogKiBzZXQgdGhlIHRpdGxlIGVsZW1lbnQgZm9yIGEgcGFnZSBiYXNlZCBvbiB0aGUgcXVlcnkKICovCnZhciBtYWtlX3RpdGxlID0gZnVuY3Rpb24od2hhdCwgcmVxKSB7CiAgICB2YXIgdGl0bGUgPSAnTm90ZS1vLXJhbWEgOiAnOwogICAgaWYoIHJlcS5xdWVyeSAmJiByZXEucXVlcnkudXNlciApIHsKICAgICAgICB0aXRsZSArPSByZXEucXVlcnkudXNlcisiJ3MgIit3aGF0OwogICAgfSBlbHNlIHsKICAgICAgICB0aXRsZSArPSB3aGF0OwogICAgfQogICAgcmV0dXJuIHRpdGxlOwp9CgovKioKICogVGhlIHRlbXBsYXRlcyBuZWVkIHRvIGtub3cgd2hhdCdzIGluIHRoZSBwYXRoIG9mIHRoZSBjdXJyZW50IHVybCBhbmQgaG93IHRvCiAqIGluY2x1ZGUgcGFydHMgb2YgdGhhdCBpbiBjcmVhdGluZyBsaW5rcy4KICogVGhpcyBtYXkgaW5jbHVkZSBnYXJiYWdlIGxpa2UgJ2dyb3VwJyBhbmQgJ2Rlc2NlbmRpbmcnIHBhcmFtZXRlcnMuCiAqCiAqIFVzZTogZS5nLiA8YSBocmVmPSJ7YmFzZVVSTH17cXVlcnlfdXNlcl91cmx9L2F1dGhvcnMve2F1dGhvcn0iPnthdXRob3J9PC9hPgogKiAgd2lsbCBwcm92aWRlIGEgbGluayB0byAvdXNlcnMvdXNlci9hdXRob3JzL2F1dGhvciBmcm9tIGEgcGFnZSB3aXRoIGEgdXNlciBpbiBpdHMgcGF0aCwKICogIGFuZCBhIGxpbmsgdG8gL2F1dGhvcnMvYXV0aG9yIGZyb20gYSBwYWdlIHdpdGggbm8gc3VjaCBsaW5rLgogKi8KdmFyIF9tYWtlX3F1ZXJ5X3VybHMgPSBmdW5jdGlvbiggcmVxKSB7CiAgICB2YXIgcXVlcnlfdXJscyA9IHt9CiAgICBfKHJlcS5xdWVyeSkuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KXsKICAgICAgICBxdWVyeV91cmxzWydxdWVyeV8nK2tleV0gPSB2YWx1ZTsKICAgICAgICBxdWVyeV91cmxzWydxdWVyeV8nK2tleSsnX3VybCddID0gJy8nK2tleSsncy8nK2VuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTsKICAgIH0pOwogICAgcmV0dXJuIHF1ZXJ5X3VybHM7Cn0KCi8qKgogKiB1c2VkIGluIHRlbXBsYXRlcyA6IHRydWUgaWYgYnJvc3dlci1yZW5kZXJlZCBhbmQgdGhlIGN1cnJlbnQgbm90ZXMgJiBxdW90ZXMgYXJlIHRoZSB1c2VyJ3MKICogIChjb21iaW5lIHRoZSB0d28gdGhpbmdzIGJlY2F1c2Ugd2UncmUgbWFpbmx5IGludGVyZXN0ZWQgaW4gd2hldGhlciB0aGUgdXNlciBjYW4gZWRpdCkKICovCnZhciBfaXNfdXNlcnNfb3duX3BhZ2UgPSBmdW5jdGlvbihyZXEpIHsKICAgIHJldHVybiB7CiAgICAgICAgaXNfdXNlcnNfb3duX3BhZ2UgOiByZXEuY2xpZW50ICYmIHJlcS5xdWVyeS51c2VyICYmIHJlcS5xdWVyeS51c2VyPT1yZXEudXNlckN0eC5uYW1lCiAgICB9Owp9CgoKLyoqCiAqCiAqLwp2YXIgbWFrZV91bml2ZXJzYWxfdGVtcGxhdGVfZGF0YSA9IGZ1bmN0aW9uKHJlcSkgewogICAgdmFyIHVuaXZlcnNhbF90ZW1wbGF0ZV9kYXRhID0gXy5leHRlbmQoCiAgICAgICAgX21ha2VfcXVlcnlfdXJscyhyZXEpLAogICAgICAgIF9pc191c2Vyc19vd25fcGFnZShyZXEpLAogICAgICAgIHsgcmVxX2NsaWVudCA6IHJlcS5jbGllbnQgfQogICAgKTsKCiAgICAvL1RPRE8gcmVtb3ZlIChmb3IgdGVzdGluZyBvbmx5KQogICAgaWYoIHJlcS5jbGllbnQgKSB7CiAgICAgICAgd2luZG93LnJlcSA9IHJlcTsKICAgICAgICB3aW5kb3cudXRkID0gdW5pdmVyc2FsX3RlbXBsYXRlX2RhdGE7CiAgICAgICAgd2luZG93Ll8gPSBfOwogICAgfQogICAgCiAgICByZXR1cm4gdW5pdmVyc2FsX3RlbXBsYXRlX2RhdGE7Cn0KCmV4cG9ydHMuYWxsX3VzZXJzID0gZnVuY3Rpb24gKGhlYWQsIHJlcSkgewoKICAgIHN0YXJ0KHtjb2RlOiAyMDAsIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCd9fSk7CgogICAgLy8gZmV0Y2ggYWxsIHRoZSByb3dzCiAgICB2YXIgdXNlcnMgPSBbXTsKICAgIHZhciByb3c7CiAgICB3aGlsZSggcm93ID0gZ2V0Um93KCkgKSB7CiAgICAgICAgdmFyIHVwZGF0ZWRfdGltZSA9ICcnOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHVwZGF0ZWRfdGltZSA9IG5ldyBEYXRlKHBhcnNlSW50KHJvdy52YWx1ZS5tYXgpKS50b0lTT1N0cmluZygpCiAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgIHVzZXJzLnB1c2goewogICAgICAgICAgICB1c2VyX2lkIDogcm93LmtleSwKICAgICAgICAgICAgdXBkYXRlZF90aW1lIDogdXBkYXRlZF90aW1lICAgIC8vdGhpcyBpcyB0aW1lIGEgc291cmNlIHdhcyB1cGRhdGVkCiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gZ2VuZXJhdGUgdGhlIG1hcmt1cCBmb3IgYSBsaXN0IG9mIHVzZXJzCiAgICB2YXIgY29udGVudCA9IHRlbXBsYXRlcy5yZW5kZXIoJ2FsbF91c2Vycy5odG1sJywgcmVxLCBfKHsKICAgICAgICAgICAgdXNlcnMgOiB1c2VycwogICAgICAgIH0pLmV4dGVuZCggbWFrZV91bml2ZXJzYWxfdGVtcGxhdGVfZGF0YShyZXEpICkKICAgICk7CgogICAgcmV0dXJuIHt0aXRsZTogbWFrZV90aXRsZSgndXNlcnMnLHJlcSksIGNvbnRlbnQ6IGNvbnRlbnR9OwoKfTsKCgovKioKICogbGlzdCBhbGwgc291cmNlcyBmb3Igc2luZ2xlIHVzZXIgb3IgZm9yIGFsbCB1c2VycwogKiB3b3JrcyB3aXRoIHZpZXcgdXNlcklkX3NvdXJjZQogKiBUaGUgc291cmNlcyBhcmUgbGlzdGVkIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgbGFzdCB1cGRhdGVkCiAqLwpleHBvcnRzLnNvdXJjZXMgPSBmdW5jdGlvbihoZWFkLCByZXEpIHsKICAgIHN0YXJ0KHtjb2RlOiAyMDAsIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCd9fSk7CgogICAgdmFyIHNvdXJjZXMgPSBbXTsKICAgIHZhciByb3c7CiAgICB3aGlsZSggcm93ID0gZ2V0Um93KCkgKSB7CiAgICAgICAgaWYoIHJvdy5kb2MgKSB7CiAgICAgICAgICAgIHZhciB0aGluZyA9IHJvdy5kb2M7CiAgICAgICAgICAgIGlmKCB0aGluZy50eXBlICYmIHRoaW5nLnR5cGUgPT0gJ3NvdXJjZScgKSB7CiAgICAgICAgICAgICAgICBpZiggdGhpbmcucGFnZV9pZCApIHsKICAgICAgICAgICAgICAgICAgICB0aGluZy5wYWdlX2lkX2VuYyA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGluZy5wYWdlX2lkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCB0aGluZy51cGRhdGVkICkgewogICAgICAgICAgICAgICAgICAgIHRoaW5nLnVwZGF0ZWRfdGltZSA9IG5ldyBEYXRlKHRoaW5nLnVwZGF0ZWQpLnRvSVNPU3RyaW5nKCk7ICAgLy9odW1hbi1yZWFkYWJsZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKHRoaW5nKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgdmFyIGNvbnRlbnQgPSB0ZW1wbGF0ZXMucmVuZGVyKCdzb3VyY2VzLmh0bWwnLCByZXEsIF8oewogICAgICAgICAgICBzb3VyY2VzIDogc291cmNlcwogICAgICAgIH0pLmV4dGVuZCggbWFrZV91bml2ZXJzYWxfdGVtcGxhdGVfZGF0YShyZXEpICkKICAgICk7CiAgICAKICAgIHJldHVybiB7dGl0bGU6IG1ha2VfdGl0bGUoJ3NvdXJjZXMnLHJlcSksIGNvbnRlbnQ6IGNvbnRlbnQgfTsKfTsKCgovKioKICogbGlzdCBhdXRob3JzIChhbmQgdGhlaXIgc291cmNlcykKICogdXNlIHdpdGggdXNlcklkX2F1dGhvciB2aWV3CiAqCiAqIEhlcmUgd2UgZXhwbG9pdCB0aGUgZmFjdCB0aGF0IHRoZSByb3dzIGFyZSBzb3J0ZWQgYnkgYXV0aG9yLgogKiBUaGUgcXVlcnkgc2hvdWxkIHByb3ZpZGUgYXV0aG9yX2luZGV4X2luX2tleSB0byBzcGVjaWZ5IHdoZXJlIGluIHRoZSB2aWV3LXByb3ZpZGVkCiAqICAga2V5IGFuIGF1dGhvcidzIG5hbWUgY2FuIGJlIGZvdW5kLgogKi8KZXhwb3J0cy5hdXRob3JzID0gZnVuY3Rpb24gKGhlYWQsIHJlcSkgewoKICAgIHN0YXJ0KHtjb2RlOiAyMDAsIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCd9fSk7CgogICAgdmFyIGF1dGhvcnMgPSBbXTsgICAvL2tleXMgd2lsbCBiZSBhdXRob3JzLCB2YWx1ZXMgd2lsbCBiZSBhIGxpc3Qgb2Ygc291cmNlcwogICAgdmFyIGF1dGhvcl9pbmRleF9pbl9rZXkgPSBwYXJzZUludCggcmVxLnF1ZXJ5LmF1dGhvcl9pbmRleF9pbl9rZXkgKTsKCiAgICB2YXIgcm93ID0gZ2V0Um93KCk7CiAgICB3aGlsZSggcm93ICkgewogICAgICAgIGlmKCAhcm93IHx8ICFyb3cua2V5IHx8ICFyb3cua2V5W2F1dGhvcl9pbmRleF9pbl9rZXldICkgewogICAgICAgICAgICByb3cgPSBnZXRSb3coKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIHZhciBjdXJyZW50X2F1dGhvciA9IHJvdy5rZXlbYXV0aG9yX2luZGV4X2luX2tleV07CiAgICAgICAgYXV0aG9yX3NvdXJjZXMgPSB7CiAgICAgICAgICAgIGF1dGhvcl9uYW1lIDogY3VycmVudF9hdXRob3IsCiAgICAgICAgICAgIHNvdXJjZXMgOiBbcm93LmRvY10KICAgICAgICB9OwogICAgICAgIHJvdyA9IGdldFJvdygpOwogICAgICAgIHdoaWxlKCByb3cgJiYgcm93LmtleVthdXRob3JfaW5kZXhfaW5fa2V5XSA9PSBjdXJyZW50X2F1dGhvciApIHsKICAgICAgICAgICAgYXV0aG9yX3NvdXJjZXMuc291cmNlcy5wdXNoKHJvdy5kb2MpCiAgICAgICAgICAgIHJvdyA9IGdldFJvdygpOwogICAgICAgIH0KICAgICAgICBhdXRob3JzLnB1c2goYXV0aG9yX3NvdXJjZXMpOwogICAgfQoKICAgIHZhciBjb250ZW50ID0gdGVtcGxhdGVzLnJlbmRlcignYXV0aG9ycy5odG1sJywgcmVxLCBfKHsKICAgICAgICAgICAgYXV0aG9ycyA6IGF1dGhvcnMKICAgICAgICB9KS5leHRlbmQoIG1ha2VfdW5pdmVyc2FsX3RlbXBsYXRlX2RhdGEocmVxKSApCiAgICApOwoKICAgIHJldHVybiB7dGl0bGU6IG1ha2VfdGl0bGUoJ2F1dGhvcnMnLHJlcSksIGNvbnRlbnQ6IGNvbnRlbnR9OwoKfTsKCi8qKgogKiB0YWcgY2xvdWQgZm9yIFthbGwgdXNlcnMnIHwgYSB1c2VyJ3NdIHRhZ3MKICogdXNlciB3aXRoIHZpZXdzOiB0YWdzX2FsbCBhbmQgdGFncwogKgogKiB0aGUgcXVlcnkgc2hvdWxkIGluY2x1ZGUgdGFnX2luZGV4X2luX2tleSB3aGljaCBzcGVjaWZpZXMgdGhlIGluZGV4IG9mIHRoZSB0YWcKICogICBpbiB0aGUga2V5IHByb3ZpZGVkIGJ5IHRoZSB2aWV3CiAqLwpleHBvcnRzLnRhZ3MgPSBmdW5jdGlvbihoZWFkLCByZXEpIHsKICAgIHN0YXJ0KHtjb2RlOiAyMDAsIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCd9fSk7CgogICAgdmFyIHRhZ19pbmRleF9pbl9rZXkgPSBwYXJzZUludCggcmVxLnF1ZXJ5LnRhZ19pbmRleF9pbl9rZXkgKTsKICAgIAogICAgdmFyIHRhZ3MgPSBbXTsKICAgIAogICAgdmFyIHJvdyA7CiAgICB3aGlsZSggcm93ID0gZ2V0Um93KCkgKSB7CiAgICAgICAgaWYoICFyb3cua2V5IHx8ICFyb3cua2V5W3RhZ19pbmRleF9pbl9rZXldICkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgdGFncy5wdXNoKHsKICAgICAgICAgICB0ZXh0IDogcm93LmtleVt0YWdfaW5kZXhfaW5fa2V5XSwKICAgICAgICAgICB3ZWlnaHQgOiByb3cudmFsdWUsCiAgICAgICAgICAgdXJsIDogIi8iCiAgICAgICAgfSk7CiAgICB9CiAgICB2YXIgY29udGVudCA9IHRlbXBsYXRlcy5yZW5kZXIoJ3RhZ3MuaHRtbCcsIHJlcSwgXyh7CiAgICAgICAgICAgIHRhZ3MgOiB0YWdzCiAgICAgICAgfSkuZXh0ZW5kKCBtYWtlX3VuaXZlcnNhbF90ZW1wbGF0ZV9kYXRhKHJlcSkgKQogICAgKTsKCiAgICBpZiggcmVxLmNsaWVudCApIHsKICAgICAgICB3aW5kb3cudGFncyA9IHRhZ3M7IC8vdG9kbyByZW1vdmUKICAgICAgICAkKGRvY3VtZW50KS5vbmUoJ25yYW1hX3BhZ2VfbG9hZGVkJywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCgnI3RhZ19jbG91ZCcpLmpRQ2xvdWQodGFncywgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCcjdGFnX2Nsb3VkIGEnKS5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaHJlZicsIHJlcS51c2VyQ3R4LmJhc2VVUkwgKyAocmVxLnF1ZXJ5LnVzZXIgPyAnL3VzZXJzLycrZW5jb2RlVVJJQ29tcG9uZW50KHJlcS5xdWVyeS51c2VyKSA6ICcnKSArICcvdGFncy8nKyAkKHRoaXMpLnRleHQoKSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfQoKCiAgICByZXR1cm4ge3RpdGxlOiBtYWtlX3RpdGxlKCd0YWdzJyxyZXEpLCBjb250ZW50OiBjb250ZW50fTsKfQoKLyoqCiAqIFdyaXR0ZW4gZm9yIHNpbmdsZSBvciBtdWx0aS11c2Vycy4KICogVE9ETyBmYWN0b3Igb3V0IGNvbW1vbiBwYXJ0cyB3aXRoIGV4cG9ydHMucXVvdGVzCiAqIChtb3N0IG9mIHRoaXMgaXMgZHVwbGljYXRlZCwgYW5kIHRoZSBucmFtYSBwYXJ0IGlzIFZFUkJBVElNKQogKi8KZXhwb3J0cy5mbG93ID0gZnVuY3Rpb24oaGVhZCwgcmVxKSB7CiAgICBzdGFydCh7Y29kZTogMjAwLCBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2h0bWwnfX0pOwoKICAgIHZhciBmaW5kX3NvdXJjZSA9IHt9OyAgIC8vaW5kZXhlZCBieSBfaWQKICAgIHZhciBmaW5kX3F1b3RlID0ge307ICAgIC8vaW5kZXhlZCBieSBxdW90ZV9oYXNoLCBwcmlvcml0eSB0byB0aGUgZmlyc3Qgd2UgZmluZAogICAgdmFyIGZpbmRfbm90ZSA9IHt9OyAvL2luZGV4ZWQgYnkgX2lkCiAgIAogICAgdmFyIHJvdzsKICAgIHdoaWxlKCByb3cgID0gZ2V0Um93KCkgKSB7CiAgICAgICAgdmFyIHRoaW5nID0gcm93LmRvYzsgICAgICAgIC8vIDwtLSBOQiBtdXN0IGJlIHVzZWQgd2l0aCA/aW5jbHVkZV9kb2NzPXRydWUKICAgICAgICAKICAgICAgICBpZiggIXRoaW5nIHx8ICF0aGluZy50eXBlICkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYoIHRoaW5nLnR5cGUgPT0gJ3NvdXJjZScgKSB7CiAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0aGluZzsKICAgICAgICAgICAgZmluZF9zb3VyY2Vbc291cmNlLl9pZF0gPSBzb3VyY2U7CiAgICAgICAgICAgIHNvdXJjZS51cGRhdGVkX3RpbWUgPSBuZXcgRGF0ZShzb3VyY2UudXBkYXRlZCkudG9JU09TdHJpbmcoKTsgICAvL25iIHNob3VsZCBub3QgcGVyc2lzdCB0aGlzIHByb3BlcnR5CiAgICAgICAgfQogICAgICAgIGlmKCB0aGluZy50eXBlID09ICdxdW90ZScgKSB7CiAgICAgICAgICAgIHZhciBxdW90ZSA9IHRoaW5nOwogICAgICAgICAgICBpZiggIWZpbmRfcXVvdGVbcXVvdGUuaGFzaF0gKSB7CiAgICAgICAgICAgICAgICBmaW5kX3F1b3RlW3F1b3RlLmhhc2hdID0gcXVvdGU7CiAgICAgICAgICAgICAgICBxdW90ZS51c2VycyA9IFtdOyAgIC8vbmIgc2hvdWxkIG5vdCBwZXJzaXN0IHRoaXMgcHJvcGVydHkgKHF1b3RlcyBhcmUgbm90IHVwZGF0ZWQpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmluZF9xdW90ZVtxdW90ZS5oYXNoXS51c2Vycy5wdXNoKHF1b3RlLnVzZXJfaWQpOwogICAgICAgIH0KICAgICAgICBpZiggdGhpbmcudHlwZSA9PSAnbm90ZScgKSB7CiAgICAgICAgICAgIHZhciBub3RlID0gdGhpbmc7CiAgICAgICAgICAgIGZpbmRfbm90ZVtub3RlLl9pZF0gPSBub3RlOwogICAgICAgIH0KICAgIH0KCiAgICAvL2F0dGFjaCBub3RlcyB0byBxdW90ZXMKICAgIHZhciBub3RlcyA9IF8udmFsdWVzKGZpbmRfbm90ZSk7CiAgICB2YXIgbm90ZV9vcnBoYW5faWRzID0gW107ICAgLy9pZHMgb2Ygbm90ZXMgd2l0aCBubyBxdW90ZSBmb3VuZDsgCiAgICBfLmVhY2gobm90ZXMsIGZ1bmN0aW9uKG5vdGUpIHsKICAgICAgICB2YXIgcXVvdGUgPSBmaW5kX3F1b3RlW25vdGUucXVvdGVfaGFzaF07CiAgICAgICAgaWYoICFxdW90ZSApIHsKICAgICAgICAgICAgbm90ZV9vcnBoYW5faWRzLnB1c2gobm90ZS5faWQpOwogICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgaWYoICFxdW90ZS5ub3RlcyApewogICAgICAgICAgICAgICAgcXVvdGUubm90ZXMgPSBbXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBxdW90ZS5ub3Rlcy5wdXNoKG5vdGUpOwogICAgICAgIH0KICAgIH0pOwogICAgLy8gZm9yIG5vdyB3ZSBkb24ndCBkbyBhbnl0aGluZyB3aXRoIHRoZSBub3RlIG9ycGhhbnMKICAgIAogICAgLy9hdHRhY2ggc291cmNlcyB0byBxdW90ZXMKICAgIHZhciBxdW90ZXMgPSBfLnZhbHVlcyhmaW5kX3F1b3RlKTsKICAgIF8uZWFjaChxdW90ZXMsIGZ1bmN0aW9uKHF1b3RlKXsKICAgICAgICBxdW90ZS5zb3VyY2UgPSBmaW5kX3NvdXJjZVtxdW90ZS5zb3VyY2VfaWRdOyAvL21heSBiZSB1bmRlZmluZWQKICAgIH0pOwogICAgCiAgICBpZiggcmVxLmNsaWVudCApIHsKICAgICAgICB3aW5kb3cucXVvdGVzID0gcXVvdGVzOyAvL1RPRE8gZGVidWcgb25seQoKICAgICAgICAkKGRvY3VtZW50KS5vbmUoJ25yYW1hX3BhZ2VfbG9hZGVkJywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCgnLl9zb3J0LW1lJykuc29ydGxpc3QoKTsKICAgICAgICAgICAgJCgndGV4dGFyZWEuX25yYW1hLW5vdGUtY29udGVudCcpLmF1dG9ncm93KCk7CiAgICAgICAgfSk7CiAgICB9CiAgICAKICAgIHZhciBjb250ZW50ID0gdGVtcGxhdGVzLnJlbmRlcignZmxvdy5odG1sJywgcmVxLCBfKHsKICAgICAgICAgICAgcXVvdGVzIDogcXVvdGVzCiAgICAgICAgfSkuZXh0ZW5kKCBtYWtlX3VuaXZlcnNhbF90ZW1wbGF0ZV9kYXRhKHJlcSkgKQogICAgKTsKCgogICAgLy8gLS0gY29uZmlndXJlIG5yYW1hLCBhdHRhY2ggZXZlbnQgbGlzdG5lcnMgKGNvcGllZCB2ZXJiYXRpbSBmcm9tIGV4cG9ydHMucXVvdGVzKQogICAgaWYoIHJlcS5jbGllbnQgKSB7CiAgICAgICAgCiAgICAgICAgdmFyIG5yYW1hID0gbnJhbWFfaW5pdChmaW5kX3NvdXJjZSk7CiAgICAgICAgd2luZG93Lm5yYW1hID0gbnJhbWE7ICAgICAgICAgICAgICAgICAgIC8vVE9ETyByZW1vdmUhCiAgICAgICAgCiAgICAgICAgJChkb2N1bWVudCkub25lKCducmFtYV9wYWdlX2xvYWRlZCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoJy5fbnJhbWEtbm90ZScpLmVhY2goZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciAkbm90ZSA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICB2YXIgbm90ZV9pZCA9ICRub3RlLmF0dHIoJ2lkJyk7CiAgICAgICAgICAgICAgICAkbm90ZS5kYXRhKCducmFtYV9ub3RlJywgZmluZF9ub3RlW25vdGVfaWRdKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvL3NhdmUgYWZ0ZXIgbm90ZXMgaGF2ZSBiZWVuIGVkaXRlZAogICAgICAgICAgICAkKCd0ZXh0YXJlYS5fbnJhbWEtbm90ZS1jb250ZW50Jykub25lKCdibHVyJywgbnJhbWEubm90ZXMudXBkYXRlX29uX2JsdXIpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy9jb25maWd1cmUgYWRkIGEgbm90ZQogICAgICAgICAgICAkKCcuYWRkLWEtbm90ZScpLmRpZSgpLmxpdmUoJ2NsaWNrJywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhZGQgYSBub3RlIC4uLicpOwogICAgICAgICAgICAgICAgdmFyICRxdW90ZSA9ICQodGhpcykucGFyZW50cygnLl9ucmFtYS1xdW90ZScpLmZpcnN0KCk7CiAgICAgICAgICAgICAgICB2YXIgcXVvdGUgPSBmaW5kX3F1b3RlWyRxdW90ZS5hdHRyKCdpZCcpXTsKICAgICAgICAgICAgICAgIHZhciBub3RlID0gbnJhbWEubm90ZXMuY3JlYXRlKHF1b3RlKTsKICAgICAgICAgICAgICAgIC8vYWRkIHRvIHBhZ2UgZGF0YQogICAgICAgICAgICAgICAgZmluZF9ub3RlW25vdGUuX2lkXSA9IG5vdGU7CiAgICAgICAgICAgICAgICAvL2Rpc3BsYXkgbm90ZQogICAgICAgICAgICAgICAgdmFyIG5vdGVfaHRtbCA9ICc8bGkgaWQ9Iicrbm90ZS5faWQrJyIgY2xhc3M9Il9ucmFtYS1ub3RlIj48dGV4dGFyZWEgY2xhc3M9Il9ucmFtYS1ub3RlLWNvbnRlbnQiPicrbm90ZS5jb250ZW50Kyc8L3RleHRhcmVhPjwvbGk+JzsKICAgICAgICAgICAgICAgIHZhciAkbm90ZSA9ICQobm90ZV9odG1sKTsKICAgICAgICAgICAgICAgICQoJ3VsLm5vdGVzJywkcXVvdGUpLnByZXBlbmQoJG5vdGUpOwogICAgICAgICAgICAgICAgJG5vdGUgPSAkKCcjJytub3RlLl9pZCk7ICAgICAgICAvL292ZXJ3cml0ZSBhZnRlciBwcmVwZW5kCiAgICAgICAgICAgICAgICAkbm90ZS5kYXRhKCducmFtYV9ub3RlJyxub3RlKTsKICAgICAgICAgICAgICAgICQoJ3RleHRhcmVhJywgJG5vdGUpLmZvY3VzKCkuc2VsZWN0KCkub25lKCdibHVyJywgbnJhbWEubm90ZXMudXBkYXRlX29uX2JsdXIpOwogICAgICAgICAgICAgICAgJG5vdGUuaGlkZSgpLnNob3coNTAwLCBmdW5jdGlvbigpeyAkKCcjJytub3RlLl9pZCkuYXV0b2dyb3coKS5mb2N1cygpLnNlbGVjdCgpOyB9KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy9UT0RPIGNhbiBvbmx5IGRvIHRoaXMgaWYgdXNlciBvd25zIHRoZSBxdW90ZSEhIQogICAgICAgICAgICAKICAgICAgICAgICAgLy9jb25maWd1cmUgZGVsZXRlIGEgcXVvdGUKICAgICAgICAgICAgdmFyIGRlbGV0ZV9vbl9tZXRhX2NsaWNrID0gZnVuY3Rpb24oZSl7CiAgICAgICAgICAgICAgICBpZiggIWUuYWx0S2V5ICYmICFlLm1ldGFLZXkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyICRxdW90ZSA9ICQodGhpcykucGFyZW50cygnLl9ucmFtYS1xdW90ZScpLmZpcnN0KCk7CiAgICAgICAgICAgICAgICB2YXIgcXVvdGUgPSBmaW5kX3F1b3RlWyAkcXVvdGUuYXR0cignaWQnKSBdOwogICAgICAgICAgICAgICAgaWYoIHF1b3RlLnVzZXJfaWRbMF0gIT0gJyonICkgewogICAgICAgICAgICAgICAgICAgIGlmKCAhcmVxLnVzZXJDdHggfHwgcmVxLnVzZXJDdHgubmFtZSAhPSBxdW90ZS51c2VyX2lkICkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2Fubm90IGRlbGV0ZSBhbm90aGVyIHVzZXJzIHF1b3RlcycpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyICRub3RlcyA9ICAkKCcuX25yYW1hLW5vdGUnLCAkcXVvdGUpOyAgCiAgICAgICAgICAgICAgICBpZiggJG5vdGVzLmxlbmd0aCAhPSAwICkgewogICAgICAgICAgICAgICAgICAgIC8vZG9uJ3QgZGVsZXRlIHF1b3RlcyB3aXRoIG5vdGVzIGF0dGFjaGVkIC4uLgogICAgICAgICAgICAgICAgICAgICRxdW90ZS5jc3Moeydib3JkZXItdG9wJzonMXB4IGRhc2hlZCByZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlci1ib3R0b20nOicxcHggZGFzaGVkIHJlZCd9KQogICAgICAgICAgICAgICAgICAgIC8vLi4uIGluc3RlYWQgbWFrZSB0aGUgcmVsZXZhbnQgbm90ZXMgYm91bmNlCiAgICAgICAgICAgICAgICAgICAgJG5vdGVzLmVmZmVjdCgnYm91bmNlJywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJHF1b3RlLmNzcyh7J2JvcmRlci10b3AnOidub25lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLWJvdHRvbSc6J25vbmUnfSw1MDApOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHRoZSBxdW90ZQogICAgICAgICAgICAgICAgJHF1b3RlLmNzcygnYmFja2dyb3VuZC1jb2xvcicsJ29yYW5nZScpOwogICAgICAgICAgICAgICAgbnJhbWEucGVyc2lzdC5ybShxdW90ZSwgZnVuY3Rpb24oZXJyb3IsIGRhdGEpewogICAgICAgICAgICAgICAgICAgIGlmKCBlcnJvciApIHsKICAgICAgICAgICAgICAgICAgICAgICAgbnJhbWEuX2RlYnVnKHttc2c6J25yYW1hOiBlcnJvciByZW1vdmluZyBxdW90ZScsZXJyb3I6ZXJyb3J9KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkcXVvdGUuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywncmVkJykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlKHsnYmFja2dyb3VuZC1jb2xvcic6J2JsYWNrJ30sIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1b3RlLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJCgnLnF1b3RlLWNvbnRlbnQnKS5kaWUoKS5saXZlKCdjbGljaycsIGRlbGV0ZV9vbl9tZXRhX2NsaWNrKTsKICAgICAgICB9KTsKICAgIH0KICAgIAogICAgCgogICAgcmV0dXJuIHt0aXRsZTogbWFrZV90aXRsZSgnZmxvdycscmVxKSwgY29udGVudDogY29udGVudH07Cgp9CgoKCi8qKgogKiBsaXN0cyBxdW90ZXMgb3JnYW5pc2VkIGJ5IHNvdXJjZS4KICogY2FuIGhhbmRsZSBvbmUgb3IgbW9yZSBzb3VyY2VzLgogKiBtYWtlcyBubyBhc3N1bXB0aW9ucyBhYm91dCBrZXlzIG9yIHZhbHVlczsgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGluY2x1ZGVfZG9jcwogKiAKICogZm9yIHVzZSB3aXRoCiAqICAgLSAgL3NvdXJjZXMvOnNvdXJjZQogKiAgIC0gIC91c2Vycy86dXNlci9zb3VyY2VzLzpzb3VyY2UKICogICAtIC90YWdzLzp0YWcKICogICAtIC91c2Vycy86dXNlci90YWdzLzp0YWcKICovCmV4cG9ydHMucXVvdGVzID0gZnVuY3Rpb24oaGVhZCwgcmVxKSB7CiAgICBzdGFydCh7Y29kZTogMjAwLCBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2h0bWwnfX0pOwoKICAgIHZhciBmaW5kX3NvdXJjZSA9IHt9OyAgIC8vaW5kZXhlZCBieSBwYWdlX2lkLCB0aGUgZmlyc3Qgc291cmNlIHdlIGZpbmQgZ2V0cyBwcmlvcml0eQogICAgdmFyIGZpbmRfcXVvdGUgPSB7fTsgICAgLy9pbmRleGVkIGJ5IHF1b3RlX2hhc2ggCiAgICB2YXIgbm90ZXNfZm9yX3F1b3RlcyA9IHt9OwogICAgdmFyIGZpbmRfbm90ZSA9IHt9OyAvL2luZGV4ZWQgYnkgX2lkCiAgIAogICAgdmFyIHJvdzsKICAgIHdoaWxlKCByb3cgID0gZ2V0Um93KCkgKSB7CiAgICAgICAgdmFyIHRoaW5nID0gcm93LmRvYzsgICAgICAgIC8vIDwtLSBOQiBtdXN0IGJlIHVzZWQgd2l0aCA/aW5jbHVkZV9kb2NzPXRydWUKICAgICAgICAKICAgICAgICBpZiggIXRoaW5nIHx8ICF0aGluZy50eXBlICkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYoIHRoaW5nLnR5cGUgPT0gJ3NvdXJjZScgKSB7CiAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0aGluZzsKICAgICAgICAgICAgaWYoICFmaW5kX3NvdXJjZVtzb3VyY2UucGFnZV9pZF0gKSB7CiAgICAgICAgICAgICAgICBmaW5kX3NvdXJjZVtzb3VyY2UucGFnZV9pZF0gPSBzb3VyY2U7CiAgICAgICAgICAgICAgICBzb3VyY2UudXBkYXRlZF90aW1lID0gbmV3IERhdGUoc291cmNlLnVwZGF0ZWQpLnRvSVNPU3RyaW5nKCk7ICAgLy9uYiBzaG91bGQgbm90IHBlcnNpc3QgdGhpcyBwcm9wZXJ0eQogICAgICAgICAgICAgICAgc291cmNlLnVzZXJzID0gW107ICAgICAgICAgIC8vbmIgc2hvdWxkIG5vdCBwZXJzaXN0IHRoaXMgcHJvcGVydHkKICAgICAgICAgICAgfQogICAgICAgICAgICBmaW5kX3NvdXJjZVtzb3VyY2UucGFnZV9pZF0udXNlcnMucHVzaChzb3VyY2UudXNlcl9pZCk7CiAgICAgICAgfQogICAgICAgIGlmKCB0aGluZy50eXBlID09ICdxdW90ZScgKSB7CiAgICAgICAgICAgIHZhciBxdW90ZSA9IHRoaW5nOwogICAgICAgICAgICBpZiggIWZpbmRfcXVvdGVbcXVvdGUuaGFzaF0gKSB7CiAgICAgICAgICAgICAgICBmaW5kX3F1b3RlW3F1b3RlLmhhc2hdID0gcXVvdGU7CiAgICAgICAgICAgICAgICBxdW90ZS51c2VycyA9IFtdOyAgIC8vbmIgc2hvdWxkIG5vdCBwZXJzaXN0IHRoaXMgcHJvcGVydHkgKHF1b3RlcyBhcmUgbm90IHVwZGF0ZWQpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmluZF9xdW90ZVtxdW90ZS5oYXNoXS51c2Vycy5wdXNoKHF1b3RlLnVzZXJfaWQpOwogICAgICAgIH0KICAgICAgICBpZiggdGhpbmcudHlwZSA9PSAnbm90ZScgKSB7CiAgICAgICAgICAgIHZhciBub3RlID0gdGhpbmc7CiAgICAgICAgICAgIGZpbmRfbm90ZVtub3RlLl9pZF0gPSBub3RlOwogICAgICAgICAgICBpZiggIW5vdGVzX2Zvcl9xdW90ZXNbbm90ZS5xdW90ZV9oYXNoXSAgKSB7CiAgICAgICAgICAgICAgICBub3Rlc19mb3JfcXVvdGVzW25vdGUucXVvdGVfaGFzaF0gPSBbXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBub3Rlc19mb3JfcXVvdGVzW25vdGUucXVvdGVfaGFzaF0ucHVzaChub3RlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gLS0gYXR0YWNoIG5vdGVzIHRvIHF1b3RlcyBhbmQgcXVvdGVzIHRvIHNvdXJjZXMKICAgIHZhciBxdW90ZXMgPSBfKGZpbmRfcXVvdGUpLnZhbHVlcygpOwogICAgdmFyIG9ycGhhbmVkX3F1b3RlcyA9IFtdOyAgICAgICAgLy9mb3Igbm93IHdlIGRvbid0IGRvIGFueXRoaW5nIHdpdGggb3ByaGFucwogICAgXyhxdW90ZXMpLmVhY2goZnVuY3Rpb24ocXVvdGUpIHsKICAgICAgICBxdW90ZS5ub3RlcyA9IG5vdGVzX2Zvcl9xdW90ZXNbcXVvdGUuaGFzaF0gfHwgW107CiAgICAgICAgdmFyIHNvdXJjZSA9IGZpbmRfc291cmNlW3F1b3RlLnBhZ2VfaWRdOwogICAgICAgIGlmKCAhc291cmNlICkgewogICAgICAgICAgICBvcnBoYW5lZF9xdW90ZXMucHVzaChxdW90ZSk7CiAgICAgICAgfSBlbHNlewogICAgICAgICAgICBpZiggIXNvdXJjZS5xdW90ZXMgKSB7CiAgICAgICAgICAgICAgICBzb3VyY2UucXVvdGVzID0gW107CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc291cmNlLnF1b3Rlcy5wdXNoKHF1b3RlKTsKICAgICAgICB9CiAgICB9KTsKICAgIHZhciBzb3VyY2VzID0gXyhmaW5kX3NvdXJjZSkudmFsdWVzKCk7CgogICAgLy8gLS0gZm9yIGVhY2ggc291cmNlLCBzb3J0IGl0cyBxdW90ZXMgYnkgcGFnZV9vcmRlcgogICAgdmFyIGFycmF5X2NvbXBhcml0b3IgPSBmdW5jdGlvbihhLGIpewogICAgICAgIGlmKCBhLmxlbmd0aCA9PSAwICkgewogICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggPT0gMCA/IDAgOiAtMSAvKmIgZmlyc3QqLzsKICAgICAgICB9CiAgICAgICAgaWYoIGIubGVuZ3RoID09IDAgKSB7CiAgICAgICAgICAgIHJldHVybiBhLmxlbmd0aCA9PSAwID8gMCA6IDEgLyogYSBmaXJzdCAqLzsKICAgICAgICB9CiAgICAgICAgdmFyIGxlZnQgPSBhWzBdOwogICAgICAgIHZhciByaWdodCA9IGJbMF07CiAgICAgICAgaWYoIGxlZnQgPT0gcmlnaHQgKSB7CiAgICAgICAgICAgIHJldHVybiBhcnJheV9jb21wYXJpdG9yKGEuc2xpY2UoMSksYi5zbGljZSgxKSk7IC8vbmIgc2xpY2UgZG9lcyBub3QgbW9kaWZ5IGluIHBsYWNlCiAgICAgICAgfQogICAgICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgLyogK3ZlID0gYSBmaXJzdCAqLzsKICAgIH07CiAgICB2YXIgcGFnZV9vcmRlcl9jb21wYXJpdG9yID0gZnVuY3Rpb24oYSxiKSB7CiAgICAgICAgLy8gLS0gYXJyYXlzCiAgICAgICAgaWYoIGEgaW5zdGFuY2VvZiBBcnJheSAmJiBiIGluc3RhbmNlb2YgQXJyYXkgKSB7CiAgICAgICAgICAgIHJldHVybiBhcnJheV9jb21wYXJpdG9yKGEsYik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYoIGEgaW5zdGFuY2VvZiBBcnJheSApIHsgcmV0dXJuIDE7IH0gLy9hcnJheXMgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZQogICAgICAgICAgICBpZiggYiBpbnN0YW5jZW9mIEFycmF5ICkgeyByZXR1cm4gLTE7IH0KICAgICAgICB9CiAgICAgICAgLy8gLS0gbnVtYmVycwogICAgICAgIHZhciBhX251bSA9IHBhcnNlRmxvYXQoYSksCiAgICAgICAgICAgIGJfbnVtID0gcGFyc2VGbG9hdChiKSwKICAgICAgICAgICAgX2lzX251bSA9IGZ1bmN0aW9uKG4peyByZXR1cm4gIWlzTmFOKG4pICYmIGlzRmluaXRlKG4pOyB9ICAvL3RoYW5rIHlvdSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4MDgyL3ZhbGlkYXRlLW51bWJlcnMtaW4tamF2YXNjcmlwdC1pc251bWVyaWMKICAgICAgICAgICAgYV9pc19udW0gPSBfaXNfbnVtKGFfbnVtKSwKICAgICAgICAgICAgYl9pc19udW0gPSBfaXNfbnVtKGJfbnVtKTsKICAgICAgICBpZiggYV9pc19udW0gJiYgYl9pc19udW0gKSB7ICAKICAgICAgICAgICAgcmV0dXJuIGFfbnVtIC0gYl9udW07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYoIGFfbnVtICkgeyByZXR1cm4gMTsgfQogICAgICAgICAgICBpZiggYl9udW0gKSB7IHJldHVybiAtMTsgfQogICAgICAgIH0KICAgICAgICAvLyAtLSB3aGF0ZXZlciBlbHNlCiAgICAgICAgcmV0dXJuIGEgPiBiID8gMSA6IChhIDwgYiA/IC0xIDogMCk7CiAgICB9CiAgICB2YXIgcXVvdGVfc29ydGVyID0gZnVuY3Rpb24oYSxiKXsgcmV0dXJuIHBhZ2Vfb3JkZXJfY29tcGFyaXRvcihhLnBhZ2Vfb3JkZXIsIGIucGFnZV9vcmRlcikgfTsgICAgLy8gPC0tIE5CIGIsYSBiZWNhdXNlIHdlIHdhbnQgYXNjZW5kaW5nIG9yZGVyCiAgICBfKHNvdXJjZXMpLmVhY2goZnVuY3Rpb24oc291cmNlKXsKICAgICAgICB2YXIgc291cmNlX3F1b3RlcyA9IHNvdXJjZS5xdW90ZXM7CiAgICAgICAgaWYoIHNvdXJjZV9xdW90ZXMgKSB7CiAgICAgICAgICAgIHNvdXJjZV9xdW90ZXMuc29ydChxdW90ZV9zb3J0ZXIpOwogICAgICAgIH0KICAgIH0pOwogICAgCiAgICAKICAgIC8vIC0tIGNvbmZpZ3VyZSBucmFtYSwgYXR0YWNoIGV2ZW50IGxpc3RuZXJzCiAgICBpZiggcmVxLmNsaWVudCApIHsKICAgICAgICAKICAgICAgICB2YXIgbnJhbWEgPSBucmFtYV9pbml0KGZpbmRfc291cmNlKTsKICAgICAgICB3aW5kb3cubnJhbWEgPSBucmFtYTsgICAgICAgICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSEKICAgICAgICAKICAgICAgICAkKGRvY3VtZW50KS5vbmUoJ25yYW1hX3BhZ2VfbG9hZGVkJywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCgnLl9ucmFtYS1ub3RlJykuZWFjaChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyICRub3RlID0gJCh0aGlzKTsKICAgICAgICAgICAgICAgIHZhciBub3RlX2lkID0gJG5vdGUuYXR0cignaWQnKTsKICAgICAgICAgICAgICAgICRub3RlLmRhdGEoJ25yYW1hX25vdGUnLCBmaW5kX25vdGVbbm90ZV9pZF0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vc2F2ZSBhZnRlciBub3RlcyBoYXZlIGJlZW4gZWRpdGVkCiAgICAgICAgICAgICQoJ3RleHRhcmVhLl9ucmFtYS1ub3RlLWNvbnRlbnQnKS5vbmUoJ2JsdXInLCBucmFtYS5ub3Rlcy51cGRhdGVfb25fYmx1cik7CiAgICAgICAgICAgIAogICAgICAgICAgICAvL2NvbmZpZ3VyZSBhZGQgYSBub3RlCiAgICAgICAgICAgICQoJy5hZGQtYS1ub3RlJykuZGllKCkubGl2ZSgnY2xpY2snLCBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FkZCBhIG5vdGUgLi4uJyk7CiAgICAgICAgICAgICAgICB2YXIgJHF1b3RlID0gJCh0aGlzKS5wYXJlbnRzKCcuX25yYW1hLXF1b3RlJykuZmlyc3QoKTsKICAgICAgICAgICAgICAgIHZhciBxdW90ZSA9IGZpbmRfcXVvdGVbJHF1b3RlLmF0dHIoJ2lkJyldOwogICAgICAgICAgICAgICAgdmFyIG5vdGUgPSBucmFtYS5ub3Rlcy5jcmVhdGUocXVvdGUpOwogICAgICAgICAgICAgICAgLy9hZGQgdG8gcGFnZSBkYXRhCiAgICAgICAgICAgICAgICBmaW5kX25vdGVbbm90ZS5faWRdID0gbm90ZTsKICAgICAgICAgICAgICAgIC8vZGlzcGxheSBub3RlCiAgICAgICAgICAgICAgICB2YXIgbm90ZV9odG1sID0gJzxsaSBpZD0iJytub3RlLl9pZCsnIiBjbGFzcz0iX25yYW1hLW5vdGUiPjx0ZXh0YXJlYSBjbGFzcz0iX25yYW1hLW5vdGUtY29udGVudCI+Jytub3RlLmNvbnRlbnQrJzwvdGV4dGFyZWE+PC9saT4nOwogICAgICAgICAgICAgICAgdmFyICRub3RlID0gJChub3RlX2h0bWwpOwogICAgICAgICAgICAgICAgJCgndWwubm90ZXMnLCRxdW90ZSkucHJlcGVuZCgkbm90ZSk7CiAgICAgICAgICAgICAgICAkbm90ZSA9ICQoJyMnK25vdGUuX2lkKTsgICAgICAgIC8vb3ZlcndyaXRlIGFmdGVyIHByZXBlbmQKICAgICAgICAgICAgICAgICRub3RlLmRhdGEoJ25yYW1hX25vdGUnLG5vdGUpOwogICAgICAgICAgICAgICAgJCgndGV4dGFyZWEnLCAkbm90ZSkuZm9jdXMoKS5zZWxlY3QoKS5vbmUoJ2JsdXInLCBucmFtYS5ub3Rlcy51cGRhdGVfb25fYmx1cik7CiAgICAgICAgICAgICAgICAkbm90ZS5oaWRlKCkuc2hvdyg1MDAsIGZ1bmN0aW9uKCl7ICQoJyMnK25vdGUuX2lkKS5hdXRvZ3JvdygpLmZvY3VzKCkuc2VsZWN0KCk7IH0pOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RvbmUnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvL1RPRE8gY2FuIG9ubHkgZG8gdGhpcyBpZiB1c2VyIG93bnMgdGhlIHF1b3RlISEhCiAgICAgICAgICAgIAogICAgICAgICAgICAvL2NvbmZpZ3VyZSBkZWxldGUgYSBxdW90ZQogICAgICAgICAgICB2YXIgZGVsZXRlX29uX21ldGFfY2xpY2sgPSBmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgIGlmKCAhZS5hbHRLZXkgJiYgIWUubWV0YUtleSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJHF1b3RlID0gJCh0aGlzKS5wYXJlbnRzKCcuX25yYW1hLXF1b3RlJykuZmlyc3QoKTsKICAgICAgICAgICAgICAgIHZhciBxdW90ZSA9IGZpbmRfcXVvdGVbICRxdW90ZS5hdHRyKCdpZCcpIF07CiAgICAgICAgICAgICAgICBpZiggcXVvdGUudXNlcl9pZFswXSAhPSAnKicgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoICFyZXEudXNlckN0eCB8fCByZXEudXNlckN0eC5uYW1lICE9IHF1b3RlLnVzZXJfaWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYW5ub3QgZGVsZXRlIGFub3RoZXIgdXNlcnMgcXVvdGVzJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgJG5vdGVzID0gICQoJy5fbnJhbWEtbm90ZScsICRxdW90ZSk7ICAKICAgICAgICAgICAgICAgIGlmKCAkbm90ZXMubGVuZ3RoICE9IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgLy9kb24ndCBkZWxldGUgcXVvdGVzIHdpdGggbm90ZXMgYXR0YWNoZWQgLi4uCiAgICAgICAgICAgICAgICAgICAgJHF1b3RlLmNzcyh7J2JvcmRlci10b3AnOicxcHggZGFzaGVkIHJlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLWJvdHRvbSc6JzFweCBkYXNoZWQgcmVkJ30pCiAgICAgICAgICAgICAgICAgICAgLy8uLi4gaW5zdGVhZCBtYWtlIHRoZSByZWxldmFudCBub3RlcyBib3VuY2UKICAgICAgICAgICAgICAgICAgICAkbm90ZXMuZWZmZWN0KCdib3VuY2UnLCBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAkcXVvdGUuY3NzKHsnYm9yZGVyLXRvcCc6J25vbmUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXItYm90dG9tJzonbm9uZSd9LDUwMCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9yZW1vdmUgdGhlIHF1b3RlCiAgICAgICAgICAgICAgICAkcXVvdGUuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywnb3JhbmdlJyk7CiAgICAgICAgICAgICAgICBucmFtYS5wZXJzaXN0LnJtKHF1b3RlLCBmdW5jdGlvbihlcnJvciwgZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgaWYoIGVycm9yICkgewogICAgICAgICAgICAgICAgICAgICAgICBucmFtYS5fZGVidWcoe21zZzonbnJhbWE6IGVycm9yIHJlbW92aW5nIHF1b3RlJyxlcnJvcjplcnJvcn0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdW90ZS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCdyZWQnKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGUoeydiYWNrZ3JvdW5kLWNvbG9yJzonYmxhY2snfSwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVvdGUucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkKCcucXVvdGUtY29udGVudCcpLmRpZSgpLmxpdmUoJ2NsaWNrJywgZGVsZXRlX29uX21ldGFfY2xpY2spOwogICAgICAgIH0pOwogICAgfQogICAgCiAgICAKICAgIAogICAgLy9UT0RPIHJlbW92ZSAhCiAgICBpZiggcmVxLmNsaWVudCApIHsKICAgICAgICB3aW5kb3cuc291cmNlcyA9IHNvdXJjZXM7CiAgICAgICAgd2luZG93LmZpbmRfcXVvdGUgPSBmaW5kX3F1b3RlOwogICAgfQogICAgdmFyIGNvbnRlbnQgPSB0ZW1wbGF0ZXMucmVuZGVyKCdxdW90ZXMuaHRtbCcsIHJlcSwgXyh7CiAgICAgICAgICAgIHNvdXJjZXMgOiBzb3VyY2VzLAogICAgICAgICAgICBub19zb3VyY2VzIDogKHNvdXJjZXMubGVuZ3RoID09IDApICAvL2JlY2F1c2UgISFbXSA9PSB0cnVlCiAgICAgICAgfSkuZXh0ZW5kKCBtYWtlX3VuaXZlcnNhbF90ZW1wbGF0ZV9kYXRhKHJlcSkgKQogICAgKTsKCiAgICByZXR1cm4ge3RpdGxlOiBtYWtlX3RpdGxlKCdub3RlcycscmVxKSwgY29udGVudDogY29udGVudCB9Owp9CgoKCgoKfSl9OwoKLyoqKioqKioqKiogbGliL21kNSAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi9tZDUiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoKICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZQogKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJGQyAxMzIxLgogKiBWZXJzaW9uIDIuMiBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDkKICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldAogKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2UKICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby4KICovCgovKgogKiBDb25maWd1cmFibGUgdmFyaWFibGVzLiBZb3UgbWF5IG5lZWQgdG8gdHdlYWsgdGhlc2UgdG8gYmUgY29tcGF0aWJsZSB3aXRoCiAqIHRoZSBzZXJ2ZXItc2lkZSwgYnV0IHRoZSBkZWZhdWx0cyB3b3JrIGluIG1vc3QgY2FzZXMuCiAqLwp2YXIgaGV4Y2FzZSA9IDA7ICAgLyogaGV4IG91dHB1dCBmb3JtYXQuIDAgLSBsb3dlcmNhc2U7IDEgLSB1cHBlcmNhc2UgICAgICAgICovCnZhciBiNjRwYWQgID0gIiI7ICAvKiBiYXNlLTY0IHBhZCBjaGFyYWN0ZXIuICI9IiBmb3Igc3RyaWN0IFJGQyBjb21wbGlhbmNlICAgKi8KCi8qCiAqIFRoZXNlIGFyZSB0aGUgZnVuY3Rpb25zIHlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gY2FsbAogKiBUaGV5IHRha2Ugc3RyaW5nIGFyZ3VtZW50cyBhbmQgcmV0dXJuIGVpdGhlciBoZXggb3IgYmFzZS02NCBlbmNvZGVkIHN0cmluZ3MKICovCmZ1bmN0aW9uIGhleF9tZDUocykgICAgeyByZXR1cm4gcnN0cjJoZXgocnN0cl9tZDUoc3RyMnJzdHJfdXRmOChzKSkpOyB9CmZ1bmN0aW9uIGI2NF9tZDUocykgICAgeyByZXR1cm4gcnN0cjJiNjQocnN0cl9tZDUoc3RyMnJzdHJfdXRmOChzKSkpOyB9CmZ1bmN0aW9uIGFueV9tZDUocywgZSkgeyByZXR1cm4gcnN0cjJhbnkocnN0cl9tZDUoc3RyMnJzdHJfdXRmOChzKSksIGUpOyB9CmZ1bmN0aW9uIGhleF9obWFjX21kNShrLCBkKQogIHsgcmV0dXJuIHJzdHIyaGV4KHJzdHJfaG1hY19tZDUoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSkpOyB9CmZ1bmN0aW9uIGI2NF9obWFjX21kNShrLCBkKQogIHsgcmV0dXJuIHJzdHIyYjY0KHJzdHJfaG1hY19tZDUoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSkpOyB9CmZ1bmN0aW9uIGFueV9obWFjX21kNShrLCBkLCBlKQogIHsgcmV0dXJuIHJzdHIyYW55KHJzdHJfaG1hY19tZDUoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSksIGUpOyB9CgovKgogKiBQZXJmb3JtIGEgc2ltcGxlIHNlbGYtdGVzdCB0byBzZWUgaWYgdGhlIFZNIGlzIHdvcmtpbmcKICovCmZ1bmN0aW9uIG1kNV92bV90ZXN0KCkKewogIHJldHVybiBoZXhfbWQ1KCJhYmMiKS50b0xvd2VyQ2FzZSgpID09ICI5MDAxNTA5ODNjZDI0ZmIwZDY5NjNmN2QyOGUxN2Y3MiI7Cn0KCi8qCiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGEgcmF3IHN0cmluZwogKi8KZnVuY3Rpb24gcnN0cl9tZDUocykKewogIHJldHVybiBiaW5sMnJzdHIoYmlubF9tZDUocnN0cjJiaW5sKHMpLCBzLmxlbmd0aCAqIDgpKTsKfQoKLyoKICogQ2FsY3VsYXRlIHRoZSBITUFDLU1ENSwgb2YgYSBrZXkgYW5kIHNvbWUgZGF0YSAocmF3IHN0cmluZ3MpCiAqLwpmdW5jdGlvbiByc3RyX2htYWNfbWQ1KGtleSwgZGF0YSkKewogIHZhciBia2V5ID0gcnN0cjJiaW5sKGtleSk7CiAgaWYoYmtleS5sZW5ndGggPiAxNikgYmtleSA9IGJpbmxfbWQ1KGJrZXksIGtleS5sZW5ndGggKiA4KTsKCiAgdmFyIGlwYWQgPSBBcnJheSgxNiksIG9wYWQgPSBBcnJheSgxNik7CiAgZm9yKHZhciBpID0gMDsgaSA8IDE2OyBpKyspCiAgewogICAgaXBhZFtpXSA9IGJrZXlbaV0gXiAweDM2MzYzNjM2OwogICAgb3BhZFtpXSA9IGJrZXlbaV0gXiAweDVDNUM1QzVDOwogIH0KCiAgdmFyIGhhc2ggPSBiaW5sX21kNShpcGFkLmNvbmNhdChyc3RyMmJpbmwoZGF0YSkpLCA1MTIgKyBkYXRhLmxlbmd0aCAqIDgpOwogIHJldHVybiBiaW5sMnJzdHIoYmlubF9tZDUob3BhZC5jb25jYXQoaGFzaCksIDUxMiArIDEyOCkpOwp9CgovKgogKiBDb252ZXJ0IGEgcmF3IHN0cmluZyB0byBhIGhleCBzdHJpbmcKICovCmZ1bmN0aW9uIHJzdHIyaGV4KGlucHV0KQp7CiAgdHJ5IHsgaGV4Y2FzZSB9IGNhdGNoKGUpIHsgaGV4Y2FzZT0wOyB9CiAgdmFyIGhleF90YWIgPSBoZXhjYXNlID8gIjAxMjM0NTY3ODlBQkNERUYiIDogIjAxMjM0NTY3ODlhYmNkZWYiOwogIHZhciBvdXRwdXQgPSAiIjsKICB2YXIgeDsKICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspCiAgewogICAgeCA9IGlucHV0LmNoYXJDb2RlQXQoaSk7CiAgICBvdXRwdXQgKz0gaGV4X3RhYi5jaGFyQXQoKHggPj4+IDQpICYgMHgwRikKICAgICAgICAgICArICBoZXhfdGFiLmNoYXJBdCggeCAgICAgICAgJiAweDBGKTsKICB9CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBiYXNlLTY0IHN0cmluZwogKi8KZnVuY3Rpb24gcnN0cjJiNjQoaW5wdXQpCnsKICB0cnkgeyBiNjRwYWQgfSBjYXRjaChlKSB7IGI2NHBhZD0nJzsgfQogIHZhciB0YWIgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyI7CiAgdmFyIG91dHB1dCA9ICIiOwogIHZhciBsZW4gPSBpbnB1dC5sZW5ndGg7CiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAzKQogIHsKICAgIHZhciB0cmlwbGV0ID0gKGlucHV0LmNoYXJDb2RlQXQoaSkgPDwgMTYpCiAgICAgICAgICAgICAgICB8IChpICsgMSA8IGxlbiA/IGlucHV0LmNoYXJDb2RlQXQoaSsxKSA8PCA4IDogMCkKICAgICAgICAgICAgICAgIHwgKGkgKyAyIDwgbGVuID8gaW5wdXQuY2hhckNvZGVBdChpKzIpICAgICAgOiAwKTsKICAgIGZvcih2YXIgaiA9IDA7IGogPCA0OyBqKyspCiAgICB7CiAgICAgIGlmKGkgKiA4ICsgaiAqIDYgPiBpbnB1dC5sZW5ndGggKiA4KSBvdXRwdXQgKz0gYjY0cGFkOwogICAgICBlbHNlIG91dHB1dCArPSB0YWIuY2hhckF0KCh0cmlwbGV0ID4+PiA2KigzLWopKSAmIDB4M0YpOwogICAgfQogIH0KICByZXR1cm4gb3V0cHV0Owp9CgovKgogKiBDb252ZXJ0IGEgcmF3IHN0cmluZyB0byBhbiBhcmJpdHJhcnkgc3RyaW5nIGVuY29kaW5nCiAqLwpmdW5jdGlvbiByc3RyMmFueShpbnB1dCwgZW5jb2RpbmcpCnsKICB2YXIgZGl2aXNvciA9IGVuY29kaW5nLmxlbmd0aDsKICB2YXIgaSwgaiwgcSwgeCwgcXVvdGllbnQ7CgogIC8qIENvbnZlcnQgdG8gYW4gYXJyYXkgb2YgMTYtYml0IGJpZy1lbmRpYW4gdmFsdWVzLCBmb3JtaW5nIHRoZSBkaXZpZGVuZCAqLwogIHZhciBkaXZpZGVuZCA9IEFycmF5KE1hdGguY2VpbChpbnB1dC5sZW5ndGggLyAyKSk7CiAgZm9yKGkgPSAwOyBpIDwgZGl2aWRlbmQubGVuZ3RoOyBpKyspCiAgewogICAgZGl2aWRlbmRbaV0gPSAoaW5wdXQuY2hhckNvZGVBdChpICogMikgPDwgOCkgfCBpbnB1dC5jaGFyQ29kZUF0KGkgKiAyICsgMSk7CiAgfQoKICAvKgogICAqIFJlcGVhdGVkbHkgcGVyZm9ybSBhIGxvbmcgZGl2aXNpb24uIFRoZSBiaW5hcnkgYXJyYXkgZm9ybXMgdGhlIGRpdmlkZW5kLAogICAqIHRoZSBsZW5ndGggb2YgdGhlIGVuY29kaW5nIGlzIHRoZSBkaXZpc29yLiBPbmNlIGNvbXB1dGVkLCB0aGUgcXVvdGllbnQKICAgKiBmb3JtcyB0aGUgZGl2aWRlbmQgZm9yIHRoZSBuZXh0IHN0ZXAuIEFsbCByZW1haW5kZXJzIGFyZSBzdG9yZWQgZm9yIGxhdGVyCiAgICogdXNlLgogICAqLwogIHZhciBmdWxsX2xlbmd0aCA9IE1hdGguY2VpbChpbnB1dC5sZW5ndGggKiA4IC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE1hdGgubG9nKGVuY29kaW5nLmxlbmd0aCkgLyBNYXRoLmxvZygyKSkpOwogIHZhciByZW1haW5kZXJzID0gQXJyYXkoZnVsbF9sZW5ndGgpOwogIGZvcihqID0gMDsgaiA8IGZ1bGxfbGVuZ3RoOyBqKyspCiAgewogICAgcXVvdGllbnQgPSBBcnJheSgpOwogICAgeCA9IDA7CiAgICBmb3IoaSA9IDA7IGkgPCBkaXZpZGVuZC5sZW5ndGg7IGkrKykKICAgIHsKICAgICAgeCA9ICh4IDw8IDE2KSArIGRpdmlkZW5kW2ldOwogICAgICBxID0gTWF0aC5mbG9vcih4IC8gZGl2aXNvcik7CiAgICAgIHggLT0gcSAqIGRpdmlzb3I7CiAgICAgIGlmKHF1b3RpZW50Lmxlbmd0aCA+IDAgfHwgcSA+IDApCiAgICAgICAgcXVvdGllbnRbcXVvdGllbnQubGVuZ3RoXSA9IHE7CiAgICB9CiAgICByZW1haW5kZXJzW2pdID0geDsKICAgIGRpdmlkZW5kID0gcXVvdGllbnQ7CiAgfQoKICAvKiBDb252ZXJ0IHRoZSByZW1haW5kZXJzIHRvIHRoZSBvdXRwdXQgc3RyaW5nICovCiAgdmFyIG91dHB1dCA9ICIiOwogIGZvcihpID0gcmVtYWluZGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkKICAgIG91dHB1dCArPSBlbmNvZGluZy5jaGFyQXQocmVtYWluZGVyc1tpXSk7CgogIHJldHVybiBvdXRwdXQ7Cn0KCi8qCiAqIEVuY29kZSBhIHN0cmluZyBhcyB1dGYtOC4KICogRm9yIGVmZmljaWVuY3ksIHRoaXMgYXNzdW1lcyB0aGUgaW5wdXQgaXMgdmFsaWQgdXRmLTE2LgogKi8KZnVuY3Rpb24gc3RyMnJzdHJfdXRmOChpbnB1dCkKewogIHZhciBvdXRwdXQgPSAiIjsKICB2YXIgaSA9IC0xOwogIHZhciB4LCB5OwoKICB3aGlsZSgrK2kgPCBpbnB1dC5sZW5ndGgpCiAgewogICAgLyogRGVjb2RlIHV0Zi0xNiBzdXJyb2dhdGUgcGFpcnMgKi8KICAgIHggPSBpbnB1dC5jaGFyQ29kZUF0KGkpOwogICAgeSA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoID8gaW5wdXQuY2hhckNvZGVBdChpICsgMSkgOiAwOwogICAgaWYoMHhEODAwIDw9IHggJiYgeCA8PSAweERCRkYgJiYgMHhEQzAwIDw9IHkgJiYgeSA8PSAweERGRkYpCiAgICB7CiAgICAgIHggPSAweDEwMDAwICsgKCh4ICYgMHgwM0ZGKSA8PCAxMCkgKyAoeSAmIDB4MDNGRik7CiAgICAgIGkrKzsKICAgIH0KCiAgICAvKiBFbmNvZGUgb3V0cHV0IGFzIHV0Zi04ICovCiAgICBpZih4IDw9IDB4N0YpCiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpOwogICAgZWxzZSBpZih4IDw9IDB4N0ZGKQogICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEMwIHwgKCh4ID4+PiA2ICkgJiAweDFGKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICggeCAgICAgICAgICYgMHgzRikpOwogICAgZWxzZSBpZih4IDw9IDB4RkZGRikKICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFMCB8ICgoeCA+Pj4gMTIpICYgMHgwRiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoKHggPj4+IDYgKSAmIDB4M0YpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCB4ICAgICAgICAgJiAweDNGKSk7CiAgICBlbHNlIGlmKHggPD0gMHgxRkZGRkYpCiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RjAgfCAoKHggPj4+IDE4KSAmIDB4MDcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCh4ID4+PiAxMikgJiAweDNGKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICgoeCA+Pj4gNiApICYgMHgzRiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoIHggICAgICAgICAmIDB4M0YpKTsKICB9CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogRW5jb2RlIGEgc3RyaW5nIGFzIHV0Zi0xNgogKi8KZnVuY3Rpb24gc3RyMnJzdHJfdXRmMTZsZShpbnB1dCkKewogIHZhciBvdXRwdXQgPSAiIjsKICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspCiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggaW5wdXQuY2hhckNvZGVBdChpKSAgICAgICAgJiAweEZGLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlucHV0LmNoYXJDb2RlQXQoaSkgPj4+IDgpICYgMHhGRik7CiAgcmV0dXJuIG91dHB1dDsKfQoKZnVuY3Rpb24gc3RyMnJzdHJfdXRmMTZiZShpbnB1dCkKewogIHZhciBvdXRwdXQgPSAiIjsKICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspCiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoaW5wdXQuY2hhckNvZGVBdChpKSA+Pj4gOCkgJiAweEZGLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNoYXJDb2RlQXQoaSkgICAgICAgICYgMHhGRik7CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcwogKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC4KICovCmZ1bmN0aW9uIHJzdHIyYmlubChpbnB1dCkKewogIHZhciBvdXRwdXQgPSBBcnJheShpbnB1dC5sZW5ndGggPj4gMik7CiAgZm9yKHZhciBpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkrKykKICAgIG91dHB1dFtpXSA9IDA7CiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDg7IGkgKz0gOCkKICAgIG91dHB1dFtpPj41XSB8PSAoaW5wdXQuY2hhckNvZGVBdChpIC8gOCkgJiAweEZGKSA8PCAoaSUzMik7CiAgcmV0dXJuIG91dHB1dDsKfQoKLyoKICogQ29udmVydCBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzIHRvIGEgc3RyaW5nCiAqLwpmdW5jdGlvbiBiaW5sMnJzdHIoaW5wdXQpCnsKICB2YXIgb3V0cHV0ID0gIiI7CiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDMyOyBpICs9IDgpCiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoaW5wdXRbaT4+NV0gPj4+IChpICUgMzIpKSAmIDB4RkYpOwogIHJldHVybiBvdXRwdXQ7Cn0KCi8qCiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGguCiAqLwpmdW5jdGlvbiBiaW5sX21kNSh4LCBsZW4pCnsKICAvKiBhcHBlbmQgcGFkZGluZyAqLwogIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgKChsZW4pICUgMzIpOwogIHhbKCgobGVuICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IGxlbjsKCiAgdmFyIGEgPSAgMTczMjU4NDE5MzsKICB2YXIgYiA9IC0yNzE3MzM4Nzk7CiAgdmFyIGMgPSAtMTczMjU4NDE5NDsKICB2YXIgZCA9ICAyNzE3MzM4Nzg7CgogIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikKICB7CiAgICB2YXIgb2xkYSA9IGE7CiAgICB2YXIgb2xkYiA9IGI7CiAgICB2YXIgb2xkYyA9IGM7CiAgICB2YXIgb2xkZCA9IGQ7CgogICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDBdLCA3ICwgLTY4MDg3NjkzNik7CiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsgMV0sIDEyLCAtMzg5NTY0NTg2KTsKICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTcsICA2MDYxMDU4MTkpOwogICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApOwogICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDRdLCA3ICwgLTE3NjQxODg5Nyk7CiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsgNV0sIDEyLCAgMTIwMDA4MDQyNik7CiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7CiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsgN10sIDIyLCAtNDU3MDU5ODMpOwogICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDhdLCA3ICwgIDE3NzAwMzU0MTYpOwogICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpOwogICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krMTBdLCAxNywgLTQyMDYzKTsKICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKzExXSwgMjIsIC0xOTkwNDA0MTYyKTsKICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKzEyXSwgNyAsICAxODA0NjAzNjgyKTsKICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKzEzXSwgMTIsIC00MDM0MTEwMSk7CiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsxNF0sIDE3LCAtMTUwMjAwMjI5MCk7CiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7CgogICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDFdLCA1ICwgLTE2NTc5NjUxMCk7CiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgNl0sIDkgLCAtMTA2OTUwMTYzMik7CiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsxMV0sIDE0LCAgNjQzNzE3NzEzKTsKICAgIGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpKyAwXSwgMjAsIC0zNzM4OTczMDIpOwogICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDVdLCA1ICwgLTcwMTU1ODY5MSk7CiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsxMF0sIDkgLCAgMzgwMTYwODMpOwogICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krMTVdLCAxNCwgLTY2MDQ3ODMzNSk7CiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsgNF0sIDIwLCAtNDA1NTM3ODQ4KTsKICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKyA5XSwgNSAsICA1Njg0NDY0MzgpOwogICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krMTRdLCA5ICwgLTEwMTk4MDM2OTApOwogICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krIDNdLCAxNCwgLTE4NzM2Mzk2MSk7CiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsgOF0sIDIwLCAgMTE2MzUzMTUwMSk7CiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsxM10sIDUgLCAtMTQ0NDY4MTQ2Nyk7CiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgMl0sIDkgLCAtNTE0MDM3ODQpOwogICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krIDddLCAxNCwgIDE3MzUzMjg0NzMpOwogICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krMTJdLCAyMCwgLTE5MjY2MDc3MzQpOwoKICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyA1XSwgNCAsIC0zNzg1NTgpOwogICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDhdLCAxMSwgLTIwMjI1NzQ0NjMpOwogICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krMTFdLCAxNiwgIDE4MzkwMzA1NjIpOwogICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krMTRdLCAyMywgLTM1MzA5NTU2KTsKICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyAxXSwgNCAsIC0xNTMwOTkyMDYwKTsKICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpKyA0XSwgMTEsICAxMjcyODkzMzUzKTsKICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKyA3XSwgMTYsIC0xNTU0OTc2MzIpOwogICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krMTBdLCAyMywgLTEwOTQ3MzA2NDApOwogICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krMTNdLCA0ICwgIDY4MTI3OTE3NCk7CiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsgMF0sIDExLCAtMzU4NTM3MjIyKTsKICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKyAzXSwgMTYsIC03MjI1MjE5NzkpOwogICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krIDZdLCAyMywgIDc2MDI5MTg5KTsKICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyA5XSwgNCAsIC02NDAzNjQ0ODcpOwogICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krMTJdLCAxMSwgLTQyMTgxNTgzNSk7CiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsxNV0sIDE2LCAgNTMwNzQyNTIwKTsKICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKyAyXSwgMjMsIC05OTUzMzg2NTEpOwoKICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyAwXSwgNiAsIC0xOTg2MzA4NDQpOwogICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2krIDddLCAxMCwgIDExMjY4OTE0MTUpOwogICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krMTRdLCAxNSwgLTE0MTYzNTQ5MDUpOwogICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDVdLCAyMSwgLTU3NDM0MDU1KTsKICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKzEyXSwgNiAsICAxNzAwNDg1NTcxKTsKICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKyAzXSwgMTAsIC0xODk0OTg2NjA2KTsKICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKzEwXSwgMTUsIC0xMDUxNTIzKTsKICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKyAxXSwgMjEsIC0yMDU0OTIyNzk5KTsKICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyA4XSwgNiAsICAxODczMzEzMzU5KTsKICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7CiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7CiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSsxM10sIDIxLCAgMTMwOTE1MTY0OSk7CiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDYgLCAtMTQ1NTIzMDcwKTsKICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKzExXSwgMTAsIC0xMTIwMjEwMzc5KTsKICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTUsICA3MTg3ODcyNTkpOwogICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7CgogICAgYSA9IHNhZmVfYWRkKGEsIG9sZGEpOwogICAgYiA9IHNhZmVfYWRkKGIsIG9sZGIpOwogICAgYyA9IHNhZmVfYWRkKGMsIG9sZGMpOwogICAgZCA9IHNhZmVfYWRkKGQsIG9sZGQpOwogIH0KICByZXR1cm4gQXJyYXkoYSwgYiwgYywgZCk7Cn0KCi8qCiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuCiAqLwpmdW5jdGlvbiBtZDVfY21uKHEsIGEsIGIsIHgsIHMsIHQpCnsKICByZXR1cm4gc2FmZV9hZGQoYml0X3JvbChzYWZlX2FkZChzYWZlX2FkZChhLCBxKSwgc2FmZV9hZGQoeCwgdCkpLCBzKSxiKTsKfQpmdW5jdGlvbiBtZDVfZmYoYSwgYiwgYywgZCwgeCwgcywgdCkKewogIHJldHVybiBtZDVfY21uKChiICYgYykgfCAoKH5iKSAmIGQpLCBhLCBiLCB4LCBzLCB0KTsKfQpmdW5jdGlvbiBtZDVfZ2coYSwgYiwgYywgZCwgeCwgcywgdCkKewogIHJldHVybiBtZDVfY21uKChiICYgZCkgfCAoYyAmICh+ZCkpLCBhLCBiLCB4LCBzLCB0KTsKfQpmdW5jdGlvbiBtZDVfaGgoYSwgYiwgYywgZCwgeCwgcywgdCkKewogIHJldHVybiBtZDVfY21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7Cn0KZnVuY3Rpb24gbWQ1X2lpKGEsIGIsIGMsIGQsIHgsIHMsIHQpCnsKICByZXR1cm4gbWQ1X2NtbihjIF4gKGIgfCAofmQpKSwgYSwgYiwgeCwgcywgdCk7Cn0KCi8qCiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHkKICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy4KICovCmZ1bmN0aW9uIHNhZmVfYWRkKHgsIHkpCnsKICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpOwogIHZhciBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTsKICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTsKfQoKLyoKICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LgogKi8KZnVuY3Rpb24gYml0X3JvbChudW0sIGNudCkKewogIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKTsKfQoKZXhwb3J0cy5iNjRfaG1hY19tZDUgPSBiNjRfaG1hY19tZDU7Cgp9KX07CgovKioqKioqKioqKiBsaWIvbnJhbWEyX2luaXQgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJsaWIvbnJhbWEyX2luaXQiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIENhbGwgdGhpcyAobm90IG5yYW1hMikgdG8gbG9hZCB0aGUgZnVuY3Rpb25zLgogKiBOQiBjYW4gb25seSBiZSBjYWxsZWQgY2xpZW50IHNpZGUhCiAqIAogKi8KdmFyIGRiID0gcmVxdWlyZSgna2Fuc28vZGInKSwKICAgIHV0aWxzID0gcmVxdWlyZSgna2Fuc28vdXRpbHMnKSwKICAgIHNlc3Npb24gPSByZXF1aXJlKCdrYW5zby9zZXNzaW9uJyksCiAgICBfID0gcmVxdWlyZSgnLi91bmRlcnNjb3JlJykuXywKICAgIEJpYnRleFBhcnNlciA9IHJlcXVpcmUoJy4vYmlidGV4JykuQmlidGV4UGFyc2VyLCAgICAgIC8vbmIgdGhpcyBpcyBtb3JlIHVwdG9kYXRlIHRoYW4gdGhhdCBpbmNsLiB3aXRoIGthbnNvIDAuMC43CiAgICBiNjRfaG1hY19tZDUgPSByZXF1aXJlKCcuL21kNScpLmI2NF9obWFjX21kNSwKICAgIHV1aWRfc3luYyA9IHJlcXVpcmUoJy4vdXVpZCcpOwogICAgbnJhbWFfY29uc3RydWN0b3JzID0gcmVxdWlyZSgnLi9ucmFtYTInKTsKCi8qKgogKiByZXF1aXJlcyBnbG9iYWwgJAogKi8KdmFyIF9pbml0ID0gZnVuY3Rpb24oKXsKICAgIGlmKCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZScgKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJucmFtYS5pbml0IGNhbiBvbmx5IGJlIHJ1biBpbiB0aGUgYnJvd3NlciAod2luZG93IG9yIGRvY3VtZW50IG5vdCBkZWZpbmVkKSIpOwogICAgfQogICAgaWYoIHR5cGVvZiAkID09PSAndW5kZWZpbmVkJyApIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIm5yYW1hLmluaXQgcmVxdWlyZXMgZ2xvYmFsICQgKGpRdWVyeSkiKTsKICAgIH0KCiAgICB2YXIgbGliID0gewogICAgICAgICckJyA6ICQsCiAgICAgICAgJ18nIDogXywKICAgICAgICBCaWJ0ZXhQYXJzZXIgOiBCaWJ0ZXhQYXJzZXIsCiAgICAgICAgYjY0X2htYWNfbWQ1IDogYjY0X2htYWNfbWQ1CiAgICB9OwogICAgCiAgICAvLyB0ZW1wb3JhcnkgcGF0Y2ggKGthbnNvJ3MgZGIgbGFja3MgdXBkYXRlcykKICAgIGlmKCAhZGIuZG9VcGRhdGUgKSB7CiAgICAgICAgZGIuZG9VcGRhdGUgPSBmdW5jdGlvbiggZG9jLCB1cGRhdGVfbmFtZSwgY2FsbGJhY2sgKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSB1dGlscy5nZXRCYXNlVVJMKCkgKyAnL3VwZGF0ZS8nICsgdXBkYXRlX25hbWUgKycvJyArIGRiLmVuY29kZSggZG9jLl9pZCApOwogICAgICAgICAgICB2YXIgcmVxID0gewogICAgICAgICAgICAgICAgdHlwZTogJ1BVVCcsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRvYyksCiAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsCiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgZXhwZWN0X2pzb246ZmFsc2UgICAgICAgICAgICAgICAvL2FzIG9mIGNvdWNoZGIgMS4xLjAsIHVwZGF0ZXMgc2VlbSB0byBkZWZ5IGF0dGVtcHRzIHRvIGFsdGVyIGhlYWRlcnMgJiByZXR1cm4gdGV4dC9odG1sIGhlYWRlci4KICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGIucmVxdWVzdChyZXEsIGNhbGxiYWNrKTsKICAgICAgICB9OwogICAgfQogICAgdmFyIG5yYW1hID0ge307CiAgICBucmFtYS51dWlkID0gbnJhbWFfY29uc3RydWN0b3JzLl9tYWtlX3V1aWQodXVpZF9zeW5jKTsKICAgIG5yYW1hLnNldHRpbmdzID0gXy5leHRlbmQoIG5yYW1hX2NvbnN0cnVjdG9ycy5fbWFrZV9zZXR0aW5ncyggbnJhbWEudXVpZCApLCB7CiAgICAgICAgLy8gLS0gaW50ZXJuYWxzCiAgICAgICAgaXNfZW1iZWRkZWQgOiBmYWxzZSwgICAgIC8vc2V0IHRvIGZhbHNlIHdoZW4gYmVpbmcgdXNlZCBvbiB0aGUgc2VydmVyCiAgICAgICAgZGVidWcgOiB0cnVlLAogICAgICAgIHVzZXJfaWQgOiAnKkVSUk9SJywKICAgICAgICAvLyAtLSBxdW90ZXMgJiBub3RlIHNldHRpbmdzCiAgICAgICAgbm90ZV9zdHlsZSA6IHt9LAogICAgICAgIG5vdGVfaW5uZXJfc3R5bGUgOiB7fSwKICAgICAgICBub3RlX2VkaXRvcl9zdHlsZSA6IHt9CiAgICB9KTsKICAgIG5yYW1hLl9kZWJ1ZyA9IG5yYW1hX2NvbnN0cnVjdG9ycy5fbWFrZV9kZWJ1ZyhucmFtYS5zZXR0aW5ncywgd2luZG93LCBsaWIpOwogICAgbnJhbWEubG9nID0gbnJhbWFfY29uc3RydWN0b3JzLl9tYWtlX2xvZ2dpbmcobnJhbWEuc2V0dGluZ3MsICQpOwogICAgbnJhbWEuZGIgPSBkYjsKICAgIG5yYW1hLnNlc3Npb24gPSBzZXNzaW9uOwogICAgbnJhbWEucGVyc2lzdCA9IG5yYW1hX2NvbnN0cnVjdG9ycy5fbWFrZV9wZXJzaXN0KG5yYW1hLmRiLCBucmFtYS5zZXNzaW9uLCBucmFtYS51dWlkLCBucmFtYS5fZGVidWcpOwogICAgbnJhbWEuc291cmNlcyA9IG5yYW1hX2NvbnN0cnVjdG9ycy5fbWFrZV9zb3VyY2VzKG5yYW1hLnNldHRpbmdzLCBucmFtYS5wZXJzaXN0LCBucmFtYS5fZGVidWcsIGxpYik7CiAgICAKICAgIG5yYW1hLm5vdGVzID0gbnJhbWFfY29uc3RydWN0b3JzLl9tYWtlX25vdGVzKG5yYW1hLnNldHRpbmdzLCBucmFtYS51dWlkLCBucmFtYS5wZXJzaXN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnJhbWEuc291cmNlcywgbnVsbC8qcXVvdGVzKi8sIG5yYW1hLl9kZWJ1Zyk7CiAgICAKICAgIC8qKgogICAgICogcmV0dXJuIHVybHMgZm9yIHZhcmlvdXMgdGhpbmdzICh2YXJpZXMgZGVwZW5kaW5nIG9uIGN1cnJlbnQgdXJsKQogICAgICovCiAgICBucmFtYS5rYW5zb191cmxzID0ge30KICAgIG5yYW1hLmthbnNvX3VybHMudGFnID0gZnVuY3Rpb24odGFnLCByZXEpIHsKICAgICAgICByZXR1cm4gcmVxLnVzZXJDdHguYmFzZVVSTCArIChyZXEucXVlcnkudXNlciA/ICcvdXNlcnMvJytlbmNvZGVVUklDb21wb25lbnQocmVxLnF1ZXJ5LnVzZXIpIDogJycpICsgJy90YWdzLycrIHRhZzsKICAgIH0KICAgIAogICAgCiAgICByZXR1cm4gbnJhbWE7Cn07CgoKZXhwb3J0cy5pbml0ID0gXy5vbmNlKF9pbml0KTsKCn0pfTsKCi8qKioqKioqKioqIGxpYi9yZXdyaXRlcyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi9yZXdyaXRlcyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogUmV3cml0ZSBzZXR0aW5ncyB0byBiZSBleHBvcnRlZCBmcm9tIHRoZSBkZXNpZ24gZG9jCiAqCiAqIE5CIDogZm9yIG5yYW1hLCB0aGUgcGFyYW1ldGVyIG5hbWVzIG1hdHRlciBiZWNhdXNlIHJlcS5xdWVyeSBpcyB1c2VkCiAqICAgICAgaW4gdGVtcGxhdGluZy4gIFRoZWlyIG5hbWVzIG11c3QgbWF0Y2ggdGhlIHVybHMgdXNlZCB0byBhY2Nlc3MgdGhlbSwKICogICAgICBlLmcuICc6dXNlcicgZm9yIHNvbWV0aGluZyByZXByZW5zZXRlZCBpbiBhIHVybCBhcyAvdXNlcnMvOnVzZXIKICoKICovCgptb2R1bGUuZXhwb3J0cyA9IFsKICAgIHtmcm9tOiAnL3N0YXRpYy8qJywgdG86ICdzdGF0aWMvKid9LAogICAge2Zyb206ICcveGRtLyonLCB0bzogJ3hkbS8qJ30sCiAgICAvLyAtLSBmb3IgdGhlIG5yYW1hIGFwcGxpY2F0aW9uCiAgICB7CiAgICAgICAgZnJvbSA6ICcvc291cmNlcycsICAgICAgICAgICAgICAvL2FsbCBzb3VyY2VzCiAgICAgICAgdG8gOiAnX2xpc3Qvc291cmNlcy9zb3VyY2UnLAogICAgICAgIHF1ZXJ5IDogewogICAgICAgICAgICBpbmNsdWRlX2RvY3MgOiAndHJ1ZScsICAvL2ZvciBzb21lIHJlYXNvbiBpdCBtdXN0IGJlICd0cnVlJywgbm90IHRydWUuCiAgICAgICAgICAgIGRlc2NlbmRpbmcgOiAndHJ1ZScKICAgICAgICB9IAogICAgfSwKICAgIHsKICAgICAgICBmcm9tOiAnL3VzZXJzJywgICAgICAgICAgICAgICAgICAgLy9saXN0IGFsbCB1c2VyczsgaW50ZW5kZWQgYXMgYW4gZW50cnkgcG9pbnQgZm9yIHNlYXJjaCBlbmdpbmVzIDogVE9ETyBuZWVkcyB1cGRhdGluZyEKICAgICAgICB0bzogJ19saXN0L2FsbF91c2Vycy9hbGxfdXNlcl9pZHMnLAogICAgICAgIG1ldGhvZCA6ICdHRVQnLAogICAgICAgIHF1ZXJ5IDogewogICAgICAgICAgZ3JvdXAgOiAndHJ1ZScKICAgICAgICB9IAogICAgfSwKICAgIHsKICAgICAgICBmcm9tIDogJy91c2Vycy86dXNlcicsICAgICAgLy9jdXJyZW50bHkgYWxsIHNvdXJjZXMgZm9yIGEgcGFydGljdWxhciB1c2VyLCBwcm9iYWJseSBtb2RpZmllZCBpbiBmdXR1cmUKICAgICAgICB0byA6ICdfbGlzdC9mbG93L3F1b3RlcycsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIGVuZF9rZXk6IFsiOnVzZXIiXSwKICAgICAgICAgICAgc3RhcnRfa2V5IDogWyI6dXNlciIsIHt9XSwKICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnLAogICAgICAgICAgICBkZXNjZW5kaW5nIDogJ3RydWUnCiAgICAgICAgfSAKICAgIH0sCiAgICB7CiAgICAgICAgZnJvbSA6ICcvdXNlcnMvOnVzZXIvc291cmNlcycsICAgICAgLy9jdXJyZW50bHkgYWxsIHNvdXJjZXMgZm9yIGEgcGFydGljdWxhciB1c2VyLCBwcm9iYWJseSBtb2RpZmllZCBpbiBmdXR1cmUKICAgICAgICB0byA6ICdfbGlzdC9zb3VyY2VzL3VzZXJJZF9zb3VyY2UnLAogICAgICAgIHF1ZXJ5IDogewogICAgICAgICAgICBlbmRfa2V5OiBbIjp1c2VyIl0sCiAgICAgICAgICAgIHN0YXJ0X2tleSA6IFsiOnVzZXIiLCB7fV0sCiAgICAgICAgICAgIGluY2x1ZGVfZG9jcyA6ICd0cnVlJywKICAgICAgICAgICAgZGVzY2VuZGluZyA6ICd0cnVlJwogICAgICAgIH0gCiAgICB9LAogICAgewogICAgICAgIGZyb20gOiAnL2F1dGhvcnMnLAogICAgICAgIHRvIDogJ19saXN0L2F1dGhvcnMvYXV0aG9yX3VzZXJJZCcsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIGluY2x1ZGVfZG9jcyA6ICd0cnVlJywKICAgICAgICAgICAgZGVzY2VuZGluZyA6ICdmYWxzZScsCiAgICAgICAgICAgIHJlZHVjZSA6ICdmYWxzZScsCiAgICAgICAgICAgIGF1dGhvcl9pbmRleF9pbl9rZXkgOiAnMCcKICAgICAgICB9CiAgICB9LAogICAgewogICAgICAgIGZyb20gOiAnL2F1dGhvcnMvOmF1dGhvcicsICAgLy9hbGwgc291cmNlcyBmb3IgYW4gYXV0aG9yIAogICAgICAgIHRvIDogJ19saXN0L2F1dGhvcnMvYXV0aG9yX3VzZXJJZCcsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIHN0YXJ0X2tleSA6ICBbIjphdXRob3IiXSwKICAgICAgICAgICAgZW5kX2tleSA6IFsiOmF1dGhvciIsIHt9XSwKICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnLAogICAgICAgICAgICBkZXNjZW5kaW5nIDogJ2ZhbHNlJywKICAgICAgICAgICAgcmVkdWNlIDogJ2ZhbHNlJywKICAgICAgICAgICAgYXV0aG9yX2luZGV4X2luX2tleSA6ICcwJwogICAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICAgZnJvbSA6ICcvdXNlcnMvOnVzZXIvYXV0aG9ycycsICAgICAgICAgICAgICAvL2xpc3QgYSB1c2VyJ3MgYXV0aG9ycwogICAgICAgIHRvIDogJ19saXN0L2F1dGhvcnMvdXNlcklkX2F1dGhvcicsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIHN0YXJ0X2tleSA6IFsiOnVzZXIiXSwKICAgICAgICAgICAgZW5kX2tleSA6IFsiOnVzZXIiLHt9XSwKICAgICAgICAgICAgcmVkdWNlIDogJ2ZhbHNlJywKICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnLCAgIC8vZG9jcyBhcmUgc291cmNlcyAKICAgICAgICAgICAgYXV0aG9yX2luZGV4X2luX2tleSA6ICcxJwogICAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICAgZnJvbSA6ICcvdXNlcnMvOnVzZXIvYXV0aG9ycy86YXV0aG9yJywgICAgLy9hbGwgc291cmNlcyBmb3IgYW4gYXV0aG9yICYgdXNlcgogICAgICAgIHRvIDogJ19saXN0L2F1dGhvcnMvYXV0aG9yX3VzZXJJZCcsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIHN0YXJ0X2tleSA6ICBbIjphdXRob3IiLCAiOnVzZXIiXSwKICAgICAgICAgICAgZW5kX2tleSA6IFsiOmF1dGhvciIsICI6dXNlciIsIHt9XSwKICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnLAogICAgICAgICAgICBkZXNjZW5kaW5nIDogJ2ZhbHNlJywKICAgICAgICAgICAgcmVkdWNlIDogJ2ZhbHNlJywKICAgICAgICAgICAgYXV0aG9yX2luZGV4X2luX2tleSA6ICcwJwogICAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICAgZnJvbSA6ICcvc291cmNlcy86c291cmNlJywgICAgICAgICAgICAgICAgICAvL2V2ZXJ5b25lJ3Mgbm90ZXMgb24gYSBzb3VyY2UKICAgICAgICB0byA6ICdfbGlzdC9xdW90ZXMvcGFnZUlkX3VzZXJJZCcsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIHN0YXJ0a2V5IDogWyI6c291cmNlIl0sCiAgICAgICAgICAgIGVuZGtleSA6IFsiOnNvdXJjZSIse31dLAogICAgICAgICAgICBpbmNsdWRlX2RvY3MgOiAndHJ1ZScKICAgICAgICB9CiAgICB9LAogICAgewogICAgICAgIGZyb20gOiAnL3VzZXJzLzp1c2VyL3NvdXJjZXMvOnNvdXJjZScsICAgIC8vdGhlIHVzZXIncyBub3RlcyBvbiBhIHNvdXJjZQogICAgICAgIHRvIDogJ19saXN0L3F1b3Rlcy9wYWdlSWRfdXNlcklkJywKICAgICAgICBxdWVyeSA6IHsKICAgICAgICAgICAga2V5IDogWyI6c291cmNlIiwiOnVzZXIiXSwKICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnCiAgICAgICAgfQogICAgfSwKICAgIHsKICAgICAgICBmcm9tIDogJy90YWdzJywgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGwgdGFncywgd2l0aCBmcmVxdWVuY3kKICAgICAgICB0byA6ICdfbGlzdC90YWdzL3RhZ3NfYWxsJywKICAgICAgICBxdWVyeSA6IHsKICAgICAgICAgICAgZ3JvdXAgOiAndHJ1ZScsCiAgICAgICAgICAgIHRhZ19pbmRleF9pbl9rZXkgOiAnMCcKICAgICAgICB9CiAgICB9LAogICAgewogICAgICAgIGZyb20gOiAnL3RhZ3MvOnRhZycsICAgICAgICAgICAgICAgICAgIC8vc2hvdyBldmVyeXRoaW5nIG1hcmtlZCB3aXRoIGEgcGFydGljdWxhciB0YWcKICAgICAgICB0byA6ICdfbGlzdC9xdW90ZXMvdGFncycsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIGVuZGtleSA6IFsiOnRhZyJdLAogICAgICAgICAgICBzdGFydGtleSA6IFsiOnRhZyIsIHt9XSwKICAgICAgICAgICAgcmVkdWNlIDogJ2ZhbHNlJywKICAgICAgICAgICAgZGVzY2VuZGluZyA6ICd0cnVlJywKICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnCiAgICAgICAgfQogICAgfSwKICAgIHsKICAgICAgICBmcm9tIDogJy90YWdzLzp0YWcvcmVjZW50JywgICAgICAgICAgICAvL3NhbWUgYXMgcHJldmlvdXMgYnV0IHdpdGggZmxvdwogICAgICAgIHRvIDogJ19saXN0L2Zsb3cvdGFncycsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIGVuZGtleSA6IFsiOnRhZyJdLAogICAgICAgICAgICBzdGFydGtleSA6IFsiOnRhZyIsIHt9XSwKICAgICAgICAgICAgcmVkdWNlIDogJ2ZhbHNlJywKICAgICAgICAgICAgZGVzY2VuZGluZyA6ICd0cnVlJywKICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnCiAgICAgICAgfQogICAgfSwKICAgIHsKICAgICAgICBmcm9tIDogJy91c2Vycy86dXNlci90YWdzJywKICAgICAgICB0byA6ICdfbGlzdC90YWdzL3RhZ3NfdXNlcicsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICAgIHN0YXJ0a2V5IDogWyI6dXNlciJdLAogICAgICAgICAgICBlbmRrZXkgOiBbIjp1c2VyIiwge31dLAogICAgICAgICAgICBncm91cF9sZXZlbCA6ICcyJywKICAgICAgICAgICAgdGFnX2luZGV4X2luX2tleSA6ICcxJwogICAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICAgZnJvbSA6ICcvdXNlcnMvOnVzZXIvdGFncy86dGFnJywgICAgICAgICAgICAgICAgIC8vc2hvdyBldmVyeXRoaW5nIG9mIGEgdXNlcnMnIG1hcmtlZCB3aXRoIGEgcGFydGljdWxhciB0YWcKICAgICAgICB0byA6ICdfbGlzdC9xdW90ZXMvdGFncycsCiAgICAgICAgcXVlcnkgOiB7CiAgICAgICAgICBlbmRrZXkgOiBbIjp0YWciLCI6dXNlciJdLAogICAgICAgICAgc3RhcnRrZXkgOiBbIjp0YWciLCAiOnVzZXIiLCB7fV0sCiAgICAgICAgICByZWR1Y2UgOiAnZmFsc2UnLAogICAgICAgICAgZGVzY2VuZGluZyA6ICd0cnVlJywKICAgICAgICAgIGluY2x1ZGVfZG9jcyA6ICd0cnVlJwogICAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICAgZnJvbSA6ICcvdXNlcnMvOnVzZXIvdGFncy86dGFnL3JlY2VudCcsICAgICAgICAgICAgICAgICAvL3Nob3cgZXZlcnl0aGluZyBvZiBhIHVzZXJzJyBtYXJrZWQgd2l0aCBhIHBhcnRpY3VsYXIgdGFnCiAgICAgICAgdG8gOiAnX2xpc3QvZmxvdy90YWdzJywKICAgICAgICBxdWVyeSA6IHsKICAgICAgICAgIGVuZGtleSA6IFsiOnRhZyIsIjp1c2VyIl0sCiAgICAgICAgICBzdGFydGtleSA6IFsiOnRhZyIsICI6dXNlciIsIHt9XSwKICAgICAgICAgIHJlZHVjZSA6ICdmYWxzZScsCiAgICAgICAgICBkZXNjZW5kaW5nIDogJ3RydWUnLAogICAgICAgICAgaW5jbHVkZV9kb2NzIDogJ3RydWUnCiAgICAgICAgfQogICAgfSwKICAgIAogICAgLy8gLS0gZm9yIHRoZSBib29rbWFya2xldC9lbWJlZGVkIGNsaWVudAogICAgewogICAgICAgIGZyb20gOiAnL3VwZGF0ZS9zb3VyY2UvOmlkJywKICAgICAgICB0byA6ICdfdXBkYXRlL3NvdXJjZS86aWQnCiAgICB9LAogICAgCiAgICAvLyAtLSBnZW5lcmljCiAgICB7IGZyb206ICcvJywgdG86ICdfc2hvdy93ZWxjb21lJyB9LAogICAge2Zyb206ICcqJywgdG86ICdfc2hvdy9ub3RfZm91bmQnfQpdOwoKCn0pfTsKCi8qKioqKioqKioqIGxpYi9zaG93cyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi9zaG93cyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogU2hvdyBmdW5jdGlvbnMgdG8gYmUgZXhwb3J0ZWQgZnJvbSB0aGUgZGVzaWduIGRvYy4KICovCgp2YXIgdGVtcGxhdGVzID0gcmVxdWlyZSgna2Fuc28vdGVtcGxhdGVzJyksCiAgICB1dWlkX3N5bmMgPSByZXF1aXJlKCcuL3V1aWQnKTsKICAgIG5yYW1hX2NvbnN0cnVjdG9ycyA9IHJlcXVpcmUoJy4vbnJhbWEyJyk7Cgp2YXIgbnJhbWEgPSB7fTsKbnJhbWEudXVpZCA9IG5yYW1hX2NvbnN0cnVjdG9ycy5fbWFrZV91dWlkKHV1aWRfc3luYyk7CgpleHBvcnRzLndlbGNvbWUgPSBmdW5jdGlvbiAoZG9jLCByZXEpIHsKICAgIHZhciBkYXRhID0gewogICAgICAgIGFub25fdXNlcl9uYW1lIDogJyonK25yYW1hLnV1aWQodHJ1ZSkuc2xpY2UoMCwxMCkKICAgIH07CgogICAgcmV0dXJuIHsKICAgICAgICB0aXRsZTogJ05vdGUtby1yYW1hIDogbm90ZSAtIHF1b3RlIC0gYW5hbHlzZScsCiAgICAgICAgY29udGVudDogdGVtcGxhdGVzLnJlbmRlcignd2VsY29tZS5odG1sJywgcmVxLCBkYXRhKQogICAgfTsKfTsKCmV4cG9ydHMubm90X2ZvdW5kID0gZnVuY3Rpb24gKGRvYywgcmVxKSB7CiAgICByZXR1cm4gewogICAgICAgIHRpdGxlOiAnNDA0IC0gTm90IEZvdW5kJywKICAgICAgICBjb250ZW50OiB0ZW1wbGF0ZXMucmVuZGVyKCc0MDQuaHRtbCcsIHJlcSwge30pCiAgICB9Owp9OwoKCn0pfTsKCi8qKioqKioqKioqIGxpYi90eXBlcyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi90eXBlcyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogS2Fuc28gZG9jdW1lbnQgdHlwZXMgdG8gZXhwb3J0CiAqLwp2YXIgVHlwZSA9IHJlcXVpcmUoJ2thbnNvL3R5cGVzJykuVHlwZSwKICAgIGZpZWxkcyA9IHJlcXVpcmUoJ2thbnNvL2ZpZWxkcycpLAogICAgd2lkZ2V0cyA9IHJlcXVpcmUoJ2thbnNvL3dpZGdldHMnKTsKCgoKCn0pfTsKCi8qKioqKioqKioqIGxpYi91bmRlcnNjb3JlICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL3VuZGVyc2NvcmUiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLy8gICAgIFVuZGVyc2NvcmUuanMgMS4xLjcKLy8gICAgIChjKSAyMDExIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuCi8vICAgICBVbmRlcnNjb3JlIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KLy8gICAgIFBvcnRpb25zIG9mIFVuZGVyc2NvcmUgYXJlIGluc3BpcmVkIG9yIGJvcnJvd2VkIGZyb20gUHJvdG90eXBlLAovLyAgICAgT2xpdmVyIFN0ZWVsZSdzIEZ1bmN0aW9uYWwsIGFuZCBKb2huIFJlc2lnJ3MgTWljcm8tVGVtcGxhdGluZy4KLy8gICAgIEZvciBhbGwgZGV0YWlscyBhbmQgZG9jdW1lbnRhdGlvbjoKLy8gICAgIGh0dHA6Ly9kb2N1bWVudGNsb3VkLmdpdGh1Yi5jb20vdW5kZXJzY29yZQoKKGZ1bmN0aW9uKCkgewoKICAvLyBCYXNlbGluZSBzZXR1cAogIC8vIC0tLS0tLS0tLS0tLS0tCgogIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZ2xvYmFsYCBvbiB0aGUgc2VydmVyLgogIHZhciByb290ID0gdGhpczsKCiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS4KICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fOwoKICAvLyBFc3RhYmxpc2ggdGhlIG9iamVjdCB0aGF0IGdldHMgcmV0dXJuZWQgdG8gYnJlYWsgb3V0IG9mIGEgbG9vcCBpdGVyYXRpb24uCiAgdmFyIGJyZWFrZXIgPSB7fTsKCiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjoKICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBGdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7CgogIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLgogIHZhciBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSwKICAgICAgdW5zaGlmdCAgICAgICAgICA9IEFycmF5UHJvdG8udW5zaGlmdCwKICAgICAgdG9TdHJpbmcgICAgICAgICA9IE9ialByb3RvLnRvU3RyaW5nLAogICAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7CgogIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZQogIC8vIGFyZSBkZWNsYXJlZCBoZXJlLgogIHZhcgogICAgbmF0aXZlRm9yRWFjaCAgICAgID0gQXJyYXlQcm90by5mb3JFYWNoLAogICAgbmF0aXZlTWFwICAgICAgICAgID0gQXJyYXlQcm90by5tYXAsCiAgICBuYXRpdmVSZWR1Y2UgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZSwKICAgIG5hdGl2ZVJlZHVjZVJpZ2h0ICA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQsCiAgICBuYXRpdmVGaWx0ZXIgICAgICAgPSBBcnJheVByb3RvLmZpbHRlciwKICAgIG5hdGl2ZUV2ZXJ5ICAgICAgICA9IEFycmF5UHJvdG8uZXZlcnksCiAgICBuYXRpdmVTb21lICAgICAgICAgPSBBcnJheVByb3RvLnNvbWUsCiAgICBuYXRpdmVJbmRleE9mICAgICAgPSBBcnJheVByb3RvLmluZGV4T2YsCiAgICBuYXRpdmVMYXN0SW5kZXhPZiAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLAogICAgbmF0aXZlSXNBcnJheSAgICAgID0gQXJyYXkuaXNBcnJheSwKICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLAogICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7CgogIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LgogIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7IHJldHVybiBuZXcgd3JhcHBlcihvYmopOyB9OwoKICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKkNvbW1vbkpTKiosIHdpdGggYmFja3dhcmRzLWNvbXBhdGliaWxpdHkKICAvLyBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIG5vdCBpbiBDb21tb25KUywgYWRkIGBfYCB0byB0aGUKICAvLyBnbG9iYWwgb2JqZWN0LgogIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgbW9kdWxlLmV4cG9ydHMgPSBfOwogICAgXy5fID0gXzsKICB9IGVsc2UgewogICAgLy8gRXhwb3J0ZWQgYXMgYSBzdHJpbmcsIGZvciBDbG9zdXJlIENvbXBpbGVyICJhZHZhbmNlZCIgbW9kZS4KICAgIHJvb3RbJ18nXSA9IF87CiAgfQoKICAvLyBDdXJyZW50IHZlcnNpb24uCiAgXy5WRVJTSU9OID0gJzEuMS43JzsKCiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC4KICAvLyBIYW5kbGVzIG9iamVjdHMgd2l0aCB0aGUgYnVpbHQtaW4gYGZvckVhY2hgLCBhcnJheXMsIGFuZCByYXcgb2JqZWN0cy4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLgogIHZhciBlYWNoID0gXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm47CiAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkgewogICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7CiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIGlmIChpIGluIG9iaiAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopID09PSBicmVha2VyKSByZXR1cm47CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRvciB0byBlYWNoIGVsZW1lbnQuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYG1hcGAgaWYgYXZhaWxhYmxlLgogIF8ubWFwID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgdmFyIHJlc3VsdHMgPSBbXTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7CiAgICBpZiAobmF0aXZlTWFwICYmIG9iai5tYXAgPT09IG5hdGl2ZU1hcCkgcmV0dXJuIG9iai5tYXAoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoXSA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLAogIC8vIG9yIGBmb2xkbGAuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGByZWR1Y2VgIGlmIGF2YWlsYWJsZS4KICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHsKICAgIHZhciBpbml0aWFsID0gbWVtbyAhPT0gdm9pZCAwOwogICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTsKICAgIGlmIChuYXRpdmVSZWR1Y2UgJiYgb2JqLnJlZHVjZSA9PT0gbmF0aXZlUmVkdWNlKSB7CiAgICAgIGlmIChjb250ZXh0KSBpdGVyYXRvciA9IF8uYmluZChpdGVyYXRvciwgY29udGV4dCk7CiAgICAgIHJldHVybiBpbml0aWFsID8gb2JqLnJlZHVjZShpdGVyYXRvciwgbWVtbykgOiBvYmoucmVkdWNlKGl0ZXJhdG9yKTsKICAgIH0KICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaWYgKCFpbml0aWFsKSB7CiAgICAgICAgbWVtbyA9IHZhbHVlOwogICAgICAgIGluaXRpYWwgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIHZhbHVlLCBpbmRleCwgbGlzdCk7CiAgICAgIH0KICAgIH0pOwogICAgaWYgKCFpbml0aWFsKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlIik7CiAgICByZXR1cm4gbWVtbzsKICB9OwoKICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgcmVkdWNlUmlnaHRgIGlmIGF2YWlsYWJsZS4KICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHsKICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107CiAgICBpZiAobmF0aXZlUmVkdWNlUmlnaHQgJiYgb2JqLnJlZHVjZVJpZ2h0ID09PSBuYXRpdmVSZWR1Y2VSaWdodCkgewogICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgICByZXR1cm4gbWVtbyAhPT0gdm9pZCAwID8gb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvcik7CiAgICB9CiAgICB2YXIgcmV2ZXJzZWQgPSAoXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8udG9BcnJheShvYmopKS5yZXZlcnNlKCk7CiAgICByZXR1cm4gXy5yZWR1Y2UocmV2ZXJzZWQsIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KTsKICB9OwoKICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuCiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0OwogICAgYW55KG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHsKICAgICAgICByZXN1bHQgPSB2YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGZpbHRlcmAgaWYgYXZhaWxhYmxlLgogIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuCiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgaWYgKG5hdGl2ZUZpbHRlciAmJiBvYmouZmlsdGVyID09PSBuYXRpdmVGaWx0ZXIpIHJldHVybiBvYmouZmlsdGVyKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0c1tyZXN1bHRzLmxlbmd0aF0gPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy4KICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoIWl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0c1tyZXN1bHRzLmxlbmd0aF0gPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGV2ZXJ5YCBpZiBhdmFpbGFibGUuCiAgLy8gQWxpYXNlZCBhcyBgYWxsYC4KICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDsKICAgIGlmIChuYXRpdmVFdmVyeSAmJiBvYmouZXZlcnkgPT09IG5hdGl2ZUV2ZXJ5KSByZXR1cm4gb2JqLmV2ZXJ5KGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaWYgKCEocmVzdWx0ID0gcmVzdWx0ICYmIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkpIHJldHVybiBicmVha2VyOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBzb21lYCBpZiBhdmFpbGFibGUuCiAgLy8gQWxpYXNlZCBhcyBgYW55YC4KICB2YXIgYW55ID0gXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yIHx8IF8uaWRlbnRpdHk7CiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7CiAgICBpZiAobmF0aXZlU29tZSAmJiBvYmouc29tZSA9PT0gbmF0aXZlU29tZSkgcmV0dXJuIG9iai5zb21lKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaWYgKHJlc3VsdCB8PSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJldHVybiBicmVha2VyOwogICAgfSk7CiAgICByZXR1cm4gISFyZXN1bHQ7CiAgfTsKCiAgLy8gRGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgaW5jbHVkZWQgaW4gdGhlIGFycmF5IG9yIG9iamVjdCB1c2luZyBgPT09YC4KICAvLyBBbGlhc2VkIGFzIGBjb250YWluc2AuCiAgXy5pbmNsdWRlID0gXy5jb250YWlucyA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7CiAgICB2YXIgZm91bmQgPSBmYWxzZTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZvdW5kOwogICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgb2JqLmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xOwogICAgYW55KG9iaiwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKGZvdW5kID0gdmFsdWUgPT09IHRhcmdldCkgcmV0dXJuIHRydWU7CiAgICB9KTsKICAgIHJldHVybiBmb3VuZDsKICB9OwoKICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi4KICBfLmludm9rZSA9IGZ1bmN0aW9uKG9iaiwgbWV0aG9kKSB7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTsKICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiAobWV0aG9kLmNhbGwgPyBtZXRob2QgfHwgdmFsdWUgOiB2YWx1ZVttZXRob2RdKS5hcHBseSh2YWx1ZSwgYXJncyk7CiAgICB9KTsKICB9OwoKICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LgogIF8ucGx1Y2sgPSBmdW5jdGlvbihvYmosIGtleSkgewogICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpeyByZXR1cm4gdmFsdWVba2V5XTsgfSk7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgb3IgKGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLgogIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKCFpdGVyYXRvciAmJiBfLmlzQXJyYXkob2JqKSkgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIG9iaik7CiAgICB2YXIgcmVzdWx0ID0ge2NvbXB1dGVkIDogLUluZmluaXR5fTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTsKICAgICAgY29tcHV0ZWQgPj0gcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0LnZhbHVlOwogIH07CgogIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS4KICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikpIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBvYmopOwogICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IEluZmluaXR5fTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTsKICAgICAgY29tcHV0ZWQgPCByZXN1bHQuY29tcHV0ZWQgJiYgKHJlc3VsdCA9IHt2YWx1ZSA6IHZhbHVlLCBjb21wdXRlZCA6IGNvbXB1dGVkfSk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQudmFsdWU7CiAgfTsKCiAgLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdG9yLgogIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB2YWx1ZSA6IHZhbHVlLAogICAgICAgIGNyaXRlcmlhIDogaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpCiAgICAgIH07CiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYSwgYiA9IHJpZ2h0LmNyaXRlcmlhOwogICAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7CiAgICB9KSwgJ3ZhbHVlJyk7CiAgfTsKCiAgLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0b3IKICBfLmdyb3VwQnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yKSB7CiAgICB2YXIgcmVzdWx0ID0ge307CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgIHZhciBrZXkgPSBpdGVyYXRvcih2YWx1ZSwgaW5kZXgpOwogICAgICAocmVzdWx0W2tleV0gfHwgKHJlc3VsdFtrZXldID0gW10pKS5wdXNoKHZhbHVlKTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgYXQgd2hhdCBpbmRleCBhbiBvYmplY3Qgc2hvdWxkCiAgLy8gYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC4KICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0b3IpIHsKICAgIGl0ZXJhdG9yIHx8IChpdGVyYXRvciA9IF8uaWRlbnRpdHkpOwogICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGg7CiAgICB3aGlsZSAobG93IDwgaGlnaCkgewogICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+IDE7CiAgICAgIGl0ZXJhdG9yKGFycmF5W21pZF0pIDwgaXRlcmF0b3Iob2JqKSA/IGxvdyA9IG1pZCArIDEgOiBoaWdoID0gbWlkOwogICAgfQogICAgcmV0dXJuIGxvdzsKICB9OwoKICAvLyBTYWZlbHkgY29udmVydCBhbnl0aGluZyBpdGVyYWJsZSBpbnRvIGEgcmVhbCwgbGl2ZSBhcnJheS4KICBfLnRvQXJyYXkgPSBmdW5jdGlvbihpdGVyYWJsZSkgewogICAgaWYgKCFpdGVyYWJsZSkgICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgaWYgKGl0ZXJhYmxlLnRvQXJyYXkpICAgICAgICAgcmV0dXJuIGl0ZXJhYmxlLnRvQXJyYXkoKTsKICAgIGlmIChfLmlzQXJyYXkoaXRlcmFibGUpKSAgICAgIHJldHVybiBzbGljZS5jYWxsKGl0ZXJhYmxlKTsKICAgIGlmIChfLmlzQXJndW1lbnRzKGl0ZXJhYmxlKSkgIHJldHVybiBzbGljZS5jYWxsKGl0ZXJhYmxlKTsKICAgIHJldHVybiBfLnZhbHVlcyhpdGVyYWJsZSk7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LgogIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIF8udG9BcnJheShvYmopLmxlbmd0aDsKICB9OwoKICAvLyBBcnJheSBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOCiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAuIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsKICAvLyB3aXRoIGBfLm1hcGAuCiAgXy5maXJzdCA9IF8uaGVhZCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewogICAgcmV0dXJuIChuICE9IG51bGwpICYmICFndWFyZCA/IHNsaWNlLmNhbGwoYXJyYXksIDAsIG4pIDogYXJyYXlbMF07CiAgfTsKCiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYC4KICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKmluZGV4Kiogd2lsbCByZXR1cm4KICAvLyB0aGUgcmVzdCBvZiB0aGUgdmFsdWVzIGluIHRoZSBhcnJheSBmcm9tIHRoYXQgaW5kZXggb253YXJkLiBUaGUgKipndWFyZCoqCiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLgogIF8ucmVzdCA9IF8udGFpbCA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCwgZ3VhcmQpIHsKICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAoaW5kZXggPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogaW5kZXgpOwogIH07CgogIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LgogIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07CiAgfTsKCiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LgogIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICEhdmFsdWU7IH0pOwogIH07CgogIC8vIFJldHVybiBhIGNvbXBsZXRlbHkgZmxhdHRlbmVkIHZlcnNpb24gb2YgYW4gYXJyYXkuCiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHJldHVybiBfLnJlZHVjZShhcnJheSwgZnVuY3Rpb24obWVtbywgdmFsdWUpIHsKICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHJldHVybiBtZW1vLmNvbmNhdChfLmZsYXR0ZW4odmFsdWUpKTsKICAgICAgbWVtb1ttZW1vLmxlbmd0aF0gPSB2YWx1ZTsKICAgICAgcmV0dXJuIG1lbW87CiAgICB9LCBbXSk7CiAgfTsKCiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuCiAgXy53aXRob3V0ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgfTsKCiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHkKICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uCiAgLy8gQWxpYXNlZCBhcyBgdW5pcXVlYC4KICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCkgewogICAgcmV0dXJuIF8ucmVkdWNlKGFycmF5LCBmdW5jdGlvbihtZW1vLCBlbCwgaSkgewogICAgICBpZiAoMCA9PSBpIHx8IChpc1NvcnRlZCA9PT0gdHJ1ZSA/IF8ubGFzdChtZW1vKSAhPSBlbCA6ICFfLmluY2x1ZGUobWVtbywgZWwpKSkgbWVtb1ttZW1vLmxlbmd0aF0gPSBlbDsKICAgICAgcmV0dXJuIG1lbW87CiAgICB9LCBbXSk7CiAgfTsKCiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mCiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuCiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIF8udW5pcShfLmZsYXR0ZW4oYXJndW1lbnRzKSk7CiAgfTsKCiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZQogIC8vIHBhc3NlZC1pbiBhcnJheXMuIChBbGlhc2VkIGFzICJpbnRlcnNlY3QiIGZvciBiYWNrLWNvbXBhdC4pCiAgXy5pbnRlcnNlY3Rpb24gPSBfLmludGVyc2VjdCA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICB2YXIgcmVzdCA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgIHJldHVybiBfLmZpbHRlcihfLnVuaXEoYXJyYXkpLCBmdW5jdGlvbihpdGVtKSB7CiAgICAgIHJldHVybiBfLmV2ZXJ5KHJlc3QsIGZ1bmN0aW9uKG90aGVyKSB7CiAgICAgICAgcmV0dXJuIF8uaW5kZXhPZihvdGhlciwgaXRlbSkgPj0gMDsKICAgICAgfSk7CiAgICB9KTsKICB9OwoKICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhbm90aGVyLgogIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uCiAgXy5kaWZmZXJlbmNlID0gZnVuY3Rpb24oYXJyYXksIG90aGVyKSB7CiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICFfLmluY2x1ZGUob3RoZXIsIHZhbHVlKTsgfSk7CiAgfTsKCiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZQogIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLgogIF8uemlwID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgIHZhciBsZW5ndGggPSBfLm1heChfLnBsdWNrKGFyZ3MsICdsZW5ndGgnKSk7CiAgICB2YXIgcmVzdWx0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgcmVzdWx0c1tpXSA9IF8ucGx1Y2soYXJncywgIiIgKyBpKTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcGx5IHVzIHdpdGggaW5kZXhPZiAoSSdtIGxvb2tpbmcgYXQgeW91LCAqKk1TSUUqKiksCiAgLy8gd2UgbmVlZCB0aGlzIGZ1bmN0aW9uLiBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuCiAgLy8gaXRlbSBpbiBhbiBhcnJheSwgb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgaW5kZXhPZmAgaWYgYXZhaWxhYmxlLgogIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYAogIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guCiAgXy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlzU29ydGVkKSB7CiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xOwogICAgdmFyIGksIGw7CiAgICBpZiAoaXNTb3J0ZWQpIHsKICAgICAgaSA9IF8uc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pOwogICAgICByZXR1cm4gYXJyYXlbaV0gPT09IGl0ZW0gPyBpIDogLTE7CiAgICB9CiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBhcnJheS5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtKTsKICAgIGZvciAoaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7CiAgICByZXR1cm4gLTE7CiAgfTsKCgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBsYXN0SW5kZXhPZmAgaWYgYXZhaWxhYmxlLgogIF8ubGFzdEluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSkgewogICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTsKICAgIGlmIChuYXRpdmVMYXN0SW5kZXhPZiAmJiBhcnJheS5sYXN0SW5kZXhPZiA9PT0gbmF0aXZlTGFzdEluZGV4T2YpIHJldHVybiBhcnJheS5sYXN0SW5kZXhPZihpdGVtKTsKICAgIHZhciBpID0gYXJyYXkubGVuZ3RoOwogICAgd2hpbGUgKGktLSkgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mCiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWUKICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLgogIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkgewogICAgICBzdG9wID0gc3RhcnQgfHwgMDsKICAgICAgc3RhcnQgPSAwOwogICAgfQogICAgc3RlcCA9IGFyZ3VtZW50c1syXSB8fCAxOwoKICAgIHZhciBsZW4gPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7CiAgICB2YXIgaWR4ID0gMDsKICAgIHZhciByYW5nZSA9IG5ldyBBcnJheShsZW4pOwoKICAgIHdoaWxlKGlkeCA8IGxlbikgewogICAgICByYW5nZVtpZHgrK10gPSBzdGFydDsKICAgICAgc3RhcnQgKz0gc3RlcDsKICAgIH0KCiAgICByZXR1cm4gcmFuZ2U7CiAgfTsKCiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cywKICAvLyBvcHRpb25hbGx5KS4gQmluZGluZyB3aXRoIGFyZ3VtZW50cyBpcyBhbHNvIGtub3duIGFzIGBjdXJyeWAuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmIGF2YWlsYWJsZS4KICAvLyBXZSBjaGVjayBmb3IgYGZ1bmMuYmluZGAgZmlyc3QsIHRvIGZhaWwgZmFzdCB3aGVuIGBmdW5jYCBpcyB1bmRlZmluZWQuCiAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgb2JqKSB7CiAgICBpZiAoZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kICYmIG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTsKICAgIH07CiAgfTsKCiAgLy8gQmluZCBhbGwgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0CiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuCiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgZnVuY3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICBpZiAoZnVuY3MubGVuZ3RoID09IDApIGZ1bmNzID0gXy5mdW5jdGlvbnMob2JqKTsKICAgIGVhY2goZnVuY3MsIGZ1bmN0aW9uKGYpIHsgb2JqW2ZdID0gXy5iaW5kKG9ialtmXSwgb2JqKTsgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuCiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7CiAgICB2YXIgbWVtbyA9IHt9OwogICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGtleSA9IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChtZW1vLCBrZXkpID8gbWVtb1trZXldIDogKG1lbW9ba2V5XSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICB9OwogIH07CgogIC8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHMKICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuCiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmMuYXBwbHkoZnVuYywgYXJncyk7IH0sIHdhaXQpOwogIH07CgogIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcwogIC8vIGNsZWFyZWQuCiAgXy5kZWZlciA9IGZ1bmN0aW9uKGZ1bmMpIHsKICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7CiAgfTsKCiAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBpbXBsZW1lbnQgYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuCiAgdmFyIGxpbWl0ID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgZGVib3VuY2UpIHsKICAgIHZhciB0aW1lb3V0OwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHZhciB0aHJvdHRsZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICB9OwogICAgICBpZiAoZGVib3VuY2UpIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgaWYgKGRlYm91bmNlIHx8ICF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dCh0aHJvdHRsZXIsIHdhaXQpOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2UKICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4KICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCkgewogICAgcmV0dXJuIGxpbWl0KGZ1bmMsIHdhaXQsIGZhbHNlKTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90CiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvcgogIC8vIE4gbWlsbGlzZWNvbmRzLgogIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CiAgICByZXR1cm4gbGltaXQoZnVuYywgd2FpdCwgdHJ1ZSk7CiAgfTsKCiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93CiAgLy8gb2Z0ZW4geW91IGNhbGwgaXQuIFVzZWZ1bCBmb3IgbGF6eSBpbml0aWFsaXphdGlvbi4KICBfLm9uY2UgPSBmdW5jdGlvbihmdW5jKSB7CiAgICB2YXIgcmFuID0gZmFsc2UsIG1lbW87CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vOwogICAgICByYW4gPSB0cnVlOwogICAgICByZXR1cm4gbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfTsKCiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsCiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZAogIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uCiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgYXJncyA9IFtmdW5jXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoCiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy4KICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBmdW5jcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIGZvciAodmFyIGkgPSBmdW5jcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIGFyZ3MgPSBbZnVuY3NbaV0uYXBwbHkodGhpcywgYXJncyldOwogICAgICB9CiAgICAgIHJldHVybiBhcmdzWzBdOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgYWZ0ZXIgYmVpbmcgY2FsbGVkIE4gdGltZXMuCiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmICgtLXRpbWVzIDwgMSkgeyByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgICB9OwogIH07CgoKICAvLyBPYmplY3QgRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgT2JqZWN0LmtleXNgCiAgXy5rZXlzID0gbmF0aXZlS2V5cyB8fCBmdW5jdGlvbihvYmopIHsKICAgIGlmIChvYmogIT09IE9iamVjdChvYmopKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG9iamVjdCcpOwogICAgdmFyIGtleXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkga2V5c1trZXlzLmxlbmd0aF0gPSBrZXk7CiAgICByZXR1cm4ga2V5czsKICB9OwoKICAvLyBSZXRyaWV2ZSB0aGUgdmFsdWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuCiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpOwogIH07CgogIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC4KICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYAogIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgbmFtZXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTsKICAgIH0KICAgIHJldHVybiBuYW1lcy5zb3J0KCk7CiAgfTsKCiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuCiAgXy5leHRlbmQgPSBmdW5jdGlvbihvYmopIHsKICAgIGVhY2goc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHsKICAgICAgICBpZiAoc291cmNlW3Byb3BdICE9PSB2b2lkIDApIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuCiAgXy5kZWZhdWx0cyA9IGZ1bmN0aW9uKG9iaikgewogICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkgewogICAgICAgIGlmIChvYmpbcHJvcF0gPT0gbnVsbCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LgogIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7CiAgfTsKCiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLgogIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gInRhcCBpbnRvIiBhIG1ldGhvZCBjaGFpbiwgaW4KICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi4KICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHsKICAgIGludGVyY2VwdG9yKG9iaik7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLgogIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgIC8vIENoZWNrIG9iamVjdCBpZGVudGl0eS4KICAgIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTsKICAgIC8vIERpZmZlcmVudCB0eXBlcz8KICAgIHZhciBhdHlwZSA9IHR5cGVvZihhKSwgYnR5cGUgPSB0eXBlb2YoYik7CiAgICBpZiAoYXR5cGUgIT0gYnR5cGUpIHJldHVybiBmYWxzZTsKICAgIC8vIEJhc2ljIGVxdWFsaXR5IHRlc3QgKHdhdGNoIG91dCBmb3IgY29lcmNpb25zKS4KICAgIGlmIChhID09IGIpIHJldHVybiB0cnVlOwogICAgLy8gT25lIGlzIGZhbHN5IGFuZCB0aGUgb3RoZXIgdHJ1dGh5LgogICAgaWYgKCghYSAmJiBiKSB8fCAoYSAmJiAhYikpIHJldHVybiBmYWxzZTsKICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLgogICAgaWYgKGEuX2NoYWluKSBhID0gYS5fd3JhcHBlZDsKICAgIGlmIChiLl9jaGFpbikgYiA9IGIuX3dyYXBwZWQ7CiAgICAvLyBPbmUgb2YgdGhlbSBpbXBsZW1lbnRzIGFuIGlzRXF1YWwoKT8KICAgIGlmIChhLmlzRXF1YWwpIHJldHVybiBhLmlzRXF1YWwoYik7CiAgICBpZiAoYi5pc0VxdWFsKSByZXR1cm4gYi5pc0VxdWFsKGEpOwogICAgLy8gQ2hlY2sgZGF0ZXMnIGludGVnZXIgdmFsdWVzLgogICAgaWYgKF8uaXNEYXRlKGEpICYmIF8uaXNEYXRlKGIpKSByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpOwogICAgLy8gQm90aCBhcmUgTmFOPwogICAgaWYgKF8uaXNOYU4oYSkgJiYgXy5pc05hTihiKSkgcmV0dXJuIGZhbHNlOwogICAgLy8gQ29tcGFyZSByZWd1bGFyIGV4cHJlc3Npb25zLgogICAgaWYgKF8uaXNSZWdFeHAoYSkgJiYgXy5pc1JlZ0V4cChiKSkKICAgICAgcmV0dXJuIGEuc291cmNlICAgICA9PT0gYi5zb3VyY2UgJiYKICAgICAgICAgICAgIGEuZ2xvYmFsICAgICA9PT0gYi5nbG9iYWwgJiYKICAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PT0gYi5pZ25vcmVDYXNlICYmCiAgICAgICAgICAgICBhLm11bHRpbGluZSAgPT09IGIubXVsdGlsaW5lOwogICAgLy8gSWYgYSBpcyBub3QgYW4gb2JqZWN0IGJ5IHRoaXMgcG9pbnQsIHdlIGNhbid0IGhhbmRsZSBpdC4KICAgIGlmIChhdHlwZSAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTsKICAgIC8vIENoZWNrIGZvciBkaWZmZXJlbnQgYXJyYXkgbGVuZ3RocyBiZWZvcmUgY29tcGFyaW5nIGNvbnRlbnRzLgogICAgaWYgKGEubGVuZ3RoICYmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpKSByZXR1cm4gZmFsc2U7CiAgICAvLyBOb3RoaW5nIGVsc2Ugd29ya2VkLCBkZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLgogICAgdmFyIGFLZXlzID0gXy5rZXlzKGEpLCBiS2V5cyA9IF8ua2V5cyhiKTsKICAgIC8vIERpZmZlcmVudCBvYmplY3Qgc2l6ZXM/CiAgICBpZiAoYUtleXMubGVuZ3RoICE9IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlOwogICAgLy8gUmVjdXJzaXZlIGNvbXBhcmlzb24gb2YgY29udGVudHMuCiAgICBmb3IgKHZhciBrZXkgaW4gYSkgaWYgKCEoa2V5IGluIGIpIHx8ICFfLmlzRXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7CiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIGFycmF5IG9yIG9iamVjdCBlbXB0eT8KICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikpIHJldHVybiBvYmoubGVuZ3RoID09PSAwOwogICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7CiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/CiAgXy5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09IDEpOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/CiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXkKICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJzsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD8KICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSBPYmplY3Qob2JqKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIGFyZ3VtZW50cyBvYmplY3Q/CiAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuICEhKG9iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgJ2NhbGxlZScpKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgZnVuY3Rpb24/CiAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqICYmIG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY2FsbCAmJiBvYmouYXBwbHkpOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBzdHJpbmc/CiAgXy5pc1N0cmluZyA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuICEhKG9iaiA9PT0gJycgfHwgKG9iaiAmJiBvYmouY2hhckNvZGVBdCAmJiBvYmouc3Vic3RyKSk7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIG51bWJlcj8KICBfLmlzTnVtYmVyID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqID09PSAwIHx8IChvYmogJiYgb2JqLnRvRXhwb25lbnRpYWwgJiYgb2JqLnRvRml4ZWQpKTsKICB9OwoKICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IGBOYU5gIGhhcHBlbnMgdG8gYmUgdGhlIG9ubHkgdmFsdWUgaW4gSmF2YVNjcmlwdAogIC8vIHRoYXQgZG9lcyBub3QgZXF1YWwgaXRzZWxmLgogIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogIT09IG9iajsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj8KICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBkYXRlPwogIF8uaXNEYXRlID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqICYmIG9iai5nZXRUaW1lem9uZU9mZnNldCAmJiBvYmouc2V0VVRDRnVsbFllYXIpOwogIH07CgogIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbj8KICBfLmlzUmVnRXhwID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqICYmIG9iai50ZXN0ICYmIG9iai5leGVjICYmIChvYmouaWdub3JlQ2FzZSB8fCBvYmouaWdub3JlQ2FzZSA9PT0gZmFsc2UpKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGVxdWFsIHRvIG51bGw/CiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogPT09IG51bGw7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/CiAgXy5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwOwogIH07CgogIC8vIFV0aWxpdHkgRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cwogIC8vIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC4KICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHsKICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRvcnMuCiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfTsKCiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuCiAgXy50aW1lcyA9IGZ1bmN0aW9uIChuLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgaSk7CiAgfTsKCiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LCBlbnN1cmluZyB0aGF0CiAgLy8gdGhleSdyZSBjb3JyZWN0bHkgYWRkZWQgdG8gdGhlIE9PUCB3cmFwcGVyIGFzIHdlbGwuCiAgXy5taXhpbiA9IGZ1bmN0aW9uKG9iaikgewogICAgZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKXsKICAgICAgYWRkVG9XcmFwcGVyKG5hbWUsIF9bbmFtZV0gPSBvYmpbbmFtZV0pOwogICAgfSk7CiAgfTsKCiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS4KICAvLyBVc2VmdWwgZm9yIHRlbXBvcmFyeSBET00gaWRzLgogIHZhciBpZENvdW50ZXIgPSAwOwogIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHsKICAgIHZhciBpZCA9IGlkQ291bnRlcisrOwogICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7CiAgfTsKCiAgLy8gQnkgZGVmYXVsdCwgVW5kZXJzY29yZSB1c2VzIEVSQi1zdHlsZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLCBjaGFuZ2UgdGhlCiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLgogIF8udGVtcGxhdGVTZXR0aW5ncyA9IHsKICAgIGV2YWx1YXRlICAgIDogLzwlKFtcc1xTXSs/KSU+L2csCiAgICBpbnRlcnBvbGF0ZSA6IC88JT0oW1xzXFNdKz8pJT4vZwogIH07CgogIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uCiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLAogIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLgogIF8udGVtcGxhdGUgPSBmdW5jdGlvbihzdHIsIGRhdGEpIHsKICAgIHZhciBjICA9IF8udGVtcGxhdGVTZXR0aW5nczsKICAgIHZhciB0bXBsID0gJ3ZhciBfX3A9W10scHJpbnQ9ZnVuY3Rpb24oKXtfX3AucHVzaC5hcHBseShfX3AsYXJndW1lbnRzKTt9OycgKwogICAgICAnd2l0aChvYmp8fHt9KXtfX3AucHVzaChcJycgKwogICAgICBzdHIucmVwbGFjZSgvXFwvZywgJ1xcXFwnKQogICAgICAgICAucmVwbGFjZSgvJy9nLCAiXFwnIikKICAgICAgICAgLnJlcGxhY2UoYy5pbnRlcnBvbGF0ZSwgZnVuY3Rpb24obWF0Y2gsIGNvZGUpIHsKICAgICAgICAgICByZXR1cm4gIicsIiArIGNvZGUucmVwbGFjZSgvXFwnL2csICInIikgKyAiLCciOwogICAgICAgICB9KQogICAgICAgICAucmVwbGFjZShjLmV2YWx1YXRlIHx8IG51bGwsIGZ1bmN0aW9uKG1hdGNoLCBjb2RlKSB7CiAgICAgICAgICAgcmV0dXJuICInKTsiICsgY29kZS5yZXBsYWNlKC9cXCcvZywgIiciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xyXG5cdF0vZywgJyAnKSArICJfX3AucHVzaCgnIjsKICAgICAgICAgfSkKICAgICAgICAgLnJlcGxhY2UoL1xyL2csICdcXHInKQogICAgICAgICAucmVwbGFjZSgvXG4vZywgJ1xcbicpCiAgICAgICAgIC5yZXBsYWNlKC9cdC9nLCAnXFx0JykKICAgICAgICAgKyAiJyk7fXJldHVybiBfX3Auam9pbignJyk7IjsKICAgIHZhciBmdW5jID0gbmV3IEZ1bmN0aW9uKCdvYmonLCB0bXBsKTsKICAgIHJldHVybiBkYXRhID8gZnVuYyhkYXRhKSA6IGZ1bmM7CiAgfTsKCiAgLy8gVGhlIE9PUCBXcmFwcGVyCiAgLy8gLS0tLS0tLS0tLS0tLS0tCgogIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0CiAgLy8gY2FuIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCB0aGUKICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLgogIHZhciB3cmFwcGVyID0gZnVuY3Rpb24ob2JqKSB7IHRoaXMuX3dyYXBwZWQgPSBvYmo7IH07CgogIC8vIEV4cG9zZSBgd3JhcHBlci5wcm90b3R5cGVgIGFzIGBfLnByb3RvdHlwZWAKICBfLnByb3RvdHlwZSA9IHdyYXBwZXIucHJvdG90eXBlOwoKICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuCiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKG9iaiwgY2hhaW4pIHsKICAgIHJldHVybiBjaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqOwogIH07CgogIC8vIEEgbWV0aG9kIHRvIGVhc2lseSBhZGQgZnVuY3Rpb25zIHRvIHRoZSBPT1Agd3JhcHBlci4KICB2YXIgYWRkVG9XcmFwcGVyID0gZnVuY3Rpb24obmFtZSwgZnVuYykgewogICAgd3JhcHBlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIHVuc2hpZnQuY2FsbChhcmdzLCB0aGlzLl93cmFwcGVkKTsKICAgICAgcmV0dXJuIHJlc3VsdChmdW5jLmFwcGx5KF8sIGFyZ3MpLCB0aGlzLl9jaGFpbik7CiAgICB9OwogIH07CgogIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC4KICBfLm1peGluKF8pOwoKICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLgogIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICB3cmFwcGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLl93cmFwcGVkLCB0aGlzLl9jaGFpbik7CiAgICB9OwogIH0pOwoKICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci4KICBlYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICB3cmFwcGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gcmVzdWx0KG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpLCB0aGlzLl9jaGFpbik7CiAgICB9OwogIH0pOwoKICAvLyBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuCiAgd3JhcHBlci5wcm90b3R5cGUuY2hhaW4gPSBmdW5jdGlvbigpIHsKICAgIHRoaXMuX2NoYWluID0gdHJ1ZTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LgogIHdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDsKICB9OwoKfSkoKTsKCn0pfTsKCi8qKioqKioqKioqIGxpYi91cGRhdGVzICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL3VwZGF0ZXMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIFVwZGF0ZSBmdW5jdGlvbnMgdG8gYmUgZXhwb3J0ZWQgZnJvbSB0aGUgZGVzaWduIGRvYy4KICovCgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyksCiAgICBfID0gcmVxdWlyZSgnLi91bmRlcnNjb3JlJykuXzsgIC8vbmIgTk9UIHRoZSB2ZXJzaW9uIHNoaXBwZWQgd2l0aCBrYW5zbyAwLjAuNyAtLSB0aGF0IGxhY2tzIF8udW5pb24KCgoKLyoqCiAqIFRoaXMgd2lsbCBvbmx5IGFjY2VwdCBqc29uIGRhdGEgKG5vIHN1Ym1pc3Npb24pCiAqICB0byByZW1vdmUga2Fuc28gd3JhcHBpbmcgYXJvdW5kIGl0LCBtb2RpZnkgdGhlIF9kZXNpZ24gZW50cnkgdG86IHsKICAgInNvdXJjZSI6ICJmdW5jdGlvbihkb2MsIHJlcSl7dmFyIGZuID0gcmVxdWlyZShcImxpYi9hcHBcIilbXCJ1cGRhdGVzXCJdW1wic291cmNlXCJdO3JldHVybiBmbihkb2MscmVxKTt9Igp9CiAqLwpleHBvcnRzLnNvdXJjZSA9IGZ1bmN0aW9uIChkb2MsIHJlcSkgewoKICAgIHZhciBtYWtlX2Vycm9yID0gZnVuY3Rpb24obXNnKSB7CiAgICAgICAgdmFyIGZvcm1fc3RyOwogICAgICAgIGZvciggdmFyIGkgaW4gcmVxLmZvcm0gKSB7IGZvcm1fc3RyKz1pKycgOiAnKyByZXEuZm9ybVtpXSsgJ1xuJzsgfTsKICAgICAgICByZXR1cm4gW251bGwsIHsKICAgICAgICAgICAgY29kZTogNDAwLCAgLy9kb2Vzbid0IGN1cnJlbnRseSB3b3JrLCBzZWUgaHR0cHM6Ly9pc3N1ZXMuYXBhY2hlLm9yZy9qaXJhL2Jyb3dzZS9DT1VDSERCLTY0OAogICAgICAgICAgICBoZWFkZXJzOiB7IkNvbnRlbnQtVHlwZSIgOiAiYXBwbGljYXRpb24vanNvbiJ9LCAvL2RvZXNuJ3QgY3VycmVudGx5IHdvcmsKICAgICAgICAgICAgYm9keTogJ3siZXJyb3IiOiInK21zZysnIiwicmVxX2Zvcm0iOiInK2Zvcm1fc3RyKyciLCJyZXFfYm9keSI6IicrcmVxLmJvZHkrJyJ9JwogICAgICAgIH1dOwogICAgfTsKICAgIAogICAgaWYoICFkb2MgKSB7CiAgICAgICAgLy9jcmVhdGUgbmV3IHNvdXJjZQogICAgICAgIC8vdmFyIGRhdGEgPSByZXEuZm9ybTsKICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocmVxLmJvZHkpOwogICAgICAgIAogICAgICAgIGlmKCAhZGF0YS5faWQgKSB7CiAgICAgICAgICAgIHJldHVybiBtYWtlX2Vycm9yKCdlcnJvcjogbm8gZG9jX2lkIHN1cHBsaWVkIGluIHN1Ym1pdHRlZCBkYXRhJyk7CiAgICAgICAgfQogICAgICAgIGlmICggIWRhdGEudHlwZSB8fCAhZGF0YS50eXBlID09ICdzb3VyY2UnICkgewogICAgICAgICAgICByZXR1cm4gbWFrZV9lcnJvcignZXJyb3I6IHR5cGUgbWlzc2luZyBvciBub3Qgc2V0IHRvIHNvdXJjZS4nKTsKICAgICAgICB9CiAgICAgICAgdmFyIG5ld19zb3VyY2UgPSBfLmV4dGVuZCh7fSwgZGF0YSwgewogICAgICAgICAgICBfaWQgOiBkYXRhLl9pZCwKICAgICAgICAgICAgY3JlYXRlZCA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLAogICAgICAgICAgICB1cGRhdGVkIDogbmV3IERhdGUoKS5nZXRUaW1lKCkKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gW25ld19zb3VyY2UsICdjcmVhdGVkJ107CiAgICB9IGVsc2UgewogICAgICAgIGFkZGl0aW9ucyA9IEpTT04ucGFyc2UocmVxLmJvZHkpOwogICAgICAgIC8vLS0gYXBwZW5kIHRhZ3MgCiAgICAgICAgdmFyIG5ld190YWdzID0gXy51bmlvbihkb2MudGFnc3x8W10sIGFkZGl0aW9ucy50YWdzfHxbXSk7CiAgICAgICAgZG9jID0gXy5leHRlbmQoZG9jLCBhZGRpdGlvbnMsIHt0YWdzOm5ld190YWdzfSk7CiAgICAgICAgCiAgICAgICAgZG9jLnVwZGF0ZWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgICAgICByZXR1cm4gW2RvYywgICd1cGRhdGVkJwogICAgICAgICAgLyp7CiAgICAgICAgICAgIGNvZGU6IDIwMCwgIC8vZG9lc24ndCBjdXJyZW50bHkgd29yaywgc2VlIGh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9icm93c2UvQ09VQ0hEQi02NDgKICAgICAgICAgICAgLy9oZWFkZXJzOiB7IkNvbnRlbnQtVHlwZSIgOiAiYXBwbGljYXRpb24vanNvbiJ9LCAvL2RvZXNuJ3Qgc2VlbSB0byB3b3JrIGVpdGhlcgogICAgICAgICAgICBoZWFkZXJzOiB7IkNvbnRlbnQtVHlwZSIgOiAndGV4dC9odG1sJ30sICAgICAgICAvL3RoaXMgaXMgd2hhdCB5b3UgZ2V0IAogICAgICAgICAgICBib2R5OiAndXBkYXRlZCcKICAgICAgICAgIH0qLwogICAgICAgIF07CiAgICB9Cn07CgoKCgp9KX07CgovKioqKioqKioqKiBsaWIvdXRpbHMgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJsaWIvdXRpbHMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIHV0aWxpdGllcyBmb3IgbnJhbWEKICoKICogQ29weXJpZ2h0IChjKSAyMDExIFN0ZXBoZW4gQS4gQnV0dGVyZmlsbCwgaHR0cDovL25vdGUtby1yYW1hLmNvbQogKiAKICovCgogCgp9KX07CgovKioqKioqKioqKiBsaWIvdXVpZCAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi91dWlkIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCihmdW5jdGlvbigpIHsKICAvKgogICogR2VuZXJhdGUgYSBSRkM0MTIyKHY0KSBVVUlECiAgKgogICogRG9jdW1lbnRhdGlvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vYnJvb2ZhL25vZGUtdXVpZAogICoKICAqIE1JVCAmIEdQTCBkdWFsIGxpY2Vuc2UKICAqLwoKICAvLyBVc2Ugbm9kZS5qcyBCdWZmZXIgY2xhc3MgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgdXNlIHRoZSBBcnJheSBjbGFzcwogIHZhciBCdWZmZXJDbGFzcyA9IHR5cGVvZihCdWZmZXIpID09ICdmdW5jdGlvbicgPyBCdWZmZXIgOiBBcnJheTsKCiAgLy8gQnVmZmVyIHVzZWQgZm9yIGdlbmVyYXRpbmcgc3RyaW5nIHV1aWRzCiAgdmFyIF9idWYgPSBuZXcgQnVmZmVyQ2xhc3MoMTYpOwoKICAvLyBDYWNoZSBudW1iZXIgPC0+IGhleCBzdHJpbmcgZm9yIG9jdGV0IHZhbHVlcwogIHZhciB0b1N0cmluZyA9IFtdOwogIHZhciB0b051bWJlciA9IHt9OwogIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHsKICAgIHRvU3RyaW5nW2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTsKICAgIHRvTnVtYmVyW3RvU3RyaW5nW2ldXSA9IGk7CiAgfQoKICBmdW5jdGlvbiBwYXJzZShzKSB7CiAgICB2YXIgYnVmID0gbmV3IEJ1ZmZlckNsYXNzKDE2KTsKICAgIHZhciBpID0gMDsKICAgIHMudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bMC05YS1mXVswLTlhLWZdL2csIGZ1bmN0aW9uKG9jdGV0KSB7CiAgICAgIGJ1ZltpKytdID0gdG9OdW1iZXJbb2N0ZXRdOwogICAgfSk7CiAgICByZXR1cm4gYnVmOwogIH0KCiAgZnVuY3Rpb24gdW5wYXJzZShidWYpIHsKICAgIHZhciB0b3MgPSB0b1N0cmluZywgYiA9IGJ1ZjsKICAgIHJldHVybiB0b3NbYlswXV0gKyB0b3NbYlsxXV0gKyB0b3NbYlsyXV0gKyB0b3NbYlszXV0gKyAnLScgKwogICAgICAgICAgIHRvc1tiWzRdXSArIHRvc1tiWzVdXSArICctJyArCiAgICAgICAgICAgdG9zW2JbNl1dICsgdG9zW2JbN11dICsgJy0nICsKICAgICAgICAgICB0b3NbYls4XV0gKyB0b3NbYls5XV0gKyAnLScgKwogICAgICAgICAgIHRvc1tiWzEwXV0gKyB0b3NbYlsxMV1dICsgdG9zW2JbMTJdXSArCiAgICAgICAgICAgdG9zW2JbMTNdXSArIHRvc1tiWzE0XV0gKyB0b3NbYlsxNV1dOwogIH0KCiAgdmFyIGIzMiA9IDB4MTAwMDAwMDAwLCBmZiA9IDB4ZmY7CiAgZnVuY3Rpb24gdXVpZChmbXQsIGJ1Ziwgb2Zmc2V0KSB7CiAgICB2YXIgYiA9IGZtdCAhPSAnYmluYXJ5JyA/IF9idWYgOiAoYnVmID8gYnVmIDogbmV3IEJ1ZmZlckNsYXNzKDE2KSk7CiAgICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDsKCiAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqYjMyOwogICAgYltpKytdID0gciAmIGZmOwogICAgYltpKytdID0gcj4+PjggJiBmZjsKICAgIGJbaSsrXSA9IHI+Pj4xNiAmIGZmOwogICAgYltpKytdID0gcj4+PjI0ICYgZmY7CiAgICByID0gTWF0aC5yYW5kb20oKSpiMzI7CiAgICBiW2krK10gPSByICYgZmY7CiAgICBiW2krK10gPSByPj4+OCAmIGZmOwogICAgYltpKytdID0gcj4+PjE2ICYgMHgwZiB8IDB4NDA7IC8vIFNlZSBSRkM0MTIyIHNlY3QuIDQuMS4zCiAgICBiW2krK10gPSByPj4+MjQgJiBmZjsKICAgIHIgPSBNYXRoLnJhbmRvbSgpKmIzMjsKICAgIGJbaSsrXSA9IHIgJiAweDNmIHwgMHg4MDsgLy8gU2VlIFJGQzQxMjIgc2VjdC4gNC40CiAgICBiW2krK10gPSByPj4+OCAmIGZmOwogICAgYltpKytdID0gcj4+PjE2ICYgZmY7CiAgICBiW2krK10gPSByPj4+MjQgJiBmZjsKICAgIHIgPSBNYXRoLnJhbmRvbSgpKmIzMjsKICAgIGJbaSsrXSA9IHIgJiBmZjsKICAgIGJbaSsrXSA9IHI+Pj44ICYgZmY7CiAgICBiW2krK10gPSByPj4+MTYgJiBmZjsKICAgIGJbaSsrXSA9IHI+Pj4yNCAmIGZmOwoKICAgIHJldHVybiBmbXQgPT09IHVuZGVmaW5lZCA/IHVucGFyc2UoYikgOiBiOwogIH07CgogIHV1aWQucGFyc2UgPSBwYXJzZTsKICB1dWlkLnVucGFyc2UgPSB1bnBhcnNlOwogIHV1aWQuQnVmZmVyQ2xhc3MgPSBCdWZmZXJDbGFzczsKCiAgaWYgKHR5cGVvZihtb2R1bGUpICE9ICd1bmRlZmluZWQnKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IHV1aWQ7CiAgfSBlbHNlIHsKICAgIC8vIEluIGJyb3dzZXI/IFNldCBhcyB0b3AtbGV2ZWwgZnVuY3Rpb24KICAgIHRoaXMudXVpZCA9IHV1aWQ7CiAgfQp9KSgpOwoKfSl9OwoKLyoqKioqKioqKiogbGliL3ZhbGlkYXRlICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL3ZhbGlkYXRlIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qKgogKiBUaGUgdmFsaWRhdGVfZG9jX3VwZGF0ZSBmdW5jdGlvbiB0byBiZSBleHBvcnRlZCBmcm9tIHRoZSBkZXNpZ24gZG9jLgogKi8KCnZhciB0eXBlcyA9IHJlcXVpcmUoJ2thbnNvL3R5cGVzJyksCiAgICBhcHBfdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7CgoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmV3RG9jLCBvbGREb2MsIHVzZXJDdHgpIHsKICAgIHR5cGVzLnZhbGlkYXRlX2RvY191cGRhdGUoYXBwX3R5cGVzLCBuZXdEb2MsIG9sZERvYywgdXNlckN0eCk7CiAgICAKICAgIC8qKgogICAgICogaWYgdXNlcl9pZCBvZiBhIGRvY3VtZW50Y29udGFpbnMgQCwgbXVzdCBiZSBsb2dnZWQgaW4gYXMgdGhhdCB1c2VyIHRvIG1ha2UgY2hhbmdlcwogICAgICovCiAgICB2YXIgdmVyaWZ5X3VzZXIgPSBmdW5jdGlvbiB2ZXJpZnlfdXNlcih1c2VyX2lkKSB7CiAgICAgICAgaWYoIHVzZXJfaWQgJiYgdXNlcl9pZFswXSAhPSAnKicgKSB7CiAgICAgICAgICAgIGlmICh1c2VyQ3R4Lm5hbWUgPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIHRocm93KHtmb3JiaWRkZW46ICdUaGlzIHVzZXIgbXVzdCBiZSBsb2dnZWQgaW4gdG8gbWFrZSBjaGFuZ2VzICgqIHBvbGljeSkuIHVzZXJfaWQ6Jyt1c2VyX2lkfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoIHVzZXJDdHgubmFtZSAhPSB1c2VyX2lkICkgewogICAgICAgICAgICAgICAgdGhyb3coe2ZvcmJpZGRlbjogJ1RoaXMgdXNlciBjYW5ub3QgbWFrZSBjaGFuZ2VzIHRvIGFub3RoZXIgdXNlclwncyBkb2N1bWVudHMgKCogcG9saWN5KS51c2VyX2lkOicrdXNlcl9pZH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaWYoIG5ld0RvYyApIHsKICAgICAgICB2ZXJpZnlfdXNlcihuZXdEb2MudXNlcl9pZCk7CiAgICB9CiAgICBpZiggb2xkRG9jICkgewogICAgICAgIHZlcmlmeV91c2VyKG9sZERvYy51c2VyX2lkKTsKICAgIH0KICAgIAp9OwoKCn0pfTsKCi8qKioqKioqKioqIGxpYi92aWV3cyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi92aWV3cyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogVmlldyBmdW5jdGlvbnMgdG8gYmUgZXhwb3J0ZWQgZnJvbSB0aGUgZGVzaWduIGRvYy4KICovCgovLyA9PT0gZm9yIHRoZSBib29rbWFya2xldCAoL290aGVyKSBjbGllbnQKCi8qKgogKiB0byByZXF1ZXN0IGFsbCBub3RlcyBvciBhbGwgcXVvdGVzIG9uIGEgcGFydGljdWxhciBzb3VyY2UsCiAqICAgZWl0aGVyIGZvciBhIHBhcnRpY3VsYXIgdXNlciBvciBmb3IgYWxsIHVzZXJzCiAqIFRPRE8gOiBzaG91bGQgcHJvYmFibHkgc2tpcCBkb2MudHlwZSBhbmQgcHJvdmlkZSBldmVyeXRoaW5nCiAqLwpleHBvcnRzLnBhZ2VJZF90eXBlX3VzZXJJZCA9IHsKICAgIG1hcCA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIGlmKCBkb2MucGFnZV9pZCAmJiBkb2MudHlwZSApIHsKICAgICAgICAgICAgaWYoIGRvYy51c2VyX2lkICkgewogICAgICAgICAgICAgICAgZW1pdChbZG9jLnBhZ2VfaWQsIGRvYy50eXBlLCBkb2MudXNlcl9pZF0sZG9jKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9ubyB1c2VyX2lkCiAgICAgICAgICAgIGVtaXQoW2RvYy5wYWdlX2lkLCBkb2MudHlwZSwgbnVsbF0sZG9jKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKCgoKLy8gPT09IGZvciB0aGUgY291Y2hBcHAKCi8qKgogKiBhbGwgdXNlcnMKICogaHR0cDovL2xvY2FsaG9zdDo1OTg0L25yYW1hL19kZXNpZ24vbnJhbWEvX3ZpZXcvYWxsX3VzZXJfaWRzCiovIApleHBvcnRzLmFsbF91c2VyX2lkcyA9IHsKICAgIG1hcCA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIGlmKCBkb2MudHlwZSA9PSAnc291cmNlJyAmJiBkb2MudXBkYXRlZCkgewogICAgICAgICAgICBlbWl0KGRvYy51c2VyX2lkLCBkb2MudXBkYXRlZCk7CiAgICAgICAgfQogICAgfSwKICAgIHJlZHVjZSA6ICdfc3RhdHMnCn07CgovKioKICogdG8gZGlzcGxheSBhbGwgc291cmNlcyAoZm9yIGFsbCB1c2Vycykgb3JkZXJlZCBieSBtb3N0IHJlY2VudGx5IHVwZGF0ZWQKICovCmV4cG9ydHMuc291cmNlID0gewogICAgbWFwIDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYoIGRvYy50eXBlICYmIGRvYy50eXBlID09ICJzb3VyY2UiICkgewogICAgICAgICAgICBpZiggZG9jLnVwZGF0ZWQgJiYgZG9jLnBhZ2VfaWQgKSB7CiAgICAgICAgICAgICAgICBlbWl0KFtkb2MudXBkYXRlZCwgZG9jLnBhZ2VfaWRdLCBudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKCi8qKgogKiB0byBkaXNwbGF5IGFsbCBzb3VyY2VzIGZvciBhIHBhcnRpY3VsYXIgdXNlcgogKi8KZXhwb3J0cy51c2VySWRfc291cmNlID0gewogICAgbWFwIDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYoIGRvYy50eXBlICYmIGRvYy50eXBlID09ICJzb3VyY2UiICkgewogICAgICAgICAgICBpZiggZG9jLnVzZXJfaWQgJiYgZG9jLnBhZ2VfaWQgJiYgZG9jLnVwZGF0ZWQgKSB7CiAgICAgICAgICAgICAgICBlbWl0KFtkb2MudXNlcl9pZCwgZG9jLnVwZGF0ZWRdLCBudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKCi8qKgogKiB0byBkaXNwbGF5IFthbGwgdXNlcnMnIHwgYSB1c2VyJ3NdIG5vdGVzIG9uIGEgc2luZ2xlIHNvdXJjZS4KICogZS5nLgogKiAgIGh0dHA6Ly9sb2NhbGhvc3Q6NTk4NC9ucmFtYS9fZGVzaWduL25yYW1hL192aWV3L3BhZ2VJZF91c2VySWQ/a2V5PVsiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Lb21vZG9fZHJhZ29ucz9oPWkiLCJzdGV2ZUBnbWFpbC5jb20iXQogKi8KZXhwb3J0cy5wYWdlSWRfdXNlcklkPSB7CiAgbWFwIDogZnVuY3Rpb24oZG9jKSB7CiAgICBpZiggZG9jLnVzZXJfaWQgJiYgZG9jLnBhZ2VfaWQgKSB7CiAgICAgIGVtaXQoW2RvYy5wYWdlX2lkLCBkb2MudXNlcl9pZF0sIG51bGwpOwogICAgfQogIH0KfTsKCgovLyAtLSBhdXRob3Igdmlld3MKLy8gICAgdGhlc2UgZGlmZmVyIGFsbW9zdCBvbmx5IGluIG9yZGVyIG9mIGVtaXNzaW9ucyBidXQgZG9uJ3QgaGF2ZSBlbGVnYW50IHdheSB0byBleHByZXNzIHRoaXMgcmVsYXRpb24KCi8qKgogKiB0byBkaXNwbGF5IGEgdXNlcidzIGF1dGhvcnMgYW5kLCBmb3IgZWFjaCBhdXRob3IsIHRoZSBzb3VyY2VzCiAqLwpleHBvcnRzLnVzZXJJZF9hdXRob3IgPSB7CiAgbWFwIDogZnVuY3Rpb24oZG9jKSB7CiAgICBpZiggZG9jLnR5cGUgJiYgZG9jLnR5cGUgPT0gJ3NvdXJjZScgKSB7CiAgICAgIGlmKCBkb2MuQVVUSE9SICYmIGRvYy51c2VyX2lkICkgewogICAgICAgIHZhciB5ZWFyID0gZG9jLllFQVIgfHwgMDsgICAgLy9vcmRlciBpcyBbbnVsbCwgMTk2NSwgMTk5MCwgMjAwMF0sICAodHlwaWNhbGx5IHJldmVyc2VkKQogICAgICAgIGZvciggaWR4IGluIGRvYy5BVVRIT1IgKSB7CiAgICAgICAgICBlbWl0KCBbIGRvYy51c2VyX2lkLCBkb2MuQVVUSE9SW2lkeF0sIDUwMDAteWVhciBdLCAxICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKICByZWR1Y2UgOiAiX2NvdW50Igp9Ci8qKgogKiB0byBkaXNwbGF5IGFsbCBzb3VyY2VzIGJ5IGFuIGF1dGhvciwgb3IgYWxsIG9mIGEgdXNlcidzIHNvdXJjZXMgYnkgYW4gYXV0aG9yLAogKiBzb3J0ZWQgYnkgeWVhci4KICogJiB0byBkaXNwbGF5IGFsbCBhdXRob3JzIHdpdGggZWFjaCBhdXRob3IncyBzb3VyY2VzIAogKiAoV2UgYXJlIHRyZWF0aW5nIGF1dGhvcnMgbGlrZSB0YWdzOyBhdXRob3JzIHRhZyBzb3VyY2VzLCBub3Qgbm90ZXMpCiAqLwpleHBvcnRzLmF1dGhvcl91c2VySWQgPSB7CiAgbWFwIDogZnVuY3Rpb24oZG9jKSB7CiAgICBpZiggZG9jLnR5cGUgJiYgZG9jLnR5cGUgPT0gJ3NvdXJjZScgKSB7CiAgICAgIGlmKCBkb2MuQVVUSE9SICYmIGRvYy51c2VyX2lkICkgewogICAgICAgIHZhciB5ZWFyX29yZGVyID0gNTAwMCAtIHBhcnNlSW50KGRvYy5ZRUFSKSB8fCA1MDAwOyAgICAvL29yZGVyIGlzIFtudWxsLCAxOTY1LCAxOTkwLCAyMDAwXSwgICh0eXBpY2FsbHkgcmV2ZXJzZWQpCiAgICAgICAgZm9yKCBpZHggaW4gZG9jLkFVVEhPUiApIHsKICAgICAgICAgIGVtaXQoIFtkb2MuQVVUSE9SW2lkeF0sIGRvYy51c2VyX2lkLCB5ZWFyX29yZGVyXSwgMSApOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgcmVkdWNlIDogIl9jb3VudCIKfTsKCgovLyAtLSB0YWdzCgovKioKICogdG8gZGlzcGxheSBhbGwgdGFncwogKi8KZXhwb3J0cy50YWdzX2FsbD0gewogIG1hcCA6IGZ1bmN0aW9uKGRvYykgewogICAgaWYoIGRvYy50eXBlICYmIGRvYy50eXBlID09ICdub3RlJyApIHsKICAgICAgaWYoIGRvYy50YWdzICkgewogICAgICAgIGZvciggaWR4IGluIGRvYy50YWdzICkgewogICAgICAgICAgdmFyIHRhZyA9IGRvYy50YWdzW2lkeF07CiAgICAgICAgICBlbWl0KFt0YWddLCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIHJlZHVjZSA6ICdfY291bnQnCn07CmV4cG9ydHMudGFnc191c2VyPSB7CiAgbWFwIDogZnVuY3Rpb24oZG9jKSB7CiAgICBpZiggZG9jLnR5cGUgJiYgZG9jLnR5cGUgPT0gJ25vdGUnICkgewogICAgICBpZiggZG9jLnRhZ3MgJiYgZG9jLnVzZXJfaWQgKSB7CiAgICAgICAgZm9yKCBpZHggaW4gZG9jLnRhZ3MgKSB7CiAgICAgICAgICB2YXIgdGFnID0gZG9jLnRhZ3NbaWR4XTsKICAgICAgICAgIGVtaXQoW2RvYy51c2VyX2lkLCB0YWddLCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIHJlZHVjZSA6ICdfY291bnQnCn07Ci8qKgogKiB0byBzaG93IFthbGwgdXNlcnMnIHwgYSB1c2VyJ3NdIG5vdGVzIG9uIGEgdGFnIG9yZ2FuaXNlZCBieSBzb3VyY2UsCiAqICAgd2hlcmUgdGhlIHNvdXJjZXMgYXJlIHNvcnRlZCBieSBtb3N0IHJlY2VudGx5IHVwZGF0ZWQKICoKICogdXNlZCB3aXRoIGluY2x1ZGVfZG9jcywgaXQgd2lsbCBncmFiIHRyaXBsZXMgb2YgYSBub3RlLCBhIHNvdXJjZSAmIGEgcXVvdGUuCiAqIHNlZSBodHRwOi8vYmxvZy5jb3VjaGJhc2UuY29tL3doYXQlRTIlODAlOTlzLW5ldy1hcGFjaGUtY291Y2hkYi0wMTEtJUUyJTgwJTk0LXBhcnQtdHdvLXZpZXdzLWpvaW5zLXJlZHV4LXJhdy1jb2xsYXRpb24tc3BlZWQKICovCmV4cG9ydHMudGFncyA9IHsKICBtYXAgOiBmdW5jdGlvbihkb2MpIHsKICAgIGlmKCBkb2MudHlwZSAmJiBkb2MudHlwZSA9PSAnbm90ZScgKSB7CiAgICAgIHZhciBub3RlID0gZG9jOwogICAgICBpZiggbm90ZS50YWdzICkgewogICAgICAgIGlmKCBub3RlLnVzZXJfaWQgJiYgbm90ZS5zb3VyY2VfaWQgJiYgbm90ZS5xdW90ZV9pZCAmJiBub3RlLnVwZGF0ZWQpIHsKICAgICAgICAgIGZvciggdmFyIGlkeCBpbiBub3RlLnRhZ3MgKSB7CiAgICAgICAgICAgIHZhciB0YWcgPSBub3RlLnRhZ3NbaWR4XTsKICAgICAgICAgICAgZW1pdChbIHRhZywgbm90ZS51c2VyX2lkLCBub3RlLnVwZGF0ZWQgXSwgbnVsbCk7ICAgICAgICAgICAgICAgICAgLy9pbmNsdWRlIHRoZSBub3RlIGl0ZXNlbGYKICAgICAgICAgICAgZW1pdChbIHRhZywgbm90ZS51c2VyX2lkLCBub3RlLnVwZGF0ZWQgXSwge19pZDpub3RlLnNvdXJjZV9pZH0pOyAgLy9pbmNsdWRlIHRoZSBzb3VyY2UKICAgICAgICAgICAgZW1pdChbIHRhZywgbm90ZS51c2VyX2lkLCBub3RlLnVwZGF0ZWQgXSwge19pZDpub3RlLnF1b3RlX2lkfSk7ICAgLy9pbmNsdWRlIHRoZSBxdW90ZQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgcmVkdWNlIDogIl9jb3VudCIKfTsKCi8qKgogKiBmb3IgdGhlIGZsb3csIHNob3cgbm90ZXMgYnkgcmVjZW5jeS4gIEFsbG93cyBhIHF1b3RlLWNlbnRyZWQgdmlldyByYXRoZXIgdGhhbgogKiAgc291cmNlLWNlbnRyZWQuCiAqCiAqIFdhc3RlZnVsIC0tIGVtaXRzIHNvdXJjZSBmb3IgZXZlcnkgbm90ZSBhbmQgYWdhaW4gZm9yIGV2ZXJ5IHF1b3RlLgogKiBCZWNhdXNlIHF1b3RlcyBhcmUgZW1pdHRlZCBpbiBvcmRlciBvZiBDUkVBVElPTiAobm90IGluIG9yZGVyIG5vdGVzIGFyZSB1cGRhdGVkLAogKiB0aGlzIHZpZXcgZW5kcyB1cCBiZWluZyBvdXQgb2Ygb3JkZXIpLgogKiBJZiBsaW1pdGVkLCB0aGVyZSBtaWdodCBiZSBub3RlcyB3aXRoIG1pc3NpbmcgcXVvdGVzICh0aGlzIGNvdWxkIGhhcHBlbiB3aGVyZQogKiB0aGVyZSBpcyBhIGRlbGF5IGJldHdlZW4gY3JlYXRpbmcgYSBxdW90ZSBhbmQgYWRkaW5nIGEgbm90ZSkuCiAqIChDb3VsZCBmaXggYm90aCBwcm9ibGVtcyBieSBoYXZpbmcgdXBkYXRlcyB0byBub3RlcyBjYXVzaW5nIHF1b3RlcyB0byBiZSB1cGRhdGVkCiAqIHRvbywganVzdCBhcyBzb3VyY2VzIGFyZS4pCiAqCiAqIExpa2UgdGFncywgaXQgcHJvdmlkZXMgbm90ZS1xdW90ZS1zb3VyY2UgdHJpcGxlcyBhbmQgbXVzdCBiZSB1c2VkIHdpdGgKICogIGluY2x1ZGVfZG9jcwogKi8gCmV4cG9ydHMucXVvdGVzID0gewogIG1hcCA6IGZ1bmN0aW9uKGRvYykgewogICAgaWYoIGRvYy50eXBlICYmIGRvYy51c2VyX2lkICYmIGRvYy5zb3VyY2VfaWQgJiYgZG9jLnVwZGF0ZWQgKSB7CiAgICAgIGlmKCBkb2MudHlwZSA9PSAnbm90ZScgJiYgZG9jLnF1b3RlX2lkICkgewogICAgICAgIHZhciBub3RlID0gZG9jOwogICAgICAgIGVtaXQoWyBub3RlLnVzZXJfaWQsIG5vdGUudXBkYXRlZCBdLCBudWxsKTsgICAgICAgICAgICAgICAgICAvL2luY2x1ZGUgdGhlIG5vdGUgaXRlc2VsZgogICAgICAgIGVtaXQoWyBub3RlLnVzZXJfaWQsIG5vdGUudXBkYXRlZCBdLCB7X2lkOm5vdGUuc291cmNlX2lkfSk7ICAvL2luY2x1ZGUgdGhlIHNvdXJjZQogICAgICAgIC8vZW1pdChbIG5vdGUudXNlcl9pZCwgbm90ZS51cGRhdGVkIF0sIHtfaWQ6bm90ZS5xdW90ZV9pZH0pOyAgIC8vaW5jbHVkZSB0aGUgcXVvdGUKICAgICAgfQogICAgICBpZiggZG9jLnR5cGUgPT0gJ3F1b3RlJyApIHsKICAgICAgICB2YXIgcXVvdGUgPSBkb2M7CiAgICAgICAgZW1pdChbIHF1b3RlLnVzZXJfaWQsIHF1b3RlLmNyZWF0ZWQgXSwgbnVsbCk7CiAgICAgICAgZW1pdChbIHF1b3RlLnVzZXJfaWQsIHF1b3RlLmNyZWF0ZWQgXSwge19pZDpxdW90ZS5zb3VyY2VfaWR9KQogICAgICB9CiAgICB9CiAgfQp9OwoKfSl9OwoKLyoqKioqKioqKiogbGliL25yYW1hMiAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi9ucmFtYTIiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIG5vdGUtby1yYW1hLCBzZWNvbmQgYXR0ZW1wdAogKiBDb3B5cmlnaHQgKGMpIDIwMTEgU3RlcGhlbiBBLiBCdXR0ZXJmaWxsCiAqCiAqIEZvciBkZXBlbmRlbmNpZXMgc2VlIGxpYi5qcwogKgogKiBUbyBydW4gYXMgYm9va21hcmtsZXQgKGNoYW5nZSB1cmw7IGRlbGV0ZSB0aGUgJ25vdycgcGFyYW0gaWYgbm90IGluIGRldmVsb3BlbnQgbW9kZSk6CiAqICAgamF2YXNjcmlwdDooZnVuY3Rpb24oKXtkZWxldGUgbW9kdWxlO2RlbGV0ZSBleHBvcnRzO19ucmFtYV9ia21rbHQ9dHJ1ZTtfbnJhbWFfdXNlcj0nc3RldmUnO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpLnNyYz0naHR0cDovL2xvY2FsaG9zdDo1OTg0L25yYW1hL19kZXNpZ24vbnJhbWEvYmttcmtsdC9ucmFtYTIuanM/bm93PW5ldyBEYXRlKCkuZ2V0VGltZSgpJzsgfSkoKTsKICoKICogVG8gZW1iZWQgaW4gcGFnZToKICogICA8c2NyaXB0IHNyYz0nbGliLm1pbi5qcyIgPjwvc2NyaXB0PgogKiAgIDxzY3JpcHQ+CiAqICAgICBfbnJhbWFfYmtta2x0ID0gZmFsc2U7CiAqICAgPC9zY3JpcHQ+CiAqICAgPHNjcmlwdCBzcmM9Im5yYW1hMl9iYXNlLmpzIiA+PC9zY3JpcHQ+CiAqCiAqIFRvIHVzZSBhcyBhIGNvbW1vbkpTIG1vZHVsZSAoc2VlIG5lYXIgdGhlIGVuZCBmb3IgYSBsaXN0IG9mIGRlcGVuZGVuY2llcyk6CiAqICAgbnJhbWEgPSByZXF1aXJlKCcuL25yYW1hJyk7CiAqICAgCiAqIE5COiBucmFtYSB3aWxsIG9ubHkgd29yayBpZiB1c2VycyBhY2NlcHQgY29va2llcyBmcm9tIGFsbCB3ZWJzaXRlcyAoYmVjYXVzZSBYRE0gbmVlZGVkKQogKgogKiBUT0RPIC0tIGxvYWQgc2V0dGluZ3MgZnJvbSBzZXJ2ZXIgZm9yIGxvZ2dlZC1pbiB1c2VycwogKi8KCi8qCiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiBOb3RlLW8tcmFtYS4KCiAgICBOb3RlLW8tcmFtYSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgTm90ZS1vLXJhbWEgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAgICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgoKICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiAgICBhbG9uZyB3aXRoIE5vdGUtby1yYW1hLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgoqLwoKLyoqCiAqIFdyYXBwaW5nIGZvciBib3RoIDxzY3JpcHQ+IGFuZCBjb21tb25KUyByZXF1aXJlKCkgdXNlCiAqIFRoYW5rcyB0byBodHRwOi8vY2FvbGFubWNtYWhvbi5jb20vcG9zdHMvd3JpdGluZ19mb3Jfbm9kZV9hbmRfdGhlX2Jyb3dzZXIKICogVGhlIGZ1bmN0aW9uIG1heSBiZSBjYWxsZWQgd2l0aCBleHBvcnRzIHVuZGVmaW5lZCB0byBwcmV2ZW50IGV4ZWN1dGlvbiAodGhpcwogKiBpcyB0byBhbGxvdyBjaGVja2luZyBucmFtYSBub3QgYWxyZWFkeSBsb2FkZWQsIHNlZSBiZWxvdykuCiAqLwooZnVuY3Rpb24oZXhwb3J0cyl7CiAgICB2YXIgX05SQU1BX0xJQl9VUkwgPSAiaHR0cDovL2xvY2FsaG9zdDo1OTg0L25yYW1hL19kZXNpZ24vbnJhbWEvYmttcmtsdC9saWIubWluLmpzIjsgLy93aGVyZSB0byBsb2FkIGxpYiBmcm9tIChmb3IgYm9va21hcmtsZXQgb25seSkKCiAgICAvKioKICAgICAqIGZpeCB1dWlkcyBzbyB0aGF0IGl0IGRvZXNuJ3QgaW5jbHVkZSBkYXNoZXMgKG5vIGdvb2QgZm9yIGNvdWNoREIpCiAgICAgKiBhbHNvIGluY2x1ZGUgYSB0cmFpbGluZyBOIHRvIG1hcmsgdGhlIHNvdXJjZQogICAgICovCiAgICBleHBvcnRzLl9tYWtlX3V1aWQgPSBmdW5jdGlvbih1dWlkKSB7CiAgICAgICAgdmFyIG5ld191dWlkID0gZnVuY3Rpb24gKHVzZV9iMzYvKm9wdGlvbmFsKi8pewogICAgICAgICAgICBpZiggdXNlX2IzNiApIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh1dWlkKCkucmVwbGFjZSgvLS9nLCcnKSwgMTYpLnRvU3RyaW5nKDM2KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAgdXVpZCgpLnJlcGxhY2UoLy0vZywnJykrJ04nOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXdfdXVpZDsKICAgIH07CgogICAgLyoqCiAgICAgKiBUaGVzZSBhcmUgc29tZSBzZXR0aW5ncyBmb3IgZW1iZWRkZWQgbW9kZSAoYmttcmtsdCBvciA8c2NyaXB0PikuCiAgICAgKiBPdGhlcnMgYXJlIGFkZGVkIGR1cmluZyBpbml0IChzZWUgcGFnZV9pZCBhbmQgcm9vdF9ub2RlKS4KICAgICAqIFdoZW4gdXNlZCBvbiB0aGUgc2VydmVyLCBzb21lIHNldHRpbmdzIGFyZSBvdmVycmlkZW4uCiAgICAgKi8KICAgIGV4cG9ydHMuX21ha2Vfc2V0dGluZ3MgPSBmdW5jdGlvbihucmFtYV91dWlkKXsKICAgICAgICB2YXIgJCA9IGpRdWVyeTsKICAgICAgICB2YXIgc2V0dGluZ3MgPSB7CiAgICAgICAgICAgIC8vIC0tIGludGVybmFscwogICAgICAgICAgICBpc19lbWJlZGRlZCA6IHRydWUsICAgICAvL3NldCB0byBmYWxzZSB3aGVuIGJlaW5nIHVzZWQgb24gdGhlIHNlcnZlcgogICAgICAgICAgICBkZWJ1ZyA6IHRydWUsCiAgICAgICAgICAgIGRiX25hbWUgOiAnbnJhbWEnLAogICAgICAgICAgICAvL3hkbV91cmw6ICdodHRwOi8vbm90ZW9yYW1hLmlyaXNjb3VjaC5jb20vX2Rlc2lnbi9ucmFtYS9fcmV3cml0ZS94ZG0vcHJvdmlkZXIuaHRtbCcsCiAgICAgICAgICAgIHhkbV91cmwgOiAnaHR0cDovL2xvY2FsaG9zdDo1OTg0L25yYW1hL19kZXNpZ24vbnJhbWEvX3Jld3JpdGUveGRtL3Byb3ZpZGVyLmh0bWwnLAogICAgICAgICAgICAvL3hkbV91cmwgOiAnaHR0cDovL2xvY2FsaG9zdDo1OTg0L25yYW1hL19kZXNpZ24vbnJhbWEvX3Jld3JpdGUveGRtL3Byb3ZpZGVyLmRlYnVnLmh0bWwnLAogICAgICAgICAgICAvLyAtLSB1c2VyIGlkZW50aWZpY2F0aW9uCiAgICAgICAgICAgIHVzZXJfaWQgOiAnKicrbnJhbWFfdXVpZCh0cnVlKS5zbGljZSgwLDEwKSwgLy9kZWZhdWx0IHRvIHJhbmRvbSBhbm9ueW1vdXMgdXNlcgogICAgICAgICAgICBwYXNzd29yZCA6ICduZXcnLCAgIC8vVE9ETyB0aGluayBvZiBjbGV2ZXIgd2F5IHRvIHN0b3JlIHRoaXMKICAgICAgICAgICAgbWVfb25seSA6IHRydWUsICAgIC8vc2hvdyBvbmx5IG15IG5vdGVzIGFuZCBxdW90ZXMKICAgICAgICAgICAgLy8gLS0gcXVvdGVzICYgbm90ZSBzZXR0aW5ncwogICAgICAgICAgICBub3RlX2RlZmF1bHRfdGV4dCA6ICd0eXBlIG5vdycsCiAgICAgICAgICAgIGJhY2tncm91bmRfY29sb3IgOiAnI0ZDRjZDRicsICAgLy9mb3IgcXVvdGVzCiAgICAgICAgICAgIGJhY2tncm91bmRfY29sb3Jfb3RoZXIgOiAncmdiYSgyNDAsMjQwLDI0MCwwLjUpJywgICAvL2NvbG9yIGZvciBvdGhlciBwcGwncyBub3RlcyBhbmQgcXVvdGVzIChUT0RPKQogICAgICAgICAgICBub3RlX2JhY2tncm91bmRfY29sb3IgOiAncmdiYSgyNDAsMjQwLDI0MCwwLjkpJywgCiAgICAgICAgICAgIHBlcnNpc3Rfc3RhcnRlZF9jb2xvciA6ICcjRkZCRjAwJywgIC8vI0ZGQkYwMD1vcmFuZ2UKICAgICAgICAgICAgbm90ZV93aWR0aCA6IDE1MCwgLy9waXhlbHMKICAgICAgICAgICAgbWF4X3F1b3RlX2xlbmd0aCA6IDUwMDAsICAvL3VzZWZ1bCBiZWNhdXNlIHByZXZlbnRzCiAgICAgICAgICAgIC8vIC0tIHN0eWxpbmcKICAgICAgICAgICAgc3R5bGUgOiB7ICAgLy9hcHBsaWVzIHRvIG5vdGVfZWRpdG9yICYgZGlhbG9ncwogICAgICAgICAgICAgICAgZm9udEZhbWlseSA6ICJQYWxhdGlubywgJ1BhbGF0aW5vIExpbm90eXBlJywgR2VvcmdpYSwgVGltZXMsICdUaW1lcyBOZXcgUm9tYW4nLCBzZXJpZiIsCiAgICAgICAgICAgICAgICBmb250U2l6ZSA6ICcxMnB4JywKICAgICAgICAgICAgICAgIGNvbG9yIDogJ3JnYigwLDAsMCknCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vdGVfc3R5bGUgOiB7CiAgICAgICAgICAgICAgICAnYm9yZGVyJyA6ICcxcHggc29saWQnLAogICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InIDogJ3JnYigyMjksMjI5LDI5OSknLCAgICAvL2RlZmF1bHQgaW4gY2FzZSBvcHRpb25zLm5vdGVfYmFja2dyb3VuZF9jb2xvciBmYWlscwogICAgICAgICAgICAgICAgJ2JvcmRlci1jb2xvcicgOiAnI0NEQzBCMCcsCiAgICAgICAgICAgICAgICAnYm94LXNoYWRvdycgOiAnMCAwIDhweCByZ2JhKDAsMCwwLDAuMiknLAogICAgICAgICAgICAgICAgJy1tb3otYm94LXNoYWRvdycgOiAnMCAwIDhweCByZ2JhKDAsMCwwLDAuMiknLAogICAgICAgICAgICAgICAgJy13ZWJraXQtYm94LXNoYWRvdycgOiAnMCAwIDhweCByZ2JhKDAsMCwwLDAuMiknLAogICAgICAgICAgICAgICAgJ3BhZGRpbmcnIDogJzNweCcsCiAgICAgICAgICAgICAgICAnY3Vyc29yJyA6ICdtb3ZlJywKICAgICAgICAgICAgICAgICdoZWlnaHQnIDogJ2F1dG8nLAogICAgICAgICAgICAgICAgJ3otaW5kZXgnIDogJzk5OTgnIC8vdHJ5IHRvIGVuc3VyZSBhbHdheXMgb24gdG9wCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vdGVfaW5uZXJfc3R5bGUgOiB7fSwKICAgICAgICAgICAgbm90ZV9lZGl0b3Jfc3R5bGUgOiB7CiAgICAgICAgICAgICAgICAnd3JhcCcgOiAnc29mdCcsCiAgICAgICAgICAgICAgICAncGFkZGluZy1sZWZ0JyA6ICcxcHgnLAogICAgICAgICAgICAgICAgJ3BhZGRpbmctdG9wJyA6ICcxcHgnLAogICAgICAgICAgICAgICAgJ3BhZGRpbmctcmlnaHQnIDogJzBweCcsCiAgICAgICAgICAgICAgICAncGFkZGluZy1ib3R0b20nIDogJzBweCcsCiAgICAgICAgICAgICAgICAnYm9yZGVyJyA6ICdub25lJywKICAgICAgICAgICAgICAgICdyZXNpemUnIDogJ25vbmUnLCAgICAgIC8vcmVtb3ZlIGRyYWdnYWJsZSByZXNpemUgaGFuZGxlIGluIGNocm9tZQogICAgICAgICAgICAgICAgJ2xpbmUtaGVpZ2h0JyA6ICcxLjNlbScsCiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcicgOiAnaW5oZXJpdCcsCiAgICAgICAgICAgICAgICAndGV4dC1zaGFkb3cnIDogJzFweCAxcHggMjBweCByZ2JhKDI1MCwyNTAsMjUwLDEpLCAtMXB4IC0xcHggMjBweCByZ2JhKDI1MCwyNTAsMjUwLDEpLCAwIDAgMXB4IHJnYmEoMjUwLDI1MCwyNTAsMSknLAogICAgICAgICAgICAgICAgJy1tb3otdGV4dC1zaGFkb3cnIDogJzFweCAxcHggMjBweCByZ2JhKDI1MCwyNTAsMjUwLDEpLCAtMXB4IC0xcHggMjBweCByZ2JhKDI1MCwyNTAsMjUwLDEpLCAwIDAgMXB4IHJnYmEoMjUwLDI1MCwyNTAsMSknLAogICAgICAgICAgICAgICAgJy13ZWJraXQtdGV4dC1zaGFkb3cnIDogJzFweCAxcHggMjBweCByZ2JhKDI1MCwyNTAsMjUwLDEpLCAtMXB4IC0xcHggMjBweCByZ2JhKDI1MCwyNTAsMjUwLDEpLCAwIDAgMXB4IHJnYmEoMjUwLDI1MCwyNTAsMSknCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNpbXBsZW1vZGFsIDogewogICAgICAgICAgICAgICAgYXV0b1Jlc2l6ZTogdHJ1ZSwKICAgICAgICAgICAgICAgIG92ZXJsYXlDbG9zZTogdHJ1ZSwKICAgICAgICAgICAgICAgIHpJbmRleCA6IDMyMDAwLAogICAgICAgICAgICAgICAgb3ZlcmxheUNzcyA6IHsgJ2JhY2tncm91bmQtY29sb3InIDogJyMwMDAnIH0sCiAgICAgICAgICAgICAgICBjb250YWluZXJDc3MgOiB7CiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IDogJ2F1dG8nLAogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA6ICcjZmZmJywKICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICc4cHggc29saWQgIzQ0NCcsCiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzEycHgnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb25TaG93IDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICBfLmRlbGF5KCBmdW5jdGlvbigpIHsgJCgnLnNpbXBsZW1vZGFsLWNvbnRhaW5lcicpLmNzcyh7aGVpZ2h0OidhdXRvJ30pOyB9LCA1MCApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHNldHRpbmdzLm5vdGVfc3R5bGUud2lkdGggPSBzZXR0aW5ncy5ub3RlX3dpZHRoKyJweCI7CiAgICAgICAgc2V0dGluZ3Mubm90ZV9lZGl0b3Jfc3R5bGUud2lkdGggPSBzZXR0aW5ncy5ub3RlX3dpZHRoKyJweCI7CiAgICAgICAgJC5leHRlbmQoc2V0dGluZ3Mubm90ZV9lZGl0b3Jfc3R5bGUsIHNldHRpbmdzLnN0eWxlKTsKICAgICAgICAkLmV4dGVuZChzZXR0aW5ncy5zaW1wbGVtb2RhbC5jb250YWluZXJDc3MsIHNldHRpbmdzLnN0eWxlKTsKICAgICAgICByZXR1cm4gc2V0dGluZ3M7CiAgICB9OwogICAgICAgIAoKICAgIC8qKgogICAgICogY2F1dGlvbiA6IGlmIHNldHRpbmdzLmRlYnVnLCB0aGlzIHdpbGwgYWRkIHRvIHdpbmRvdyAoaWYgZGVmaW5lZCkKICAgICAqLwogICAgZXhwb3J0cy5fbWFrZV9kZWJ1ZyA9IGZ1bmN0aW9uKHNldHRpbmdzLCB3aW5kb3cpIHsKICAgICAgICB2YXIgJCA9IGpRdWVyeTsKICAgICAgICB2YXIgX2RlYnVnID0gZnVuY3Rpb24oKXt9OyAgICAvL2RvZXMgbm90aGluZyBpZiBub3QgZGVidWdnaW5nCiAgICAgICAgaWYoIHNldHRpbmdzLmRlYnVnICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkgewogICAgICAgICAgICAvL3dpbmRvdy4kPWpRdWVyeTsgICAgICAgICAgICAgICAgICAgICAgICAvLzwtLSBuYiBicmVha3Mgbm9Db25mbGljdAogICAgICAgICAgICBfZGVidWcgPSBmdW5jdGlvbiBfZGVidWcoKXsKICAgICAgICAgICAgICAgIHZhciBtYXBfb3JfYXJyYXkgPSBhcmd1bWVudHMubGVuZ3RoID09IDEgPyBhcmd1bWVudHNbMF0gOiBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICAkLmVhY2gobWFwX29yX2FycmF5LCBmdW5jdGlvbihrZXksdmFsKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGlzRmluaXRlKGtleSkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSAnYScra2V5OyAgICAgIC8vYWxsb3dzIHVzIHRvIGhhbmRsZSBhcnJheXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiggdHlwZW9mICQubG9nID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5sb2coJ25yYW1hX2RlYnVnIHNldHRpbmcgJytrZXkrJz0nK3ZhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dba2V5XT12YWw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwogICAgICAgICAgICAvL2NvbnZlbmllbmNlIGNhbGxiYWNrIGZvciB0ZXN0aW5nIGFzeW5jCiAgICAgICAgICAgIHdpbmRvdy5jYiA9IGZ1bmN0aW9uKCl7ICQubG9nKCd3aW5kb3cuY2IgY2FsbGVkLCBzZW5kaW5nIGFyZ3VtZW50cyB0byBfZGVidWcnKTsgX2RlYnVnKGFyZ3VtZW50cyk7IH07IAogICAgICAgIH0KICAgICAgICByZXR1cm4gX2RlYnVnOwogICAgfTsKICAgIAogICAgLyoqCiAgICAgKiBjYXV0aW9uOiBleHRlbmRzICQKICAgICAqLwogICAgZXhwb3J0cy5fbWFrZV9sb2dnaW5nID0gZnVuY3Rpb24oc2V0dGluZ3MsICQpIHsKICAgICAgICB2YXIgbG9nZ2VyID0gZnVuY3Rpb24oKXsgcmV0dXJuIGZhbHNlOyB9OwogICAgICAgIGlmKCBzZXR0aW5ncy5kZWJ1ZyApIHsKICAgICAgICAgICAgbG9nZ2VyID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIC8vIHdpbGwgbm90IGxvZyBhbnl0aGluZyB1bmxlc3MgaW4gZGVidWcgbW9kZQogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGFyZ3MsIGZ1bmN0aW9uKGlkeCwgYXJnKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXJnKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkLmV4dGVuZCh7ImxvZyI6bG9nZ2VyfSk7CiAgICAgICAgcmV0dXJuIGxvZ2dlcjsKICAgIH07CgogICAgLyoqCiAgICAgKiBAcmV0dXJucyB0aGUgcnBjIHRyYW5zcG9ydCBmb3IgeGRtIAogICAgICovCiAgICBleHBvcnRzLl9tYWtlX3JwYyA9IGZ1bmN0aW9uKHNldHRpbmdzLCBlYXN5WERNLCAkKSB7CiAgICAgICAgdmFyIHJwYyA9IHt9OwogICAgICAgIHJwYy4kID0gJDsKICAgICAgICAKICAgICAgICAvL2xvY2FsIGZ1bmN0aW9ucyBhbGxvdyBjb21tdW5pY2F0aW9uIGZyb20gdGhlIHNlcnZlciB0byB1c2VyCiAgICAgICAgdmFyIGxvY2FsID0ge307CiAgICAgICAgbG9jYWwuZ2V0X3ZlcnNpb24gPSB7CiAgICAgICAgICAgIG1ldGhvZCA6IGZ1bmN0aW9uKHN1Y2Nlc3MsIGVycm9yKXsgc3VjY2VzcygiMC4yIik7IH0KICAgICAgICB9OwogICAgICAgIGxvY2FsLm1zZyA9IHsKICAgICAgICAgICAgbWV0aG9kIDogZnVuY3Rpb24obWVzc2FnZSwgc3VjY2VzcywgZXJyb3IpewogICAgICAgICAgICAgICAgaWYoIHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyApIHsKICAgICAgICAgICAgICAgICAgICBhbGVydChtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKCdkb25lJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIC8qKgogICAgICAgICAqIGRpc3BsYXkgYSBkaWFsb2cgdXNpbmcgalF1ZXJ5LnNpbXBsZW1vZGFsLCBtaW5pbXNpbmcgeHNzIHZ1bG5lcmFiaWxpdGllcwogICAgICAgICAqLwogICAgICAgIGxvY2FsLm1vZGFsID0gewogICAgICAgICAgICBtZXRob2QgOiBmdW5jdGlvbihkaXZfc3RyLCBzdWNjZXNzLCBlcnJvcil7CiAgICAgICAgICAgICAgICBpZiggdHlwZW9mIGRpdl9zdHIgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRkaXYgPSBycGMuJCgnPGRpdj4nK2Rpdl9zdHIrJzwvZGl2PicpOwogICAgICAgICAgICAgICAgICAgIHJwYy4kKCcjaWRfb2snLCAkZGl2KS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJwYy4kLm1vZGFsLmNsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoJ29rJyk7ICAgICAgICAgIC8vbmIgdGhpcyBvbmx5IHRyaWdnZXJzIGNiIG9uIHJlbW90ZSBlbmQgKG5vIGZ1bmN0aW9uIGlzIHBhc3NlZCkKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkZGl2LmJlUmVzZXRDU1MoKS5tb2RhbChzZXR0aW5ncy5zaW1wbGVtb2RhbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBycGNfbmFtZXMgPSBbJ2RiX3NhdmVEb2MnLCAnZGJfcmVtb3ZlRG9jJywgJ2RiX2dldFZpZXcnLCAnZGJfZG9VcGRhdGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgJ3Nlc3Npb25fbG9naW4nLCAnc2Vzc2lvbl9sb2dvdXQnLCAnc2Vzc2lvbl9pbmZvJ107CiAgICAgICAgdmFyIHJlbW90ZSA9IHsgfTsKICAgICAgICBycGMuJC5lYWNoKHJwY19uYW1lcywgZnVuY3Rpb24oaWR4LG5hbWUpewogICAgICAgICAgICByZW1vdGVbbmFtZV0gPSB7fTsgICAgICAvL2NyZWF0ZSBhIHN0dWIgICAgICAKICAgICAgICB9KTsKICAgICAgICBpZiggc2V0dGluZ3MuZGVidWcgKSB7CiAgICAgICAgICAgIHJlbW90ZS50ZXN0ID0ge307CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHZhciBfcnBjID0gbmV3IGVhc3lYRE0uUnBjKHsgcmVtb3RlOnNldHRpbmdzLnhkbV91cmwgfSx7IHJlbW90ZTpyZW1vdGUsIGxvY2FsOmxvY2FsIH0pOwogICAgICAgIC8vaWRlYWxseSBfcnBjIHdvdWxkIGJlIGFsbCB3ZSBuZWVkLCBidXQgc29tZSB0d2Vha2luZyBpcyBuZWVkZWQgLi4uCiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogZ2V0IHJwYyB0byB3b3JrIHdpdGgga2Fuc28uZGIgYW5kIGthbnNvLnNlc3Npb24gOiBjYWxsYmFjayBhcmd1bWVudHMgcGFzc2VkIGFzIGFuIGFycmF5LgogICAgICAgICAqIChTZWUgdGhlIGNvcnJlc3BvbmRpbmcgd3JhcHBlcnMgaW4geGRtL3Byb3ZpZGVyLmpzfGh0bWwgdG8gZ2V0IGZ1bGwgcGljdHVyZS4pCiAgICAgICAgICogd3JhcF91bmFycmF5IGlzIGZvciB1bmRvaW5nIHRoZSBlZmZlY3RzIG9mIGV4ZWN1dGluZyBjYWxsYmFja3Mgd2l0aCBhbGwgcGFyYW1ldGVycwogICAgICAgICAqIGNvbGxhcHNlZCBpbnRvIGFuIGFycmF5IChlYXN5WERNIG9ubHkgYWxsb3dzIGZvciBjYWxsYmFja3Mgd2l0aCBhIHNpbmdsZSBwYXJhbWV0ZXIpLgogICAgICAgICAqLwogICAgICAgIHZhciBfY2FsbGJhY2tfd3JhcHBlciA9IGZ1bmN0aW9uKGZuKXsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgbmV3X2FyZ3MgPSBhcmd1bWVudHNbMF07CiAgICAgICAgICAgICAgICBmbi5hcHBseShudWxsLCBuZXdfYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBfd3JhcF91bmFycmF5ID0gZnVuY3Rpb24oIG1ldGhvZCApIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCApIHsKICAgICAgICAgICAgICAgIHZhciBuZXdfYXJndW1lbnRzID0gXy5tYXAoYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpewogICAgICAgICAgICAgICAgICAgIGlmKCB0eXBlb2YoYXJnKSA9PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NhbGxiYWNrX3dyYXBwZXIoYXJnKTsgICAgLy93cmFwIGJlY2F1c2Ugd2UncmUgcHV0dGluZyBwYXJhbWV0ZXJzIGludG8gYXJyYXkgZm9yIHhkbQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBtZXRob2QuYXBwbHkobnVsbCwgbmV3X2FyZ3VtZW50cyk7ICAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gZmluYWxseSwgYWRkIHRoZSBycGMgZnVuY3Rpb25zCiAgICAgICAgcnBjLiQuZWFjaChycGNfbmFtZXMsIGZ1bmN0aW9uKGlkeCxuYW1lKXsKICAgICAgICAgICAgcnBjW25hbWVdID0gX3dyYXBfdW5hcnJheSggX3JwY1tuYW1lXSApOyAgICAgIAogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIHJldHVybiBycGM7CiAgICB9OwogICAgCiAgICAKICAgIC8qKgogICAgICogQHJldHVybiBhIHN1YnNldCBvZiBrYW5zbydzIGRiIG1vZHVsZSwgc2FtZSBBUEkKICAgICAqIEFueSA0MDMgRm9yYmlkZGVuIGVycm9ycyB3aWxsIHRyaWdnZXIgYSBjdXN0b20gZXZlbnQsICducmFtYV80MDMnCiAgICAgKi8KICAgIGV4cG9ydHMuX21ha2VfZGIgPSBmdW5jdGlvbihycGMsICQpIHsKICAgICAgICB2YXIgZGIgPSB7fTsKICAgICAgICBkYi4kID0gJDsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiB3ZSB3YW50IHRvIGNhcHR1cmUgNDAzIChmb3JiaWRkZW4pIGVycm9ycyBzbyB0aGF0IHRoZSB1c2VyIGNhbiBsb2dpbgogICAgICAgICAqIGNhdXRpb24gOiBhc3N1bWVzIGxhc3QgYXJndW1lbnQgaXMgdGhlIHVuaXF1ZSBjYWxsYmFjayAoYXMgbm9kZSBqcykKICAgICAgICAgKi8KICAgICAgICB2YXIgX3dyYXBfNDAzX2NhbGxiYWNrID0gZnVuY3Rpb24oIGNhbGxiYWNrICkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXJyb3IsIGRhdGEpIHsKICAgICAgICAgICAgICAgIGlmKCBlcnJvciAmJiAoIGVycm9yLnN0YXR1cyA9PT0gNDAzIHx8IGVycm9yLmVycm9yID09PSAnZm9yYmlkZGVuJyApICkgewogICAgICAgICAgICAgICAgICAgIHZhciB1c2VyX2lkID0gJyc7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZCA9IGVycm9yLm1lc3NhZ2Uuc2xpY2UoZXJyb3IubWVzc2FnZS5pbmRleE9mKCd1c2VyX2lkOicpKzgpOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICAgICAgICAgICAgICBkYi4kKGRvY3VtZW50KS50cmlnZ2VyKCducmFtYV80MDMnLCB1c2VyX2lkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBkYXRhKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdmFyIF93cmFwXzQwMyA9IGZ1bmN0aW9uKCBmbiApIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgYXJnc1thcmdzLmxlbmd0aC0xXSA9IF93cmFwXzQwM19jYWxsYmFjayggYXJnc1thcmdzLmxlbmd0aC0xXSApOwogICAgICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGRiLnNhdmVEb2MgPSBfd3JhcF80MDMoIHJwYy5kYl9zYXZlRG9jICk7CiAgICAgICAgZGIucmVtb3ZlRG9jID0gX3dyYXBfNDAzKCBycGMuZGJfcmVtb3ZlRG9jICk7CiAgICAgICAgZGIuZ2V0VmlldyA9IF93cmFwXzQwMyggcnBjLmRiX2dldFZpZXcgKTsKICAgICAgICBkYi5kb1VwZGF0ZSA9IF93cmFwXzQwMyggcnBjLmRiX2RvVXBkYXRlICkKICAgICAgICAKICAgICAgICByZXR1cm4gZGI7CiAgICB9OwoKICAgIC8qKgogICAgICogQHJldHVybiBhIHN1YnNldCBvZiBrYW5zbydzIHNlc3Npb24gbW9kdWxlLCBzYW1lIEFQSQogICAgICovCiAgICBleHBvcnRzLl9tYWtlX3Nlc3Npb24gPSBmdW5jdGlvbihycGMpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsb2dpbiA6IHJwYy5zZXNzaW9uX2xvZ2luLAogICAgICAgICAgICBsb2dvdXQgOiBycGMuc2Vzc2lvbl9sb2dvdXQsCiAgICAgICAgICAgIGluZm8gOiBycGMuc2Vzc2lvbl9pbmZvIAogICAgICAgIH07CiAgICB9OwoKCiAgICAvKioKICAgICAqIEBwYXJhbSBkYntPYmplY3R9IGltcGxlbWVudHMgKGEgc3Vic2V0IG9mKSBrYW5zbydzIGRiIG1vZHVsZQogICAgICogQHBhcmFtIHNlc3Npb257T2JqZWN0fSBpbXBsZW1lbnRzIChhIHN1YnNldCBvZikga2Fuc28ncyBzZXNzaW9uIG1vZHVsZQogICAgICogQHBhcmFtIHV1aWR7ZnVuY3Rpb259IHJldHVybnMgYSB1dWlkIHN5bmNocm9uaW91c2x5CiAgICAgKi8KICAgIGV4cG9ydHMuX21ha2VfcGVyc2lzdCA9IGZ1bmN0aW9uKGRiLCBzZXNzaW9uLCB1dWlkLCBfZGVidWcpIHsKICAgICAgICBwZXJzaXN0ID0ge307CiAgICAgICAgcGVyc2lzdC4kID0galF1ZXJ5OwoKICAgICAgICAvL2xvZyBlcnJvcnMgKHVzZWQgdG8gd3JhcCBjYWxsYmFja3MgZnJvbSBkYiAmIHNlc3Npb24pCiAgICAgICAgdmFyIF9kZWJ1Z193cmFwID0gZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCBlcnJvciApIHsKICAgICAgICAgICAgICAgICAgICBfZGVidWcoe21zZzonbnJhbWFfJytuYW1lKyc6IGVycm9yJyxlcnJvcjplcnJvcn0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIGRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIAogICAgICAgIC8qKgogICAgICAgICAqIHNhdmUgYSBub3RlIG9yIGEgcXVvdGUgKG9yIHRoYXQgSlNPTi5zdHJpbmdpZnkgd2lsbCB3b3JrIG9uLCByZWFsbHkpLgogICAgICAgICAqIE5COiBJZiBzdWNjZXNzZnVsLCB3aWxsIHVwZGF0ZSBhIF9yZXYgcHJvcGVydHkgb24gdGhpbmcgYW5kIGluc2VydCBfaWQKICAgICAgICAgKiBOQjogaWYgb3B0aW9ucy5jbG9uZV9vbl9jb25mbGljdCwgQHBhcmFtIHRoaW5nIHdpbGwgaGF2ZSBpdHMgcHJvcGVydGllcyB1cGRhdGVkICBpbmNsLiBuZXcgX2lkCiAgICAgICAgICovCiAgICAgICAgcGVyc2lzdC5zYXZlID0gZnVuY3Rpb24odGhpbmcsIG9wdGlvbnMvKm9wdGlvbmFsKi8sIGNhbGxiYWNrLypyZXF1aXJlZCovICkgewogICAgICAgICAgICBpZiggIWNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zOwogICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0gewogICAgICAgICAgICAgICAgY2xvbmVfb25fY29uZmxpY3QgOiBmYWxzZSAgIC8vZS5nLiBzZXQgdG8gdHJ1ZSB1c2VkIHdoZW4gc2F2aW5nIG5vdGVzCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IHBlcnNpc3QuJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBvcHRpb25zKTsKCiAgICAgICAgICAgIGRiLnNhdmVEb2ModGhpbmcsIGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCBlcnJvciApIHsKICAgICAgICAgICAgICAgICAgICBpZiggc2V0dGluZ3MuY2xvbmVfb25fY29uZmxpY3QgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBlcnJvci5zdGF0dXMgPT0gNDA5IHx8IGVycm9yLmVycm9yID09ICJjb25mbGljdCIpICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0LiQubG9nKCducmFtYV9wZXJzaXN0LnNhdmU6IGNvbmZsaWN0IG9uIHNhdmUgZm9yICcrKHRoaW5nLnR5cGUgfHwgJycpKycgJyt0aGluZy5faWQrJyAtLS0gc3RhcnRlZCBjbG9uaW5nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0LmNsb25lKHRoaW5nLCBjYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX2RlYnVnKHttc2c6J25yYW1hX3BlcnNpc3Quc2F2ZTogZXJyb3InLGVycm9yOmVycm9yfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaW5nLl9yZXYgPSBkYXRhLnJldjsKICAgICAgICAgICAgICAgICAgICB0aGluZy5faWQgPSBkYXRhLmlkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIGRhdGEpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBjcmVhdGUgYW5kIHBlcnNpc3QgYSBjbG9uZSBvZiBhIG5vdGUgb3IgcXVvdGUsIHVwZGF0aW5nIHRoZQogICAgICAgICAqIHBhc3NlZCB0aGluZyBpbiBwbGFjZS4KICAgICAgICAgKi8KICAgICAgICBwZXJzaXN0LmNsb25lID0gZnVuY3Rpb24odGhpbmcsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBuZXdfaWQgPSB1dWlkKCk7CiAgICAgICAgICAgIHZhciB1cGRhdGVzID0gewogICAgICAgICAgICAgICAgX2lkIDogbmV3X2lkLAogICAgICAgICAgICAgICAgcmVwbGFjZXNfaWQgOiB0aGluZy5faWQgfTsKICAgICAgICAgICAgdmFyIGNsb25lZF90aGluZyA9IHBlcnNpc3QuJC5leHRlbmQodHJ1ZSwge30sIHRoaW5nLCB1cGRhdGVzKTsgCiAgICAgICAgICAgIGRlbGV0ZSBjbG9uZWRfdGhpbmcuX3JldjsgIC8vcmV2aXNpb24gaXMgbm8gbG9uZ2VyIHZhbGlkCiAgICAgICAgICAgIHBlcnNpc3Quc2F2ZShjbG9uZWRfdGhpbmcsIGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCAhZXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpbmcgPSBjbG9uZWRfdGhpbmc7ICAgLy9tZXNzeQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsZGF0YSk7ICAgCiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIC8qKgogICAgICAgICAqIGFzc3VtZXMgdGhhdCB0aGluZy50eXBlIChlLmcuICdzb3VyY2UnKSBpcyB0aGUgbmFtZSBvZiB0aGUgY291Y2hkYiB1cGRhdGUgZnVuY3Rpb24KICAgICAgICAgKiB0aGluZyBtdXN0IGhhdmUgLnR5cGUgYW5kIC5faWQgYXR0cmlidXRlcwogICAgICAgICAqLwogICAgICAgIHBlcnNpc3QudXBkYXRlID0gZnVuY3Rpb24odGhpbmcsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGRiLmRvVXBkYXRlKCB0aGluZywgZW5jb2RlVVJJQ29tcG9uZW50KCB0aGluZy50eXBlICksIF9kZWJ1Z193cmFwKCdwZXJzaXN0LnVwZGF0ZScsIGNhbGxiYWNrKSApOwogICAgICAgIH07CgogICAgICAgIC8qKgogICAgICAgICAqIGRlbGV0ZXMgYSBxdW90ZSBvciBub3RlIGZyb20gdGhlIHNlcnZlciBwcm92aWRpbmcgaXQgaGFzIGEgJ19yZXYnIHByb3BlcnR5LgogICAgICAgICAqIGlmIG5vIF9yZXYgcHJvcGVydHksIG5vdGhpbmcgaGFwcGVucyBidXQgdGhpcyBpcyBjYWxsYmFjaydlZCBhcyBzdWNjZXNzLgogICAgICAgICAqICAod2UgZXhwbG9pdCB0aGlzIC0tIGFic2VuY2Ugb2YgX3JldiBtZWFucyBpdCdzIG5vdCBiZWVuIHBlcnNpc3RlZCkKICAgICAgICAgKi8KICAgICAgICBwZXJzaXN0LnJtID0gZnVuY3Rpb24odGhpbmcsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGlmKCAhdGhpbmcuX3JldiApIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHsgZGVsZXRlZDpmYWxzZSwgbWVzc2FnZTonbnJhbWFfcGVyc2lzdC5ybSBkaWQgbm90IGRlbGV0ZSBiZWNhdXNlICcrKHRoaW5nLnR5cGUgfHwnJykrJyAnKyh0aGluZy5faWQgfHwgJycpKycgaGFzIG5vIF9yZXYnfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGIucmVtb3ZlRG9jKHRoaW5nLCBfZGVidWdfd3JhcCgncGVyc2lzdC5ybScsY2FsbGJhY2spKTsKICAgICAgICB9OwogICAgICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBsb2FkcyBkYXRhIGZvciBhIHBhZ2UgKGUuZy4gYWxsIHF1b3RlcykKICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucy5wYWdlX2lkIGlzIHRoZSBwYWdlIHRvIGxvYWQgc3R1ZmYgZm9yIChyZXF1aXJlZCkKICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucy50eXBle1N0cmluZ30gc3BlY2lmaWVzIHdoaWNoIHR5cGUgb2Ygb2JqZWN0cyB0byBsb2FkIChyZXF1aXJlZCkKICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucy51c2VyX2lke1N0cmluZ30gW29wdGlvbmFsXSBvbWl0IGlmIGxvYWRpbmcgZm9yIGFsbCB1c2VycwogICAgICAgICAqLwogICAgICAgIHBlcnNpc3QubG9hZCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBkZWZhdWx0cyA9IHsKICAgICAgICAgICAgICAgIHBhZ2VfaWQgOiB1bmRlZmluZWQsIHR5cGUgOiBudWxsLCB1c2VyX2lkIDogbnVsbCwKICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBudWxsLCBlcnJvciA6IG51bGwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIGxvYWRfc2V0dGluZ3MgPSBwZXJzaXN0LiQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcXVlcnk7CiAgICAgICAgICAgIGlmKCAhbG9hZF9zZXR0aW5ncy50eXBlICkgewogICAgICAgICAgICAgICAgcXVlcnkgPSB7c3RhcnRrZXk6J1siJytsb2FkX3NldHRpbmdzLnBhZ2VfaWQrJyJdJywgZW5ka2V5OidbIicrbG9hZF9zZXR0aW5ncy5wYWdlX2lkKyciLHt9XSd9OwogICAgICAgICAgICB9IGVsc2UgeyAvL3R5cGUgaXMgc3BlY2lmaWVkCiAgICAgICAgICAgICAgICBpZiggIWxvYWRfc2V0dGluZ3MudXNlcl9pZCApIHsKICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRrZXk6J1siJytsb2FkX3NldHRpbmdzLnBhZ2VfaWQrJyIsIicrbG9hZF9zZXR0aW5ncy50eXBlKyciXScsCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZGtleTonWyInK2xvYWRfc2V0dGluZ3MucGFnZV9pZCsnIiwiJytsb2FkX3NldHRpbmdzLnR5cGUrJyIse31dJwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAvL3R5cGUgYW5kIHVzZXJfaWQgYXJlIHNwZWNpZmllZAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0ge2tleTonWyInK2xvYWRfc2V0dGluZ3MucGFnZV9pZCsnIiwiJytsb2FkX3NldHRpbmdzLnR5cGUrJyIsIicrbG9hZF9zZXR0aW5ncy51c2VyX2lkKyciXScgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBkYi5nZXRWaWV3KCdwYWdlSWRfdHlwZV91c2VySWQnLCBxdWVyeSwgX2RlYnVnX3dyYXAoJ3BlcnNpc3QubG9hZCcsY2FsbGJhY2spKTsKICAgICAgICB9OwogICAgCiAgICAgICAgcmV0dXJuIHBlcnNpc3Q7CiAgICB9OwoKCiAgICAvKioKICAgICAqIFdheXMgb2Ygc2VyaWFsaXppbmcgYW5kIHJlc3RvcmluZyByYW5neSByYW5nZSBvYmplY3RzLgogICAgICogVGhlc2Ugd291bGQgaWRlYWxseSB3b3JrIGFjcm9zcyBicm93c2VyczsgcmFuZ3lfMV8yIGNsYWltcyBub3QgdG8uICAKICAgICAqIChIYXZpbmcgbXVsdGlwbGUgd2F5cyBhbGxvdyB1cyB0byB1cGdyYWRlIHRoZSBtZXRob2Qgb2Ygc2VyaWFsaXphdGlvbgogICAgICogd2hpbGUgc3RpbGwgYmVpbmcgYWJsZSB0byBjb3JyZWN0bHkgZGVzZXJpYWxpemUgcXVvdGVzIGNyZWF0ZWQgd2l0aCBvbGRlcgogICAgICogbWV0aG9kcy4pCiAgICAgKiBAcGFyYW0gbGlie21hcH0gcHJvdmlkZXMgcmFuZ3kKICAgICAqLwogICAgZXhwb3J0cy5fbWFrZV9zZXJpYWxpemVycyA9IGZ1bmN0aW9uKHNldHRpbmdzLCBsaWIpewogICAgICAgIHZhciBzZXJpYWxpemVycyA9IHsKICAgICAgICAgICAgcmFuZ3lfMV8yIDogewogICAgICAgICAgICAgICAgaWQgOiAncmFuZ3lfMV8yJywgICAvLyBpZCBtdXN0IG1hdGNoIHRoZSBuYW1lCiAgICAgICAgICAgICAgICBzZXJpYWxpemUgOiBmdW5jdGlvbihyYW5nZSkgewogICAgICAgICAgICAgICAgICAgIC8vIHNlY29uZCBwYXJhbSBtZWFucyBkbyBub3QgY29tcHV0ZSBjaGVja3N1bSAoYmVjYXVzZSBhZGRpbmcgaGlnaGxpZ2h0cyB0byBwYWdlIHNjcmV3cyBpdCB1cCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGliLnJhbmd5LnNlcmlhbGl6ZVJhbmdlKHJhbmdlLCB0cnVlLCBzZXR0aW5ncy5yb290X25vZGUpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRlc2VyaWFsaXplIDogZnVuY3Rpb24odGV4dCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBsaWIucmFuZ3kuZGVzZXJpYWxpemVSYW5nZSh0ZXh0LCBzZXR0aW5ncy5yb290X25vZGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHNlcmlhbGl6ZXJzLmN1cnJlbnQgPSBzZXJpYWxpemVycy5yYW5neV8xXzI7ICAgLy8gdGhlIHNlcmlhbGl6ZXIgdG8gYmUgdXNlZCBpbiBjcmVhdGluZyBuZXcgcXVvdGVzCiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXJzOwogICAgfTsKCgoKICAgIC8qKgogICAgICogZm9yIGVhY2ggcGFnZV9pZCB3aXRoIG5vdGVzLCBlYWNoIHVzZXIgbXVzdCBjcmVhdGUgYSBzb3VyY2UuICAKICAgICAqICBAcGFyYW0gbGlie21hcH0gcHJvdmlkZXMgZGVwZW5kZW5jaWVzIDogCiAgICAgKiAgICAtIGI2NF9obWFjX21kNSAgICBmcm9tIG1kNS5qcyAKICAgICAqICAgIC0gQmlidGV4UGFyc2VyICAgIGZyb20gYmlidGV4LmpzCiAgICAgKiAgICAtICQgICAgICAgICAgICAgICBmcm9tIGpRdWVyeQogICAgICovCiAgICBleHBvcnRzLl9tYWtlX3NvdXJjZXMgPSBmdW5jdGlvbihzZXR0aW5ncywgcGVyc2lzdCwgX2RlYnVnLCBsaWIvKm9wdGlvbmFsKi8pIHsKICAgICAgICB2YXIgc291cmNlcyA9IHt9OwogICAgICAgIGxpYi4kLmV4dGVuZChzb3VyY2VzLCBsaWIpOyAvL2FkZCBsaWIuYjY0X2htYWNfbWQ1IGV0YyB0byBzb3VyY2VzCiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogQHJldHVybnMgdGhlIGlkIG9mIGEgc291cmNlIHJlY29yZCBmb3IgdGhlIHVzZXIgYW5kIHBhZ2UKICAgICAgICAgKiBAcGFyYW0gb3ttYXB9IHNob3VsZCBjb250YWluIHVzZXJfaWQgYW5kIHBhZ2VfaWQKICAgICAgICAgKi8KICAgICAgICBzb3VyY2VzLmNhbGN1bGF0ZV9pZCA9IGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgcmV0dXJuICdzb3VyY2VfJytzb3VyY2VzLmI2NF9obWFjX21kNShvLnVzZXJfaWQsIG8ucGFnZV9pZCk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBAcGFyYW0gYXR0cnMgbXVzdCBjb250YWluIHBhZ2VfaWQgJiB1c2VyX2lkIDsgY2FuIGJlIG5vdGUgb3IgcXVvdGUKICAgICAgICAgKi8KICAgICAgICBzb3VyY2VzLmNyZWF0ZSA9IGZ1bmN0aW9uKGF0dHJzKSB7CiAgICAgICAgICAgIHZhciBkZWZhdWx0cyA9IHsKICAgICAgICAgICAgICAgIHRhZ3MgOiBbXSAgICAgLy90aGUgcGVyc2lzdC51cGRhdGUgd2lsbCBhcHBlbmQsIG5vdCByZW1vdmUgdGFncwogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiggc2V0dGluZ3MuaXNfZW1iZWRkZWQgKSB7CiAgICAgICAgICAgICAgICBkZWZhdWx0cy5wYWdlX3RpdGxlID0gZG9jdW1lbnQudGl0bGU7CiAgICAgICAgICAgICAgICBkZWZhdWx0cy51cmwgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzLiQuZXh0ZW5kKHRydWUsIGRlZmF1bHRzLCBhdHRycyk7CiAgICAgICAgICAgIHNvdXJjZS5faWQgPSBzb3VyY2VzLmNhbGN1bGF0ZV9pZChzb3VyY2UpOyAgLy9uYiBtdXN0IG92ZXJ3cml0ZSBfaWQgaW4gY2FzZSBjYWxsZWQgd2l0aCBub3RlIG9yIHF1b3RlIG9iamVjdCEKICAgICAgICAgICAgc291cmNlLnR5cGUgPSAnc291cmNlJzsKICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogQ3JlYXRlIG9yIHVwZGF0ZSBhIHNvdXJjZS4KICAgICAgICAgKiBAcGFyYW0gc291cmNlIG11c3QgY29udGFpbiAoVElUTEUgb3IgcGFnZV90aXRsZSksIHVybCwgcGFnZV9pZAogICAgICAgICAqICAgICAgJiB1c2VyX2lkIGlmIHVwZGF0ZSBpcyBiZWluZyBjYWxsZWQgdG8gY3JlYXRlIGEgbmV3IHNvdXJjZQogICAgICAgICAqIENhbiBiZSBjYWxsZWQgd2l0aCBlaXRoZXIgYSBzb3VyY2Ugb3IgYSBub3RlIG9yIGEgcXVvdGUKICAgICAgICAgKiBDYXV0aW9uOiBpZiBjYWxsZWQgd2l0aCBzb3VyY2UsIHNvdXJjZSB3aWxsIGJlIG1vZGlmaWVkIGluIHBsYWNlLgogICAgICAgICAqLwogICAgICAgIHNvdXJjZXMudXBkYXRlID0gZnVuY3Rpb24odGhpbmcsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBzb3VyY2UgPSAoIHRoaW5nLnR5cGUgPT0gJ3NvdXJjZScgPyB0aGluZyA6IHNvdXJjZXMuY3JlYXRlKHRoaW5nKSApOwogICAgICAgICAgICBwZXJzaXN0LnVwZGF0ZShzb3VyY2UsIGNhbGxiYWNrKTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIGNhbGwgdXBkYXRlIG9uY2UgcGVyIHNvdXJjZSBvbmx5IChidXQgaWYgaXQgZmFpbHMsIHdpbGwgcmVwZWF0IG5leHQKICAgICAgICAgKiB0aW1lIGl0IGlzIGNhbGxlZCkKICAgICAgICAgKiBjYW4gYmUgY2FsbGVkIHdpdGggZWl0aGVyIGEgc291cmNlIG9yIGEgbm90ZSBvciBhIHF1b3RlIAogICAgICAgICAqLwogICAgICAgIHZhciBfdXBkYXRlX21lbW8gPSBbXTsKICAgICAgICBzb3VyY2VzLnVwZGF0ZV9vbmNlID0gZnVuY3Rpb24odGhpbmcsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBzb3VyY2VfaWQgPSAoIHRoaW5nLnR5cGUgPT0gJ3NvdXJjZScgPyB0aGluZy5faWQgOiB0aGluZy5zb3VyY2VfaWQgKTsKICAgICAgICAgICAgdmFyIGFscmVhZHlfZG9uZSA9ICggc291cmNlcy5fLmluZGV4T2YoX3VwZGF0ZV9tZW1vLCBzb3VyY2VfaWQpICE9IC0xICk7CiAgICAgICAgICAgIGlmKCBhbHJlYWR5X2RvbmUgICkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ2FscmVhZHkgZG9uZScpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNvdXJjZXMudXBkYXRlKHRoaW5nLCBmdW5jdGlvbihlcnJvciwgZGF0YSl7CiAgICAgICAgICAgICAgICBpZighZXJyb3IpewogICAgICAgICAgICAgICAgICAgIF91cGRhdGVfbWVtby5wdXNoKHNvdXJjZV9pZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgZGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogVGhpcyBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIHN0cmluZ3Mgd2hpY2ggY2Fub25pY2FsbHkgcmVwcmVzZW50IGF1dGhvcnMKICAgICAgICAgKiBAcGFyYW0gYXV0aG9yc3tzdHJpbmd9IGlzIHRoZSBhdXRob3JzLgogICAgICAgICAqIFRPRE86IG1ha2UgdGhpcyB3b3JrIChzZWUganMtYmlidGV4PykKICAgICAgICAgKi8KICAgICAgICB2YXIgX3BhcnNlX2F1dGhvcnMgPSBmdW5jdGlvbiggYXV0aG9ycy8qU3RyaW5nKi8gKSB7CiAgICAgICAgICAgIF9kZWJ1Zyh7YXV0aG9yczphdXRob3JzfSk7CiAgICAgICAgICAgIHJldHVybiBhdXRob3JzLnNwbGl0KCcgYW5kICcpOwogICAgICAgIH07CiAgICAgICAgLyoqCiAgICAgICAgICogcXVpY2tseSBhdHRlbXB0IHRvIGd1ZXNzIHdoZXRoZXIgc29tZXRoaW5nIGlzIGJpYnRleAogICAgICAgICAqLwogICAgICAgIC8vIGxpa2UgdGhpczogQHRleHQgeyA9ICwgfQogICAgICAgIHZhciBfYmliX3JleCA9IC8oXnxbXjAtOUEtWiZcL1w/XSspKEApKFswLTlBLVpfXSpbQS1aX10rW2EtejAtOV9dKikoW1xzXFNdKj97KShbXHNcU10qPz0pKFtcc1xTXSo/LCkoW1xzXFNdKj99KS9naQogICAgICAgIHNvdXJjZXMuZGV0ZWN0X2JpYnRleCA9IGZ1bmN0aW9uKCB0ZXh0ICkgewogICAgICAgICAgICByZXR1cm4gISEoIHRleHQubWF0Y2goX2JpYl9yZXgpICk7CiAgICAgICAgfQogICAgICAgIC8qKgogICAgICAgICAqIGdpdmVuIGEgc3RyaW5nLCBhdHRlbXB0cyB0byBwYXJzZSBpdCBhcyBiaWJ0ZXggYW5kIHVwZGF0ZSB0aGUgc291cmNlCiAgICAgICAgICogd2l0aCB0aGUgcmVzdWx0cy4KICAgICAgICAgKiBAcGFyYW0gdGhpbmcgY2FuIGJlIGEgc291cmNlLCBxdW90ZSBvciBub3RlCiAgICAgICAgICogRS5nLgogICAgICAgICAqICAgYj0nQGluY29sbGVjdGlvbntCYWlsbGFyZ2VvbjoxOTk1bHUsCUFkZHJlc3MgPSB7T3hmb3JkfSwJQXV0aG9yID0ge0JhaWxsYXJnZW9uLCBSZW57XCdlfWUgYW5kIEtvdG92c2t5LCBMYXVyYSBhbmQgTmVlZGhhbSwgQW15fSwJQm9va3RpdGxlID0ge0NhdXNhbCBjb2duaXRpb24uIEEgbXVsdGlkaXNjaXBsaW5hcnkgZGViYXRlfSwJRGF0ZS1BZGRlZCA9IHsyMDEwLTA4LTA0IDE3OjQwOjIxICswMTAwfSwJRGF0ZS1Nb2RpZmllZCA9IHsyMDEwLTA4LTA0IDE3OjQwOjM4ICswMTAwfSwJRWRpdG9yID0ge1NwZXJiZXIsIERhbiBhbmQgUHJlbWFjaywgRGF2aWR9LAlQYWdlcyA9IHs3OS0xMTV9LAlQdWJsaXNoZXIgPSB7Q2xhcmVuZG9ufSwJVGl0bGUgPSB7VGhlIEFjcXVpc2l0aW9uIG9mIFBoeXNpY2FsIEtub3dsZWRnZSBJbiBJbmZhbmN5fSwJWWVhciA9IHsxOTk1fX0nCiAgICAgICAgICovCiAgICAgICAgc291cmNlcy51cGRhdGVfZnJvbV9iaWJ0ZXggPSBmdW5jdGlvbihiaWJfc3RyLCB0aGluZywgY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBzb3VyY2VzLkJpYnRleFBhcnNlcigpOwogICAgICAgICAgICB2YXIgcmVzdWx0czsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHBhcnNlci5zZXRJbnB1dChiaWJfc3RyKTsKICAgICAgICAgICAgICAgIHBhcnNlci5iaWJ0ZXgoKTsKICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBwYXJzZXIuZ2V0RW50cmllcygpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgIF9kZWJ1ZygiY2F1Z2h0IGVycm9yIHBhcnNpbmcgYmlidGV4IixlKQogICAgICAgICAgICAgICAgY2FsbGJhY2soJ2Vycm9yIHBhcnNpbmcgYmlidGV4ICcrZSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoIHNvdXJjZXMuXy5zaXplKHJlc3VsdHMpICE9IDEgKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjaygnbnJhbWFfc291cmNlcy5wYXJzZV9iaWJ0ZXg6IGlucHV0IGNvbnRhaW5lZCAnK3NvdXJjZXMuXy5zaXplKHJlc3VsdHMpKycgZW50cmllcyAoJytiaWJfc3RyKycpJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGVudHJ5ID0gc291cmNlcy5fLnRvQXJyYXkocmVzdWx0cylbMF07CiAgICAgICAgICAgIGlmKCBlbnRyeS5BVVRIT1IgKSB7CiAgICAgICAgICAgICAgICBlbnRyeS5BVVRIT1JfVEVYVCA9IGVudHJ5LkFVVEhPUjsKICAgICAgICAgICAgICAgIGVudHJ5LkFVVEhPUiA9IF9wYXJzZV9hdXRob3JzKGVudHJ5LkFVVEhPUl9URVhUKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbnRyeS5iaWJ0ZXggPSBiaWJfc3RyOwogICAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlcy5jcmVhdGUodGhpbmcpOwogICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzLiQuZXh0ZW5kKHRydWUsIHt9LCBzb3VyY2UsIGVudHJ5KTsKICAgICAgICAgICAgc291cmNlcy51cGRhdGUoc291cmNlLCBjYWxsYmFjayk7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gc291cmNlczsKICAgIH07CiAgICAKICAgIAogICAgLyoqCiAgICAgKiBUaGlzIGlzIG9ubHkgaW50ZW5kZWQgdG8gd29yayBlbWJlZGRlZCBpbiBhIHBhZ2UsIG5vdCBvbiB0aGUgc2VydmVyLgogICAgICogbGliIG11c3QgaW5jbHVkZQogICAgICAgICAgICBiNjRfaG1hY19tZDUgCiAgICAgICAgICAgIHJhbmd5IAogICAgICAgICAgICAkICggalF1ZXJ5ICkKICAgICAgICAgICAgXyA6IHdpbmRvdy5fCiAgICAgKi8KICAgIGV4cG9ydHMuX21ha2VfcXVvdGVzID0gZnVuY3Rpb24oc2V0dGluZ3MsIHV1aWQsIHBlcnNpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXMsIHNlcmlhbGl6ZXJzLCBfZGVidWcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpYikgewogICAgICAgIHZhciBxdW90ZXMgPSB7fTsKICAgICAgICBsaWIuJC5leHRlbmQocXVvdGVzLCBsaWIpOyAgLy9hZGQgaXRlbXMgaW4gbGliIHRvIHF1b3RlcwoKICAgICAgICAvKioKICAgICAgICAgKiBAcmV0dXJucyBhIGhhc2ggZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdHdvIHF1b3RlcyBhcmUgdGhlIHNhbWUKICAgICAgICAgKiAgICAgYWNyb3NzIGRpZmZlcmVudCB1c2Vycy4KICAgICAgICAgKi8KICAgICAgICBxdW90ZXMuY2FsY3VsYXRlX2hhc2ggPSBmdW5jdGlvbihxdW90ZSkgewogICAgICAgICAgICB2YXIgaGFzaCA9IHF1b3Rlcy5iNjRfaG1hY19tZDUocXVvdGUucGFnZV9pZCwgcXVvdGUuY29udGVudCk7CiAgICAgICAgICAgIHJldHVybiBoYXNoOwogICAgICAgIH07CiAgICAgICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIEBwYXJhbSByYW5nZSBpcyBhIFJhbmd5IHJhbmdlIG9iamVjdAogICAgICAgICAqLwogICAgICAgIHF1b3Rlcy5jcmVhdGUgPSBmdW5jdGlvbihyYW5nZSkgewogICAgICAgICAgICB2YXIgbmV3X3F1b3RlID0gewogICAgICAgICAgICAgICAgX2lkIDogJ3FfJyt1dWlkKCksICAKICAgICAgICAgICAgICAgIHR5cGUgOiAncXVvdGUnLAogICAgICAgICAgICAgICAgY29udGVudCA6IHF1b3Rlcy4kLnRyaW0oIHJhbmdlLnRvU3RyaW5nKCkgKSwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRfY29sb3IgOiBzZXR0aW5ncy5iYWNrZ3JvdW5kX2NvbG9yLAogICAgICAgICAgICAgICAgdXJsIDogZG9jdW1lbnQubG9jYXRpb24uaHJlZiwKICAgICAgICAgICAgICAgIHBhZ2VfaWQgOiBzZXR0aW5ncy5wYWdlX2lkLCAgCiAgICAgICAgICAgICAgICBwYWdlX3RpdGxlIDogZG9jdW1lbnQudGl0bGUsCiAgICAgICAgICAgICAgICAvL3RoZSB4cG9pbnRlciB0byB0aGUgcXVvdGUgKHdlbGwsIGl0IGlzbid0IGFjdHVhbGx5IGFuIHhwb2ludGVyIGJ1dCAgYW55IHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJhbmVnKQogICAgICAgICAgICAgICAgeHB0ciA6IHNlcmlhbGl6ZXJzLmN1cnJlbnQuc2VyaWFsaXplKHJhbmdlKSwKICAgICAgICAgICAgICAgIC8vdGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB1c2VkIHRvIHNlcmFsaXNlCiAgICAgICAgICAgICAgICB4cHRyX21ldGhvZCA6IHNlcmlhbGl6ZXJzLmN1cnJlbnQuaWQsCiAgICAgICAgICAgICAgICBwYWdlX29yZGVyIDogcXVvdGVzLmNhbGN1bGF0ZV9wYWdlX29yZGVyKHJhbmdlKSwKICAgICAgICAgICAgICAgIGNyZWF0ZWQgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwKICAgICAgICAgICAgICAgIHVwZGF0ZWQgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwKICAgICAgICAgICAgICAgIHVzZXJfaWQgOiBzZXR0aW5ncy51c2VyX2lkCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIG5ld19xdW90ZS5oYXNoID0gcXVvdGVzLmNhbGN1bGF0ZV9oYXNoKG5ld19xdW90ZSk7CiAgICAgICAgICAgIG5ld19xdW90ZS5zb3VyY2VfaWQgPSBzb3VyY2VzLmNhbGN1bGF0ZV9pZCh7CiAgICAgICAgICAgICAgICB1c2VyX2lkIDogbmV3X3F1b3RlLnVzZXJfaWQsCiAgICAgICAgICAgICAgICBwYWdlX2lkIDogbmV3X3F1b3RlLnBhZ2VfaWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBuZXdfcXVvdGU7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICBxdW90ZXMuc2F2ZSA9IGZ1bmN0aW9uKHF1b3RlLCBvcHRpb25zLypvcHRpb25hbCovLCBjYWxsYmFjaykgewogICAgICAgICAgICBpZiggIWNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zOwogICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBzb3VyY2UgYmVmb3JlIHNhdmluZyBhbnkgcXVvdGVzCiAgICAgICAgICAgIHNvdXJjZXMudXBkYXRlX29uY2UocXVvdGUsIGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7CiAgICAgICAgICAgICAgICBpZiggZXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgcXVvdGVzLiQubG9nKCdlcnJvciBpbiBucmFtYV9xdW90ZXMuc2F2ZSBpcyBkdWUgdG8gY2FsbCB0byBzb3VyY2VzLnVwZGF0ZV9vbmNlLicpCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBlcnNpc3Quc2F2ZShxdW90ZSwgb3B0aW9ucywgY2FsbGJhY2spOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIGF0dGVtcHQgdG8gaGlnaGxpZ2h0IHF1b3RlIGludG8gdGhlIEhUTUwgZG9jdW1lbnQuICBNYXkgZmFpbCBpZiByYW5nZQogICAgICAgICAqIGNhbm5vdCBiZSBkZWNvZGVkOyBmYWlscyBzaWxlbnRseS4gIE5vZGVzIGFkZGVkIHRvIHRoZSBET00gd2lsbCBoYXZlIHRoZQogICAgICAgICAqIHF1b3RlIG9iamVjdCBzdG9yZWQgd2l0aCBqUXVlcnkuZGF0YSAoa2V5OiducmFtYV9xdW90ZScpCiAgICAgICAgICoKICAgICAgICAgKiBDaGVja3MgdGhhdCBxdW90ZSBub3QgYWxyZWFkeSBvbiBwYWdlOyB3aWxsIG5vdCByZS1kaXNwbGF5IGlmIGl0IGlzLgogICAgICAgICAqCiAgICAgICAgICogZGVwZW5kcyBSYW5neSArIGl0cyBoaWdobGlnaHQgbW9kdWxlCiAgICAgICAgICoKICAgICAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHN1Y2Nlc3NmdWwgKG9yIHF1b3RlIGFscmVhZHkgZGlzcGxheWVkKSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgICAgICovCiAgICAgICAgcXVvdGVzLmRpc3BsYXkgPSBmdW5jdGlvbihxdW90ZSkgewogICAgICAgICAgICBpZiggcXVvdGVzLiQoJy4nK3F1b3RlLl9pZCkubGVuZ3RoICE9IDAgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgIC8vcXVvdGUgYWxyZWFkeSBkaXNwbGF5ZWQKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmFuZ2UgPSBxdW90ZXMuZ2V0X3JhbmdlKHF1b3RlKTsKICAgICAgICAgICAgaWYoIHJhbmdlID09IG51bGwgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIF9yYW5neV9oaWdobGlnaHRlciA9IHF1b3Rlcy5yYW5neS5jcmVhdGVDc3NDbGFzc0FwcGxpZXIoIl9ucmFtYS1xdW90ZSAiK3F1b3RlLl9pZCxmYWxzZSk7CiAgICAgICAgICAgIHRyeXsKICAgICAgICAgICAgICAgIF9yYW5neV9oaWdobGlnaHRlci5hcHBseVRvUmFuZ2UocmFuZ2UpOwogICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7IC8vc2VlbXMgdG8gYmUgcmFyZQogICAgICAgICAgICAgICAgaWYoIHNldHRpbmdzLmRlYnVnICkgewogICAgICAgICAgICAgICAgICAgIHF1b3Rlcy4kLmxvZygibnJhbWE6IGVycm9yIHVzaW5nIFJhbmR5J3MgY3JlYXRlQ3NzQ2xhc3NBcHBsaWVyLmFwcGx5VG9SYW5nZSwgcmUtdGhyb3dpbmciKTsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAgIC8vc2lsZW50bHkgZmFpbCBpZiBub3QgaW4gZGVidWcgbW9kZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHF1b3Rlcy4kKCcuJytxdW90ZS5faWQpLmNzcygnYmFja2dyb3VuZC1jb2xvcicscXVvdGUuYmFja2dyb3VuZF9jb2xvcikuZGF0YSgnbnJhbWFfcXVvdGUnLHF1b3RlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiByZW1vdmUgYSBxdW90ZSdzIGhpZ2hsaWdodHMgZnJvbSB0aGUgSFRNTCBkb2N1bWVudC4KICAgICAgICAgKiBsZWF2ZXMgalF1ZXJ5LmRhdGEoJ25yYW1hX3F1b3RlJykgYW5kIF9pZCBhcyBjbGFzcyBpbnRhY3QsIHNvIHF1b3RlIGNhbgogICAgICAgICAqICAgc3RpbGwgYmUgZm91bmQgKHRvZG86IG5vdCBzdXJlIHRoaXMgaXMgYSBnb29kIGlkZWEhKS4KICAgICAgICAgKiB0b2RvIC0tIHRoaXMgd291bGQgaWRlYWxseSByZW1vdmUgdGhlIGVsZW1lbnRzIHNvIHRoYXQgc3Vic2VxdWVudCBxdW90ZXMKICAgICAgICAgKiAgaGFkIG1vcmUgcmVsaWFibGUgeHBvaW50ZXJzIChhcyBsb25nIGFzIHdlIGRvbid0IGhhdmUgYSB3YXkgb2YgZ2V0dGluZwogICAgICAgICAqICBnb29kIHhwb2ludGVycykuCiAgICAgICAgICovCiAgICAgICAgcXVvdGVzLnVuZGlzcGxheSA9IGZ1bmN0aW9uKHF1b3RlKSB7CiAgICAgICAgICAgIHF1b3Rlcy4kKCcuJytxdW90ZS5faWQpLgogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoJ19ucmFtYS1xdW90ZScpLgogICAgICAgICAgICAgICAgY3NzKHsnYm9yZGVyLXRvcCc6J25vbmUnLCAnYm9yZGVyLWJvdHRvbSc6J25vbmUnLCAnYm94LXNoYWRvdyc6J25vbmUnfSkuCiAgICAgICAgICAgICAgICAvL3JlbW92ZUNsYXNzKHF1b3RlLl9pZCkuIC8vbm90IHN1cmUgd2hldGhlciBJIHdhbnQgdG8gZG8gdGhpcyB5ZXQKICAgICAgICAgICAgICAgIGNzcygnYmFja2dyb3VuZC1jb2xvcicsJ3JlZCcpLgogICAgICAgICAgICAgICAgYW5pbWF0ZSh7J2JhY2tncm91bmQtY29sb3InOidibGFjayd9LCBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHF1b3Rlcy4kKHRoaXMpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsJ2luaGVyaXQnKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgcXVvdGVzLmZsYXNoID0gZnVuY3Rpb24ocXVvdGVfaWQpIHsKICAgICAgICAgICAgdmFyICRxdW90ZV9ub2RlcyA9IHF1b3Rlcy4kKCcuJytxdW90ZV9pZCk7CiAgICAgICAgICAgICRxdW90ZV9ub2Rlcy5jc3Moeydib3JkZXItdG9wJzonMXB4IGRhc2hlZCBibGFjaycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlci1ib3R0b20nOicxcHggZGFzaGVkIGJsYWNrJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm94LXNoYWRvdyc6JzAgMCAyMHB4JyArIHNldHRpbmdzLmJhY2tncm91bmRfY29sb3IgfSk7CiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkcXVvdGVfbm9kZXMuY3NzKHsnYm9yZGVyLXRvcCc6J25vbmUnLCAnYm9yZGVyLWJvdHRvbSc6J25vbmUnLCAnYm94LXNoYWRvdyc6J25vbmUnfSk7ICAgICAgICAgICAgCiAgICAgICAgICAgIH0sNjAwKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIHJlcXVlc3QgcXVvdGUgZGVsZXRlIGZyb20gc2VydmVyIGFuZCByZW1vdmUgZnJvbSBwYWdlIGlmIHN1Y2Nlc3NmdWwKICAgICAgICAgKi8KICAgICAgICBxdW90ZXMucmVtb3ZlID0gZnVuY3Rpb24ocXVvdGUpIHsKICAgICAgICAgICAgcXVvdGVzLiQoJy4nK3F1b3RlLl9pZCkuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywnb3JhbmdlJyk7CiAgICAgICAgICAgIHBlcnNpc3Qucm0ocXVvdGUsIGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCAhZXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgcXVvdGVzLnVuZGlzcGxheShxdW90ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogbG9hZCBxdW90ZXMgZnJvbSBzZXJ2ZXIgYW5kIGRpc3BsYXkgb24gdGhpcyBwYWdlCiAgICAgICAgICovCiAgICAgICAgcXVvdGVzLmxvYWQgPSBmdW5jdGlvbihwYWdlX2lkLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgdXNlcl9pZCA9IHNldHRpbmdzLm1lX29ubHkgPyBzZXR0aW5ncy51c2VyX2lkIDogdW5kZWZpbmVkOwogICAgICAgICAgICBwZXJzaXN0LmxvYWQoewogICAgICAgICAgICAgICAgcGFnZV9pZCA6IHBhZ2VfaWQsCiAgICAgICAgICAgICAgICB0eXBlIDogJ3F1b3RlJywKICAgICAgICAgICAgICAgIHVzZXJfaWQgOiB1c2VyX2lkCiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCAhZXJyb3IgJiYgZGF0YSApIHsKICAgICAgICAgICAgICAgICAgICBxdW90ZXMuJC5sb2coJ25yYW1hX3F1b3Rlcy5sb2FkIGdvdCAnICsgKCBkYXRhLnJvd3MgPyBkYXRhLnJvd3MubGVuZ3RoIDogMCApICsgJyBxdW90ZXMgZnJvbSBzZXJ2ZXIgZm9yIHVzZXIgJyt1c2VyX2lkKTsKICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gc29ydCBxdW90ZXMgYnkgdGhlIHRpbWUgdGhleSB3ZXJlIGFkZGVkIHRvIHBhZ2UgZm9yIGJlc3QgY2hhbmNlIG9mIGRpc3BsYXlpbmcgdGhlbQogICAgICAgICAgICAgICAgICAgIHZhciBfc29ydGVyID0gZnVuY3Rpb24oYSxiKXsgcmV0dXJuIGEudmFsdWUuY3JlYXRlZCAtIGIudmFsdWUuY3JlYXRlZCB9OwogICAgICAgICAgICAgICAgICAgIGRhdGEucm93cy5zb3J0KF9zb3J0ZXIpOwogICAgICAgICAgICAgICAgICAgIHZhciBfZmFpbGluZ19xdW90ZXMgPSBbXQogICAgICAgICAgICAgICAgICAgIHF1b3Rlcy4kLmVhY2goZGF0YS5yb3dzLCBmdW5jdGlvbihpbmRleCwgcm93KXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1b3RlID0gcm93LnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHF1b3Rlcy5kaXNwbGF5KHF1b3RlKTsgIC8vdGhpcyB3b24ndCByZS1kaXNwbGF5IHF1b3RlcyBhbHJlYWR5IHByZXNlbnQKICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFzdWNjZXNzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZhaWxpbmdfcXVvdGVzLnB1c2gocXVvdGUuX2lkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmKCBfZmFpbGluZ19xdW90ZXMubGVuZ3RoID4gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGVzLiQubG9nKCdmYWlsZWQgdG8gZGlzcGxheSAnK19mYWlsaW5nX3F1b3Rlcy5sZW5ndGgrJyBxdW90ZXMsIF9pZHM6ICcrX2ZhaWxpbmdfcXVvdGVzLmpvaW4oJ1xuXHQnKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIGRhdGEpOwogICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogQHJldHVybnMgdGhlIHJhbmdlIGZvciB0aGUgc3BlY2lmaWVkIHF1b3RlIG9yIG51bGwgaWYgbm90IHBvc3NpYmxlLgogICAgICAgICAqIGNhdXRpb246IHRoaXMgbWF5IGZhaWwgb25jZSB0aGUgcXVvdGUgaGFzIGJlZW4gaGlnaGxpZ2h0ZWQhCiAgICAgICAgICovCiAgICAgICAgcXVvdGVzLmdldF9yYW5nZSA9IGZ1bmN0aW9uKHF1b3RlKSB7CiAgICAgICAgICAgIHZhciBtZXRob2QgPSBxdW90ZS54cHRyX21ldGhvZCB8fCAnX21ldGhvZF91bnNwZWNpZmllZCc7IC8vbWV0aG9kIGZvciByZWNvdmVyaW5nIHRoZSByYW5nZSBmcm9tIHRoZSBxdW90ZQogICAgICAgICAgICBpZiggISAobWV0aG9kIGluIHNlcmlhbGl6ZXJzKSApIHsKICAgICAgICAgICAgICAgIHF1b3Rlcy4kLmxvZygndW5rbm93biB4cHRyX21ldGhvZCAoJyttZXRob2QrJykgZm9yIHF1b3RlICcrcXVvdGUuX2lkKTsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IHNlcmlhbGl6ZXJzW21ldGhvZF07CiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShxdW90ZS54cHRyKTsKICAgICAgICAgICAgfSBjYXRjaChlcnJvcikgewogICAgICAgICAgICAgICAgLy9xdW90ZXMuJC5sb2coJ25yYW1hX3F1b3Rlcy5kaXNwbGF5IEZBSUwgd2l0aCByYW5nZSA9ICcrcXVvdGUueHB0cisnXG5cdCBmb3IgcXVvdGUgJytxdW90ZS5faWQpOwogICAgICAgICAgICAgICAgLy9fZGVidWcoe2NhdGNoX2Vycm9yOmVycm9yfSk7ICAvL25vdCB1c3VhbGx5IGluZm9ybWF0aXZlCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogQHJldHVybnMgYSBxdW90ZSBvYmplY3QgKG9yIG51bGwgaWYgbm90IGZvdW5kKQogICAgICAgICAqLwogICAgICAgIHF1b3Rlcy5nZXRfZnJvbV9wYWdlID0gZnVuY3Rpb24ocXVvdGVfaWQpIHsKICAgICAgICAgICAgcmV0dXJuIHF1b3Rlcy4kKCcuJytxdW90ZV9pZCkuZmlyc3QoKS5kYXRhKCducmFtYV9xdW90ZScpIHx8IG51bGw7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBAcGFyYW0gcmFuZ2V7UmFuZ3l9CiAgICAgICAgICogQHJldHVybnMgYW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSBvcmRlciB0aGlzIHF1b3RlIHByb2JhYmx5IGFwcGVhcnMKICAgICAgICAgKiBvbiB0aGUgcGFnZS4gIEFzc3VtZXMgdGhhdCBlYXJsaWVyIGluIERPTSBtZWFucyBlYXJsaWVyIG9uIHNjcmVlbi4KICAgICAgICAgKiAodGhlIGFsdGVybmF0aXZlIHdvdWxkIGJlIHRvIHVzZSBoZWlnaHQsIGJ1dCB0aGF0IGZhaWxzIGZvciBjb2x1bW5zCiAgICAgICAgICogJiB2YXJ5aW5nIGhlaWdodCkKICAgICAgICAgKi8KICAgICAgICBxdW90ZXMuY2FsY3VsYXRlX3BhZ2Vfb3JkZXIgPSBmdW5jdGlvbiBjYWxjdWxhdGVfcGFnZV9vcmRlcihyYW5nZSkgewogICAgICAgICAgICB2YXIgZG9jX2hlaWdodCA9IHF1b3Rlcy4kKHNldHRpbmdzLnJvb3Rfbm9kZSkuaGVpZ2h0KCk7CiAgICAgICAgICAgIHZhciBkb2Nfd2lkdGggPSBxdW90ZXMuJChzZXR0aW5ncy5yb290X25vZGUpLndpZHRoKCk7CiAgICAgICAgICAgIC8vdG9kbwogICAgICAgICAgICB2YXIgbm9kZSA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyOwogICAgICAgICAgICB2YXIgcGFnZV9vcmRlciA9IFtyYW5nZS5zdGFydE9mZnNldF07ICAgLy9jcmVhdGUgaW4gcmV2ZXJzZSBvcmRlciwgd2lsbCByZXZlcnNlIGl0CiAgICAgICAgICAgIHdoaWxlICggbm9kZSAmJiBub2RlICE9IGRvY3VtZW50LmJvZHkgKSB7CiAgICAgICAgICAgICAgICBwYWdlX29yZGVyLnB1c2gocXVvdGVzLnJhbmd5LmRvbS5nZXROb2RlSW5kZXgobm9kZSwgdHJ1ZSkpOwogICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwYWdlX29yZGVyLnJldmVyc2UoKTsKICAgICAgICAgICAgcmV0dXJuIHBhZ2Vfb3JkZXI7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBjYWxjdWxhdGUgdGhlIG9mZnNldCAoLnRvcCwgLmxlZnQpIG9mIGEgcXVvdGUKICAgICAgICAgKi8KICAgICAgICBxdW90ZXMub2Zmc2V0ID0gZnVuY3Rpb24ocXVvdGVfaWQpIHsKICAgICAgICAgICAgcmV0dXJuIHF1b3Rlcy4kKCcuJytxdW90ZV9pZCkuZmlyc3QoKS5vZmZzZXQoKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHJldHVybiBxdW90ZXM7CiAgICB9OwogICAgCiAgICAKICAgIC8qKgogICAgICogIEBwYXJhbSBxdW90ZXMgY2FuIGJlIHNldCB0byBudWxsOyBpZiBwcm92aWRlZCBpdCBpcyB1c2VkIHRvIHBvc2l0aW9uIG5vZXMKICAgICAqLwogICAgZXhwb3J0cy5fbWFrZV9ub3RlcyA9IGZ1bmN0aW9uKHNldHRpbmdzLCB1dWlkLCBwZXJzaXN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlcywgcXVvdGVzLCBfZGVidWcpIHsKICAgICAgICB2YXIgbm90ZXMgPSB7fTsKICAgICAgICB2YXIgJCA9IGpRdWVyeTsKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGUgYSBuZXcgbm90ZSBmb3IgYSBzcGVjaWZpZWQgcXVvdGUuCiAgICAgICAgICovCiAgICAgICAgbm90ZXMuY3JlYXRlID0gZnVuY3Rpb24ocXVvdGUpewogICAgICAgICAgICB2YXIgbmV3X25vdGUgPSB7CiAgICAgICAgICAgICAgICBfaWQgOiAnbl8nK3V1aWQoKSwgIAogICAgICAgICAgICAgICAgdHlwZSA6ICdub3RlJywKICAgICAgICAgICAgICAgIGNvbnRlbnQgOiBzZXR0aW5ncy5ub3RlX2RlZmF1bHRfdGV4dCwKICAgICAgICAgICAgICAgIHF1b3RlX2lkIDogcXVvdGUuX2lkLAogICAgICAgICAgICAgICAgcXVvdGVfaGFzaCA6IHF1b3RlLmhhc2gsICAgIC8vY2FuIGF0dGFjaCB0byB0aGUgc2FtZSBxdW90ZSBmcm9tIG90aGVyIHVzZXJzCiAgICAgICAgICAgICAgICB0YWdzIDogW10sICAgICAgICAgICAgICAgICAgLy93aWxsIGNhY2hlIHRoZSAjcyB0byBzYXZlIHVzIHBhcnNpbmcgdGV4dCBpbiBjcmVhdGluZyBhIHZpZXcKICAgICAgICAgICAgICAgIGJhY2tncm91bmRfY29sb3IgOiBzZXR0aW5ncy5ub3RlX2JhY2tncm91bmRfY29sb3IsCiAgICAgICAgICAgICAgICB3aWR0aCA6IHNldHRpbmdzLm5vdGVfd2lkdGgsCiAgICAgICAgICAgICAgICBwYWdlX2lkIDogcXVvdGUucGFnZV9pZCwgIAogICAgICAgICAgICAgICAgY3JlYXRlZCA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLAogICAgICAgICAgICAgICAgdXBkYXRlZCA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLAogICAgICAgICAgICAgICAgdXNlcl9pZCA6IHF1b3RlLnVzZXJfaWQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbmV3X25vdGUuc291cmNlX2lkID0gc291cmNlcy5jYWxjdWxhdGVfaWQoewogICAgICAgICAgICAgICAgdXNlcl9pZCA6IG5ld19ub3RlLnVzZXJfaWQsCiAgICAgICAgICAgICAgICBwYWdlX2lkIDogbmV3X25vdGUucGFnZV9pZAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIG5ld19ub3RlOwogICAgICAgIH07CiAgICAgICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIGV4dHJhY3QgdGFncyBmcm9tIG5vdGUKICAgICAgICAgKiBsb3NlbHkgYmFzZWQgb24gbGluZXMgMTA2LTcgb2YgaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9iY2hlcnJ5L3R3aXR0ZXItdGV4dC1qcy9tYXN0ZXIvdHdpdHRlci10ZXh0LmpzCiAgICAgICAgICovCiAgICAgICAgdmFyIF9oYXNodGFnX3JlZ2V4ID0gLyhefFteMC05QS1aJlwvXD9dKykoI3zvvIMpKFswLTlBLVpfXSpbQS1aX10rW2EtejAtOV9dKikvZ2k7CiAgICAgICAgbm90ZXMuZ2V0X3RhZ3MgPSBmdW5jdGlvbihub3RlKSB7CiAgICAgICAgICAgIHZhciB0YWdzID0gW107CiAgICAgICAgICAgIG5vdGUuY29udGVudC5yZXBsYWNlKF9oYXNodGFnX3JlZ2V4LCBmdW5jdGlvbihtYXRjaCwgYmVmb3JlLCBoYXNoLCBoYXNoVGV4dCkgewogICAgICAgICAgICAgICAgdGFncy5wdXNoKGhhc2hUZXh0KTsgIAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHRhZ3M7CiAgICAgICAgfTsKICAgICAgICAgICAgCiAgICAgICAgbm90ZXMuc2F2ZSA9IGZ1bmN0aW9uKG5vdGUsIG9wdGlvbnMvKm9wdGlvbmFsKi8sIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGlmKCAhY2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7CiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9leHRyYWN0IGFuZCBzdG9yZSB0aGUgdGFncwogICAgICAgICAgICBub3RlLnRhZ3MgPSBub3Rlcy5nZXRfdGFncyhub3RlKTsKICAgICAgICAgICAgLy91cGRhdGUgdGhlIHNvdXJjZSBiZWZvcmUgc2F2aW5nIGFueSBxdW90ZXMKICAgICAgICAgICAgc291cmNlcy51cGRhdGVfb25jZShub3RlLCBmdW5jdGlvbihlcnJvciwgZGF0YSkgewogICAgICAgICAgICAgICAgaWYoIGVycm9yICkgewogICAgICAgICAgICAgICAgICAgICQubG9nKCdlcnJvciBpbiBucmFtYV9ub3Rlcy5zYXZlLCBkdWUgdG8gY2FsbCB0byBucmFtYV9zb3VyY2VzLnVwZGF0ZV9vbmNlLicpCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIGRhdGEpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwZXJzaXN0LnNhdmUobm90ZSwgb3B0aW9ucywgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgICAgICAKICAgICAgICB2YXIgX3ppbmRleF9jb3VudGVyID0gMTAwMDA7IC8vdXNlZCBmb3IgYnJpbmdpbmcgbm90ZXMgdG8gdGhlIGZyb250IGFuZCB0byBlbnN1cmUgbmV3IG5vdGVzIGFyZSBvbiB0b3AKICAgICAgICBub3Rlcy5icmluZ190b19mcm9udCA9IGZ1bmN0aW9uKCRub3RlKSB7CiAgICAgICAgICAgICRub3RlLmNzcygnei1pbmRleCcsIF96aW5kZXhfY291bnRlcisrKTsgIC8vbW92ZSBub3RlIHRvIGZyb25nCiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBkaXNwYWx5IGEgbm90ZSBvbiB0aGUgcGFnZSAtLSBpLmUuIGNyZWF0ZSBhbmQgc3R5bGUgdGhlIEhUTUwgYW5kIGFkZCBpdAogICAgICAgICAqIHRvIHRoZSBhcHByb3JpYXRlIHBhcnQgb2YgdGhlIGRvY3VtZW50ICh0aGUgI19ucmFtYV9ub3RlcykuCiAgICAgICAgICogSWYgbm90ZSBkb2VzIG5vdCBoYXZlIHBvc2l0aW9uIGluZm8gKGVpdGhlciBiZWNhdXNlIGl0IGlzIG5ld2x5IGNyZWF0ZWQsCiAgICAgICAgICogb3IgYmVjYXVzZSBpdCB3YXMgY3JlYXRlZCBvbiB0aGUgc2VydmVyKSwgYXR0ZW1wdCB0byBwb3NpdGlvbiBpdCBuZWFyIHRoZSBxdW90ZS4KICAgICAgICAgKi8KICAgICAgICBub3Rlcy5kaXNwbGF5ID0gZnVuY3Rpb24obm90ZSwgb3B0aW9ucykgewogICAgICAgICAgICB2YXIgb3B0aW9uc19kZWZhdWx0cyA9IHsKICAgICAgICAgICAgICAgIGZvY3VzIDogdHJ1ZSAgICAgICAgLy9zZXQgZm9jdXMgdG8gdGhlIG5vdGUncyB0ZXh0YXJlYSBhZnRlciBjcmVhdGluZyBpdD8KICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIGRpc3BsYXlfc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9uc19kZWZhdWx0cywgb3B0aW9ucyApOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gLS0tIGFwcGx5IHNvbWUgcG9zaXRpb25pbmcgZGVmYXVsdHMgdG8gbm90ZXMKICAgICAgICAgICAgdmFyIG5vdGVfZGVmYXVsdHMgPSB7fTsKICAgICAgICAgICAgdmFyIHZpZXdwb3J0X3dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7CiAgICAgICAgICAgIC8vc2hpZnQgcXVvdGVzIGhvcml6b250YWxseSBieSAxLzMwIG9mIHZpZXdwb3J0X3dpZHRoCiAgICAgICAgICAgIHZhciByYW5kb21fc2hpZnQgPSBmdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKHZpZXdwb3J0X3dpZHRoLzMwKSl9OwogICAgICAgICAgICB2YXIgbm90ZV9yaWdodF9nYXAgPSBNYXRoLm1pbigxNSwgdmlld3BvcnRfd2lkdGgvNjUpOwogICAgICAgICAgICBub3RlX2RlZmF1bHRzLmxlZnQgPSB2aWV3cG9ydF93aWR0aCAtIG5vdGVfcmlnaHRfZ2FwIC0gKG5vdGUud2lkdGggfHwgc2V0dGluZ3Mubm90ZV93aWR0aCkgLSByYW5kb21fc2hpZnQoKTsKICAgICAgICAgICAgLy90byBnZXQgZGVmYXVsdCBmb3IgdG9wIHdlIG5lZWQgcG9zaXRpb24gb2YgYXNzb2NpYXRlZCBxdW90ZSAtLS0gb25seSBjb21wdXRlIHRoaXMgaWYgd2UgcmVhbGx5IG5lZWQgaXQKICAgICAgICAgICAgaWYoICFub3RlLnRvcCApIHsKICAgICAgICAgICAgICAgIHZhciBxdW90ZV9vZmZzZXQgPSBudWxsOwogICAgICAgICAgICAgICAgaWYoIG5vdGUucXVvdGVfaWQgJiYgcXVvdGVzICkgewogICAgICAgICAgICAgICAgICAgIHF1b3RlX29mZnNldCA9IHF1b3Rlcy5vZmZzZXQobm90ZS5xdW90ZV9pZCk7ICAgIC8vbWF5IHJldHVybiBudWxsIGlmIGNhbid0IGJlIGNvbXB1dGVkCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiggcXVvdGVfb2Zmc2V0ICkgewogICAgICAgICAgICAgICAgICAgIG5vdGVfZGVmYXVsdHMudG9wID0gcXVvdGVfb2Zmc2V0LnRvcCArIHJhbmRvbV9zaGlmdCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBub3RlX2RlZmF1bHRzLnRvcCA9IDAgKyByYW5kb21fc2hpZnQoKTsgLy9wdXQgbm90ZSBhdCB0b3Agb2Ygc2NyZWVuIGlmIGNhbid0IGRvIGJldHRlcgogICAgICAgICAgICAgICAgICAgICQubG9nKCJucmFtYSB1bmFibGUgdG8gZ2V0IGRlZmF1bHQgcG9zaXRpb24gZm9yIG5vdGUgIiArIG5vdGUuX2lkICsgIiBiZWNhdXNlIG5vIHF1b3RlIG9mZnNldCBmb3VuZCBmb3IgcXVvdGUgIiArIG5vdGUucXVvdGVfaWQgKyAiKGhhcyB0aGUgcXVvdGUgYmVlbiBhZGRlZCB0byB0aGUgcGFnZT8pIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gCiAgICAgICAgICAgIG5vdGUgPSAkLmV4dGVuZCh0cnVlLCB7fSwgbm90ZV9kZWZhdWx0cywgbm90ZSApOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gLS0gY2hlY2sgdGhlIG5vdGUgY29udGFpbmVyIGRpdiBleGlzdHMsIGFwcGVuZCB0byBkb2N1bWVudC5ib2R5IGlmIG5vdAogICAgICAgICAgICBpZiggJCgnI19ucmFtYV9ub3RlcycpLmxlbmd0aCA9PSAwICkgewogICAgICAgICAgICAgICAgJCgnPGRpdiBpZD0iX25yYW1hX25vdGVzIj48L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpLgogICAgICAgICAgICAgICAgICAgIGNzcyh7cG9zaXRpb246ImFic29sdXRlIiwgbGVmdDoiMHB4IiwgdG9wOiIwcHgiLHdpZHRoOiIwJSIsIGhlaWdodDoiMCUifSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIC0tLSBzdGFydCBwcm9wZXJseSBoZXJlCiAgICAgICAgICAgIGlmKCAkKCcjJytub3RlLl9pZCkubGVuZ3RoICE9IDAgKSB7ICAKICAgICAgICAgICAgICAgIG5vdGVzLnVuZGlzcGxheShub3RlKTsgLy9JZiBub3RlIGFscmVhZHkgZGlzcGxheWVkLCB1bmRpc3BsYXkgaXQgZmlyc3QuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHBvc19hdHRycyA9IHsKICAgICAgICAgICAgICAgICJwb3NpdGlvbiI6ImFic29sdXRlIiwKICAgICAgICAgICAgICAgICJsZWZ0Ijpub3RlLmxlZnQrInB4IiwKICAgICAgICAgICAgICAgICJ0b3AiOm5vdGUudG9wKyJweCIKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIHRleHRhcmVhID0gJCgnPHRleHRhcmVhPjwvdGV4dGFyZWE+JykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsKG5vdGUuY29udGVudCkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzKHNldHRpbmdzLm5vdGVfZWRpdG9yX3N0eWxlKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmUoJ2JsdXInLCBub3Rlcy51cGRhdGVfb25fYmx1cikuICAvL21ha2Ugc3VyZSBlZGl0cyBhcmUgc2F2ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvZ3JvdygpOwogICAgICAgICAgICB2YXIgaW5uZXJfZGl2ID0gJCgnPGRpdj48L2Rpdj4nKS5jc3Moc2V0dGluZ3Mubm90ZV9pbm5lcl9zdHlsZSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kKHRleHRhcmVhKTsKICAgICAgICAgICAgdmFyIGVkaXRfbm90ZSA9ICQoJzxkaXY+PC9kaXYnKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyKCdpZCcsbm90ZS5faWQpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKCdfbnJhbWEtbm90ZScpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlUmVzZXRDU1MoKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MocG9zX2F0dHJzKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3Moc2V0dGluZ3Mubm90ZV9zdHlsZSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzKCd6LWluZGV4JyxfemluZGV4X2NvdW50ZXIrKykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgbm90ZS5iYWNrZ3JvdW5kX2NvbG9yIHx8IHNldHRpbmdzLm5vdGVfYmFja2dyb3VuZF9jb2xvcikuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSgnbnJhbWFfbm90ZScsbm90ZSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kKGlubmVyX2RpdikuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG8oJyNfbnJhbWFfbm90ZXMnKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGUoeyBjdXJzb3I6J21vdmUnLCBvcGFjaXR5OjAuNjYsIHN0b3A6bm90ZXMudXBkYXRlX29uX2RyYWcgfSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZSgpLnNob3coInNjYWxlIix7fSwyMDAsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkaXNwbGF5X3NldHRpbmdzLmZvY3VzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEuZm9jdXMoKS5zZWxlY3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgfTsKICAgICAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogcmVtb3ZlIEhUTUwgbm9kZSByZXByZXNlbmluZyBub3RlIGZyb20gdGhlIHBhZ2UKICAgICAgICAgKi8KICAgICAgICBub3Rlcy51bmRpc3BsYXkgPSBmdW5jdGlvbihub3RlKSB7CiAgICAgICAgICAgICQoJyMnK25vdGUuX2lkKS5yZW1vdmUoKTsKICAgICAgICB9OwoKICAgICAgICAvLyAtLSBjYWxsIHRoaXMgdG8gcmUtZW5hYmxlIG5vdGUgd2hlbiBlcnJvciBzYXZpbmcgb3IgZGVsZXRpbmcKICAgICAgICB2YXIgX2ZpbmFsbHkgPSBmdW5jdGlvbiBfZmluYWxseSgkbm90ZSwgcmVzdG9yZV9iYWNrZ3JvdW5kICl7CiAgICAgICAgICAgIHZhciAkdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScsICRub3RlKTsKICAgICAgICAgICAgLy9tYWtlIGNoYW5nZXMgdG8gdGV4dGFyZWEgcG9zc2libGUgJiBlbnN1cmUgdGhleSB0cmlnZ2VyIHVwZGF0ZXMKICAgICAgICAgICAgJHRleHRhcmVhLnJlbW92ZUF0dHIoImRpc2FibGVkIik7CiAgICAgICAgICAgICR0ZXh0YXJlYS51bmJpbmQoJ2JsdXInLCBub3Rlcy51cGRhdGVfb25fYmx1cikub25lKCdibHVyJywgbm90ZXMudXBkYXRlX29uX2JsdXIpOyAgLy9tYWtlIHN1cmUgZWRpdHMgYXJlIHNhdmVkCiAgICAgICAgICAgIGlmKCByZXN0b3JlX2JhY2tncm91bmQgKSB7CiAgICAgICAgICAgICAgICAkdGV4dGFyZWEucGFyZW50cygnLl9ucmFtYS1ub3RlJykuY3NzKHtiYWNrZ3JvdW5kQ29sb3I6c2V0dGluZ3Mubm90ZV9iYWNrZ3JvdW5kX2NvbG9yfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIC8qKgogICAgICAgICAqIGV2ZW50IGhhbmRsZXIgZm9yIGJsdXIgZXZlbnQgb24gVEVYVEFSRUEgb2YgJG5vdGUKICAgICAgICAgKiBUaGlzIGhhbmRsZXMgZGlzcGxheSwgbG9naWMgJiBwZXJzaXN0ZW5jZS4KICAgICAgICAgKiBpZiAmIHdoZW4gc3VjY2Vzc2Z1bGx5IHBlcnNpc3RlZCwgdGhlIG5vdGUgaXMgc3RvcmVkIGFzIGEganF1ZXJ5LmRhdGEgYXR0cgogICAgICAgICAqIG9uIHRoZSAkbm90ZSAoa2V5Om5yYW1hX25vdGUpCiAgICAgICAgICovCiAgICAgICAgbm90ZXMudXBkYXRlX29uX2JsdXIgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHZhciAkdGV4dGFyZWEgPSAkKHRoaXMpOwogICAgICAgICAgICAkdGV4dGFyZWEudW5iaW5kKCdibHVyJywgbm90ZXMudXBkYXRlX29uX2JsdXIpLgogICAgICAgICAgICAgICAgYXR0cigiZGlzYWJsZWQiLCAiZGlzYWJsZWQiKTsgICAvL2Rpc2FibGUgdGV4dCBhcmVhIHdoaWxlIGF0dGVtcHRpbmcgdG8gcGVyc2lzdAogICAgICAgICAgICAkbm90ZSA9ICR0ZXh0YXJlYS5wYXJlbnRzKCcuX25yYW1hLW5vdGUnKS5maXJzdCgpOwogICAgICAgICAgICAkbm90ZS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBzZXR0aW5ncy5wZXJzaXN0X3N0YXJ0ZWRfY29sb3IpOwogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIC0tIGRlbGV0ZSBub3RlIGlmIG5vdGUgY29udGVudCBpcyBlbXB0eQogICAgICAgICAgICB2YXIgbmV3X2NvbnRlbnQgPSAkdGV4dGFyZWEudmFsKCk7CiAgICAgICAgICAgIGlmKCAkLnRyaW0obmV3X2NvbnRlbnQpID09ICcnICkgewogICAgICAgICAgICAgICAgJC5sb2coIm5yYW1hX25vdGVzLnVwZGF0ZSAtLSBkZWxldGluZyBub3RlICIrJG5vdGUuYXR0cignaWQnKSk7CiAgICAgICAgICAgICAgICBub3Rlcy5yZW1vdmUoJG5vdGUpOyAKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIG5vdGUgPSAkbm90ZS5kYXRhKCducmFtYV9ub3RlJyk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyAtLSBpZiBjb250ZW50IHVuY2hhbmdlZCwgZG8gbm90aGluZyAoc28gbW92aW5nIGEgbm90ZSB3b24ndCB0cmlnZ2VyIGEgY2hhbmdlKQogICAgICAgICAgICB2YXIgb2xkX2NvbnRlbnQgPSBub3RlLmNvbnRlbnQ7CiAgICAgICAgICAgIGlmKCBvbGRfY29udGVudCA9PSBuZXdfY29udGVudCApIHsKICAgICAgICAgICAgICAgIF9maW5hbGx5KCRub3RlLCB0cnVlKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIHZhciB1cGRhdGVzID0gewogICAgICAgICAgICAgICAgY29udGVudCA6IG5ld19jb250ZW50LAogICAgICAgICAgICAgICAgdXBkYXRlZCA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmKCBzZXR0aW5ncy5pc19lbWJlZGRlZCApIHsKICAgICAgICAgICAgICAgICQuZXh0ZW5kKHVwZGF0ZXMsIHsKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yIDogc2V0dGluZ3Mubm90ZV9iYWNrZ3JvdW5kX2NvbG9yLAogICAgICAgICAgICAgICAgICAgIGxlZnQgOiAkbm90ZS5vZmZzZXQoKS5sZWZ0LAogICAgICAgICAgICAgICAgICAgIHRvcCA6ICRub3RlLm9mZnNldCgpLnRvcCwKICAgICAgICAgICAgICAgICAgICBkb2NfaGVpZ2h0IDogJChkb2N1bWVudCkuaGVpZ2h0KCksCiAgICAgICAgICAgICAgICAgICAgZG9jX3dpZHRoIDogJChkb2N1bWVudCkud2lkdGgoKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG5ld19ub3RlID0gJC5leHRlbmQodHJ1ZSwge30sIG5vdGUsIHVwZGF0ZXMpOyAgIAogICAgICAgICAgICAKICAgICAgICAgICAgbm90ZXMuc2F2ZShuZXdfbm90ZSwge2Nsb25lX29uX2NvbmZsaWN0OnRydWV9LCBmdW5jdGlvbihlcnJvcixkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCBlcnJvciApIHsKICAgICAgICAgICAgICAgICAgICAkbm90ZS5jc3Moe2JhY2tncm91bmRDb2xvciA6IHNldHRpbmdzLnBlcnNpc3RfZmFpbGVkX2NvbG9yfSk7CiAgICAgICAgICAgICAgICAgICAgX2ZpbmFsbHkoJG5vdGUsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8kLmxvZygibnJhbWFfbm90ZXMudXBkYXRlX29uX2JsdXI6IHdhcyBwZXJzaXN0ZWQgbm90ZSBfaWQ6IituZXdfbm90ZS5faWQrIiBmb3IgcXVvdGU6IituZXdfbm90ZS5xdW90ZV9pZCk7CiAgICAgICAgICAgICAgICAgICAgJG5vdGUuYXR0cignaWQnLG5ld19ub3RlLl9pZCk7IC8vbWF5IGhhdmUgY2hhbmdlZCAoc2F2ZSBjYW4gY2xvbmUpCiAgICAgICAgICAgICAgICAgICAgJG5vdGUgPSAkKCcjJytuZXdfbm90ZS5faWQpOyAgIC8vaGF2ZSB0byB1cGRhdGUgYWZ0ZXIgY2hhbmdpbmcgaWQgYXR0cmlidXRlCiAgICAgICAgICAgICAgICAgICAgJG5vdGUuZGF0YSgnbnJhbWFfbm90ZScsIG5ld19ub3RlKTsKICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGZvciBiaWJ0ZXggKGRvIHRoaXMgYWZ0ZXIgc2F2ZSB0byBhdm9pZCBjb25mbGljdHMpCiAgICAgICAgICAgICAgICAgICAgaWYoIHNvdXJjZXMuZGV0ZWN0X2JpYnRleChuZXdfbm90ZS5jb250ZW50KSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlcy51cGRhdGVfZnJvbV9iaWJ0ZXgobmV3X25vdGUuY29udGVudCwgbmV3X25vdGUsIGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhZXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycrbm90ZS5faWQpLmNzcyh7Ym9yZGVyOicxcHggc29saWQgIzAxREYwMSd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZpbmFsbHkoICRub3RlLCB0cnVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9maW5hbGx5KCAkbm90ZSwgdHJ1ZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICAgICAgCiAgICAgICAgbm90ZXMudXBkYXRlX29uX2RyYWcgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHZhciAkdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScsICQodGhpcykgKS5maXJzdCgpOwogICAgICAgICAgICBpZiggJHRleHRhcmVhLmF0dHIoJ2Rpc2FibGVkJykgKSB7CiAgICAgICAgICAgICAgICAkLmxvZygnbnJhbWFfbm90ZXMudXBkYXRlX29uX2RyYWc6IHNhdmUgY3VycmVudGx5IGluIHByb2dyZXNzJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJC5sb2coIm5yYW1hX25vdGVzLnVwZGF0ZV9vbl9kcmFnIHN0YXJ0aW5nIik7CiAgICAgICAgICAgICR0ZXh0YXJlYS5hdHRyKCdkaXNhYmxlZCcsJ2Rpc2FibGVkJyk7CiAgICAgICAgICAgIHZhciAkbm90ZSA9ICAkKHRoaXMpOwogICAgICAgICAgICB2YXIgbm90ZSA9ICRub3RlLmRhdGEoJ25yYW1hX25vdGUnKTsKICAgICAgICAgICAgdmFyIHVwZGF0ZXMgPSB7CiAgICAgICAgICAgICAgICBsZWZ0IDogJG5vdGUub2Zmc2V0KCkubGVmdCwKICAgICAgICAgICAgICAgIHRvcCA6ICRub3RlLm9mZnNldCgpLnRvcCwKICAgICAgICAgICAgICAgIGRvY19oZWlnaHQgOiAkKGRvY3VtZW50KS5oZWlnaHQoKSwKICAgICAgICAgICAgICAgIGRvY193aWR0aCA6ICQoZG9jdW1lbnQpLndpZHRoKCkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbm90ZSA9ICQuZXh0ZW5kKHRydWUsIG5vdGUsIHVwZGF0ZXMpOyAgIAogICAgICAgICAgICBub3Rlcy5zYXZlKG5vdGUsIHtjbG9uZV9vbl9jb25mbGljdDpmYWxzZX0sIGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgIC8vZXJyb3JzIGFyZSBpZ25vcmVkIC0tIG5vdGUgbG9jYXRpb24gbm90IGNyaXRpY2FsCiAgICAgICAgICAgICAgICAkdGV4dGFyZWEucmVtb3ZlQXR0cignZGlzYWJsZWQnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiByZXF1ZXN0IGRlbGV0ZSBmcm9tIHNlcnZlciAmIHJlbW92ZSBmcm9tIGRvY3VtZW50IGlmIHN1Y2NlZWRzCiAgICAgICAgICovCiAgICAgICAgbm90ZXMucmVtb3ZlID0gZnVuY3Rpb24oJG5vdGUpIHsKICAgICAgICAgICAgdmFyIG5vdGVfaWQgPSAkbm90ZS5hdHRyKCdpZCcpOwogICAgICAgICAgICAkbm90ZS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCdyZWQnKTsKICAgICAgICAgICAgdmFyIG5vdGUgPSAkbm90ZS5kYXRhKCducmFtYV9ub3RlJyk7CiAgICAgICAgICAgIHBlcnNpc3Qucm0obm90ZSwgZnVuY3Rpb24oZXJyb3IsIGRhdGEpewogICAgICAgICAgICAgICAgaWYoIGVycm9yICkgewogICAgICAgICAgICAgICAgICAgIF9maW5hbGx5KCRub3RlLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQubG9nKCJucmFtYV9ub3Rlcy5yZW1vdmUgZGVsZXRlZCBub3RlICIrbm90ZV9pZCsiIGZyb20gc2VydmVyLiIpOwogICAgICAgICAgICAgICAgICAgICQoJyMnK25vdGVfaWQpLmhpZGUoJ3B1ZmYnLHt9LDMwMCtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqNjAwKSwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycrbm90ZV9pZCkucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAKICAgICAgICAvKioKICAgICAgICAgKiBsb2FkIG5vdGVzIGZyb20gc2VydmVyIGFuZCBkaXNwbGF5IG9uIHRoaXMgcGFnZQogICAgICAgICAqIHJ1biBhZnRlciBxdW90ZXMgaGF2ZSBiZWVuIGxvYWRlZCBhbmQgZGlzcGxheWVkIGluIGNhc2Ugbm90ZXMgbmVlZCBwb3NpdGlvbmluZwogICAgICAgICAqLwogICAgICAgIG5vdGVzLmxvYWQgPSBmdW5jdGlvbihwYWdlX2lkLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgdXNlcl9pZCA9IHNldHRpbmdzLm1lX29ubHkgPyBzZXR0aW5ncy51c2VyX2lkIDogdW5kZWZpbmVkOwogICAgICAgICAgICBwZXJzaXN0LmxvYWQoewogICAgICAgICAgICAgICAgcGFnZV9pZCA6IHBhZ2VfaWQsCiAgICAgICAgICAgICAgICB0eXBlIDogJ25vdGUnLAogICAgICAgICAgICAgICAgdXNlcl9pZCA6IHVzZXJfaWQKICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IsIGRhdGEpewogICAgICAgICAgICAgICAgaWYoIGVycm9yICkgewogICAgICAgICAgICAgICAgICAgIF9kZWJ1Zyh7bXNnOiducmFtYV9ub3Rlcy5sb2FkIGVycm9yOicsIGVycm9yOmVycm9yfSkKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJC5sb2coJ25yYW1hX25vdGVzLmxvYWQgZ290ICcgKyAoIGRhdGEgPyAoZGF0YS5yb3dzID8gZGF0YS5yb3dzLmxlbmd0aCA6IDAgKSA6IDApICsgJyBub3RlcyBmcm9tIHNlcnZlciBmb3IgdXNlciAnK3VzZXJfaWQpOwogICAgICAgICAgICAgICAgaWYoIGRhdGEgJiYgZGF0YS5yb3dzICkgewogICAgICAgICAgICAgICAgICAgICQuZWFjaChkYXRhLnJvd3MsIGZ1bmN0aW9uKGluZGV4LHJvdyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3RlID0gcm93LnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICBub3Rlcy5kaXNwbGF5KG5vdGUsIHtmb2N1czpmYWxzZX0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIGRhdGEpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBAcmV0dXJucyBfaWRzIG9mIG5vdGVzIGlmIEBwYXJhbSBxdW90ZSBoYXMgbm90ZXMgYXR0YWNoZWQKICAgICAgICAgKi8KICAgICAgICBub3Rlcy5maW5kID0gZnVuY3Rpb24ocXVvdGUpIHsKICAgICAgICAgICAgdmFyIF9pZHMgPSBbXTsKICAgICAgICAgICAgJCgnLl9ucmFtYS1ub3RlJykuZWFjaChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHJlbF9xdW90ZV9pZCA9ICQodGhpcykuZGF0YSgnbnJhbWFfbm90ZScpLnF1b3RlX2lkOwogICAgICAgICAgICAgICAgaWYoIHJlbF9xdW90ZV9pZCA9PSBxdW90ZS5faWQgKSB7CiAgICAgICAgICAgICAgICAgICAgX2lkcy5wdXNoKCQodGhpcykuYXR0cignaWQnKSk7ICAvL2FkZCBfaWQgb2YgdGhlIG5vdGUgdG8gdGhlIGxpc3QKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBfaWRzOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgcmV0dXJuIG5vdGVzOwogICAgfTsKICAgIAogICAgCiAgICAKICAgIAogICAgLyoqCiAgICAgKiBmb3IgZGlhbG9ncyAodG9kbyAtLSBtb3ZlIGV2ZW50IGhhbmRsZXJzKQogICAgICovCiAgICBleHBvcnRzLl9tYWtlX3VpID0gZnVuY3Rpb24oc2V0dGluZ3MsIHNlc3Npb24sIF9kZWJ1Zyl7CiAgICAgICAgdmFyICQgPSBqUXVlcnk7CiAgICAgICAgdmFyIHVpID0ge307CiAgICAgICAgCiAgICAgICAgdmFyIF91cGRhdGVfdXNlcl9pZCA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgaWYoIGRhdGEgJiYgZGF0YS51c2VyQ3R4ICYmIGRhdGEudXNlckN0eC5uYW1lICkgewogICAgICAgICAgICAgICAgdmFyIGxvZ2dlZF9pbl9hcyA9IGRhdGEudXNlckN0eC5uYW1lOwogICAgICAgICAgICAgICAgaWYoIGxvZ2dlZF9pbl9hcyAhPSBzZXR0aW5ncy51c2VyX2lkICkgewogICAgICAgICAgICAgICAgICAgIC8vdXNlcm5hbWUgaGFzIGNoYW5nZWQKICAgICAgICAgICAgICAgICAgICB1aS5kaWFsb2dzLndhcm5fdXNlcl9kaXNjcmVwYW5jeShsb2dnZWRfaW5fYXMpOwogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnVzZXJfaWQgPSBsb2dnZWRfaW5fYXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIC8qKiAKICAgICAgICAgKiBtYXkgdXBkYXRlIHNldHRpbmdzLnVzZXJfaWQuICBtYXkgcmVzdWx0IGluIG1vZGFsIGRpYWxvZyB3YXJuaW5nCiAgICAgICAgICovCiAgICAgICAgdWkuaW5mbyA9IGZ1bmN0aW9uKGNhbGxiYWNrKXsKICAgICAgICAgICAgc2Vzc2lvbi5pbmZvKGZ1bmN0aW9uKGVycm9yLCBkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCAhZXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZV91c2VyX2lkKGRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsZGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgLyoqCiAgICAgICAgICogbWF5IHVwZGF0ZSBzZXR0aW5ncy51c2VyX2lkLiAgbWF5IHJlc3VsdCBpbiBtb2RhbCBkaWFsb2cgd2FybmluZwogICAgICAgICAqLwogICAgICAgIHVpLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkLCBjYWxsYmFjayl7CiAgICAgICAgICAgIHNlc3Npb24ubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkLCBmdW5jdGlvbihlcnJvcixkYXRhKXsKICAgICAgICAgICAgICAgIGlmKCAhZXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZV91c2VyX2lkKGRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsZGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgoKICAgICAgICB1aS5kaWFsb2dzID0ge307CiAgICAgICAgLyoqCiAgICAgICAgICogc3dpdGNoIHVzZXJfaWQgaWYgbG9nZ2VkIGluOyBvdGhlcndpc2UgY2hlY2sgd2hldGhlciBjb25maWd1cmVkIGZvcgogICAgICAgICAqIGFub255bW91cyB1c2VyIGFuZCByZXF1ZXN0IHVzZXIgdG8gbG9nIGluIGlmIG5vdC4KICAgICAgICAgKi8KICAgICAgICB1aS5kaWFsb2dzLmxvZ2luX2lmX25lY2Vzc2FyeSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHVpLmluZm8oIGZ1bmN0aW9uKGVycm9yLGRhdGEpIHsKICAgICAgICAgICAgICAgIGlmKCBkYXRhICYmIGRhdGEudXNlckN0eCAmJiBkYXRhLnVzZXJDdHgubmFtZSApIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAnYWxyZWFkeSBsb2dnZWQgaW4nKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy9ub3QgbG9nZ2VkIGluCiAgICAgICAgICAgICAgICAgICAgaWYoIHNldHRpbmdzLnVzZXJfaWQgJiYgc2V0dGluZ3MudXNlcl9pZFswXSA9PSAnKicgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYW5vbnltb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICdhbm9ueW1vdXMgdXNlcicpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVpLmRpYWxvZ3MubG9naW4oc2V0dGluZ3MudXNlcl9pZCwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBkaXNwYWx5IGEgbG9naW4gZGlhbG9nLgogICAgICAgICAqIEBwYXJhbSBjYWxsYmFja3tGdW5jdGlvbn0gd2lsbCBiZSBjYWxsZWQgd2l0aCBhbiBlcnJvciBpZiB0aGUgdXNlciBjYW5jZWxzLgogICAgICAgICAqLwogICAgICAgIHVpLmRpYWxvZ3MubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgbXNnLypvcHRpb25hbCovLCBjYWxsYmFjaykgewogICAgICAgICAgICBpZiggIWNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBtc2c7CiAgICAgICAgICAgICAgICBtc2cgPSAnJzsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbGFzdF9lcnJvciA9IHttZXNzYWdlOid5b3UgY2FuY2VsbGVkJ307ICAvL3JlcG9ydCByZXN1bHRzIG9mIGxhc3QgZXJyb3IgaWYgdXNlciBjYW5jZWxzCiAgICAgICAgICAgIHZhciAkZGl2ID0gJCgnPGRpdj48aDI+PGEgaHJlZj0iaHR0cDovL3d3dy5ub3RlLW8tcmFtYS5jb20iIHRhcmdldD0iX2JsYW5rIj5Ob3RlLW8tcmFtYTwvYT4gOiBsb2dpbjwvaDI+PC9kaXY+Jyk7CiAgICAgICAgICAgICRkaXYuYXBwZW5kKCc8Zm9ybSBpZD0ibG9naW5fZm9ybSIgYWN0aW9uPSIvX3Nlc3Npb24iIG1ldGhvZD0iUE9TVCI+JyArCiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iZ2VuZXJhbF9lcnJvcnMiPicrbXNnKyc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJ1c2VybmFtZSBmaWVsZCI+JyArCiAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBmb3I9ImlkX25hbWUiPlVzZXJuYW1lPC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGlkPSJpZF9uYW1lIiBuYW1lPSJuYW1lIiB0eXBlPSJ0ZXh0IiAvPicgKwogICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJlcnJvcnMiPiZuYnNwOzwvZGl2PicgKwogICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9InBhc3N3b3JkIGZpZWxkIj4nICsKICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj0iaWRfcGFzc3dvcmQiPlBhc3N3b3JkPC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGlkPSJpZF9wYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHR5cGU9InBhc3N3b3JkIiAvPicgKwogICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJlcnJvcnMiPiZuYnNwOzwvZGl2PicgKwogICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImFjdGlvbnMiPicgKwogICAgICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT0iYnV0dG9uIiBpZD0iaWRfY2FuY2VsIiB2YWx1ZT0iQ2FuY2VsIiAvPicgKwogICAgICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0iaWRfbG9naW4iIHZhbHVlPSJMb2dpbiIgLz4nICsKICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgJzwvZm9ybT4nKTsKICAgICAgICAgICAgJGRpdi5iZVJlc2V0Q1NTKCk7CiAgICAgICAgICAgICQoJy5nZW5lcmFsX2Vycm9ycywgLmVycm9ycycsICRkaXYpLmNzcyh7Y29sb3I6J3JlZCd9KTsKICAgICAgICAgICAgJCgnI2lkX25hbWUnLCRkaXYpLnZhbCh1c2VybmFtZXx8JycpOwogICAgICAgICAgICAkKCcjaWRfY2FuY2VsJywgJGRpdikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJC5tb2RhbC5jbG9zZSgpOwogICAgICAgICAgICAgICAgY2FsbGJhY2sobGFzdF9lcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkKCdmb3JtJywgJGRpdikuc3VibWl0KGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIHZhciB1c2VybmFtZSA9ICQoJ2lucHV0W25hbWU9Im5hbWUiXScsICRkaXYpLnZhbCgpOwogICAgICAgICAgICAgICAgdmFyIHBhc3N3b3JkID0gJCgnaW5wdXRbbmFtZT0icGFzc3dvcmQiXScsICRkaXYpLnZhbCgpOwogICAgICAgICAgICAgICAgJCgnLnVzZXJuYW1lIC5lcnJvcnMnLCAkZGl2KS50ZXh0KAogICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID8gJyc6ICdQbGVhc2UgZW50ZXIgYSB1c2VybmFtZScKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAkKCcucGFzc3dvcmQgLmVycm9ycycsICRkaXYpLnRleHQoCiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQgPyAnJzogJ1BsZWFzZSBlbnRlciBhIHBhc3N3b3JkJwogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGlmICh1c2VybmFtZSAmJiBwYXNzd29yZCkgewogICAgICAgICAgICAgICAgICAgIHVpLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCwgZnVuY3Rpb24gKGVycm9yLCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9kZWJ1Zyh7ZXJyb3I6ZXJyb3J9KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGVycm9yICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9lcnJvciA9IGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yX21zZyA9IGVycm9yLm1lc3NhZ2UgfHwgIkVycm9yICIrKGVycm9yLnN0YXR1cyB8fCAnJykrIiBsb2dnaW5nIGluIChuZXR3b3JrIGNvbm5lY3Rpb24/KSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZ2VuZXJhbF9lcnJvcnMnLCAkZGl2KS50ZXh0KGVycm9yX21zZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCRkaXYpLmZhZGVPdXQoJ3Nsb3cnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5tb2RhbC5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICRkaXYubW9kYWwoc2V0dGluZ3Muc2ltcGxlbW9kYWwpOwogICAgICAgICAgICBfLmRlbGF5KCBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYoIHVzZXJuYW1lICkgewogICAgICAgICAgICAgICAgICAgICQoJyNpZF9wYXNzd29yZCcpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIDUwICk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB1aS5kaWFsb2dzLndhcm5fdXNlcl9kaXNjcmVwYW5jeSA9IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGlmKCAhY2FsbGJhY2sgKSB7IGNhbGxiYWNrID0gZnVuY3Rpb24oKXt9OyB9CiAgICAgICAgICAgIHZhciB3aG8gPSBzZXR0aW5ncy51c2VyX2lkWzBdPT0nKicgPyAnYW5vbnltb3VzIHVzZXJzJyA6IHNldHRpbmdzLnVzZXJfaWQ7CiAgICAgICAgICAgICQubG9nKCd1c2VyIGxvZ2dlZCBpbiBhcyAnK25hbWUrJyBidXQgdGhpcyBib29rbWFya2xldCB3YXMgY29uZmlndXJlZCBmb3IgJyt3aG8gKTsKICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKTsKICAgICAgICB9OwogICAgICAgIHJldHVybiB1aTsKICAgIH07CgoKICAgIC8qKgogICAgICogcHV0IG5yYW1hIHRvZ2V0aGVyIHdoZW4gdXNlZCBhcyBia21ya2x0IG9yIGVtYmVkZGVkIDxzY3JpcHQ+CiAgICAgKiAoc2VlIG5yYW1hMl9pbml0LmpzIGZvciB0aGUgY29ycmVzcG9uaW5nIGluaXQgZm9yIHRoZSBzZXJ2ZXIgcGFydHMpCiAgICAgKiBjYXV0aW9uOiBzb21lIGluaXQgcmVxdWlyZXMgcGFnZSBsb2FkIHRvIGJlIGNvbXBsZXRlCiAgICAgKiBAcGFyYW0gY2FsbGJhY2t7RnVuY3Rpb259IGlzIGNhbGxlZCB3aGVuIGluaXQgZG9uZS4KICAgICAqLwogICAgdmFyIF9ucmFtYV9pbml0ID0gZnVuY3Rpb24obnJhbWEsIGpRdWVyeSwgY2FsbGJhY2spIHsKICAgICAgICBucmFtYS4kID0galF1ZXJ5OwoKICAgICAgICBucmFtYS51dWlkID0gZXhwb3J0cy5fbWFrZV91dWlkKHV1aWQpOwoKICAgICAgICBucmFtYS5zZXR0aW5ncyA9IGV4cG9ydHMuX21ha2Vfc2V0dGluZ3MobnJhbWEudXVpZCk7CiAgICAgICAgLy9kZXRlY3QgdXNlciBpZiBzZXQgYnkgYmttcmtsdCBvciBzY3JpcHQgKHdpbGwgYmUgb3ZlcnJpZGVuIGJ5IHNlc3Npb24gY29va2llcykKICAgICAgICBpZiggdHlwZW9mIF9ucmFtYV91c2VyICE9PSAndW5kZWZpbmVkJyAmJiBfbnJhbWFfdXNlciApIHsKICAgICAgICAgICAgbnJhbWEuc2V0dGluZ3MudXNlcl9pZCA9IF9ucmFtYV91c2VyOwogICAgICAgIH0KCiAgICAgICAgbnJhbWEuX2RlYnVnID0gZXhwb3J0cy5fbWFrZV9kZWJ1ZyhucmFtYS5zZXR0aW5ncywgd2luZG93KTsKICAgICAgICBucmFtYS5sb2cgPSBleHBvcnRzLl9tYWtlX2xvZ2dpbmcobnJhbWEuc2V0dGluZ3MsIG5yYW1hLiQpOwogICAgICAgIG5yYW1hLnJwYyA9IGV4cG9ydHMuX21ha2VfcnBjKG5yYW1hLnNldHRpbmdzLCBlYXN5WERNLCBucmFtYS4kKTsKICAgICAgICBucmFtYS5kYiA9IGV4cG9ydHMuX21ha2VfZGIobnJhbWEucnBjLCBucmFtYS4kKTsKICAgICAgICBucmFtYS5zZXNzaW9uID0gZXhwb3J0cy5fbWFrZV9zZXNzaW9uKG5yYW1hLnJwYyk7CiAgICAgICAgbnJhbWEucGVyc2lzdCA9IGV4cG9ydHMuX21ha2VfcGVyc2lzdChucmFtYS5kYiwgbnJhbWEuc2Vzc2lvbiwgbnJhbWEudXVpZCwgbnJhbWEuX2RlYnVnKTsKICAgICAgICAKICAgICAgICB2YXIgbGliID0gewogICAgICAgICAgICBiNjRfaG1hY19tZDUgOiB3aW5kb3cuYjY0X2htYWNfbWQ1LAogICAgICAgICAgICByYW5neSA6IHdpbmRvdy5yYW5neSwKICAgICAgICAgICAgQmlidGV4UGFyc2VyIDogd2luZG93LkJpYnRleFBhcnNlciwKICAgICAgICAgICAgJCA6IGpRdWVyeSwKICAgICAgICAgICAgXyA6IHdpbmRvdy5fCiAgICAgICAgfTsKICAgICAgICBucmFtYS5zZXJpYWxpemVycyA9IGV4cG9ydHMuX21ha2Vfc2VyaWFsaXplcnMobnJhbWEuc2V0dGluZ3MsIGxpYik7CiAgICAgICAgbnJhbWEuc291cmNlcyA9IGV4cG9ydHMuX21ha2Vfc291cmNlcyhucmFtYS5zZXR0aW5ncywgbnJhbWEucGVyc2lzdCwgbnJhbWEuX2RlYnVnLCBsaWIpOwogICAgICAgIG5yYW1hLnF1b3RlcyA9IGV4cG9ydHMuX21ha2VfcXVvdGVzKG5yYW1hLnNldHRpbmdzLCBucmFtYS51dWlkLCBucmFtYS5wZXJzaXN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5yYW1hLnNvdXJjZXMsIG5yYW1hLnNlcmlhbGl6ZXJzLCBucmFtYS5fZGVidWcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGliKTsKICAgICAgICBucmFtYS5ub3RlcyA9IGV4cG9ydHMuX21ha2Vfbm90ZXMobnJhbWEuc2V0dGluZ3MsIG5yYW1hLnV1aWQsIG5yYW1hLnBlcnNpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5yYW1hLnNvdXJjZXMsIG5yYW1hLnF1b3RlcywgbnJhbWEuX2RlYnVnKTsKICAgICAgICBucmFtYS51aSA9IGV4cG9ydHMuX21ha2VfdWkobnJhbWEuc2V0dGluZ3MsIG5yYW1hLnNlc3Npb24sIG5yYW1hLl9kZWJ1Zyk7CgogICAgICAgIC8qKgogICAgICAgICAqIG1haW4gc2V0dXA6CiAgICAgICAgICogIC0gaW5pdCBkZXBlbmRlbmNpZXMgJiBucmFtYQogICAgICAgICAqICAtIGxvYWQgbm90ZXMgJiBxdW90ZXM7CiAgICAgICAgICogIC0gY29uZmlndXJlIGV2ZW50cyAoc2VsZWN0IHRvIGNyZWF0ZSBxdW90ZSwgZXRjKQogICAgICAgICAqLwogICAgICAgIG5yYW1hLiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBucmFtYS5zZXR0aW5ncy5wYWdlX2lkIGlzIGEgdmFsdWUgcy50LiB0d28gcGFnZSBpbnN0YW5jZXMgaGF2ZSB0aGUgc2FtZSBwYWdlX2lkIGV4YWN0bHkKICAgICAgICAgICAgICogICB3aGVuIHdlIHdhbnQgdG8gbG9hZCB0aGUgc2FtZSBub3RlcyAmIHF1b3RlcyBvbnRvIHRob3NlIHBhZ2VzLiAgVGhpcyBpcyByZWFsbHkKICAgICAgICAgICAgICogICBoYXJkIHRvIGNvbXB1dGUgKGUuZy4gRE9JIGhlbHBzIGJ1dCBpZiBkaWZmZXJlbnQgdXNlcnMgc2VlIGFuIGFydGljbGUgd2l0aAogICAgICAgICAgICAgKiAgIGRpZmZlcmVudCBmb3JtYXR0aW5nLCBzaG91bGQgd2UgbG9hZCB0aGUgc2FtZSBub3RlcyAmIHF1b3Rlcz8gIFByb2JhYmx5LikKICAgICAgICAgICAgICogSW4gZnV0dXJlIHRoaXMgbWlnaHQgYmUgZG9pIG9yIHNpbWlsYXIKICAgICAgICAgICAgICovCiAgICAgICAgICAgIG5yYW1hLnNldHRpbmdzLnBhZ2VfaWQgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wrIi8vIit3aW5kb3cubG9jYXRpb24uaG9zdCt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7ICAvL3RoZSB1cmwgd2l0aCBubyA/cXVlcnkgb3IgI2FuY2hvciBkZXRhaWxzCiAgICAgICAgICAgIC8vcmVtb3ZlIHRyYWlsaW5nIHNsYXNoCiAgICAgICAgICAgIHZhciBsYXN0ID0gbnJhbWEuc2V0dGluZ3MucGFnZV9pZC5sZW5ndGgtMTsKICAgICAgICAgICAgaWYoIG5yYW1hLnNldHRpbmdzLnBhZ2VfaWRbbGFzdF09PScvJyApIHsKICAgICAgICAgICAgICAgIG5yYW1hLnNldHRpbmdzLnBhZ2VfaWQgPSBucmFtYS5zZXR0aW5ncy5wYWdlX2lkLnNsaWNlKDAsbGFzdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiB0aGlzIGlzIHRoZSBub2RlIHdpdGhpbiB3aGljaCBub3RlcyBhbmQgcXVvdGVzIGFyZSBwb3NzaWJsZSBhbmQKICAgICAgICAgICAgICogcmVsYXRpdmUgdG8gd2hpY2ggdGhlaXIgbG9jYXRpb25zIGFyZSBkZWZpbmVkLgogICAgICAgICAgICAgKiBNaWdodCBldmVudHVhbGx5IGJlIGNvbmZpZ3VyZWQgcGVyLXNpdGUKICAgICAgICAgICAgICovCiAgICAgICAgICAgIC8vbnJhbWEuc2V0dGluZ3Mucm9vdF9ub2RlID0gbnJhbWEuJCgnI3JlYWRPdmVybGF5JylbMF07IAogICAgICAgICAgICBucmFtYS5zZXR0aW5ncy5yb290X25vZGUgPSBkb2N1bWVudC5ib2R5OwogICAgCiAgICAgICAgICAgIHJhbmd5LmluaXQoKTsKICAgIAogICAgICAgICAgICBucmFtYS4kLmxvZygnbnJhbWE6IHN0YXJ0aW5nIC4uLicpOwogICAgICAgICAgICBucmFtYS51aS5kaWFsb2dzLmxvZ2luX2lmX25lY2Vzc2FyeShmdW5jdGlvbihlcnJvciwgaWdub3JlKXsKICAgICAgICAgICAgICAgIGlmKCBlcnJvciApIHsKICAgICAgICAgICAgICAgICAgICBucmFtYS5fZGVidWcoe21zZzonZXJyb3IgbG9nZ2luZyBpbicsZXJyb3I6ZXJyb3J9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy9fLmRlZmVyIG1lYW5zIHdhaXQgdW50aWwgY2FsbHN0YWNrIGNsZWFyZWQKICAgICAgICAgICAgICAgICAgICBfLmRlZmVyKG5yYW1hLnF1b3Rlcy5sb2FkLCBucmFtYS5zZXR0aW5ncy5wYWdlX2lkLCBmdW5jdGlvbihlcnJvciwgZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGVmZXIobnJhbWEubm90ZXMubG9hZCwgbnJhbWEuc2V0dGluZ3MucGFnZV9pZCwgbnJhbWEuX2RlYnVnICk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gLS0tIGNvbmZpZ3VyZSBldmVudHMgLS0tCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBkZWFsIHdpdGggNDAzIEZvcmJpZGRlbiBldmVudHMgKHNlc3Npb24gZXhwaXJlcywgZXRjKQogICAgICAgICAgICBucmFtYS4kKGRvY3VtZW50KS5iaW5kKCducmFtYV80MDMnLCBmdW5jdGlvbihlLCB1c2VyX2lkKXsKICAgICAgICAgICAgICAgIG5yYW1hLnVpLmRpYWxvZ3MubG9naW4odXNlcl9pZCwgJ1BsZWFzZSBsb2dpbiBhbmQgcmUtdHJ5LicsIG5yYW1hLl9kZWJ1Zyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy90aHJvdHRsZTIgaXMgbGlrZSBfLnRocm90dGxlKGZuKSBidXQgdGhpcyBjYWxscyBmbiBCRUZPUkUgdGltb3V0CiAgICAgICAgICAgIHZhciB0aHJvdHRsZTIgPSBmdW5jdGlvbihmdW5jKSB7CiAgICAgICAgICAgICAgICB2YXIgdGltZW91dDsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc2V0X3RpbWVvdXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBpZiggIXRpbWVvdXQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHJlc2V0X3RpbWVvdXQsIG5yYW1hLnNldHRpbmdzLmV2ZW50X2RlbGF5KTsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9OwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gaGlnaGxpZ2h0aW5nIHRleHQgY3JlYXRlcyBhIHF1b3RlCiAgICAgICAgICAgIHZhciBjcmVhdGVfcXVvdGVfZnJvbV9zZWxlY3Rpb24gPSBmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgIGlmKCBlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSB8fCBlLmFsdEtleSB8fCBlLm1ldGFLZXkpIHsKICAgICAgICAgICAgICAgICAgICAvL2FueSBtb2RpZmllciBrZXkgY2FuY2VscyBxdW90ZSBjcmVhdGlvbgogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vbnJhbWEuJC5sb2coIm5yYW1hMiBjYXVnaHQgbW91c2UgdXAiKTsKICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSByYW5neS5nZXRTZWxlY3Rpb24oKTsKICAgICAgICAgICAgICAgIGlmKCBzZWxlY3Rpb24uaXNDb2xsYXBzZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7CiAgICAgICAgICAgICAgICAvL2NoZWNrIHRoYXQgbm90IHRvbyBtdWNoIHRleHQgaGFzIGJlZW4gc2VsZWN0ZWQgKGF2b2lkIGFjY2lkZW50YWwgc2VsZWN0aW5nIGxvYWRzIG9mIGRvYykKICAgICAgICAgICAgICAgIGlmKCBucmFtYS5zZXR0aW5ncy5tYXhfcXVvdGVfbGVuZ3RoID4gMCApIHsKICAgICAgICAgICAgICAgICAgICBpZiggcmFuZ2UudG9TdHJpbmcoKS5sZW5ndGggPiBucmFtYS5zZXR0aW5ncy5tYXhfcXVvdGVfbGVuZ3RoICl7CiAgICAgICAgICAgICAgICAgICAgICAgIG5yYW1hLiQubG9nKCducmFtYSBubyBxdW90ZSAtLSAnICsgcmFuZ2UudG9TdHJpbmcoKS5sZW5ndGggKyAnIGNoYXJhY3RlcnMgc2VsZWN0ZWQuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgcXVvdGUgPSBucmFtYS5xdW90ZXMuY3JlYXRlKHJhbmdlKTsKICAgICAgICAgICAgICAgIGlmKCBxdW90ZS5jb250ZW50ICE9ICcnICkgewogICAgICAgICAgICAgICAgICAgIG5yYW1hLnF1b3Rlcy5zYXZlKHF1b3RlLCBmdW5jdGlvbihlcnJvciwgZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vKHRvZG8gLS0gc29tZSBpbmRpY2F0ZSB0aGF0IGl0IGhhcyBmYWlsZWQ/CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhZXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucmFtYS5xdW90ZXMuZGlzcGxheShxdW90ZSk7ICAgLy9kaXNwbGF5IHRoZSBxdW90ZSBvbmx5IGFmdGVyIGl0IGhhcyBiZWVuIHNhdmVkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBucmFtYS5fZGVidWcoKGZ1bmN0aW9uKCl7IHZhciBhPXt9OyBhW3F1b3RlLl9pZF09cXVvdGU7IHJldHVybiBhOyB9KSgpKTsgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIG5yYW1hLiQoZG9jdW1lbnQpLmJpbmQoIm1vdXNldXAiLCB0aHJvdHRsZTIoY3JlYXRlX3F1b3RlX2Zyb21fc2VsZWN0aW9uKSApOwogICAgICAgICAgICAKICAgICAgICAgICAgLy9jbGljayBhIHF1b3RlIHRvIGNyZWF0ZSBhIG5vdGUKICAgICAgICAgICAgdmFyIGNyZWF0ZV9ub3RlX2Zyb21fcXVvdGVfY2xpY2sgPSBmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgIGlmKCBlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSApIHsKICAgICAgICAgICAgICAgICAgICAvL3NoaWZ0IGtleSBjYW5jZWxzIG5vdGVjcmVhdGlvbiwgc28gZG9lcyBjdHJsCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoIGUuYWx0S2V5IHx8IGUubWV0YUtleSApIHsKICAgICAgICAgICAgICAgICAgICAvL2FsdCBrZXkgY2F1c2VzIHF1b3RlIGRlbGV0aW9uIChpbiBzZXBhcmF0ZSBoYW5kbGVyKQogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gICAKICAgICAgICAgICAgICAgIHZhciBxdW90ZSA9IG5yYW1hLiQodGhpcykuZGF0YSgnbnJhbWFfcXVvdGUnKTsKICAgICAgICAgICAgICAgIHZhciBub3RlID0gbnJhbWEubm90ZXMuY3JlYXRlKHF1b3RlKTsKICAgICAgICAgICAgICAgIG5yYW1hLm5vdGVzLmRpc3BsYXkobm90ZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIG5yYW1hLiQoJy5fbnJhbWEtcXVvdGUnKS5saXZlKCdjbGljaycsIHRocm90dGxlMihjcmVhdGVfbm90ZV9mcm9tX3F1b3RlX2NsaWNrKSApOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gYWx0LSBvciBtZXRhLWNsaWNrIGEgcXVvdGUgdG8gZGVsZXRlIGl0IChhZnRlciBjaGVja2luZyB0aGVyZSBhcmUgbm8gbGlua2VkIG5vdGVzKQogICAgICAgICAgICBucmFtYS4kKCcuX25yYW1hLXF1b3RlJykubGl2ZSgnY2xpY2snLCBmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgIGlmKCBlLmFsdEtleSB8fCBlLm1ldGFLZXkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHF1b3RlID0gbnJhbWEuJCh0aGlzKS5kYXRhKCducmFtYV9xdW90ZScpOwogICAgICAgICAgICAgICAgICAgIHZhciBub3RlX2lkcyA9IG5yYW1hLm5vdGVzLmZpbmQocXVvdGUpOwogICAgICAgICAgICAgICAgICAgIGlmKCBub3RlX2lkcy5sZW5ndGggIT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy9kb24ndCBkZWxldGUgcXVvdGVzIHdpdGggbm90ZXMgYXR0YWNoZWQgLi4uCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcXVvdGVfbm9kZXMgPSBucmFtYS4kKCcuJytxdW90ZS5faWQpOwogICAgICAgICAgICAgICAgICAgICAgICAkcXVvdGVfbm9kZXMuY3NzKHsnYm9yZGVyLXRvcCc6JzFweCBkYXNoZWQgcmVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLWJvdHRvbSc6JzFweCBkYXNoZWQgcmVkJ30pCiAgICAgICAgICAgICAgICAgICAgICAgIC8vLi4uIGluc3RlYWQgbWFrZSB0aGUgcmVsZXZhbnQgbm90ZXMgYm91bmNlCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHN0ciA9ICcjJyArIG5vdGVfaWRzLmpvaW4oJywgIycpOwogICAgICAgICAgICAgICAgICAgICAgICBucmFtYS4kKGlkc3RyKS5lZmZlY3QoJ2JvdW5jZScsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVvdGVfbm9kZXMuY3NzKHsnYm9yZGVyLXRvcCc6J25vbmUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLWJvdHRvbSc6J25vbmUnfSw1MDApCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG5yYW1hLnF1b3Rlcy5yZW1vdmUocXVvdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAKICAgICAgICAgICAgLy9jbGljayBvbiBhIG5vdGUgdG8gZW5hYmxlIGVkaXRpbmcsIGJyaW5nIGl0IHRvIHRoZSBmcm9udCBhbmQgZmxhc2ggdGhlIGFzc29jaWF0ZWQgcXVvdGUKICAgICAgICAgICAgbnJhbWEuJCgnLl9ucmFtYS1ub3RlIHRleHRhcmVhJykubGl2ZSgnY2xpY2snLGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgdmFyICR0ZXh0YXJlYSA9IG5yYW1hLiQodGhpcyk7CiAgICAgICAgICAgICAgICB2YXIgJG5vdGUgPSBucmFtYS4kKHRoaXMpLnBhcmVudHMoJy5fbnJhbWEtbm90ZScpLmZpcnN0KCk7CiAgICAgICAgICAgICAgICBucmFtYS5ub3Rlcy5icmluZ190b19mcm9udCgkbm90ZSk7CiAgICAgICAgICAgICAgICB2YXIgbm90ZT0gJG5vdGUuZGF0YSgnbnJhbWFfbm90ZScpOwogICAgICAgICAgICAgICAgbnJhbWEucXVvdGVzLmZsYXNoKG5vdGUucXVvdGVfaWQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vdGFiYmluZyBvdXQgb2YgYSBub3RlIGRvZXNuJ3QgbW92ZSB0byBuZXh0IG5vdGUgKGJlY2F1c2Ugd2VpcmQpLgogICAgICAgICAgICAvL3RoYW5rIHlvdSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEzMTQ0NTAvanF1ZXJ5LWhvdy10by1jYXB0dXJlLXRoZS10YWIta2V5cHJlc3Mtd2l0aGluLWEtdGV4dGJveAogICAgICAgICAgICBucmFtYS4kKCcuX25yYW1hLW5vdGUnKS5saXZlKCdrZXlkb3duJyxmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgIGlmKCBlLndoaWNoID09IDkgKSB7CiAgICAgICAgICAgICAgICAgICAgbnJhbWEuJCgndGV4dGFyZWEnLCB0aGlzKS5ibHVyKCk7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vID09PSBpbml0IGRvbmUKICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICB9KTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBJVCBBTEwgU1RBUlRTIEhFUkUKICAgICAqIERldGVybWluZSBob3cgdG8gaW5pdGlhbGl6ZSBkZXBlbmRpbmcgb24gd2hldGhlciBib29rbWFya2xldCBvciBlbWJlZGRlZCBpbiBwYWdlCiAgICAgKi8KICAgIGlmKCB0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgKSB7ICAgIC8vZXhwb3J0cyB1bmRlZmluZWQgbWVhbnMgbnJhbWEgaXMgYWxyZWFkeSBsb2FkZWQgLS0gYm9va21hcmtsZXQgbWF5IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZSkKCiAgICAgICAgaWYoIHR5cGVvZiBfbnJhbWFfYmtta2x0ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgKSB7CiAgICAgICAgICAgIC8vdGhpcyBzY3JpcHQgaXMgYmVpbmcgdXNlZCBhcyBhIGNvbW1vbkpTIG1vZHVsZQogICAgICAgICAgICAvL2FscmVhZHkgZGVmaW5lZCBleHBvcnRzOyBpbml0aWFsaXNhdGlvbiBpcyBoYW5kbGVkIGluIGFub3RoZXIgbW9kdWxlLgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKCB0eXBlb2YgX25yYW1hX2JrbWtsdCA9PT0gJ3VuZGVmaW5lZCcgfHwgIV9ucmFtYV9ia21rbHQgKSB7CiAgICAgICAgICAgICAgICAvL3J1biBhcyBlbWJlZGRlZCA8c2NyaXB0PiAKICAgICAgICAgICAgICAgIF9ucmFtYV9pbml0KGV4cG9ydHMsIGpRdWVyeSwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICBleHBvcnRzLl9pbml0YWxpemVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gcnVuIGluIGJvb2ttYXJrbGV0IG1vZGUKICAgICAgICAgICAgICAgIC8vIGZpcnN0IHJlbW92ZSBoZWFkIC0tIGZvciBzb21lIHJlYXNvbiB0aGlzIHNlZW1zIHRvIGhlbHAgYXZvaWQgY2xhc2hlcyBpbiBGRgogICAgICAgICAgICAgICAgdmFyIG9sZF9oZWFkID0gZG9jdW1lbnQuaGVhZC5pbm5lckhUTUw7CiAgICAgICAgICAgICAgICB2YXIgcmVzdG9yZV9kb2N1bWVudF9oZWFkID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmlubmVySFRNTCA9IG9sZF9oZWFkOwogICAgICAgICAgICAgICAgfTsgCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuaW5uZXJIVE1MID0gJyc7CiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgICAgICAvL2FsdC4gbWV0aG9kIC0tIGNhbid0IHNldCBpbm5lckhUTUwgd2l0aCBzYWZhcmkgKG90aGVycz8pCiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkOwogICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IFtdOwogICAgICAgICAgICAgICAgICAgIHdoaWxlKGhlYWQuZmlyc3RDaGlsZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGhlYWQuZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGNoaWxkLm5vZGVOYW1lICE9PSAnU0NSSVBUJyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goIGNoaWxkICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhZC5yZW1vdmVDaGlsZCggY2hpbGQgKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXN0b3JlX2RvY3VtZW50X2hlYWQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSggY2hpbGRyZW4ubGVuZ3RoICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZCggY2hpbGRyZW4ucG9wKCkgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAKICAgICAgICAgICAgICAgIC8vIGxvYWQgbGlicmFyaWVzICYgb25seSBzdGFydCB3b3JrIGFmdGVyIHRoZXkgbG9hZGVkCiAgICAgICAgICAgICAgICAvLyBhZGFwdGVkIGZyb20galF1ZXJ5IGFqYXhUcmFuc3BvcnQsIHRoYW5rIHlvdSBhbHNvIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzU2MzgyL2Jvb2ttYXJrbGV0LXdhaXQtdW50aWwtamF2YXNjcmlwdC1pcy1sb2FkZWQKICAgICAgICAgICAgICAgIHZhciBsb2FkU2NyaXB0MiA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJoZWFkIiApWzBdIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICAgICAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNjcmlwdCIgKTsKICAgICAgICAgICAgICAgICAgICAvL3NjcmlwdC5jaGFyc2V0ID0gc2V0IHRoaXM/JAogICAgICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiggXywgaXNBYm9ydCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpc0Fib3J0IHx8ICFzY3JpcHQucmVhZHlTdGF0ZSB8fCAvbG9hZGVkfGNvbXBsZXRlLy50ZXN0KCBzY3JpcHQucmVhZHlTdGF0ZSApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIG1lbW9yeSBsZWFrIGluIElFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHNjcmlwdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoZWFkICYmIHNjcmlwdC5wYXJlbnROb2RlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQucmVtb3ZlQ2hpbGQoIHNjcmlwdCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVyZWZlcmVuY2UgdGhlIHNjcmlwdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0ID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhaXNBYm9ydCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayggMjAwLCAic3VjY2VzcyIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIGluc2VydEJlZm9yZSBpbnN0ZWFkIG9mIGFwcGVuZENoaWxkICB0byBjaXJjdW12ZW50IGFuIElFNiBidWcuCiAgICAgICAgICAgICAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoIHNjcmlwdCwgaGVhZC5maXJzdENoaWxkICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsb2FkU2NyaXB0MihfTlJBTUFfTElCX1VSTCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Lm5vQ29uZmxpY3QoKTsKICAgICAgICAgICAgICAgICAgICBfbnJhbWFfaW5pdChleHBvcnRzLCBqUXVlcnksIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RvcmVfZG9jdW1lbnRfaGVhZCgpOwogICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRzLl9pbml0YWxpemVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQovLyBpZiBleHBvcnRzIGlzIG5vdCBkZWZpbmVkLCBvciBpZiBfbnJhbWFfYmtta2x0IGV4aXN0cywgYXR0YWNoIGV2ZXJ5dGhpbmcgdG8gdGhpcy5ucmFtYQovLyAgICAgYnV0IGlmIG5yYW1hIGlzIGFscmVhZHkgZGVmaW5lZCwgZG8gbm90aGluZyAoc2VuZCB1bmRlZmluZWQpCi8vIG90aGVyd2lzZSBiZWhhdmUgYXMgYSBjb21tb25KUyBtb2R1bGUKfSkoCiAgICAoIHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgX25yYW1hX2JrbWtsdCA9PT0gJ3VuZGVmaW5lZCcgKSA/CiAgICAgICAgZXhwb3J0cwogICAgOigKICAgICAgICAoIHR5cGVvZiBucmFtYSA9PT0gJ3VuZGVmaW5lZCcgfHwgIW5yYW1hLl9pbml0YWxpemVkICkgPwogICAgICAgICAgICBucmFtYT17fQogICAgICAgIDoKICAgICAgICAgICAgdW5kZWZpbmVkICAgLy9wcmV2ZW50IGV4ZWN1dGlvbiBpZiBucmFtYSBhbHJlYWR5IGRlZmluZWQKICAgICkKKTsgICAKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL3RlbXBsYXRlcyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3RlbXBsYXRlcyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7Cgp2YXIgZHVzdF9tb2R1bGUgPSB7ZXhwb3J0czoge319OwooZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewp2YXIgZHVzdCA9IHt9OwoKKGZ1bmN0aW9uKGR1c3QpIHsKCmR1c3QuY2FjaGUgPSB7fTsKCmR1c3QucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCB0bXBsKSB7CiAgaWYgKCFuYW1lKSByZXR1cm47CiAgZHVzdC5jYWNoZVtuYW1lXSA9IHRtcGw7Cn07CgpkdXN0LnJlbmRlciA9IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQsIGNhbGxiYWNrKSB7CiAgdmFyIGNodW5rID0gbmV3IFN0dWIoY2FsbGJhY2spLmhlYWQ7CiAgZHVzdC5sb2FkKG5hbWUsIGNodW5rLCBDb250ZXh0LndyYXAoY29udGV4dCkpLmVuZCgpOwp9OwoKZHVzdC5zdHJlYW0gPSBmdW5jdGlvbihuYW1lLCBjb250ZXh0KSB7CiAgdmFyIHN0cmVhbSA9IG5ldyBTdHJlYW0oKTsKICBkdXN0Lm5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgZHVzdC5sb2FkKG5hbWUsIHN0cmVhbS5oZWFkLCBDb250ZXh0LndyYXAoY29udGV4dCkpLmVuZCgpOwogIH0pOwogIHJldHVybiBzdHJlYW07Cn07CgpkdXN0LnJlbmRlclNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSwgY29udGV4dCwgY2FsbGJhY2spIHsKICByZXR1cm4gZHVzdC5jb21waWxlRm4oc291cmNlKShjb250ZXh0LCBjYWxsYmFjayk7Cn07CgpkdXN0LmNvbXBpbGVGbiA9IGZ1bmN0aW9uKHNvdXJjZSwgbmFtZSkgewogIHZhciB0bXBsID0gZHVzdC5sb2FkU291cmNlKGR1c3QuY29tcGlsZShzb3VyY2UsIG5hbWUpKTsKICByZXR1cm4gZnVuY3Rpb24oY29udGV4dCwgY2FsbGJhY2spIHsKICAgIHZhciBtYXN0ZXIgPSBjYWxsYmFjayA/IG5ldyBTdHViKGNhbGxiYWNrKSA6IG5ldyBTdHJlYW0oKTsKICAgIGR1c3QubmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgIHRtcGwobWFzdGVyLmhlYWQsIENvbnRleHQud3JhcChjb250ZXh0KSkuZW5kKCk7CiAgICB9KTsKICAgIHJldHVybiBtYXN0ZXI7CiAgfQp9OwoKZHVzdC5sb2FkID0gZnVuY3Rpb24obmFtZSwgY2h1bmssIGNvbnRleHQpIHsKICB2YXIgdG1wbCA9IGR1c3QuY2FjaGVbbmFtZV07CiAgaWYgKHRtcGwpIHsKICAgIHJldHVybiB0bXBsKGNodW5rLCBjb250ZXh0KTsKICB9IGVsc2UgewogICAgaWYgKGR1c3Qub25Mb2FkKSB7CiAgICAgIHJldHVybiBjaHVuay5tYXAoZnVuY3Rpb24oY2h1bmspIHsKICAgICAgICBkdXN0Lm9uTG9hZChuYW1lLCBmdW5jdGlvbihlcnIsIHNyYykgewogICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNodW5rLnNldEVycm9yKGVycik7CiAgICAgICAgICBpZiAoIWR1c3QuY2FjaGVbbmFtZV0pIGR1c3QubG9hZFNvdXJjZShkdXN0LmNvbXBpbGUoc3JjLCBuYW1lKSk7CiAgICAgICAgICBkdXN0LmNhY2hlW25hbWVdKGNodW5rLCBjb250ZXh0KS5lbmQoKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gY2h1bmsuc2V0RXJyb3IobmV3IEVycm9yKCJUZW1wbGF0ZSBOb3QgRm91bmQ6ICIgKyBuYW1lKSk7CiAgfQp9OwoKZHVzdC5sb2FkU291cmNlID0gZnVuY3Rpb24oc291cmNlLCBwYXRoKSB7CiAgcmV0dXJuIGV2YWwoc291cmNlKTsKfTsKCmlmIChBcnJheS5pc0FycmF5KSB7CiAgZHVzdC5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTsKfSBlbHNlIHsKICBkdXN0LmlzQXJyYXkgPSBmdW5jdGlvbihhcnIpIHsKICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAiW29iamVjdCBBcnJheV0iOwogIH07Cn0KCmR1c3QubmV4dFRpY2sgPSBmdW5jdGlvbihjYWxsYmFjaykgewogIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApOwp9CgpkdXN0LmlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkgewogIGlmIChkdXN0LmlzQXJyYXkodmFsdWUpICYmICF2YWx1ZS5sZW5ndGgpIHJldHVybiB0cnVlOwogIGlmICh2YWx1ZSA9PT0gMCkgcmV0dXJuIGZhbHNlOwogIHJldHVybiAoIXZhbHVlKTsKfTsKCmR1c3QuZmlsdGVyID0gZnVuY3Rpb24oc3RyaW5nLCBhdXRvLCBmaWx0ZXJzKSB7CiAgaWYgKGZpbHRlcnMpIHsKICAgIGZvciAodmFyIGk9MCwgbGVuPWZpbHRlcnMubGVuZ3RoOyBpPGxlbjsgaSsrKSB7CiAgICAgIHZhciBuYW1lID0gZmlsdGVyc1tpXTsKICAgICAgaWYgKG5hbWUgPT09ICJzIikgewogICAgICAgIGF1dG8gPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHN0cmluZyA9IGR1c3QuZmlsdGVyc1tuYW1lXShzdHJpbmcpOwogICAgICB9CiAgICB9CiAgfQogIGlmIChhdXRvKSB7CiAgICBzdHJpbmcgPSBkdXN0LmZpbHRlcnNbYXV0b10oc3RyaW5nKTsKICB9CiAgcmV0dXJuIHN0cmluZzsKfTsKCmR1c3QuZmlsdGVycyA9IHsKICBoOiBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gZHVzdC5lc2NhcGVIdG1sKHZhbHVlKTsgfSwKICBqOiBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gZHVzdC5lc2NhcGVKcyh2YWx1ZSk7IH0sCiAgdTogZW5jb2RlVVJJLAogIHVjOiBlbmNvZGVVUklDb21wb25lbnQKfQoKZnVuY3Rpb24gQ29udGV4dChzdGFjaywgZ2xvYmFsLCBibG9ja3MpIHsKICB0aGlzLnN0YWNrICA9IHN0YWNrOwogIHRoaXMuZ2xvYmFsID0gZ2xvYmFsOwogIHRoaXMuYmxvY2tzID0gYmxvY2tzOwp9CgpkdXN0Lm1ha2VCYXNlID0gZnVuY3Rpb24oZ2xvYmFsKSB7CiAgcmV0dXJuIG5ldyBDb250ZXh0KG5ldyBTdGFjaygpLCBnbG9iYWwpOwp9CgpDb250ZXh0LndyYXAgPSBmdW5jdGlvbihjb250ZXh0KSB7CiAgaWYgKGNvbnRleHQgaW5zdGFuY2VvZiBDb250ZXh0KSB7CiAgICByZXR1cm4gY29udGV4dDsKICB9CiAgcmV0dXJuIG5ldyBDb250ZXh0KG5ldyBTdGFjayhjb250ZXh0KSk7Cn0KCkNvbnRleHQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSkgewogIHZhciBjdHggPSB0aGlzLnN0YWNrLCB2YWx1ZTsKCiAgd2hpbGUoY3R4KSB7CiAgICBpZiAoY3R4LmlzT2JqZWN0KSB7CiAgICAgIHZhbHVlID0gY3R4LmhlYWRba2V5XTsKICAgICAgaWYgKCEodmFsdWUgPT09IHVuZGVmaW5lZCkpIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KICAgIH0KICAgIGN0eCA9IGN0eC50YWlsOwogIH0KICByZXR1cm4gdGhpcy5nbG9iYWwgPyB0aGlzLmdsb2JhbFtrZXldIDogdW5kZWZpbmVkOwp9OwoKQ29udGV4dC5wcm90b3R5cGUuZ2V0UGF0aCA9IGZ1bmN0aW9uKGN1ciwgZG93bikgewogIHZhciBjdHggPSB0aGlzLnN0YWNrLAogICAgICBsZW4gPSBkb3duLmxlbmd0aDsKCiAgaWYgKGN1ciAmJiBsZW4gPT09IDApIHJldHVybiBjdHguaGVhZDsKICBpZiAoIWN0eC5pc09iamVjdCkgcmV0dXJuIHVuZGVmaW5lZDsKICBjdHggPSBjdHguaGVhZDsKICB2YXIgaSA9IDA7CiAgd2hpbGUoY3R4ICYmIGkgPCBsZW4pIHsKICAgIGN0eCA9IGN0eFtkb3duW2ldXTsKICAgIGkrKzsKICB9CiAgcmV0dXJuIGN0eDsKfTsKCkNvbnRleHQucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihoZWFkLCBpZHgsIGxlbikgewogIHJldHVybiBuZXcgQ29udGV4dChuZXcgU3RhY2soaGVhZCwgdGhpcy5zdGFjaywgaWR4LCBsZW4pLCB0aGlzLmdsb2JhbCwgdGhpcy5ibG9ja3MpOwp9OwoKQ29udGV4dC5wcm90b3R5cGUucmViYXNlID0gZnVuY3Rpb24oaGVhZCkgewogIHJldHVybiBuZXcgQ29udGV4dChuZXcgU3RhY2soaGVhZCksIHRoaXMuZ2xvYmFsLCB0aGlzLmJsb2Nrcyk7Cn07CgpDb250ZXh0LnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMuc3RhY2suaGVhZDsKfTsKCkNvbnRleHQucHJvdG90eXBlLmdldEJsb2NrID0gZnVuY3Rpb24oa2V5KSB7CiAgdmFyIGJsb2NrcyA9IHRoaXMuYmxvY2tzOwoKICBpZiAoIWJsb2NrcykgcmV0dXJuOwogIHZhciBsZW4gPSBibG9ja3MubGVuZ3RoLCBmbjsKICB3aGlsZSAobGVuLS0pIHsKICAgIGZuID0gYmxvY2tzW2xlbl1ba2V5XTsKICAgIGlmIChmbikgcmV0dXJuIGZuOwogIH0KfQoKQ29udGV4dC5wcm90b3R5cGUuc2hpZnRCbG9ja3MgPSBmdW5jdGlvbihsb2NhbHMpIHsKICB2YXIgYmxvY2tzID0gdGhpcy5ibG9ja3M7CgogIGlmIChsb2NhbHMpIHsKICAgIGlmICghYmxvY2tzKSB7CiAgICAgIG5ld0Jsb2NrcyA9IFtsb2NhbHNdOwogICAgfSBlbHNlIHsKICAgICAgbmV3QmxvY2tzID0gYmxvY2tzLmNvbmNhdChbbG9jYWxzXSk7CiAgICB9CiAgICByZXR1cm4gbmV3IENvbnRleHQodGhpcy5zdGFjaywgdGhpcy5nbG9iYWwsIG5ld0Jsb2Nrcyk7CiAgfQogIHJldHVybiB0aGlzOwp9CgpmdW5jdGlvbiBTdGFjayhoZWFkLCB0YWlsLCBpZHgsIGxlbikgewogIHRoaXMudGFpbCA9IHRhaWw7CiAgdGhpcy5pc09iamVjdCA9ICFkdXN0LmlzQXJyYXkoaGVhZCkgJiYgaGVhZCAmJiB0eXBlb2YgaGVhZCA9PT0gIm9iamVjdCI7CiAgdGhpcy5oZWFkID0gaGVhZDsKICB0aGlzLmluZGV4ID0gaWR4OwogIHRoaXMub2YgPSBsZW47Cn0KCmZ1bmN0aW9uIFN0dWIoY2FsbGJhY2spIHsKICB0aGlzLmhlYWQgPSBuZXcgQ2h1bmsodGhpcyk7CiAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrOwogIHRoaXMub3V0ID0gJyc7Cn0KClN0dWIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24oKSB7CiAgdmFyIGNodW5rID0gdGhpcy5oZWFkOwoKICB3aGlsZSAoY2h1bmspIHsKICAgIGlmIChjaHVuay5mbHVzaGFibGUpIHsKICAgICAgdGhpcy5vdXQgKz0gY2h1bmsuZGF0YTsKICAgIH0gZWxzZSBpZiAoY2h1bmsuZXJyb3IpIHsKICAgICAgdGhpcy5jYWxsYmFjayhjaHVuay5lcnJvcik7CiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbigpIHt9OwogICAgICByZXR1cm47CiAgICB9IGVsc2UgewogICAgICByZXR1cm47CiAgICB9CiAgICBjaHVuayA9IGNodW5rLm5leHQ7CiAgICB0aGlzLmhlYWQgPSBjaHVuazsKICB9CiAgdGhpcy5jYWxsYmFjayhudWxsLCB0aGlzLm91dCk7Cn0KCmZ1bmN0aW9uIFN0cmVhbSgpIHsKICB0aGlzLmhlYWQgPSBuZXcgQ2h1bmsodGhpcyk7Cn0KClN0cmVhbS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbigpIHsKICB2YXIgY2h1bmsgPSB0aGlzLmhlYWQ7CgogIHdoaWxlKGNodW5rKSB7CiAgICBpZiAoY2h1bmsuZmx1c2hhYmxlKSB7CiAgICAgIHRoaXMuZW1pdCgnZGF0YScsIGNodW5rLmRhdGEpOwogICAgfSBlbHNlIGlmIChjaHVuay5lcnJvcikgewogICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgY2h1bmsuZXJyb3IpOwogICAgICB0aGlzLmZsdXNoID0gZnVuY3Rpb24oKSB7fTsKICAgICAgcmV0dXJuOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY2h1bmsgPSBjaHVuay5uZXh0OwogICAgdGhpcy5oZWFkID0gY2h1bms7CiAgfQogIHRoaXMuZW1pdCgnZW5kJyk7Cn0KClN0cmVhbS5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHsKICB2YXIgZXZlbnRzID0gdGhpcy5ldmVudHM7CgogIGlmIChldmVudHMgJiYgZXZlbnRzW3R5cGVdKSB7CiAgICBldmVudHNbdHlwZV0oZGF0YSk7CiAgfQp9CgpTdHJlYW0ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24odHlwZSwgY2FsbGJhY2spIHsKICBpZiAoIXRoaXMuZXZlbnRzKSB7CiAgICB0aGlzLmV2ZW50cyA9IHt9OwogIH0KICB0aGlzLmV2ZW50c1t0eXBlXSA9IGNhbGxiYWNrOwogIHJldHVybiB0aGlzOwp9CgpmdW5jdGlvbiBDaHVuayhyb290LCBuZXh0LCB0YXBzKSB7CiAgdGhpcy5yb290ID0gcm9vdDsKICB0aGlzLm5leHQgPSBuZXh0OwogIHRoaXMuZGF0YSA9ICcnOwogIHRoaXMuZmx1c2hhYmxlID0gZmFsc2U7CiAgdGhpcy50YXBzID0gdGFwczsKfQoKQ2h1bmsucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oZGF0YSkgewogIHZhciB0YXBzICA9IHRoaXMudGFwczsKCiAgaWYgKHRhcHMpIHsKICAgIGRhdGEgPSB0YXBzLmdvKGRhdGEpOwogIH0KICB0aGlzLmRhdGEgKz0gZGF0YTsKICByZXR1cm4gdGhpczsKfQoKQ2h1bmsucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGRhdGEpIHsKICBpZiAoZGF0YSkgewogICAgdGhpcy53cml0ZShkYXRhKTsKICB9CiAgdGhpcy5mbHVzaGFibGUgPSB0cnVlOwogIHRoaXMucm9vdC5mbHVzaCgpOwogIHJldHVybiB0aGlzOwp9CgpDaHVuay5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICB2YXIgY3Vyc29yID0gbmV3IENodW5rKHRoaXMucm9vdCwgdGhpcy5uZXh0LCB0aGlzLnRhcHMpLAogICAgICBicmFuY2ggPSBuZXcgQ2h1bmsodGhpcy5yb290LCBjdXJzb3IsIHRoaXMudGFwcyk7CgogIHRoaXMubmV4dCA9IGJyYW5jaDsKICB0aGlzLmZsdXNoYWJsZSA9IHRydWU7CiAgY2FsbGJhY2soYnJhbmNoKTsKICByZXR1cm4gY3Vyc29yOwp9CgpDaHVuay5wcm90b3R5cGUudGFwID0gZnVuY3Rpb24odGFwKSB7CiAgdmFyIHRhcHMgPSB0aGlzLnRhcHM7CgogIGlmICh0YXBzKSB7CiAgICB0aGlzLnRhcHMgPSB0YXBzLnB1c2godGFwKTsKICB9IGVsc2UgewogICAgdGhpcy50YXBzID0gbmV3IFRhcCh0YXApOwogIH0KICByZXR1cm4gdGhpczsKfQoKQ2h1bmsucHJvdG90eXBlLnVudGFwID0gZnVuY3Rpb24oKSB7CiAgdGhpcy50YXBzID0gdGhpcy50YXBzLnRhaWw7CiAgcmV0dXJuIHRoaXM7Cn0KCkNodW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihib2R5LCBjb250ZXh0KSB7CiAgcmV0dXJuIGJvZHkodGhpcywgY29udGV4dCk7Cn0KCkNodW5rLnByb3RvdHlwZS5yZWZlcmVuY2UgPSBmdW5jdGlvbihlbGVtLCBjb250ZXh0LCBhdXRvLCBmaWx0ZXJzKSB7CiAgaWYgKHR5cGVvZiBlbGVtID09PSAiZnVuY3Rpb24iKSB7CiAgICBlbGVtID0gZWxlbSh0aGlzLCBjb250ZXh0LCBudWxsLCB7YXV0bzogYXV0bywgZmlsdGVyczogZmlsdGVyc30pOwogICAgaWYgKGVsZW0gaW5zdGFuY2VvZiBDaHVuaykgewogICAgICByZXR1cm4gZWxlbTsKICAgIH0KICB9CiAgaWYgKCFkdXN0LmlzRW1wdHkoZWxlbSkpIHsKICAgIHJldHVybiB0aGlzLndyaXRlKGR1c3QuZmlsdGVyKGVsZW0sIGF1dG8sIGZpbHRlcnMpKTsKICB9IGVsc2UgewogICAgcmV0dXJuIHRoaXM7CiAgfQp9OwoKQ2h1bmsucHJvdG90eXBlLnNlY3Rpb24gPSBmdW5jdGlvbihlbGVtLCBjb250ZXh0LCBib2RpZXMsIHBhcmFtcykgewogIGlmICh0eXBlb2YgZWxlbSA9PT0gImZ1bmN0aW9uIikgewogICAgZWxlbSA9IGVsZW0odGhpcywgY29udGV4dCwgYm9kaWVzLCBwYXJhbXMpOwogICAgaWYgKGVsZW0gaW5zdGFuY2VvZiBDaHVuaykgewogICAgICByZXR1cm4gZWxlbTsKICAgIH0KICB9CgogIHZhciBib2R5ID0gYm9kaWVzLmJsb2NrLAogICAgICBza2lwID0gYm9kaWVzWydlbHNlJ107CgogIGlmIChwYXJhbXMpIHsKICAgIGNvbnRleHQgPSBjb250ZXh0LnB1c2gocGFyYW1zKTsKICB9CgogIGlmIChkdXN0LmlzQXJyYXkoZWxlbSkpIHsKICAgIGlmIChib2R5KSB7CiAgICAgIHZhciBsZW4gPSBlbGVtLmxlbmd0aCwgY2h1bmsgPSB0aGlzOwogICAgICBmb3IgKHZhciBpPTA7IGk8bGVuOyBpKyspIHsKICAgICAgICBjaHVuayA9IGJvZHkoY2h1bmssIGNvbnRleHQucHVzaChlbGVtW2ldLCBpLCBsZW4pKTsKICAgICAgfQogICAgICByZXR1cm4gY2h1bms7CiAgICB9CiAgfSBlbHNlIGlmIChlbGVtID09PSB0cnVlKSB7CiAgICBpZiAoYm9keSkgcmV0dXJuIGJvZHkodGhpcywgY29udGV4dCk7CiAgfSBlbHNlIGlmIChlbGVtIHx8IGVsZW0gPT09IDApIHsKICAgIGlmIChib2R5KSByZXR1cm4gYm9keSh0aGlzLCBjb250ZXh0LnB1c2goZWxlbSkpOwogIH0gZWxzZSBpZiAoc2tpcCkgewogICAgcmV0dXJuIHNraXAodGhpcywgY29udGV4dCk7CiAgfQogIHJldHVybiB0aGlzOwp9OwoKQ2h1bmsucHJvdG90eXBlLmV4aXN0cyA9IGZ1bmN0aW9uKGVsZW0sIGNvbnRleHQsIGJvZGllcykgewogIHZhciBib2R5ID0gYm9kaWVzLmJsb2NrLAogICAgICBza2lwID0gYm9kaWVzWydlbHNlJ107CgogIGlmICghZHVzdC5pc0VtcHR5KGVsZW0pKSB7CiAgICBpZiAoYm9keSkgcmV0dXJuIGJvZHkodGhpcywgY29udGV4dCk7CiAgfSBlbHNlIGlmIChza2lwKSB7CiAgICByZXR1cm4gc2tpcCh0aGlzLCBjb250ZXh0KTsKICB9CiAgcmV0dXJuIHRoaXM7Cn0KCkNodW5rLnByb3RvdHlwZS5ub3RleGlzdHMgPSBmdW5jdGlvbihlbGVtLCBjb250ZXh0LCBib2RpZXMpIHsKICB2YXIgYm9keSA9IGJvZGllcy5ibG9jaywKICAgICAgc2tpcCA9IGJvZGllc1snZWxzZSddOwoKICBpZiAoZHVzdC5pc0VtcHR5KGVsZW0pKSB7CiAgICBpZiAoYm9keSkgcmV0dXJuIGJvZHkodGhpcywgY29udGV4dCk7CiAgfSBlbHNlIGlmIChza2lwKSB7CiAgICByZXR1cm4gc2tpcCh0aGlzLCBjb250ZXh0KTsKICB9CiAgcmV0dXJuIHRoaXM7Cn0KCkNodW5rLnByb3RvdHlwZS5ibG9jayA9IGZ1bmN0aW9uKGVsZW0sIGNvbnRleHQsIGJvZGllcykgewogIHZhciBib2R5ID0gYm9kaWVzLmJsb2NrOwoKICBpZiAoZWxlbSkgewogICAgYm9keSA9IGVsZW07CiAgfQoKICBpZiAoYm9keSkgewogICAgcmV0dXJuIGJvZHkodGhpcywgY29udGV4dCk7CiAgfQogIHJldHVybiB0aGlzOwp9OwoKQ2h1bmsucHJvdG90eXBlLnBhcnRpYWwgPSBmdW5jdGlvbihlbGVtLCBjb250ZXh0KSB7CiAgaWYgKHR5cGVvZiBlbGVtID09PSAiZnVuY3Rpb24iKSB7CiAgICByZXR1cm4gdGhpcy5jYXB0dXJlKGVsZW0sIGNvbnRleHQsIGZ1bmN0aW9uKG5hbWUsIGNodW5rKSB7CiAgICAgIGR1c3QubG9hZChuYW1lLCBjaHVuaywgY29udGV4dCkuZW5kKCk7CiAgICB9KTsKICB9CiAgcmV0dXJuIGR1c3QubG9hZChlbGVtLCB0aGlzLCBjb250ZXh0KTsKfTsKCkNodW5rLnByb3RvdHlwZS5oZWxwZXIgPSBmdW5jdGlvbihuYW1lLCBjb250ZXh0LCBib2RpZXMsIHBhcmFtcykgewogIHJldHVybiBkdXN0LmhlbHBlcnNbbmFtZV0odGhpcywgY29udGV4dCwgYm9kaWVzLCBwYXJhbXMpOwp9OwoKQ2h1bmsucHJvdG90eXBlLmNhcHR1cmUgPSBmdW5jdGlvbihib2R5LCBjb250ZXh0LCBjYWxsYmFjaykgewogIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihjaHVuaykgewogICAgdmFyIHN0dWIgPSBuZXcgU3R1YihmdW5jdGlvbihlcnIsIG91dCkgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgY2h1bmsuc2V0RXJyb3IoZXJyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFjayhvdXQsIGNodW5rKTsKICAgICAgfQogICAgfSk7CiAgICBib2R5KHN0dWIuaGVhZCwgY29udGV4dCkuZW5kKCk7CiAgfSk7Cn07CgpDaHVuay5wcm90b3R5cGUuc2V0RXJyb3IgPSBmdW5jdGlvbihlcnIpIHsKICB0aGlzLmVycm9yID0gZXJyOwogIHRoaXMucm9vdC5mbHVzaCgpOwogIHJldHVybiB0aGlzOwp9OwoKZHVzdC5oZWxwZXJzID0gewogIHNlcDogZnVuY3Rpb24oY2h1bmssIGNvbnRleHQsIGJvZGllcykgewogICAgaWYgKGNvbnRleHQuc3RhY2suaW5kZXggPT09IGNvbnRleHQuc3RhY2sub2YgLSAxKSB7CiAgICAgIHJldHVybiBjaHVuazsKICAgIH0KICAgIHJldHVybiBib2RpZXMuYmxvY2soY2h1bmssIGNvbnRleHQpOwogIH0sCgogIGlkeDogZnVuY3Rpb24oY2h1bmssIGNvbnRleHQsIGJvZGllcykgewogICAgcmV0dXJuIGJvZGllcy5ibG9jayhjaHVuaywgY29udGV4dC5wdXNoKGNvbnRleHQuc3RhY2suaW5kZXgpKTsKICB9Cn0KCmZ1bmN0aW9uIFRhcChoZWFkLCB0YWlsKSB7CiAgdGhpcy5oZWFkID0gaGVhZDsKICB0aGlzLnRhaWwgPSB0YWlsOwp9CgpUYXAucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbih0YXApIHsKICByZXR1cm4gbmV3IFRhcCh0YXAsIHRoaXMpOwp9OwoKVGFwLnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgdmFyIHRhcCA9IHRoaXM7CgogIHdoaWxlKHRhcCkgewogICAgdmFsdWUgPSB0YXAuaGVhZCh2YWx1ZSk7CiAgICB0YXAgPSB0YXAudGFpbDsKICB9CiAgcmV0dXJuIHZhbHVlOwp9OwoKdmFyIEhDSEFSUyA9IG5ldyBSZWdFeHAoL1smPD5cIl0vKSwKICAgIEFNUCAgICA9IC8mL2csCiAgICBMVCAgICAgPSAvPC9nLAogICAgR1QgICAgID0gLz4vZywKICAgIFFVT1QgICA9IC9cIi9nOwoKZHVzdC5lc2NhcGVIdG1sID0gZnVuY3Rpb24ocykgewogIGlmICh0eXBlb2YgcyA9PT0gInN0cmluZyIpIHsKICAgIGlmICghSENIQVJTLnRlc3QocykpIHsKICAgICAgcmV0dXJuIHM7CiAgICB9CiAgICByZXR1cm4gcy5yZXBsYWNlKEFNUCwnJmFtcDsnKS5yZXBsYWNlKExULCcmbHQ7JykucmVwbGFjZShHVCwnJmd0OycpLnJlcGxhY2UoUVVPVCwnJnF1b3Q7Jyk7CiAgfQogIHJldHVybiBzOwp9OwoKdmFyIEJTID0gL1xcL2csCiAgICBDUiA9IC9cci9nLAogICAgTFMgPSAvXHUyMDI4L2csCiAgICBQUyA9IC9cdTIwMjkvZywKICAgIE5MID0gL1xuL2csCiAgICBMRiA9IC9cZi9nLAogICAgU1EgPSAvJy9nLAogICAgRFEgPSAvIi9nLAogICAgVEIgPSAvXHQvZzsKCmR1c3QuZXNjYXBlSnMgPSBmdW5jdGlvbihzKSB7CiAgaWYgKHR5cGVvZiBzID09PSAic3RyaW5nIikgewogICAgcmV0dXJuIHMKICAgICAgLnJlcGxhY2UoQlMsICdcXFxcJykKICAgICAgLnJlcGxhY2UoRFEsICdcXCInKQogICAgICAucmVwbGFjZShTUSwgIlxcJyIpCiAgICAgIC5yZXBsYWNlKENSLCAnXFxyJykKICAgICAgLnJlcGxhY2UoTFMsICdcXHUyMDI4JykKICAgICAgLnJlcGxhY2UoUFMsICdcXHUyMDI5JykKICAgICAgLnJlcGxhY2UoTkwsICdcXG4nKQogICAgICAucmVwbGFjZShMRiwgJ1xcZicpCiAgICAgIC5yZXBsYWNlKFRCLCAiXFx0Iik7CiAgfQogIHJldHVybiBzOwp9OwoKfSkoZHVzdCk7CgppZiAodHlwZW9mIGV4cG9ydHMgIT09ICJ1bmRlZmluZWQiKSB7CiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAidW5kZWZpbmVkIikgewogICAgICByZXF1aXJlKCcuL3NlcnZlcicpKGR1c3QpOwogIH0KICBtb2R1bGUuZXhwb3J0cyA9IGR1c3Q7Cn0KKGZ1bmN0aW9uKCl7ZHVzdC5yZWdpc3RlcigiNDA0Lmh0bWwiLGJvZHlfMCk7ZnVuY3Rpb24gYm9keV8wKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIjxoMT40MDQgLSBOb3QgRm91bmQ8L2gxPiIpLndyaXRlKCJcbiIpO31yZXR1cm4gYm9keV8wO30pKCk7KGZ1bmN0aW9uKCl7ZHVzdC5yZWdpc3RlcigiYWxsX3VzZXJzLmh0bWwiLGJvZHlfMCk7ZnVuY3Rpb24gYm9keV8wKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIjxoMT5ub3RlLW8tcmFtYSB1c2VyczwvaDE+Iikud3JpdGUoIlxuIikud3JpdGUoIlxuIikud3JpdGUoIjx1bCBjbGFzcz1cInVzZXJzXCI+Iikud3JpdGUoIlxuICAiKS5zZWN0aW9uKGN0eC5nZXQoInVzZXJzIiksY3R4LHsiYmxvY2siOmJvZHlfMX0sbnVsbCkud3JpdGUoIlxuIikud3JpdGUoIjwvdWw+Iikud3JpdGUoIlxuIik7fWZ1bmN0aW9uIGJvZHlfMShjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPGxpIGNsYXNzPVwidXNlci1saW5lXCI+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGgyIGNsYXNzPVwidXNlci1saW5lXCI+PGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldCgidXNlcl9pZCIpLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiXCIgY2xhc3M9XCJ1c2VyX2lkXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoInVzZXJfaWQiKSxjdHgsImgiKS53cml0ZSgiPC9hPjwvaDI+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz0ndXBkYXRlZC1saW5lJz4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiVXBkYXRlZCA8YWJiciBjbGFzcz1cInVwZGF0ZWRfdGltZSBfdGltZWFnb1wiIHRpdGxlPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoInVwZGF0ZWRfdGltZSIpLGN0eCwiaCIpLndyaXRlKCJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgidXBkYXRlZF90aW1lIiksY3R4LCJoIikud3JpdGUoIjwvYWJicj4uIikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L2xpPiIpLndyaXRlKCJcbiAgICAiKTt9cmV0dXJuIGJvZHlfMDt9KSgpOyhmdW5jdGlvbigpe2R1c3QucmVnaXN0ZXIoImF1dGhvcnMuaHRtbCIsYm9keV8wKTt2YXIgYmxvY2tzPXt3aGF0OmJvZHlfMX07ZnVuY3Rpb24gYm9keV8wKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLnBhcnRpYWwoInVzZXJfaGVhZGVyLmh0bWwiLGN0eCkud3JpdGUoIlxuIikud3JpdGUoIlxuIikud3JpdGUoIjxkaXYgY2xhc3M9XCJuYXZpZ2F0aW9uXCI+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCItLSIpLndyaXRlKCJcbiAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJibG9jayI6Ym9keV81fSxudWxsKS53cml0ZSgiXG4gICAgIikuZXhpc3RzKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LHsiYmxvY2siOmJvZHlfOH0sbnVsbCkud3JpdGUoIlxuIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLnNlY3Rpb24oY3R4LmdldCgiYXV0aG9ycyIpLGN0eCx7ImJsb2NrIjpib2R5XzExfSxudWxsKS53cml0ZSgiXG4iKS5ub3RleGlzdHMoY3R4LmdldCgiYXV0aG9ycyIpLGN0eCx7ImJsb2NrIjpib2R5XzE2fSxudWxsKS53cml0ZSgiXG4iKTt9ZnVuY3Rpb24gYm9keV8xKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV9hdXRob3IiKSxjdHgseyJlbHNlIjpib2R5XzIsImJsb2NrIjpib2R5XzR9LG51bGwpO31mdW5jdGlvbiBib2R5XzIoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJibG9jayI6Ym9keV8zfSxudWxsKS53cml0ZSgiYXV0aG9ycyIpO31mdW5jdGlvbiBib2R5XzMoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsucmVmZXJlbmNlKGN0eC5nZXRQYXRoKGZhbHNlLFsiYXV0aG9ycyIsImxlbmd0aCJdKSxjdHgsImgiKS53cml0ZSgiICIpO31mdW5jdGlvbiBib2R5XzQoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoInNvdXJjZXMiKTt9ZnVuY3Rpb24gYm9keV81KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJibG9jayI6Ym9keV82fSxudWxsKS53cml0ZSgiXG4gICAgIik7fWZ1bmN0aW9uIGJvZHlfNihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgic2VlICIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiL3NvdXJjZXNcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCwiaCIpLndyaXRlKCIncyBzb3VyY2VzPC9hPiBvciIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiL3RhZ3NcIj50YWdzPC9hPiIpLmV4aXN0cyhjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCx7ImJsb2NrIjpib2R5Xzd9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNyhjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiOyA8YnIgLz4tLSAiKTt9ZnVuY3Rpb24gYm9keV84KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoImdvIHRvICIpLndyaXRlKCJcbiAgICAgICAgIikubm90ZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfOX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9zb3VyY2VzXCI+IikuZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfMTB9LG51bGwpLndyaXRlKCJzb3VyY2VzPC9hPiBvciIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikucmVmZXJlbmNlKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCIvdGFnc1wiPnRhZ3M8L2E+Iikud3JpdGUoIlxuICAgICIpO31mdW5jdGlvbiBib2R5XzkoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikucmVmZXJlbmNlKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCIvYXV0aG9yc1wiPnlvdXIgYXV0aG9yczwvYT4sIikud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xMChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgieW91ciAiKTt9ZnVuY3Rpb24gYm9keV8xMShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgIikud3JpdGUoIjxoMT4iKS53cml0ZSgiXG4gICAgICAgICIpLnJlZmVyZW5jZShjdHguZ2V0KCJhdXRob3JfbmFtZSIpLGN0eCwiaCIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9oMT4iKS53cml0ZSgiXG4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjx1bCBjbGFzcz1cInNvdXJjZXNcIj4iKS53cml0ZSgiXG4gICAgICAgICIpLnNlY3Rpb24oY3R4LmdldCgic291cmNlcyIpLGN0eCx7ImJsb2NrIjpib2R5XzEyfSxudWxsKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjwvdWw+Iikud3JpdGUoIlxuIik7fWZ1bmN0aW9uIGJvZHlfMTIoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxsaSBjbGFzcz1cInNvdXJjZVwiPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz1cInRpdGxlLWxpbmVcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0KCJ1c2VyX2lkIiksY3R4LCJoIixbInVjIl0pLndyaXRlKCIvc291cmNlcy8iKS5yZWZlcmVuY2UoY3R4LmdldCgicGFnZV9pZCIpLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIlRJVExFIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInBhZ2VfdGl0bGUiKSxjdHgsImgiKS5ub3RleGlzdHMoY3R4LmdldCgiVElUTEUiKSxjdHgseyJibG9jayI6Ym9keV8xM30sbnVsbCkud3JpdGUoIjwvYT4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIllFQVIiKSxjdHgseyJibG9jayI6Ym9keV8xNX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8ZGl2IGNsYXNzPVwiY2l0YXRpb25cIj4iKS5wYXJ0aWFsKCJiaWJsaW9ncmFwaGljX2RldGFpbHMuaHRtbCIsY3R4KS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjwvbGk+Iikud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xMyhjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay5ub3RleGlzdHMoY3R4LmdldCgicGFnZV90aXRsZSIpLGN0eCx7ImJsb2NrIjpib2R5XzE0fSxudWxsKTt9ZnVuY3Rpb24gYm9keV8xNChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgidW50aXRsZWQiKTt9ZnVuY3Rpb24gYm9keV8xNShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiKDxzcGFuIGNsYXNzPVwieWVhclwiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJZRUFSIiksY3R4LCJoIikud3JpdGUoIjwvc3Bhbj4pIik7fWZ1bmN0aW9uIGJvZHlfMTYoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICIpLm5vdGV4aXN0cyhjdHguZ2V0KCJxdWVyeV9hdXRob3IiKSxjdHgseyJibG9jayI6Ym9keV8xN30sbnVsbCkud3JpdGUoIlxuIik7fWZ1bmN0aW9uIGJvZHlfMTcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCx7ImJsb2NrIjpib2R5XzE4fSxudWxsKS53cml0ZSgiXG4gICAgIik7fWZ1bmN0aW9uIGJvZHlfMTgoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxwPiIpLmV4aXN0cyhjdHguZ2V0KCJpc191c2Vyc19vd25fcGFnZSIpLGN0eCx7ImVsc2UiOmJvZHlfMTksImJsb2NrIjpib2R5XzIwfSxudWxsKS53cml0ZSgiIG5vIHNvdXJjZXMgd2l0aCBhdXRob3JzIHlldC48L2E+Iikud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xOShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCwiaCIpLndyaXRlKCIgaGFzIik7fWZ1bmN0aW9uIGJvZHlfMjAoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIllvdSBoYXZlIik7fXJldHVybiBib2R5XzA7fSkoKTsoZnVuY3Rpb24oKXtkdXN0LnJlZ2lzdGVyKCJiYXNlLmh0bWwiLGJvZHlfMCk7ZnVuY3Rpb24gYm9keV8wKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIjwhRE9DVFlQRSBodG1sIFBVQkxJQyBcIi0vL1czQy8vRFREIFhIVE1MIDEuMCBTdHJpY3QvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9UUi94aHRtbDEvRFREL3hodG1sMS1zdHJpY3QuZHRkXCI+ICIpLndyaXRlKCJcbiIpLndyaXRlKCI8aHRtbCB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiB4bWw6bGFuZz1cImVuXCIgbGFuZz1cImVuXCI+ICIpLndyaXRlKCJcbiAgIikud3JpdGUoIjxoZWFkPiAiKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxtZXRhIGh0dHAtZXF1aXY9XCJDb250ZW50LVR5cGVcIiBjb250ZW50PVwidGV4dC9odG1sOyBjaGFyc2V0PVVURi04XCIgLz4gIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi9zdGF0aWMvc3R5bGUuY3NzXCIgLz4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjx0aXRsZT4iKS5yZWZlcmVuY2UoY3R4LmdldCgidGl0bGUiKSxjdHgsImgiKS53cml0ZSgiPC90aXRsZT4gIikud3JpdGUoIlxuICAiKS53cml0ZSgiPC9oZWFkPiAiKS53cml0ZSgiXG4gICIpLndyaXRlKCI8Ym9keT4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8IS0tIHNlc3Npb24gbWFuYWdlbWVudCAtLT4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxkaXYgaWQ9XCJzZXNzaW9uLWNvbnRhaW5lclwiPiIpLndyaXRlKCJcbiAgICAgICIpLndyaXRlKCI8ZGl2IGlkPVwibnJhbWFfbG9nb1wiPjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCJcIj5Ob3RlLW8tcmFtYTwvYT48L2Rpdj4iKS53cml0ZSgiXG4gICAgICAiKS5wYXJ0aWFsKCJzZXNzaW9uLmh0bWwiLGN0eCkud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxkaXYgaWQ9XCJjb250ZW50XCI+Iikud3JpdGUoIlxuICAgICAgIikucmVmZXJlbmNlKGN0eC5nZXQoImNvbnRlbnQiKSxjdHgsImgiLFsicyJdKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHNjcmlwdCBzcmM9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvc3RhdGljL2pzL2pxdWVyeS0xLjUuMi5taW4uanNcIj48L3NjcmlwdD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxzY3JpcHQgc3JjPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3N0YXRpYy9qcy9qcXVlcnktdWkubWluLmpzXCI+PC9zY3JpcHQ+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8c2NyaXB0IHNyYz1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi9zdGF0aWMvanMvanNvbjIuanNcIj48L3NjcmlwdD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxzY3JpcHQgc3JjPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3N0YXRpYy9qcy9qcXVlcnkuc2ltcGxlbW9kYWwtMS40LjEuanNcIj48L3NjcmlwdD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxzY3JpcHQgc3JjPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3N0YXRpYy9qcy9qcXVlcnkuYXV0b2dyb3ctdGV4dGFyZWEuanNcIj48L3NjcmlwdD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxzY3JpcHQgc3JjPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3N0YXRpYy9qcy9qcXVlcnkuc29ydGxpc3QuanNcIj48L3NjcmlwdD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxzY3JpcHQgc3JjPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3N0YXRpYy9qcy9qcXVlcnkudGltZWFnby5qc1wiPjwvc2NyaXB0PiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHNjcmlwdCBzcmM9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvc3RhdGljL2pzL2pxdWVyeS5qcWNsb3VkLm1pbi5qc1wiPjwvc2NyaXB0PiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHNjcmlwdCBzcmM9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIva2Fuc28uanNcIj48L3NjcmlwdD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIlxuICAiKS53cml0ZSgiPC9ib2R5PiIpLndyaXRlKCJcbiIpLndyaXRlKCI8L2h0bWw+Iikud3JpdGUoIlxuIik7fXJldHVybiBib2R5XzA7fSkoKTsoZnVuY3Rpb24oKXtkdXN0LnJlZ2lzdGVyKCJiaWJsaW9ncmFwaGljX2RldGFpbHMuaHRtbCIsYm9keV8wKTtmdW5jdGlvbiBib2R5XzAoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiPGRpdiBjbGFzcz1cImJpYmxpb2dyYXBoaWMtZGV0YWlsc1wiPiIpLndyaXRlKCJcbiAgICAiKS5leGlzdHMoY3R4LmdldCgiQVVUSE9SIiksY3R4LHsiYmxvY2siOmJvZHlfMX0sbnVsbCkud3JpdGUoIlxuICAgICIpLmV4aXN0cyhjdHguZ2V0KCJKT1VSTkFMIiksY3R4LHsiYmxvY2siOmJvZHlfNX0sbnVsbCkud3JpdGUoIlxuICAgICIpLmV4aXN0cyhjdHguZ2V0KCJCT09LVElUTEUiKSxjdHgseyJibG9jayI6Ym9keV83fSxudWxsKS53cml0ZSgiXG4gICAgIikuZXhpc3RzKGN0eC5nZXQoInVybCIpLGN0eCx7ImJsb2NrIjpib2R5XzEwfSxudWxsKS53cml0ZSgiXG4gICAgIikuZXhpc3RzKGN0eC5nZXQoInVwZGF0ZWRfdGltZSIpLGN0eCx7ImJsb2NrIjpib2R5XzExfSxudWxsKS53cml0ZSgiXG4iKS53cml0ZSgiPC9kaXY+Iik7fWZ1bmN0aW9uIGJvZHlfMShjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjxkaXYgY2xhc3M9XCJhdXRob3JzXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikuc2VjdGlvbihjdHguZ2V0KCJBVVRIT1IiKSxjdHgseyJibG9jayI6Ym9keV8yfSxudWxsKS53cml0ZSgiLiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAiKTt9ZnVuY3Rpb24gYm9keV8yKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV91c2VyX3VybCIpLGN0eCwiaCIpLndyaXRlKCIvYXV0aG9ycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgodHJ1ZSxbXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCJjbGFzcz1cImF1dGhvciBhdXRob3JfIikuaGVscGVyKCJpZHgiLGN0eCx7ImJsb2NrIjpib2R5XzN9LG51bGwpLndyaXRlKCJcIiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIj4iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgodHJ1ZSxbXSksY3R4LCJoIikud3JpdGUoIjwvYT4iKS5oZWxwZXIoInNlcCIsY3R4LHsiYmxvY2siOmJvZHlfNH0sbnVsbCk7fWZ1bmN0aW9uIGJvZHlfMyhjaGssY3R4KXtyZXR1cm4gY2hrLnJlZmVyZW5jZShjdHguZ2V0UGF0aCh0cnVlLFtdKSxjdHgsImgiKTt9ZnVuY3Rpb24gYm9keV80KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIiBhbmQgIik7fWZ1bmN0aW9uIGJvZHlfNShjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjxkaXY+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxzcGFuIGNsYXNzPVwiam91cm5hbFwiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJKT1VSTkFMIiksY3R4LCJoIikud3JpdGUoIjwvc3Bhbj4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS5yZWZlcmVuY2UoY3R4LmdldCgiVk9MVU1FIiksY3R4LCJoIikud3JpdGUoIigiKS5yZWZlcmVuY2UoY3R4LmdldCgiTlVNQkVSIiksY3R4LCJoIikud3JpdGUoIikuIikud3JpdGUoIlxuICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIlBBR0VTIiksY3R4LHsiYmxvY2siOmJvZHlfNn0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICIpO31mdW5jdGlvbiBib2R5XzYoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoInBwLiA8c3BhbiBjbGFzcz1cIlBBR0VTXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIlBBR0VTIiksY3R4LCJoIikud3JpdGUoIjwvc3Bhbj4uIikud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNyhjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjxkaXY+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIkluIDxzcGFuIGNsYXNzPVwiYm9va3RpdGxlXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIkJPT0tUSVRMRSIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIkVESVRPUiIpLGN0eCx7ImJsb2NrIjpib2R5Xzh9LG51bGwpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz1cInB1Ymxpc2hlclwiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJQVUJMSVNIRVIiKSxjdHgsImgiKS53cml0ZSgiPC9zcGFuPjoiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPHNwYW4gY2xhc3M9XCJhZGRyZXNzXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIkFERFJFU1MiKSxjdHgsImgiKS53cml0ZSgiPC9zcGFuPi4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgiUEFHRVMiKSxjdHgseyJibG9jayI6Ym9keV85fSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4gICAgIik7fWZ1bmN0aW9uIGJvZHlfOChjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiKGVkcy4pIDxzcGFuIGNsYXNzPVwiZWRpdG9yXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIkVESVRPUiIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+LiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzkoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoInBwLiA8c3BhbiBjbGFzcz1cIlBBR0VTXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIlBBR0VTIiksY3R4LCJoIikud3JpdGUoIjwvc3Bhbj4uIikud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMTAoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8ZGl2PiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoInVybCIpLGN0eCwiaCIpLndyaXRlKCJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cInRpdGxlXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoInVybCIpLGN0eCwiaCIpLndyaXRlKCI8L2E+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICIpO31mdW5jdGlvbiBib2R5XzExKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGRpdj4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiVXBkYXRlZCA8YWJiciBjbGFzcz1cIl90aW1lYWdvXCIgdGl0bGU9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgidXBkYXRlZF90aW1lIiksY3R4LCJoIikud3JpdGUoIlwiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJ1cGRhdGVkX3RpbWUiKSxjdHgsImgiKS53cml0ZSgiPC9hYmJyPi4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4gICAgIik7fXJldHVybiBib2R5XzA7fSkoKTsoZnVuY3Rpb24oKXtkdXN0LnJlZ2lzdGVyKCJiaWJsaW9ncmFwaGljX2RldGFpbHNfY29tcGFjdC5odG1sIixib2R5XzApO2Z1bmN0aW9uIGJvZHlfMChjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCI8ZGl2IGNsYXNzPVwiYmlibGlvZ3JhcGhpYy1kZXRhaWxzIGNvbXBhY3RcIj4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxkaXY+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiJm1kYXNoOyIpLndyaXRlKCJcbiAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIkFVVEhPUiIpLGN0eCx7ImJsb2NrIjpib2R5XzF9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV91c2VyX3VybCIpLGN0eCwiaCIpLndyaXRlKCIvc291cmNlcy8iKS5yZWZlcmVuY2UoY3R4LmdldCgicGFnZV9pZCIpLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikucmVmZXJlbmNlKGN0eC5nZXQoIlRJVExFIiksY3R4LCJoIikubm90ZXhpc3RzKGN0eC5nZXQoIlRJVExFIiksY3R4LHsiYmxvY2siOmJvZHlfNn0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPC9hPiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8ZGl2PiIpLndyaXRlKCJcbiAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIkpPVVJOQUwiKSxjdHgseyJibG9jayI6Ym9keV84fSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJCT09LVElUTEUiKSxjdHgseyJibG9jayI6Ym9keV8xMH0sbnVsbCkud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxkaXY+Iikud3JpdGUoIlxuICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgidXJsIiksY3R4LHsiYmxvY2siOmJvZHlfMTN9LG51bGwpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICIpLmV4aXN0cyhjdHguZ2V0KCJ1cGRhdGVkX3RpbWUiKSxjdHgseyJibG9jayI6Ym9keV8xNH0sbnVsbCkud3JpdGUoIlxuIikud3JpdGUoIjwvZGl2PiIpO31mdW5jdGlvbiBib2R5XzEoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPHNwYW4gY2xhc3M9XCJhdXRob3JzXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLnNlY3Rpb24oY3R4LmdldCgiQVVUSE9SIiksY3R4LHsiYmxvY2siOmJvZHlfMn0sbnVsbCkud3JpdGUoIi4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPC9zcGFuPiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJZRUFSIiksY3R4LHsiYmxvY2siOmJvZHlfNX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8yKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV91c2VyX3VybCIpLGN0eCwiaCIpLndyaXRlKCIvYXV0aG9ycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgodHJ1ZSxbXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiY2xhc3M9XCJhdXRob3IgYXV0aG9yXyIpLmhlbHBlcigiaWR4IixjdHgseyJibG9jayI6Ym9keV8zfSxudWxsKS53cml0ZSgiXCIiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPiIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aCh0cnVlLFtdKSxjdHgsImgiKS53cml0ZSgiPC9hPiIpLmhlbHBlcigic2VwIixjdHgseyJibG9jayI6Ym9keV80fSxudWxsKTt9ZnVuY3Rpb24gYm9keV8zKGNoayxjdHgpe3JldHVybiBjaGsucmVmZXJlbmNlKGN0eC5nZXRQYXRoKHRydWUsW10pLGN0eCwiaCIpO31mdW5jdGlvbiBib2R5XzQoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiIGFuZCAiKTt9ZnVuY3Rpb24gYm9keV81KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIig8c3BhbiBjbGFzcz1cInllYXJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiWUVBUiIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+KSIpO31mdW5jdGlvbiBib2R5XzYoY2hrLGN0eCl7cmV0dXJuIGNoay5yZWZlcmVuY2UoY3R4LmdldCgicGFnZV90aXRsZSIpLGN0eCwiaCIpLm5vdGV4aXN0cyhjdHguZ2V0KCJwYWdlX3RpdGxlIiksY3R4LHsiYmxvY2siOmJvZHlfN30sbnVsbCk7fWZ1bmN0aW9uIGJvZHlfNyhjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJ1bnRpdGxlZCIpO31mdW5jdGlvbiBib2R5XzgoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPHNwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz1cImpvdXJuYWxcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiSk9VUk5BTCIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLnJlZmVyZW5jZShjdHguZ2V0KCJWT0xVTUUiKSxjdHgsImgiKS53cml0ZSgiKCIpLnJlZmVyZW5jZShjdHguZ2V0KCJOVU1CRVIiKSxjdHgsImgiKS53cml0ZSgiKS4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIlBBR0VTIiksY3R4LHsiYmxvY2siOmJvZHlfOX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjwvc3Bhbj4iKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzkoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCJwcC4gPHNwYW4gY2xhc3M9XCJQQUdFU1wiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJQQUdFUyIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+LiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xMChjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8c3Bhbj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIkluIDxzcGFuIGNsYXNzPVwiYm9va3RpdGxlXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIkJPT0tUSVRMRSIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJFRElUT1IiKSxjdHgseyJibG9jayI6Ym9keV8xMX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz1cInB1Ymxpc2hlclwiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJQVUJMSVNIRVIiKSxjdHgsImgiKS53cml0ZSgiPC9zcGFuPjoiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxzcGFuIGNsYXNzPVwiYWRkcmVzc1wiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJBRERSRVNTIiksY3R4LCJoIikud3JpdGUoIjwvc3Bhbj4uIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJQQUdFUyIpLGN0eCx7ImJsb2NrIjpib2R5XzEyfSxudWxsKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPC9zcGFuPiIpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMTEoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCIoZWRzLikgPHNwYW4gY2xhc3M9XCJlZGl0b3JcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiRURJVE9SIiksY3R4LCJoIikud3JpdGUoIjwvc3Bhbj4uIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzEyKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgicHAuIDxzcGFuIGNsYXNzPVwiUEFHRVNcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiUEFHRVMiKSxjdHgsImgiKS53cml0ZSgiPC9zcGFuPi4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMTMoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPHNwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoInVybCIpLGN0eCwiaCIpLndyaXRlKCJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cInRpdGxlXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoInVybCIpLGN0eCwiaCIpLndyaXRlKCI8L2E+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjwvc3Bhbj4iKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzE0KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGRpdj4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiVXBkYXRlZCA8YWJiciBjbGFzcz1cIl90aW1lYWdvXCIgdGl0bGU9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgidXBkYXRlZF90aW1lIiksY3R4LCJoIikud3JpdGUoIlwiPiIpLnJlZmVyZW5jZShjdHguZ2V0KCJ1cGRhdGVkX3RpbWUiKSxjdHgsImgiKS53cml0ZSgiPC9hYmJyPi4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4gICAgIik7fXJldHVybiBib2R5XzA7fSkoKTsoZnVuY3Rpb24oKXtkdXN0LnJlZ2lzdGVyKCJmbG93Lmh0bWwiLGJvZHlfMCk7dmFyIGJsb2Nrcz17d2hhdDpib2R5XzF9O2Z1bmN0aW9uIGJvZHlfMChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay5wYXJ0aWFsKCJ1c2VyX2hlYWRlci5odG1sIixjdHgpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCI8ZGl2IGNsYXNzPVwibmF2aWdhdGlvblwiID4iKS53cml0ZSgiXG4gICAgIikubm90ZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfMn0sbnVsbCkud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzExLCJibG9jayI6Ym9keV8xM30sbnVsbCkud3JpdGUoIlxuIikud3JpdGUoIlxuIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV90YWciKSxjdHgseyJibG9jayI6Ym9keV8xOH0sbnVsbCkud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLnNlY3Rpb24oY3R4LmdldCgicXVvdGVzIiksY3R4LHsiYmxvY2siOmJvZHlfMTl9LG51bGwpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLnBhcnRpYWwoImZvb3Rlcl9ldmVudC5odG1sIixjdHgpO31mdW5jdGlvbiBib2R5XzEoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIm5vdGVzIik7fWZ1bmN0aW9uIGJvZHlfMihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICIpLmV4aXN0cyhjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCx7ImJsb2NrIjpib2R5XzN9LG51bGwpLndyaXRlKCJcbiAgICAiKTt9ZnVuY3Rpb24gYm9keV8zKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV91c2VyIiksY3R4LHsiZWxzZSI6Ym9keV80LCJibG9jayI6Ym9keV84fSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzQoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLm5vdGV4aXN0cyhjdHguZ2V0KCJub19zb3VyY2VzIiksY3R4LHsiYmxvY2siOmJvZHlfNX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCItLSBzZWUgJmFtcDsgZWRpdCA8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCwiaCIsWyJ1YyJdKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfc291cmNlX3VybCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV90YWdfdXJsIiksY3R4LCJoIikud3JpdGUoIlwiPm9ubHkgeW91ciBub3RlcyAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfdGFnIiksY3R4LHsiYmxvY2siOmJvZHlfNn0sbnVsbCkuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3NvdXJjZSIpLGN0eCx7ImJsb2NrIjpib2R5Xzd9LG51bGwpLndyaXRlKCI8L2E+OyA8YnIgLz4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgid2l0aCB0aGlzIHRhZyIpO31mdW5jdGlvbiBib2R5XzcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIm9uIHRoaXMgc291cmNlIik7fWZ1bmN0aW9uIGJvZHlfOChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIi0tIHNlZSAmYW1wOyBlZGl0IDxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikucmVmZXJlbmNlKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LCJoIixbInVjIl0pLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV9zb3VyY2VfdXJsIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3RhZ191cmwiKSxjdHgsImgiKS53cml0ZSgiXCI+eW91ciBub3RlcyAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfdGFnIiksY3R4LHsiYmxvY2siOmJvZHlfOX0sbnVsbCkuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3NvdXJjZSIpLGN0eCx7ImJsb2NrIjpib2R5XzEwfSxudWxsKS53cml0ZSgiPC9hPjsgPGJyIC8+Iikud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfOShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgid2l0aCB0aGlzIHRhZyIpO31mdW5jdGlvbiBib2R5XzEwKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJvbiB0aGlzIHNvdXJjZSIpO31mdW5jdGlvbiBib2R5XzExKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikuZXhpc3RzKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LHsiYmxvY2siOmJvZHlfMTJ9LG51bGwpLndyaXRlKCJcbiAgICAiKTt9ZnVuY3Rpb24gYm9keV8xMihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiLS0gICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJnbyB0byAiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9zb3VyY2VzXCI+eW91ciBzb3VyY2VzPC9hPiwiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9hdXRob3JzXCI+YXV0aG9yczwvYT4gb3IiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi90YWdzXCI+dGFnczwvYT4gIikud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xMyhjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV91c2VyIiksY3R4LHsiZWxzZSI6Ym9keV8xNCwiYmxvY2siOmJvZHlfMTZ9LG51bGwpLndyaXRlKCJcbiAgICAiKTt9ZnVuY3Rpb24gYm9keV8xNChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgseyJibG9jayI6Ym9keV8xNX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xNShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIi0tICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoImdvIHRvICIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9zb3VyY2VzXCI+eW91ciBzb3VyY2VzPC9hPiwiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikucmVmZXJlbmNlKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCIvYXV0aG9yc1wiPmF1dGhvcnM8L2E+IG9yIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiL3RhZ3NcIj50YWdzPC9hPiAiKS53cml0ZSgiXG4gICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xNihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiLS0gICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJzZWUiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXJfdXJsIiksY3R4LCJoIikud3JpdGUoIi9zb3VyY2VzXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgsImgiKS53cml0ZSgiJ3Mgc291cmNlczwvYT4sIikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV91c2VyX3VybCIpLGN0eCwiaCIpLndyaXRlKCIvYXV0aG9yc1wiPmF1dGhvcnM8L2E+IG9yIikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV91c2VyX3VybCIpLGN0eCwiaCIpLndyaXRlKCIvdGFnc1wiPnRhZ3M8L2E+IikuZXhpc3RzKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LHsiYmxvY2siOmJvZHlfMTd9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMTcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIjsgIik7fWZ1bmN0aW9uIGJvZHlfMTgoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICIpLndyaXRlKCI8aDE+IyIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV90YWciKSxjdHgsImgiKS53cml0ZSgiPC9oMT4iKS53cml0ZSgiXG4iKTt9ZnVuY3Rpb24gYm9keV8xOShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgIikud3JpdGUoIjxkaXYgY2xhc3M9XCJfbnJhbWEtcXVvdGVcIiBpZD1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJoYXNoIiksY3R4LCJoIikud3JpdGUoIlwiID4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8ZGl2IGNsYXNzPVwicXVvdGUtbGluZSBmbG93XCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIlwiPHNwYW4gY2xhc3M9XCJxdW90ZS1jb250ZW50XCI+IikucmVmZXJlbmNlKGN0eC5nZXQoImNvbnRlbnQiKSxjdHgsImgiKS53cml0ZSgiPC9zcGFuPlwiIikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIlxuICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfMjB9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz1cInNvdXJjZS1mb3Itc2luZ2xlLXF1b3RlXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikuc2VjdGlvbihjdHguZ2V0KCJzb3VyY2UiKSxjdHgseyJibG9jayI6Ym9keV8yMX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxkaXYgY2xhc3M9XCJjaXRlZC1ieVwiPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCx7ImJsb2NrIjpib2R5XzIyfSxudWxsKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPHVsIGNsYXNzPVwibm90ZXMgX3NvcnQtbWUgIikubm90ZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfMjV9LG51bGwpLndyaXRlKCJcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS5zZWN0aW9uKGN0eC5nZXQoIm5vdGVzIiksY3R4LHsiYmxvY2siOmJvZHlfMjZ9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjwvdWw+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4iKTt9ZnVuY3Rpb24gYm9keV8yMChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGNsYXNzPVwiYWRkLWEtbm90ZVwiPlsrXTwvYT4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMjEoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLnBhcnRpYWwoImJpYmxpb2dyYXBoaWNfZGV0YWlsc19jb21wYWN0Lmh0bWwiLGN0eCkud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMjIoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiW2NpdGVkIGJ5Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS5zZWN0aW9uKGN0eC5nZXQoInVzZXJzIiksY3R4LHsiYmxvY2siOmJvZHlfMjN9LG51bGwpLndyaXRlKCJdIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzIzKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz0ncXVvdGUtdXNlcl9pZCc+PGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgodHJ1ZSxbXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgodHJ1ZSxbXSksY3R4LCJoIikud3JpdGUoIjwvYT48L3NwYW4+IikuaGVscGVyKCJzZXAiLGN0eCx7ImJsb2NrIjpib2R5XzI0fSxudWxsKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzI0KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCIsICIpO31mdW5jdGlvbiBib2R5XzI1KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJfbm90X3VzZXJfcGFnZSIpO31mdW5jdGlvbiBib2R5XzI2KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGxpIGlkPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoIl9pZCIpLGN0eCwiaCIpLndyaXRlKCJcIiBjbGFzcz1cIl9ucmFtYS1ub3RlXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzI3LCJibG9jayI6Ym9keV8yOX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8L2xpPiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzI3KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpLm5vdGV4aXN0cyhjdHguZ2V0KCJxdWVyeV91c2VyIiksY3R4LHsiYmxvY2siOmJvZHlfMjh9LG51bGwpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz1cIl9ucmFtYS1ub3RlLWNvbnRlbnRcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiY29udGVudCIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8yOChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjxzcGFuIGNsYXNzPSdxdW90ZS11c2VyX2lkJz48YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0KCJ1c2VyX2lkIiksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgidXNlcl9pZCIpLGN0eCwiaCIpLndyaXRlKCI8L2E+PC9zcGFuPl0iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8yOShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPHRleHRhcmVhIGNsYXNzPVwiX25yYW1hLW5vdGUtY29udGVudFwiIHJvd3M9XCIxXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoImNvbnRlbnQiKSxjdHgsImgiKS53cml0ZSgiPC90ZXh0YXJlYT4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpO31yZXR1cm4gYm9keV8wO30pKCk7KGZ1bmN0aW9uKCl7ZHVzdC5yZWdpc3RlcigiZm9vdGVyX2V2ZW50Lmh0bWwiLGJvZHlfMCk7ZnVuY3Rpb24gYm9keV8wKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIjxzY3JpcHQ+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCJpZiggdHlwZW9mICQgIT09ICd1bmRlZmluZWQnICkgeyIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIiQoZG9jdW1lbnQpLnRyaWdnZXIoJ25yYW1hX3BhZ2VfbG9hZGVkJyk7Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCJ9Iikud3JpdGUoIlxuIikud3JpdGUoIjwvc2NyaXB0PiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpO31yZXR1cm4gYm9keV8wO30pKCk7KGZ1bmN0aW9uKCl7ZHVzdC5yZWdpc3RlcigicXVvdGVzLmh0bWwiLGJvZHlfMCk7dmFyIGJsb2Nrcz17d2hhdDpib2R5XzF9O2Z1bmN0aW9uIGJvZHlfMChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay5wYXJ0aWFsKCJ1c2VyX2hlYWRlci5odG1sIixjdHgpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCI8ZGl2IGNsYXNzPVwibmF2aWdhdGlvblwiID4iKS53cml0ZSgiXG4gICAgIikuZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiZWxzZSI6Ym9keV8yLCJibG9jayI6Ym9keV8xNH0sbnVsbCkud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzE3LCJibG9jayI6Ym9keV8xOX0sbnVsbCkud3JpdGUoIlxuIikud3JpdGUoIlxuIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCI8aDE+Iikud3JpdGUoIlxuICAgICIpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV90YWciKSxjdHgseyJibG9jayI6Ym9keV8yNH0sbnVsbCkud3JpdGUoIlxuICAgICIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV9hdXRob3IiKSxjdHgsImgiKS53cml0ZSgiXG4iKS53cml0ZSgiPC9oMT4iKS53cml0ZSgiXG4iKS53cml0ZSgiXG4iKS5zZWN0aW9uKGN0eC5nZXQoInNvdXJjZXMiKSxjdHgseyJibG9jayI6Ym9keV8yNX0sbnVsbCkud3JpdGUoIlxuIikuZXhpc3RzKGN0eC5nZXQoIm5vX3NvdXJjZXMiKSxjdHgseyJibG9jayI6Ym9keV80Nn0sbnVsbCkud3JpdGUoIlxuIikud3JpdGUoIlxuIikucGFydGlhbCgiZm9vdGVyX2V2ZW50Lmh0bWwiLGN0eCk7fWZ1bmN0aW9uIGJvZHlfMShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgibm90ZXMiKTt9ZnVuY3Rpb24gYm9keV8yKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikuZXhpc3RzKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LHsiZWxzZSI6Ym9keV8zLCJibG9jayI6Ym9keV81fSxudWxsKS53cml0ZSgiXG4gICAgIik7fWZ1bmN0aW9uIGJvZHlfMyhjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCx7ImJsb2NrIjpib2R5XzR9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIi0tIHNlZSA8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfc291cmNlX3VybCIpLGN0eCwiaCIpLndyaXRlKCJcIj5ldmVyeW9uZSdzIG5vdGVzIG9uIHRoaXM8L2E+OyIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzUoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJlbHNlIjpib2R5XzYsImJsb2NrIjpib2R5XzExfSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzYoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLm5vdGV4aXN0cyhjdHguZ2V0KCJub19zb3VyY2VzIiksY3R4LHsiZWxzZSI6Ym9keV83LCJibG9jayI6Ym9keV84fSxudWxsKS53cml0ZSgiXG4gICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV83KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV84KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIi0tIHNlZSAmYW1wOyBlZGl0IDxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikucmVmZXJlbmNlKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LCJoIixbInVjIl0pLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV9zb3VyY2VfdXJsIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3RhZ191cmwiKSxjdHgsImgiKS53cml0ZSgiXCI+b25seSB5b3VyIG5vdGVzICIpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV90YWciKSxjdHgseyJibG9jayI6Ym9keV85fSxudWxsKS5leGlzdHMoY3R4LmdldCgicXVlcnlfc291cmNlIiksY3R4LHsiYmxvY2siOmJvZHlfMTB9LG51bGwpLndyaXRlKCI8L2E+OyIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV85KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJ3aXRoIHRoaXMgdGFnIik7fWZ1bmN0aW9uIGJvZHlfMTAoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIm9uIHRoaXMgc291cmNlIik7fWZ1bmN0aW9uIGJvZHlfMTEoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCItLSBzZWUgJmFtcDsgZWRpdCA8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCwiaCIsWyJ1YyJdKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfc291cmNlX3VybCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV90YWdfdXJsIiksY3R4LCJoIikud3JpdGUoIlwiPnlvdXIgbm90ZXMgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3RhZyIpLGN0eCx7ImJsb2NrIjpib2R5XzEyfSxudWxsKS5leGlzdHMoY3R4LmdldCgicXVlcnlfc291cmNlIiksY3R4LHsiYmxvY2siOmJvZHlfMTN9LG51bGwpLndyaXRlKCI8L2E+OyIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzEyKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJ3aXRoIHRoaXMgdGFnIik7fWZ1bmN0aW9uIGJvZHlfMTMoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIm9uIHRoaXMgc291cmNlIik7fWZ1bmN0aW9uIGJvZHlfMTQoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiLS0gc2VlIDxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV90YWdfdXJsIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3NvdXJjZV91cmwiKSxjdHgsImgiKS53cml0ZSgiXCI+ZXZlcnlvbmUncyBub3RlcyAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfdGFnIiksY3R4LHsiYmxvY2siOmJvZHlfMTV9LG51bGwpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV9zb3VyY2UiKSxjdHgseyJibG9jayI6Ym9keV8xNn0sbnVsbCkud3JpdGUoIjwvYT47Iikud3JpdGUoIlxuICAgICIpO31mdW5jdGlvbiBib2R5XzE1KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJ3aXRoIHRoaXMgdGFnIik7fWZ1bmN0aW9uIGJvZHlfMTYoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIm9uIHRoaXMgc291cmNlIik7fWZ1bmN0aW9uIGJvZHlfMTcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAiKS5leGlzdHMoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgseyJibG9jayI6Ym9keV8xOH0sbnVsbCkud3JpdGUoIlxuICAgICIpO31mdW5jdGlvbiBib2R5XzE4KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YnIgLz4tLSAgICAgICAgIikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoImdvIHRvICIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiL3NvdXJjZXNcIj55b3VyIHNvdXJjZXM8L2E+LCIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiL2F1dGhvcnNcIj5hdXRob3JzPC9hPiBvciIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiL3RhZ3NcIj50YWdzPC9hPiAiKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzE5KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJlbHNlIjpib2R5XzIwLCJibG9jayI6Ym9keV8yMn0sbnVsbCkud3JpdGUoIlxuICAgICIpO31mdW5jdGlvbiBib2R5XzIwKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLmV4aXN0cyhjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCx7ImJsb2NrIjpib2R5XzIxfSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzIxKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGJyIC8+LS0gICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiZ28gdG8gIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiL3NvdXJjZXNcIj55b3VyIHNvdXJjZXM8L2E+LCIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9hdXRob3JzXCI+YXV0aG9yczwvYT4gb3IiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikucmVmZXJlbmNlKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCIvdGFnc1wiPnRhZ3M8L2E+ICIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzIyKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YnIgLz4tLSAgICAgICAgIikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoInNlZSIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiL3NvdXJjZXNcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCwiaCIpLndyaXRlKCIncyBzb3VyY2VzPC9hPiwiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXJfdXJsIiksY3R4LCJoIikud3JpdGUoIi9hdXRob3JzXCI+YXV0aG9yczwvYT4gb3IiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXJfdXJsIiksY3R4LCJoIikud3JpdGUoIi90YWdzXCI+dGFnczwvYT4iKS5leGlzdHMoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgseyJibG9jayI6Ym9keV8yM30sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8yMyhjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiOyAiKTt9ZnVuY3Rpb24gYm9keV8yNChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiIyIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV90YWciKSxjdHgsImgiKTt9ZnVuY3Rpb24gYm9keV8yNShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgIikud3JpdGUoIjxoMiBjbGFzcz1cInRpdGxlLWxpbmVcIj4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiL3NvdXJjZXMvIikucmVmZXJlbmNlKGN0eC5nZXQoInBhZ2VfaWQiKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIlwiPiIpLndyaXRlKCJcbiAgICAgICAgIikucmVmZXJlbmNlKGN0eC5nZXQoIlRJVExFIiksY3R4LCJoIikubm90ZXhpc3RzKGN0eC5nZXQoIlRJVExFIiksY3R4LHsiYmxvY2siOmJvZHlfMjZ9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjwvYT4iKS53cml0ZSgiXG4gICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJZRUFSIiksY3R4LHsiYmxvY2siOmJvZHlfMjh9LG51bGwpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9oMj4iKS53cml0ZSgiXG4gICAgIikucGFydGlhbCgiYmlibGlvZ3JhcGhpY19kZXRhaWxzLmh0bWwiLGN0eCkud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz0ncXVvdGVzJz4iKS53cml0ZSgiXG4gICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJxdW90ZXMiKSxjdHgseyJlbHNlIjpib2R5XzI5LCJibG9jayI6Ym9keV8zNH0sbnVsbCkud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4iKTt9ZnVuY3Rpb24gYm9keV8yNihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay5yZWZlcmVuY2UoY3R4LmdldCgicGFnZV90aXRsZSIpLGN0eCwiaCIpLm5vdGV4aXN0cyhjdHguZ2V0KCJwYWdlX3RpdGxlIiksY3R4LHsiYmxvY2siOmJvZHlfMjd9LG51bGwpO31mdW5jdGlvbiBib2R5XzI3KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJ1bnRpdGxlZCIpO31mdW5jdGlvbiBib2R5XzI4KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCIoPHNwYW4gY2xhc3M9XCJ5ZWFyXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoIllFQVIiKSxjdHgsImgiKS53cml0ZSgiPC9zcGFuPikiKTt9ZnVuY3Rpb24gYm9keV8yOShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzMwLCJibG9jayI6Ym9keV8zM30sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8zMChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJlbHNlIjpib2R5XzMxLCJibG9jayI6Ym9keV8zMn0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMzEoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPHA+VGhlcmUgYXJlIG5vIG5vdGVzIG9uIHRoaXMgc291cmNlLjwvcD4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMzIoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPHA+IikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgsImgiKS53cml0ZSgiIGhhcyBub3RlcyBvbiB0aGlzIHNvdXJjZS48L3A+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzMzKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPHA+WW91IGhhdmUgbm8gbm90ZXMgb24gdGhpcyBzb3VyY2UuPC9wPiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzM0KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLnNlY3Rpb24oY3R4LmdldCgicXVvdGVzIiksY3R4LHsiYmxvY2siOmJvZHlfMzV9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMzUoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8ZGl2IGNsYXNzPVwiX25yYW1hLXF1b3RlXCIgaWQ9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiaGFzaCIpLGN0eCwiaCIpLndyaXRlKCJcIiA+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz1cInF1b3RlLWxpbmVcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiXCI8c3BhbiBjbGFzcz1cInF1b3RlLWNvbnRlbnRcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiY29udGVudCIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+XCIiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzM2LCJibG9jayI6Ym9keV80MH0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8dWwgY2xhc3M9XCJub3RlcyBfc29ydC1tZSAiKS5ub3RleGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJibG9jayI6Ym9keV80MX0sbnVsbCkud3JpdGUoIlwiPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpLnNlY3Rpb24oY3R4LmdldCgibm90ZXMiKSxjdHgseyJibG9jayI6Ym9keV80Mn0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC91bD4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzM2KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCx7ImJsb2NrIjpib2R5XzM3fSxudWxsKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMzcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiW2NpdGVkIGJ5Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS5zZWN0aW9uKGN0eC5nZXQoInVzZXJzIiksY3R4LHsiYmxvY2siOmJvZHlfMzh9LG51bGwpLndyaXRlKCJdIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzM4KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz0ncXVvdGUtdXNlcl9pZCc+PGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgodHJ1ZSxbXSksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgodHJ1ZSxbXSksY3R4LCJoIikud3JpdGUoIjwvYT48L3NwYW4+IikuaGVscGVyKCJzZXAiLGN0eCx7ImJsb2NrIjpib2R5XzM5fSxudWxsKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzM5KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCIsICIpO31mdW5jdGlvbiBib2R5XzQwKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGEgY2xhc3M9XCJhZGQtYS1ub3RlXCI+WytdPC9hPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzQxKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJfbm90X3VzZXJfcGFnZSIpO31mdW5jdGlvbiBib2R5XzQyKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGxpIGlkPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoIl9pZCIpLGN0eCwiaCIpLndyaXRlKCJcIiBjbGFzcz1cIl9ucmFtYS1ub3RlXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzQzLCJibG9jayI6Ym9keV80NX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8L2xpPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzQzKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpLm5vdGV4aXN0cyhjdHguZ2V0KCJxdWVyeV91c2VyIiksY3R4LHsiYmxvY2siOmJvZHlfNDR9LG51bGwpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz1cIl9ucmFtYS1ub3RlLWNvbnRlbnRcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiY29udGVudCIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV80NChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjxzcGFuIGNsYXNzPSdxdW90ZS11c2VyX2lkJz48YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0KCJ1c2VyX2lkIiksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgidXNlcl9pZCIpLGN0eCwiaCIpLndyaXRlKCI8L2E+PC9zcGFuPl0iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV80NShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPHRleHRhcmVhIGNsYXNzPVwiX25yYW1hLW5vdGUtY29udGVudFwiIHJvd3M9XCIxXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoImNvbnRlbnQiKSxjdHgsImgiKS53cml0ZSgiPC90ZXh0YXJlYT4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzQ2KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHA+Iikud3JpdGUoIlxuICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzQ3LCJibG9jayI6Ym9keV81MH0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgibm8gbm90ZXMiKS53cml0ZSgiXG4gICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV9zb3VyY2UiKSxjdHgseyJlbHNlIjpib2R5XzUxLCJibG9jayI6Ym9keV81Nn0sbnVsbCkud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L3A+Iikud3JpdGUoIlxuIik7fWZ1bmN0aW9uIGJvZHlfNDcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJlbHNlIjpib2R5XzQ4LCJibG9jayI6Ym9keV80OX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV80OChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIk5vIG9uZSBoYXMiKS53cml0ZSgiXG4gICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV80OShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgsImgiKS53cml0ZSgiIGhhcyBubyBub3RlcyIpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzUwKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJZb3UgaGF2ZSIpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNTEoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3RhZyIpLGN0eCx7ImVsc2UiOmJvZHlfNTIsImJsb2NrIjpib2R5XzU1fSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzUyKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfYXV0aG9yIiksY3R4LHsiZWxzZSI6Ym9keV81MywiYmxvY2siOmJvZHlfNTR9LG51bGwpLndyaXRlKCJcbiAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzUzKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIm9uIHRoaXMuIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzU0KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoImZvciBhdXRob3IgIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X2F1dGhvciIpLGN0eCwiaCIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV81NShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoInRhZ2dlZCB3aXRoICMiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdGFnIiksY3R4LCJoIikud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNTYoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIm9uIHRoaXMgc291cmNlIikud3JpdGUoIlxuICAgICAgICAiKTt9cmV0dXJuIGJvZHlfMDt9KSgpOyhmdW5jdGlvbigpe2R1c3QucmVnaXN0ZXIoInJlZ2lzdHJhdGlvbi5odG1sIixib2R5XzApO2Z1bmN0aW9uIGJvZHlfMChjaGssY3R4KXtyZXR1cm4gY2hrLnNlY3Rpb24oY3R4LmdldCgidXNlckN0eCIpLGN0eCx7ImJsb2NrIjpib2R5XzF9LG51bGwpLndyaXRlKCJcbiIpO31mdW5jdGlvbiBib2R5XzEoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICIpLndyaXRlKCI8ZGl2IGlkPVwicmVnaXN0cmF0aW9uXCI+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz1cImNvbHVtbi1jb250YWluZXJcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlO1wiPiIpLndyaXRlKCJcbiAgICAgICIpLndyaXRlKCI8ZGl2IGNsYXNzPVwibGVmdC1jb2x1bW5cIiIpLndyaXRlKCJcbiAgICAgICAgICAgIikud3JpdGUoInN0eWxlPVwid2lkdGg6IDM3NXB4XCIgPiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjxkaXYgY2xhc3M9XCJsZWZ0LWNvbHVtbi1pbm5lclwiIikud3JpdGUoIlxuICAgICAgICAgICAgICIpLndyaXRlKCJzdHlsZT1cInBhZGRpbmctcmlnaHQ6IDE1cHg7XCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxoMiA+R2V0IGl0PC9oMj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICIpLndyaXRlKCI8cD5TdGVwIDE6ICIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgibmFtZSIpLGN0eCx7ImVsc2UiOmJvZHlfMiwiYmxvY2siOmJvZHlfM30sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8YnIgLz4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxzcGFuICIpLmV4aXN0cyhjdHguZ2V0KCJuYW1lIiksY3R4LHsiYmxvY2siOmJvZHlfNH0sbnVsbCkud3JpdGUoIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAiKS53cml0ZSgiKFlvdSBkb24ndCBuZWVkIHRvIHNpZ24gdXAsIGJ1dCBpZiB5b3UgY2hvb3NlIG5vdCB0byBvdGhlcnMgbWF5IGVkaXQiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAiKS53cml0ZSgib3IgZGVsZXRlIHlvdXIgbm90ZXMuKSIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPHNwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAiKS53cml0ZSgiPC9wPiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICAgIikud3JpdGUoIjxwPlN0ZXAgMjogZHJhZyB0aGUgbGluayBiZWxvdyB0byB0aGUgYm9va21hcmsgYmFyIGluIHlvdXIgYnJvd3NlciAob3Igb3RoZXJ3aXNlIGJvb2ttYXJrIGl0KS48L3A+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAgICIpLndyaXRlKCI8cCBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLm5vdGV4aXN0cyhjdHguZ2V0KCJuYW1lIiksY3R4LHsiZWxzZSI6Ym9keV81LCJibG9jayI6Ym9keV82fSxudWxsKS53cml0ZSgiXG4gICAgICAgICAgICAgICIpLndyaXRlKCI8L3A+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8ZGl2IGNsYXNzPVwicmlnaHQtY29sdW1uXCIiKS53cml0ZSgiXG4gICAgICAgICAgICAgIikud3JpdGUoInN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IHJpZ2h0OjA7IHRvcDowOyB3aWR0aDogMzc0cHg7Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjQkJCOyIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIm5hbWUiKSxjdHgseyJibG9jayI6Ym9keV84fSxudWxsKS53cml0ZSgiXCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxkaXYgY2xhc3M9XCJyaWdodC1jb2x1bW4taW5uZXJcIiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgIikud3JpdGUoInN0eWxlPVwicGFkZGluZy1sZWZ0OiAyNXB4XCIgPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGgyIHN0eWxlPVwibWFyZ2luLXRvcDogMDtcIj4uLi4gb3IgdHJ5IGl0IGZpcnN0PC9oMj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxwPkNsaWNrIHRvIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgibmFtZSIpLGN0eCx7ImVsc2UiOmJvZHlfOSwiYmxvY2siOmJvZHlfMTB9LG51bGwpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9wPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPHVsIGNsYXNzPVwiaW5zdHJ1Y3Rpb25zXCIgPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjxsaT5TZWxlY3RpbmcgdGV4dCBoaWdobGlnaHRzIGl0IGFuZCBhZGRzIGl0IHRvIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikubm90ZXhpc3RzKGN0eC5nZXQoIm5hbWUiKSxjdHgseyJlbHNlIjpib2R5XzExLCJibG9jayI6Ym9keV8xMn0sbnVsbCkud3JpdGUoIlwiPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgieW91ciBxdW90ZXMiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9hPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjwvbGk+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGxpPkNsaWNraW5nIGhpZ2hsaWdodGVkIHRleHQgYWRkcyBhIG5vdGUgdG8gdGhlIHBhZ2UuIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9saT4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8bGk+WW91IGNhbiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLm5vdGV4aXN0cyhjdHguZ2V0KCJuYW1lIiksY3R4LHsiZWxzZSI6Ym9keV8xMywiYmxvY2siOmJvZHlfMTR9LG51bGwpLndyaXRlKCJcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoInJldmlldyB5b3VyIG5vdGVzIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjwvYT4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8L2xpPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjxsaT5JZiB5b3UgY29tZSBiYWNrIHRvIHRoaXMgcGFnZSwgbm90ZXMgd2lsbCIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCJyZS1sb2FkIHdoZW4geW91Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgIikubm90ZXhpc3RzKGN0eC5nZXQoIm5hbWUiKSxjdHgseyJlbHNlIjpib2R5XzE1LCJibG9jayI6Ym9keV8xNn0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9saT4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjwvdWw+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuIik7fWZ1bmN0aW9uIGJvZHlfMihjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICIpLndyaXRlKCJkb25lISAod2VsY29tZSAiKS5yZWZlcmVuY2UoY3R4LmdldCgibmFtZSIpLGN0eCwiaCIpLndyaXRlKCIpIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzMoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAiKS53cml0ZSgiKG9wdGlvbmFsKSIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICIpLndyaXRlKCI8c3BhbiBjbGFzcz1cInNpZ251cFwiPjxhIGhyZWY9XCIjXCI+U2lnbiB1cDwvYT48L3NwYW4+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgIikud3JpdGUoIm9yIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjxzcGFuIGNsYXNzPVwibG9naW5cIj48YSBocmVmPVwiI1wiPmxvZ2luPC9hPjwvc3Bhbj4uIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzQoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgic3R5bGU9XCJjb2xvcjpncmV5OyB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcIiIpO31mdW5jdGlvbiBib2R5XzUoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCJqYXZhc2NyaXB0OihmdW5jdGlvbigpe2RlbGV0ZSBtb2R1bGU7ZGVsZXRlIGV4cG9ydHM7X25yYW1hX2JrbWtsdD10cnVlO19ucmFtYV91c2VyPSciKS5yZWZlcmVuY2UoY3R4LmdldCgibmFtZSIpLGN0eCwiaCIpLndyaXRlKCInO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpLnNyYz0naHR0cDovL2xvY2FsaG9zdDo1OTg0L25yYW1hL19kZXNpZ24vbnJhbWEvYmttcmtsdC9ucmFtYTIuanM/bm93PW5ldyBEYXRlKCkuZ2V0VGltZSgpJzsgfSkoKTtcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAiKS53cml0ZSgiIU5vdGUtby1yYW1hIEJvb2ttYXJrbGV0IC0tICIpLnJlZmVyZW5jZShjdHguZ2V0KCJuYW1lIiksY3R4LCJoIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8L2E+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzYoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCJqYXZhc2NyaXB0OihmdW5jdGlvbigpe2RlbGV0ZSBtb2R1bGU7ZGVsZXRlIGV4cG9ydHM7X25yYW1hX2JrbWtsdD10cnVlOyIpLmV4aXN0cyhjdHguZ2V0KCJhbm9uX3VzZXJfbmFtZSIpLGN0eCx7ImJsb2NrIjpib2R5Xzd9LG51bGwpLndyaXRlKCJkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKS5zcmM9J2h0dHA6Ly9sb2NhbGhvc3Q6NTk4NC9ucmFtYS9fZGVzaWduL25yYW1hL2JrbXJrbHQvbnJhbWEyLmpzP25vdz1uZXcgRGF0ZSgpLmdldFRpbWUoKSc7IH0pKCk7XCI+Iikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgIikud3JpdGUoIiFOb3RlLW8tcmFtYSBCb29rbWFya2xldCAtLSBBbm9uLiBVc2VyICIpLnJlZmVyZW5jZShjdHguZ2V0KCJhbm9uX3VzZXJfbmFtZSIpLGN0eCwiaCIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9hPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV83KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIl9ucmFtYV91c2VyPSciKS5yZWZlcmVuY2UoY3R4LmdldCgiYW5vbl91c2VyX25hbWUiKSxjdHgsImgiKS53cml0ZSgiJzsiKTt9ZnVuY3Rpb24gYm9keV84KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoImNvbG9yOmdyZXk7IHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoOyIpO31mdW5jdGlvbiBib2R5XzkoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiZW5hYmxlIG5vdGUtby1yYW1hIGZvciB0aGlzIHBhZ2UuIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8xMChjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCJqYXZhc2NyaXB0OihmdW5jdGlvbigpe2RlbGV0ZSBtb2R1bGU7ZGVsZXRlIGV4cG9ydHM7X25yYW1hX2JrbWtsdD10cnVlO19ucmFtYV91c2VyPScqdHJ5aXQnO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpLnNyYz0naHR0cDovL2xvY2FsaG9zdDo1OTg0L25yYW1hL19kZXNpZ24vbnJhbWEvYmttcmtsdC9ucmFtYTIuanM/bm93PW5ldyBEYXRlKCkuZ2V0VGltZSgpJzsgfSkoKTtcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiZW5hYmxlIG5vdGUtby1yYW1hIGZvciB0aGlzIHBhZ2UuIikud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPC9hPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMTEoY2hrLGN0eCl7cmV0dXJuIGNoay5yZWZlcmVuY2UoY3R4LmdldCgibmFtZSIpLGN0eCwiaCIsWyJ1YyJdKTt9ZnVuY3Rpb24gYm9keV8xMihjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCIqdHJ5aXQiKTt9ZnVuY3Rpb24gYm9keV8xMyhjaGssY3R4KXtyZXR1cm4gY2hrLnJlZmVyZW5jZShjdHguZ2V0KCJuYW1lIiksY3R4LCJoIixbInVjIl0pO31mdW5jdGlvbiBib2R5XzE0KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIip0cnlpdCIpO31mdW5jdGlvbiBib2R5XzE1KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiZW5hYmxlIG5vdGUtby1yYW1hLiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpO31mdW5jdGlvbiBib2R5XzE2KGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cImphdmFzY3JpcHQ6KGZ1bmN0aW9uKCl7ZGVsZXRlIG1vZHVsZTtkZWxldGUgZXhwb3J0cztfbnJhbWFfYmtta2x0PXRydWU7X25yYW1hX3VzZXI9Jyp0cnlpdCc7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkuc3JjPSdodHRwOi8vbG9jYWxob3N0OjU5ODQvbnJhbWEvX2Rlc2lnbi9ucmFtYS9ia21ya2x0L25yYW1hMi5qcz9ub3c9bmV3IERhdGUoKS5nZXRUaW1lKCknOyB9KSgpO1wiPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpLndyaXRlKCJlbmFibGUgbm90ZS1vLXJhbWE8L2E+LiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgICAgICIpO31yZXR1cm4gYm9keV8wO30pKCk7KGZ1bmN0aW9uKCl7ZHVzdC5yZWdpc3Rlcigic2Vzc2lvbi5odG1sIixib2R5XzApO2Z1bmN0aW9uIGJvZHlfMChjaGssY3R4KXtyZXR1cm4gY2hrLnNlY3Rpb24oY3R4LmdldCgidXNlckN0eCIpLGN0eCx7ImJsb2NrIjpib2R5XzF9LG51bGwpLndyaXRlKCJcbiIpO31mdW5jdGlvbiBib2R5XzEoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICIpLndyaXRlKCI8ZGl2IGlkPVwic2Vzc2lvblwiIGNsYXNzPVwiIikuZXhpc3RzKGN0eC5nZXQoIm5hbWUiKSxjdHgseyJlbHNlIjpib2R5XzIsImJsb2NrIjpib2R5XzN9LG51bGwpLndyaXRlKCJcIj4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxzcGFuIGNsYXNzPVwidXNlcm5hbWVcIj48YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS53cml0ZSgiL3VzZXJzLyIpLnJlZmVyZW5jZShjdHguZ2V0KCJuYW1lIiksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgibmFtZSIpLGN0eCwiaCIpLndyaXRlKCI8L2E+PC9zcGFuPiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHVsIGNsYXNzPVwiYWN0aW9uc1wiPiIpLndyaXRlKCJcbiAgICAgICIpLndyaXRlKCI8bGkgY2xhc3M9XCJsb2dvdXRcIj48YSBocmVmPVwiI1wiPkxvZ291dDwvYT48L2xpPiIpLndyaXRlKCJcbiAgICAgICIpLndyaXRlKCI8bGkgY2xhc3M9XCJzaWdudXBcIj48YSBocmVmPVwiI1wiPlNpZ251cDwvYT48L2xpPiIpLndyaXRlKCJcbiAgICAgICIpLndyaXRlKCI8bGkgY2xhc3M9XCJsb2dpblwiPjxhIGhyZWY9XCIjXCI+TG9naW48L2E+PC9saT4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjwvdWw+Iikud3JpdGUoIlxuICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuIik7fWZ1bmN0aW9uIGJvZHlfMihjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJsb2dnZWRvdXQiKTt9ZnVuY3Rpb24gYm9keV8zKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoImxvZ2dlZGluIik7fXJldHVybiBib2R5XzA7fSkoKTsoZnVuY3Rpb24oKXtkdXN0LnJlZ2lzdGVyKCJzb3VyY2VzLmh0bWwiLGJvZHlfMCk7dmFyIGJsb2Nrcz17d2hhdDpib2R5XzF9O2Z1bmN0aW9uIGJvZHlfMChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay5wYXJ0aWFsKCJ1c2VyX2hlYWRlci5odG1sIixjdHgpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCI8ZGl2IGNsYXNzPVwibmF2aWdhdGlvblwiPiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiLS0iKS53cml0ZSgiXG4gICAgIikubm90ZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfMn0sbnVsbCkud3JpdGUoIlxuICAgICIpLmV4aXN0cyhjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCx7ImJsb2NrIjpib2R5XzV9LG51bGwpLndyaXRlKCJcbiIpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4iKS53cml0ZSgiXG4iKS53cml0ZSgiXG4iKS53cml0ZSgiXG4iKS53cml0ZSgiPHVsIGNsYXNzPVwic291cmNlc1wiPiIpLndyaXRlKCJcbiAgICAiKS5zZWN0aW9uKGN0eC5nZXQoInNvdXJjZXMiKSxjdHgseyJibG9jayI6Ym9keV84fSxudWxsKS53cml0ZSgiXG4iKS53cml0ZSgiPC91bD4iKS53cml0ZSgiXG4iKS5ub3RleGlzdHMoY3R4LmdldCgic291cmNlcyIpLGN0eCx7ImJsb2NrIjpib2R5XzEyfSxudWxsKS53cml0ZSgiXG4iKS53cml0ZSgiXG4iKS53cml0ZSgiXG4iKTt9ZnVuY3Rpb24gYm9keV8xKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLnJlZmVyZW5jZShjdHguZ2V0UGF0aChmYWxzZSxbInNvdXJjZXMiLCJsZW5ndGgiXSksY3R4LCJoIikud3JpdGUoIiBzb3VyY2VzIik7fWZ1bmN0aW9uIGJvZHlfMihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICIpLmV4aXN0cyhjdHguZ2V0KCJxdWVyeV91c2VyIiksY3R4LHsiYmxvY2siOmJvZHlfM30sbnVsbCkud3JpdGUoIlxuICAgICIpO31mdW5jdGlvbiBib2R5XzMoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoInNlZSAiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXJfdXJsIiksY3R4LCJoIikud3JpdGUoIi9hdXRob3JzXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgsImgiKS53cml0ZSgiJ3MgYXV0aG9yczwvYT4gb3IiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXJfdXJsIiksY3R4LCJoIikud3JpdGUoIi90YWdzXCI+dGFnczwvYT4iKS5leGlzdHMoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgseyJibG9jayI6Ym9keV80fSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzQoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIjsgPGJyIC8+LS0gIik7fWZ1bmN0aW9uIGJvZHlfNShjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCJnbyB0byIpLndyaXRlKCJcbiAgICAgICAgIikubm90ZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfNn0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9hdXRob3JzXCI+IikuZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfN30sbnVsbCkud3JpdGUoImF1dGhvcnM8L2E+IG9yIikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi90YWdzXCI+dGFnczwvYT4iKS53cml0ZSgiXG4gICAgIik7fWZ1bmN0aW9uIGJvZHlfNihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9zb3VyY2VzXCI+eW91ciBzb3VyY2VzPC9hPiwiKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoInlvdXIgIik7fWZ1bmN0aW9uIGJvZHlfOChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8bGkgY2xhc3M9XCJzb3VyY2VcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz1cInRpdGxlLWxpbmVcIj4iKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLndyaXRlKCIvdXNlcnMvIikucmVmZXJlbmNlKGN0eC5nZXQoInVzZXJfaWQiKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9zb3VyY2VzLyIpLnJlZmVyZW5jZShjdHguZ2V0KCJwYWdlX2lkIiksY3R4LCJoIixbInVjIl0pLndyaXRlKCJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiVElUTEUiKSxjdHgsImgiKS5ub3RleGlzdHMoY3R4LmdldCgiVElUTEUiKSxjdHgseyJibG9jayI6Ym9keV85fSxudWxsKS53cml0ZSgiPC9hPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoIllFQVIiKSxjdHgseyJibG9jayI6Ym9keV8xMX0sbnVsbCkud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIjxkaXYgY2xhc3M9XCJjaXRhdGlvblwiPiIpLnBhcnRpYWwoImJpYmxpb2dyYXBoaWNfZGV0YWlscy5odG1sIixjdHgpLndyaXRlKCI8L2Rpdj4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8L2xpPiIpLndyaXRlKCJcbiAgICAiKTt9ZnVuY3Rpb24gYm9keV85KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLnJlZmVyZW5jZShjdHguZ2V0KCJwYWdlX3RpdGxlIiksY3R4LCJoIikubm90ZXhpc3RzKGN0eC5nZXQoInBhZ2VfdGl0bGUiKSxjdHgseyJibG9jayI6Ym9keV8xMH0sbnVsbCk7fWZ1bmN0aW9uIGJvZHlfMTAoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoInVudGl0bGVkIik7fWZ1bmN0aW9uIGJvZHlfMTEoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIig8c3BhbiBjbGFzcz1cInllYXJcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgiWUVBUiIpLGN0eCwiaCIpLndyaXRlKCI8L3NwYW4+KSIpO31mdW5jdGlvbiBib2R5XzEyKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHA+Iikud3JpdGUoIlxuICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCx7ImVsc2UiOmJvZHlfMTMsImJsb2NrIjpib2R5XzE0fSxudWxsKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCJzb3VyY2VzIikud3JpdGUoIlxuICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgicXVlcnlfYXV0aG9yIiksY3R4LHsiYmxvY2siOmJvZHlfMTV9LG51bGwpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9wPiIpLndyaXRlKCJcbiIpO31mdW5jdGlvbiBib2R5XzEzKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJObyBvbmUgaGFzICIpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMTQoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgsImgiKS53cml0ZSgiIGhhcyBubyAiKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzE1KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJieSAiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfYXV0aG9yIiksY3R4LCJoIikud3JpdGUoIlxuICAgICAgICAiKTt9cmV0dXJuIGJvZHlfMDt9KSgpOyhmdW5jdGlvbigpe2R1c3QucmVnaXN0ZXIoInRhZ3MuaHRtbCIsYm9keV8wKTt2YXIgYmxvY2tzPXt3aGF0OmJvZHlfMX07ZnVuY3Rpb24gYm9keV8wKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLnBhcnRpYWwoInVzZXJfaGVhZGVyLmh0bWwiLGN0eCkud3JpdGUoIlxuIikud3JpdGUoIlxuIikud3JpdGUoIjxkaXYgY2xhc3M9XCJuYXZpZ2F0aW9uXCI+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCItLSIpLndyaXRlKCJcbiAgICAiKS5ub3RleGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJibG9jayI6Ym9keV8yfSxudWxsKS53cml0ZSgiXG4gICAgIikuZXhpc3RzKGN0eC5nZXRQYXRoKGZhbHNlLFsidXNlckN0eCIsIm5hbWUiXSksY3R4LHsiYmxvY2siOmJvZHlfNX0sbnVsbCkud3JpdGUoIlxuIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLndyaXRlKCI8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7XCI+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8ZGl2IHN0eWxlPVwibWFyZ2luLXJpZ2h0OiA1NTFweFwiPiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjx1bCBjbGFzcz0ndGFncy1saXN0JyA+Iikud3JpdGUoIlxuICAgICAgICAgICAgIikuc2VjdGlvbihjdHguZ2V0KCJ0YWdzIiksY3R4LHsiYmxvY2siOmJvZHlfOH0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPC91bD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPGRpdiBjbGFzcz0ndGFncy1jbG91ZCcgaWQ9XCJ0YWdfY2xvdWRcIiIpLndyaXRlKCJcbiAgICAgICAgICIpLndyaXRlKCJzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOyByaWdodDowOyB0b3A6MDsgd2lkdGg6IDU1MHB4OyBoZWlnaHQ6IDM1MHB4O1wiPiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9kaXY+Iikud3JpdGUoIlxuIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiIpLndyaXRlKCJcbiIpLnBhcnRpYWwoImZvb3Rlcl9ldmVudC5odG1sIixjdHgpO31mdW5jdGlvbiBib2R5XzEoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoInRhZ3MiKTt9ZnVuY3Rpb24gYm9keV8yKGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJibG9jayI6Ym9keV8zfSxudWxsKS53cml0ZSgiXG4gICAgIik7fWZ1bmN0aW9uIGJvZHlfMyhjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgic2VlICIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiL3NvdXJjZXNcIj4iKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlciIpLGN0eCwiaCIpLndyaXRlKCIncyBzb3VyY2VzPC9hPiBvciIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiL2F1dGhvcnNcIj5hdXRob3JzPC9hPiIpLmV4aXN0cyhjdHguZ2V0UGF0aChmYWxzZSxbInVzZXJDdHgiLCJuYW1lIl0pLGN0eCx7ImJsb2NrIjpib2R5XzR9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiOyA8YnIgLz4tLSAiKTt9ZnVuY3Rpb24gYm9keV81KGNoayxjdHgpe2N0eD1jdHguc2hpZnRCbG9ja3MoYmxvY2tzKTtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoImdvIHRvICIpLndyaXRlKCJcbiAgICAgICAgIikubm90ZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfNn0sbnVsbCkud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9zb3VyY2VzXCI+IikuZXhpc3RzKGN0eC5nZXQoImlzX3VzZXJzX293bl9wYWdlIiksY3R4LHsiYmxvY2siOmJvZHlfN30sbnVsbCkud3JpdGUoInNvdXJjZXM8L2E+IG9yIikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi9hdXRob3JzXCI+YXV0aG9yczwvYT4iKS53cml0ZSgiXG4gICAgIik7fWZ1bmN0aW9uIGJvZHlfNihjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIi90YWdzXCI+eW91ciB0YWdzPC9hPiwiKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzcoY2hrLGN0eCl7Y3R4PWN0eC5zaGlmdEJsb2NrcyhibG9ja3MpO3JldHVybiBjaGsud3JpdGUoInlvdXIgIik7fWZ1bmN0aW9uIGJvZHlfOChjaGssY3R4KXtjdHg9Y3R4LnNoaWZ0QmxvY2tzKGJsb2Nrcyk7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAgICAgIikud3JpdGUoIjxsaSBjbGFzcz1cInRhZ1wiPjxhIGhyZWY9XCIiKS5yZWZlcmVuY2UoY3R4LmdldCgiYmFzZVVSTCIpLGN0eCwiaCIpLnJlZmVyZW5jZShjdHguZ2V0KCJxdWVyeV91c2VyX3VybCIpLGN0eCwiaCIpLndyaXRlKCIvdGFncy8iKS5yZWZlcmVuY2UoY3R4LmdldCgidGV4dCIpLGN0eCwiaCIsWyJ1YyJdKS53cml0ZSgiXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoInRleHQiKSxjdHgsImgiKS53cml0ZSgiPC9hPjwvbGk+Iikud3JpdGUoIlxuICAgICAgICAgICAgIik7fXJldHVybiBib2R5XzA7fSkoKTsoZnVuY3Rpb24oKXtkdXN0LnJlZ2lzdGVyKCJ1c2VyX2hlYWRlci5odG1sIixib2R5XzApO2Z1bmN0aW9uIGJvZHlfMChjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCI8aDIgY2xhc3M9XCJ1c2VyLWxpbmVcIj4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxzcGFuIGNsYXNzPVwidXNlci1uYW1lXCI+Iikud3JpdGUoIlxuICAgICAgICAiKS5leGlzdHMoY3R4LmdldCgiaXNfdXNlcnNfb3duX3BhZ2UiKSxjdHgseyJlbHNlIjpib2R5XzEsImJsb2NrIjpib2R5XzR9LG51bGwpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPC9zcGFuPiIpLndyaXRlKCJcbiAgICAiKS5ibG9jayhjdHguZ2V0QmxvY2soIndoYXQiKSxjdHgseyJibG9jayI6Ym9keV81fSxudWxsKS53cml0ZSgiXG4iKS53cml0ZSgiPC9oMj4iKS53cml0ZSgiXG4iKTt9ZnVuY3Rpb24gYm9keV8xKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgIikuZXhpc3RzKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgseyJlbHNlIjpib2R5XzIsImJsb2NrIjpib2R5XzN9LG51bGwpLndyaXRlKCJcbiAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfMihjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi9zb3VyY2VzXCI+RXZlcnlvbmU8L2E+J3MiKS53cml0ZSgiXG4gICAgICAgICAgICAiKTt9ZnVuY3Rpb24gYm9keV8zKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIlxuICAgICAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiXCI+IikucmVmZXJlbmNlKGN0eC5nZXQoInF1ZXJ5X3VzZXIiKSxjdHgsImgiKS53cml0ZSgiPC9hPidzIikud3JpdGUoIlxuICAgICAgICAgICAgIik7fWZ1bmN0aW9uIGJvZHlfNChjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiIikucmVmZXJlbmNlKGN0eC5nZXQoImJhc2VVUkwiKSxjdHgsImgiKS5yZWZlcmVuY2UoY3R4LmdldCgicXVlcnlfdXNlcl91cmwiKSxjdHgsImgiKS53cml0ZSgiXCI+WW91cjwvYT4iKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzUoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCJ0aGluZ3MiKS53cml0ZSgiXG4gICAgIik7fXJldHVybiBib2R5XzA7fSkoKTsoZnVuY3Rpb24oKXtkdXN0LnJlZ2lzdGVyKCJ3ZWxjb21lLmh0bWwiLGJvZHlfMCk7ZnVuY3Rpb24gYm9keV8wKGNoayxjdHgpe3JldHVybiBjaGsud3JpdGUoIjxoMSBzdHlsZT1cIm1hcmdpbi1ib3R0b206MDtcIj5Ob3RlLW8tcmFtYTwvaDE+Iikud3JpdGUoIlxuIikud3JpdGUoIlxuIikud3JpdGUoIjxkaXYgY2xhc3M9XCJpbnN0cnVjdGlvbnNcIj4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxwIHN0eWxlPVwibWFyZ2luLXRvcDowO1wiPkFkZCBub3RlcyBhbmQgaGlnaGxpZ2h0cyB0byBhbnkgd2ViIHBhZ2UuIikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGJyIC8+T3JnYW5pc2UgYW5kIHJldmlldyB5b3VyIG5vdGVzIGJ5IHNvdXJjZSwgYXV0aG9yIGFuZCAjdGFnLiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHA+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPGRpdj4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8aW1nIHNyYz1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi9zdGF0aWMvaW1nL25yYW1hX2RlbW8ucG5nXCIiKS53cml0ZSgiXG4gICAgICAgICAgICAgIikud3JpdGUoInN0eWxlPVwiZGlzcGxheTogYmxvY2s7IG1hcmdpbi1sZWZ0OiBhdXRvOyBtYXJnaW4tcmlnaHQ6IGF1dG87XCIgLz4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8cCBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlclwiPiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCI8aT5GaWd1cmU8L2k+LiIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJMZWZ0IHBhbmVsOiBhbm5vdGF0ZSBhbnkgd2ViIHBhZ2UuIikud3JpdGUoIlxuICAgICAgICAgICAgIikud3JpdGUoIlJpZ2h0IHBhbmVsOiBvcmdhbmlzZSB5b3VyIG5vdGVzLiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjwvcD4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiXG4gICAgIikud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAiKS5wYXJ0aWFsKCJyZWdpc3RyYXRpb24uaHRtbCIsY3R4KS53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiXG4gICAgIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8aDI+SG93IHRvIHVzZSBpdDwvaDI+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8cD5Zb3UgY2FuIHVzZSBOb3RlLW8tcmFtYSBvbiBhbnkgcGFnZSB5b3UgdmlzaXQuPC9wPiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHA+V2hlbiBicm93c2luZyBhIHBhZ2UsIGhpdCB0aGUgYm9va21hcmsgeW91IGp1c3QgbWFkZSAoc3RlcCAyIGFib3ZlKSB0byBzdGFydCBtYWtpbmcgbm90ZXMuIikud3JpdGUoIlxuICAgICIpLndyaXRlKCIoVGhpcyBib29rbWFyayB3b24ndCB0YWtlIHlvdSB0byBhbm90aGVyIHBhZ2UsIGl0IGp1c3QgaW5qZWN0cyBzb21lIGNvZGUuKSIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxwPiIpLndyaXRlKCJcbiAgICAgICAgIikuc2VjdGlvbihjdHguZ2V0KCJ1c2VyQ3R4IiksY3R4LHsiYmxvY2siOmJvZHlfMX0sbnVsbCkud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L3A+Iikud3JpdGUoIlxuIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8aHIgLz4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8aDI+UHJvYmxlbXM/PC9oMj4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjxwPiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIk5vdGUtby1yYW1hIHNob3VsZCB3b3JrIGluIHJlY2VudCB2ZXJzaW9ucyBvZiBGaXJlZm94LCBDaHJvbWUgYW5kIFNhZmFyaS4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8YnIgLz4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCJXZSBkb24ndCBwcm9taXNlIHRoYXQgaXQgd2lsbCB3b3JrIGluIG9sZGVyIGJyb3dzZXJzIG9yIEludGVybmV0IEV4cGxvcmVyLiA8aT5UYW50IHBpczwvaT4uIikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGJyIC8+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L3A+PHA+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiSWYgaXQgZG9lc24ndCB3b3JrLCB5b3UgbWF5IG5lZWQgdG8gc2V0IHlvdXIgYnJvd3NlciB0byBhY2NlcHQgY29va2llcyIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoImZyb20gYWxsIHdlYnNpdGVzIChzb3JyeSkuIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L3A+PHA+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiSXNzdWVzIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vYnV0dGVyZmlsbC9ub3RlLW8tcmFtYS9pc3N1ZXNcIj5tYXkgYmUgcmVwb3J0ZWQgaGVyZTwvYT4uIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L3A+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8aDI+UHJvIHRpcHM8L2gyPiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHVsIGNsYXNzPVwiaW5zdHJ1Y3Rpb25zXCIgPiIpLndyaXRlKCJcbiAgICAgICAgIikud3JpdGUoIjxsaT5Nb3ZlIG5vdGVzIGJ5IGRyYWdnaW5nIGFueSBlZGdlLjwvbGk+Iikud3JpdGUoIlxuICAgICAgICAiKS53cml0ZSgiPGxpPmFsdC0gb3IgbWV0YS0gY2xpY2sgYSBxdW90ZSB0byBkZWxldGUgaXQuPC9saT4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8bGk+VXNlICN0YWdzIGluIG5vdGVzICgqKipMSU5LIHlvdXIgdGFncykuPC9saT4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8bGk+UGFzdGUgYSBiaWJ0ZXggZW50cnkgaW50byBhIG5vdGUgdG8gb3JnYW5pc2UgYnkgYXV0aG9yICgqKipMSU5LIHlvdXIgYXV0aG9ycykuPC9saT4iKS53cml0ZSgiXG4gICAgIikud3JpdGUoIjwvdWw+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPGhyIC8+Iikud3JpdGUoIlxuIikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8aDI+QWJvdXQ8L2gyPiIpLndyaXRlKCJcbiAgICAiKS53cml0ZSgiPHA+Tm90ZS1vLXJhbWEgaXMgY29weXJpZ2h0IChjKSAyMDA3LTExIFN0ZXBoZW4gQS4gQnV0dGVyZmlsbC4iKS53cml0ZSgiXG4gICAgICAgICIpLndyaXRlKCI8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2J1dHRlcmZpbGwvbm90ZS1vLXJhbWFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5Tb3VyY2UgY29kZSBpcyBwdWJsaWNseSBhdmFpbGJsZS48L2E+Iikud3JpdGUoIlxuICAgICIpLndyaXRlKCI8L3A+Iikud3JpdGUoIlxuIikud3JpdGUoIjwvZGl2PiIpLndyaXRlKCJcbiIpO31mdW5jdGlvbiBib2R5XzEoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiXG4gICAgICAgICAgICAiKS53cml0ZSgiVG8gc2VlIGFsbCB5b3VyIG5vdGVzIikubm90ZXhpc3RzKGN0eC5nZXQoIm5hbWUiKSxjdHgseyJibG9jayI6Ym9keV8yfSxudWxsKS53cml0ZSgiLCIpLndyaXRlKCJcbiAgICAgICAgICAgICIpLndyaXRlKCJjbGljayB5b3VyIHVzZXIgbmFtZSBvbiB0aGUgdG9wIHJpZ2h0IG9mIHRoaXMgcGFnZSIpLmV4aXN0cyhjdHguZ2V0KCJuYW1lIiksY3R4LHsiYmxvY2siOmJvZHlfM30sbnVsbCkud3JpdGUoIi4iKS53cml0ZSgiXG4gICAgICAgICIpO31mdW5jdGlvbiBib2R5XzIoY2hrLGN0eCl7cmV0dXJuIGNoay53cml0ZSgiIHNpZ24gdXAgb3IgbG9nIGluLCB0aGVuIik7fWZ1bmN0aW9uIGJvZHlfMyhjaGssY3R4KXtyZXR1cm4gY2hrLndyaXRlKCJcbiAgICAgICAgICAgICAgICAiKS53cml0ZSgiPGEgaHJlZj1cIiIpLnJlZmVyZW5jZShjdHguZ2V0KCJiYXNlVVJMIiksY3R4LCJoIikud3JpdGUoIi91c2Vycy8iKS5yZWZlcmVuY2UoY3R4LmdldFBhdGgoZmFsc2UsWyJ1c2VyQ3R4IiwibmFtZSJdKSxjdHgsImgiLFsidWMiXSkud3JpdGUoIlwiPiIpLndyaXRlKCJcbiAgICAgICAgICAgICAgICAgICAgIikud3JpdGUoIm9yIGhlcmU8L2E+Iik7fXJldHVybiBib2R5XzA7fSkoKTsKfShkdXN0X21vZHVsZSwgZHVzdF9tb2R1bGUuZXhwb3J0cykpOwp2YXIgZHVzdCA9IGR1c3RfbW9kdWxlLmV4cG9ydHM7Ci8qZ2xvYmFsIGR1c3Q6IHRydWUsIGxvZzogZmFsc2UgKi8KCi8qKgogKiBDQVVUSU9OIFdIRU4gRURJVElORyBUSElTIEZJTEUhCiAqCiAqIFRoZSByZXN0IG9mIHRoaXMgIG1vZHVsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBrYW5zbyB3aGVuIHRoZSBhcHAKICogaXMgcHVzaGVkIHRvIHRoZSBkYXRhYmFzZS4KICoKICogVGhpcyBpcyB0byB3b3JrIGFyb3VuZCB0aGUgZmFjdCB0aGF0IGR1c3QgdGVtcGxhdGVzIHN0b3JlIHN0YXRlCiAqIG9uIHRoZSBtb2R1bGUgaXRzZWxmIGJ1dCBjb3VjaGRiIGRvZXNuJ3QgeWV0IHByb3ZpZGUgYSBtb2R1bGUgY2FjaGUsCiAqIG1lYW5pbmcgc3RhdGUgZG9lcyBub3QgcGVyc2lzdCBiZXR3ZWVuIGVhY2ggcmVxdWlyZSgpLiBUaGUgd29ya2Fyb3VuZAogKiBpbnZvbHZlcyB3cml0aW5nIGFsbCB0ZW1wbGF0ZXMgZGlyZWN0bHkgaW50byB0aGUgbW9kdWxlLCBzbyB0aGV5IGFyZSBhZGRlZCBvbgogKiBlYWNoIHJlcXVpcmUuCiAqCiAqIFRPRE86IFdoZW4gYSBtb2R1bGUgY2FjaGUgaXMgaW1wbGVtZW50ZWQgaW4gQ291Y2hEQiwgc3RvcCB0aGlzIG1vZHVsZSBmcm9tCiAqIGJlaW5nIGF1dG8tZ2VuZXJhdGVkLCBzZWU6IGh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9icm93c2UvQ09VQ0hEQi04OTAKICoKICogRm9yIHRoZSBjb2RlIHRoYXQgZ2VuZXJhdGVzIHRoZSByZXN0IG9mIHRoaXMgZmlsZSwgc2VlOiBsaWIvdGVtcGxhdGVzLmpzCiAqLwoKLyoqCiAqIEthbnNvIHVzZXMgRHVzdCB0ZW1wbGF0ZXMgZm9yIHJlbmRlcmluZyBwYWdlcy4KICogVG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgc3ludGF4LCBzZWUgdGhlCiAqIDxhIGhyZWY9Imh0dHA6Ly9ha2R1YnlhLmdpdGh1Yi5jb20vZHVzdGpzLyI+RHVzdCBzaXRlPC9hPi4KICoKICogU2luY2UgRHVzdCBzdG9yZXMgY29tcGlsZWQgdGVtcGxhdGVzIG9uIHRoZSBtb2R1bGUgaXRzZWxmLCB0aGUKICogdGVtcGxhdGVzIG1vZHVsZSBkb2VzIHNvbWUgaW50ZXJlc3RpbmcgdGhpbmdzIHRvIHdvcmsgYXJvdW5kIHRoZSBsYWNrCiAqIG9mIGEgbW9kdWxlIGNhY2hlIGluIENvdWNoREIuIEJlY2F1c2Ugb2YgdGhpcywgY29tcGlsZWQgdGVtcGxhdGVzIGFyZQogKiBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIHRoaXMgbW9kdWxlIGZyb20geW91ciB0ZW1wbGF0ZXMgZm9sZGVyIGVhY2ggdGltZQogKiB5b3VyIGFwcCBpcyBwdXNoZWQgdG8gQ291Y2hEQi4gWW91IGNhbiBzZWUgYSBsaXN0IG9mIHRoZSBsb2FkZWQgdGVtcGxhdGUKICogbmFtZXMgb24gdGhlICdsb2FkZWQnIHByb3BlcnR5IG9mIHRoaXMgbW9kdWxlLgogKgogKiBAbW9kdWxlCiAqLwoKCi8qKgogKiBNb2R1bGUgZGVwZW5kZW5jaWVzCiAqLwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpLAogICAgZmxhc2htZXNzYWdlcyA9IHJlcXVpcmUoJy4vZmxhc2htZXNzYWdlcycpOwoKCi8qKgogKiBTeW5jaHJvbm91c2x5IHJlbmRlciBkdXN0IHRlbXBsYXRlIGFuZCByZXR1cm4gcmVzdWx0LCBhdXRvbWF0aWNhbGx5IGFkZGluZwogKiBiYXNlVVJMIHRvIHRoZSB0ZW1wbGF0ZSdzIGNvbnRleHQuIFRoZSByZXF1ZXN0IG9iamVjdCBpcyByZXF1aXJlZCBzbyB3ZQogKiBjYW4gZGV0ZXJtaW5lIHRoZSB2YWx1ZSBvZiBiYXNlVVJMLgogKgogKiBAbmFtZSByZW5kZXIobmFtZSwgcmVxLCBjb250ZXh0KQogKiBAcGFyYW0ge1N0cmluZ30gbmFtZQogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0CiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiAobmFtZSwgcmVxLCBjb250ZXh0KSB7CiAgICBjb250ZXh0LmJhc2VVUkwgPSB1dGlscy5nZXRCYXNlVVJMKHJlcSk7CiAgICBjb250ZXh0LmlzQnJvd3NlciA9IHV0aWxzLmlzQnJvd3NlcigpOwogICAgY29udGV4dC51c2VyQ3R4ID0gcmVxLnVzZXJDdHg7CiAgICBpZiAoIWNvbnRleHQuZmxhc2hNZXNzYWdlcykgewogICAgICAgIGNvbnRleHQuZmxhc2hNZXNzYWdlcyA9IGZsYXNobWVzc2FnZXMuZ2V0TWVzc2FnZXMocmVxKTsKICAgIH0KICAgIHZhciByID0gJyc7CiAgICBkdXN0LnJlbmRlcihuYW1lLCBjb250ZXh0LCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIHRocm93IGVycjsKICAgICAgICB9CiAgICAgICAgciA9IHJlc3VsdDsKICAgIH0pOwogICAgcmV0dXJuIHI7Cn07CgoKLyoqCiAqIEV4cG9ydHMgdGhlIG5hbWVzIG9mIGFsbCB0ZW1wbGF0ZXMgbG9hZGVkIGludG8gdGhlIGR1c3QgY2FjaGUKICovCgpleHBvcnRzLmxvYWRlZCA9IFtdOwpmb3IgKHZhciBrIGluIGR1c3QuY2FjaGUpIHsKICAgIGlmIChkdXN0LmNhY2hlLmhhc093blByb3BlcnR5KGspKSB7CiAgICAgICAgZXhwb3J0cy5sb2FkZWQucHVzaChrKTsKICAgIH0KfQoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL2FjdGlvbnMgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby9hY3Rpb25zIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qZ2xvYmFsICQ6IGZhbHNlLCBrYW5zbzogdHJ1ZSovCgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7CgovKioKICogSW1wbGVtZW50YXRpb24gb2Ygd2lkZ2V0IGFjdGlvbnMuIFRoZXNlIGFyZSBwcm9jZWR1cmVzCiAqIHRoYXQgY2FuIGJlIHJlZmVyZW5jZWQgYnkgd2lkZ2V0cyB0byBwcmVzZW50L2NvbGxlY3QgaW5mb3JtYXRpb24sCiAqIG1hbmlwdWxhdGUgdGhlIERPTSwgb3Igb3RoZXJ3aXNlIGFmZmVjdCB0aGUgYXBwbGljYXRpb24gc3RhdGUKICogd2hlbiBhIHdpZGdldCBpcyBhY3RlZCB1cG9uLgogKgogKiBAbW9kdWxlCiAqLwoKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgd2lkZ2V0cyA9IHJlcXVpcmUoJy4vd2lkZ2V0cycpLAogICAgc2FuaXRpemUgPSByZXF1aXJlKCcuL3Nhbml0aXplJyksCiAgICBfID0gcmVxdWlyZSgnLi91bmRlcnNjb3JlJykuXzsKCnZhciBoID0gc2FuaXRpemUuZXNjYXBlSHRtbDsKCi8qKgogKiBDcmVhdGUgYSBjbG9zdXJlIHRoYXQgbG9hZHMge21vZHVsZX0sIGFuZCBpbnZva2VzIHttZXRob2R9CiAqIG9uIGl0LiBUaGUge29wdGlvbnN9IHBhcmFtZXRlciBpcyBwcmVwZW5jZWQgdG8gdGhlIG1ldGhvZCdzCiAqIGFyZ3VtZW50IGxpc3QuIFRoaXMgc2VwYXJhdGUgZnVuY3Rpb24gc2lsZW5jZXMgYSBsaW50IHdhcm5pbmcuCiAqIFNlZSB0aGUgcGFyc2UgbWV0aG9kIGZvciBkZXRhaWxzLgogKi8KZXhwb3J0cy5tYWtlX2FjdGlvbl9oYW5kbGVyID0gZnVuY3Rpb24gKG1vZHVsZSwgbWV0aG9kLCBvcHRpb25zKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBhcmdzID0gWyBvcHRpb25zIF0uY29uY2F0KAogICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIHJlcXVpcmUobW9kdWxlKVttZXRob2RdLmFwcGx5KG51bGwsIGFyZ3MpOwogICAgfTsKfTsKCi8qKgogKiBDb252ZXJ0IGFuIG9iamVjdCBjb250YWluaW5nIHNldmVyYWwgWyBtb2R1bGUsIGNhbGxiYWNrIF0gb3IKICogeyBtb2R1bGU6IHgsIGNhbGxiYWNrOiB5IH0gaXRlbXMgaW4gdG8gYW4gb2JqZWN0IGNvbnRhaW5pbmcKICogc2V2ZXJhbCBuYXRpdmUgamF2YXNjcmlwdCBmdW5jdGlvbnMsIGJ5IHVzaW5nIHJlcXVpcmUuCiAqCiAqIEBwYXJhbSBhY3Rpb25zIEFuIG9iamVjdCwgY29udGFpbmluZyBpdGVtcyBkZXNjcmliaW5nIGEKICogICAgICAgICAgZnVuY3Rpb24gdGhhdCBjYW4gYmUgb2J0YWluZWQgdmlhIHJlcXVpcmUoKS4KICovCmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoYWN0aW9ucykgewogICAgdmFyIHJ2ID0ge307CiAgICBmb3IgKHZhciBrIGluIGFjdGlvbnMpIHsKICAgICAgICB2YXIgbW9kdWxlLCBjYWxsYmFjaywgb3B0aW9uczsKICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9uc1trXTsKICAgICAgICBpZiAoYWN0aW9uID09PSBmYWxzZSkgewogICAgICAgICAgICBydltrXSA9IHV0aWxzLmVtcHR5RnVuY3Rpb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKF8uaXNBcnJheShhY3Rpb24pKSB7CiAgICAgICAgICAgICAgICBtb2R1bGUgPSBhY3Rpb25bMF07CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFjdGlvblsxXTsKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBhY3Rpb25bMl07CiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKGFjdGlvbikpIHsKICAgICAgICAgICAgICAgIHJ2W2tdID0gYWN0aW9uOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKGFjdGlvbikgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICBtb2R1bGUgPSBhY3Rpb24ubW9kdWxlOwogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBhY3Rpb24uY2FsbGJhY2s7CiAgICAgICAgICAgICAgICBvcHRpb25zID0gYWN0aW9uLm9wdGlvbnM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgJ0FjdGlvbiBgJyArIGsgKyAnYCBpcyBgJyArIHR5cGVvZihhY3Rpb24pICsgJ2AsICcgKwogICAgICAgICAgICAgICAgICAgICAgICAid2hpY2ggdGhpcyBmdW5jdGlvbiBkb2Vzbid0IGtub3cgaG93IHRvIGludGVycHJldCIKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyogUmVzb2x2ZSBmdW5jdGlvbiBkZXNjcmlwdGlvbiB0byBhY3R1YWwgZnVuY3Rpb24gKi8KICAgICAgICAgICAgcnZba10gPSBleHBvcnRzLm1ha2VfYWN0aW9uX2hhbmRsZXIobW9kdWxlLCBjYWxsYmFjaywgb3B0aW9ucyk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJ2Owp9OwoKLyoqCiAqIEFuIGFjdGlvbiB0aGF0IHByb2R1Y2VzIGEgbW9kYWwgZGlhbG9nIGJveCwgd2l0aCBidXR0b25zIGFsb25nCiAqIGl0cyBib3R0b20uIFRoZSBjb250ZW50cyBvZiB0aGUgZGlhbG9nIGNhbiBiZSBjb250cm9sbGVkIGJ5CiAqIHNldHRpbmcgZWl0aGVyIG9wdGlvbnMud2lkZ2V0IG9yIG9wdGlvbnMudHlwZS4gSWYgYm90aCBhcmUKICogc3BlY2lmaWVkLCB0aGUgd2lkZ2V0IHdpbGwgYmUgdXNlZC4gSWYgb25seSB0eXBlIGlzIHNwZWNpZmllZCwKICogdGhpcyBmdW5jdGlvbiB0cmFuc3BhcmVudGx5IGluc3RhbnNpYXRlcyBhbiBlbWJlZEZvcm0gd2lkZ2V0LAogKiB3aGljaCBkb2VzIHRoZSBhY3R1YWwgZm9ybSByZW5kZXJpbmcgYW5kIHByZXNlbnRhdGlvbi4KICovCgpleHBvcnRzLm1vZGFsRGlhbG9nID0gZnVuY3Rpb24gKGFjdGlvbl9vcHRpb25zLCBhY3Rpb25fbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlX25hbWUsIGZpZWxkLCBwYXRoLCB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcsIGVycm9ycywgb3B0aW9ucywgY2FsbGJhY2spIHsKICAgIG9wdGlvbnMgPSAob3B0aW9ucyB8fCB7fSk7CiAgICBhY3Rpb25fb3B0aW9ucyA9IChhY3Rpb25fb3B0aW9ucyB8fCB7fSk7CgogICAgdmFyIHdpZGdldCA9IGFjdGlvbl9vcHRpb25zLndpZGdldDsKICAgIHZhciBuYW1lID0gc2FuaXRpemUuZ2VuZXJhdGVEb21OYW1lKHBhdGgpOwogICAgdmFyIHBhdGhfZXh0cmEgPSAob3B0aW9ucy5wYXRoX2V4dHJhIHx8IFtdKS5jb25jYXQoWyAnbW9kYWwnIF0pOwogICAgdmFyIG9wZXJhdGlvbiA9ICd1cGRhdGUnOwogICAgaWYgKGFjdGlvbl9uYW1lICE9PSAnZWRpdCcpIHsKICAgICAgICBvcGVyYXRpb24gPSBhY3Rpb25fbmFtZTsKICAgIH0KICAgIHZhciB3aWRnZXRfb3B0aW9ucyA9IHsKICAgICAgICBwYXRoX2V4dHJhOiBwYXRoX2V4dHJhLAogICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uCiAgICB9OwoKICAgIC8qIFJlc29sdmUgd2lkZ2V0ICovCiAgICBpZiAoIXdpZGdldCAmJiBhY3Rpb25fb3B0aW9ucy50eXBlKSB7CiAgICAgICAgd2lkZ2V0ID0gd2lkZ2V0cy5lbWJlZEZvcm0oCiAgICAgICAgICAgIF8uZGVmYXVsdHMoYWN0aW9uX29wdGlvbnMub3B0aW9ucyB8fCB7fSwgewogICAgICAgICAgICAgICAgdHlwZTogYWN0aW9uX29wdGlvbnMudHlwZQogICAgICAgICAgICB9KQogICAgICAgICk7CiAgICB9CgogICAgaWYgKCF3aWRnZXQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICdtb2RhbERpYWxvZzogVW5hYmxlIHRvIGRldGVybWluZSB0aGUgd2lkZ2V0IHRvJyArCiAgICAgICAgICAgICcgdXNlIGZvciB0aGUgZmllbGQgbmFtZWQgYCcgKyBwYXRoLmpvaW4oJy4nKSArICdgOycgKwogICAgICAgICAgICAnIHdpZGdldCBvciBmaWVsZCB0eXBlIHdhcyBub3QgY29ycmVjdGx5IHNwZWNpZmllZCcKICAgICAgICApOwogICAgfQoKICAgIC8qIERpYWxvZyBzZXR1cCBhbmQgZXZlbnQgaGFuZGxpbmc6CiAgICAgICAgVGhpcyBpcyB3cmFwcGVkIGluIGEgY2xvc3VyZSB0byBhbGxvdyBpdCB0byBlYXNpbHkgYmUKICAgICAgICB1c2VkIGluc2lkZSBib3RoIHN5bmNocm9ub3VzIGFuZCBhc3luY2hyb25vdXMgZnVuY3Rpb25zLiAqLwoKICAgIHZhciBnZW5lcmF0ZU1vZGFsRGlhbG9nID0gZnVuY3Rpb24gKCkgewoKICAgICAgICAvKiBHZW5lcmF0ZSBzdHJpbmdzIGZvciBjb250ZW50ICovCiAgICAgICAgdmFyIGNhbmNlbF9sYWJlbCA9ICdDYW5jZWwnOwogICAgICAgIHZhciB0eXBlX2xhYmVsID0gdXRpbHMudGl0bGVpemUodHlwZV9uYW1lKTsKICAgICAgICB2YXIgYWN0aW9uX2xhYmVsID0gdXRpbHMudGl0bGVpemUoYWN0aW9uX25hbWUpOwoKICAgICAgICAvKiBHZW5lcmF0ZSBpbm5lciBlbGVtZW50cyAqLwogICAgICAgIHZhciB0aXRsZV9lbHQgPSAkKAogICAgICAgICAgICAnPGgyPicgKyBbIGFjdGlvbl9sYWJlbCwgdHlwZV9sYWJlbCBdLmpvaW4oJyAnKSArICc8L2gyPicKICAgICAgICApOwogICAgICAgIHZhciBva19lbHQgPSAkKAogICAgICAgICAgICAnPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IicgKyBoKGFjdGlvbl9sYWJlbCkgKyAnIiAvPicKICAgICAgICApOwogICAgICAgIHZhciBjYW5jZWxfZWx0ID0gJCgKICAgICAgICAgICAgJzxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSInICsgaChjYW5jZWxfbGFiZWwpICsgJyIgLz4nCiAgICAgICAgKTsKICAgICAgICB2YXIgYWN0aW9uc19lbHQgPSAkKAogICAgICAgICAgICAnPGRpdiBjbGFzcz0iYWN0aW9ucyIgLz4nCiAgICAgICAgKTsKCiAgICAgICAgLyogQ3JlYXRlIHdpZGdldCdzIHBhcmVudCBlbGVtZW50ICovCiAgICAgICAgdmFyIGRpdiA9ICQoJzxkaXYgLz4nKTsKCiAgICAgICAgLyogQWRkIGRpYWxvZyB0aXRsZSAqLwogICAgICAgIGRpdi5hcHBlbmQodGl0bGVfZWx0KTsKCiAgICAgICAgLyogRHJhdyB3aWRnZXQgKi8KICAgICAgICBkaXYuYXBwZW5kKAogICAgICAgICAgICB3aWRnZXQudG9IVE1MKAogICAgICAgICAgICAgICAgbmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIHdpZGdldF9vcHRpb25zCiAgICAgICAgICAgICkKICAgICAgICApOwoKICAgICAgICAvKiBGaW5kIHRoZSBmb3JtIGVsZW1lbnQ6CiAgICAgICAgICAgIFRoaXMgaXMgY3JlYXRlZCBieSB0aGUgY2FsbCB0byB3aWRnZXQudG9IVE1MLCBhYm92ZS4gKi8KCiAgICAgICAgdmFyIGZvcm1fZWx0ID0gZGl2LmNsb3Nlc3RDaGlsZCgnZm9ybScpOwoKICAgICAgICBpZiAoZm9ybV9lbHQubGVuZ3RoIDw9IDApIHsKCiAgICAgICAgICAgIC8qIE5vIGZvcm0gZWxlbWVudCBmb3VuZD8KICAgICAgICAgICAgICAgIEdlbmVyYXRlIG9uZSBhbmQgd3JhcCB0aGUgY29udGVudHMgb2YgdGhlIGRpYWxvZyB3aXRoIGl0LgogICAgICAgICAgICAgICAgVGhpcyBwcm92aWRlcyBzdXBwb3J0IGZvciB3aWRnZXRzIG90aGVyIHRoYW4gZW1iZWRGb3JtLiAqLwoKICAgICAgICAgICAgdmFyIHdyYXBwZXJfZWx0ID0gJCgnPGRpdiAvPicpOwogICAgICAgICAgICBmb3JtX2VsdCA9ICQoJzxmb3JtIC8+Jyk7CiAgICAgICAgICAgIGZvcm1fZWx0LmFwcGVuZChkaXYpOwogICAgICAgICAgICB3cmFwcGVyX2VsdC5hcHBlbmQoZm9ybV9lbHQpOwogICAgICAgICAgICBkaXYgPSB3cmFwcGVyX2VsdDsKICAgICAgICB9CgogICAgICAgIC8qIEhhbmRsZSBzdWNjZXNzICovCiAgICAgICAgb2tfZWx0LmNsaWNrKGZ1bmN0aW9uIChldikgewoKICAgICAgICAgICAgLyogVmFsaWRhdGUgd2lkZ2V0OgogICAgICAgICAgICAgICAgVGhpcyB1c3VhbGx5IGRlZmVycyB0byBhIGZvcm0gdHlwZSdzIGltcGxlbWVudGF0aW9uLgogICAgICAgICAgICAgICAgTW9zdCBzaW1wbGUgd2lkZ2V0cyBqdXN0IHJldHVybiB0cnVlIGZvciB0aGlzIG1ldGhvZC4gKi8KCiAgICAgICAgICAgIGVycm9ycyA9IHdpZGdldC52YWxpZGF0ZShkaXYsIHBhdGgsIHdpZGdldF9vcHRpb25zKTsKCiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkgewoKICAgICAgICAgICAgICAgIC8qIFJlcG9zdCBkaWFsb2cgYm94OgogICAgICAgICAgICAgICAgICAgIFRoaXMgd2lsbCByZXBsYWNlIHRoZSBjdXJyZW50IGRpYWxvZyBib3guCiAgICAgICAgICAgICAgICAgICAgVGhlIG1vZGFsIGRpYWxvZyByZXR1cm5zIHRvIHRoZSBldmVudCBsb29wIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IHJlbW92aW5nIGl0cyBlbGVtZW50cywgc28gd2UgZG8gdGhlIHNhbWUuICovCgogICAgICAgICAgICAgICAgJC5tb2RhbC5jbG9zZSgpOwoKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGV4cG9ydHMubW9kYWxEaWFsb2coCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbl9vcHRpb25zLCBhY3Rpb25fbmFtZSwgdHlwZV9uYW1lLCBmaWVsZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsIHZhbHVlLCByYXcsIGVycm9ycywgb3B0aW9ucywgY2FsbGJhY2sKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfSwgMCk7CgogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgIC8qIENsb3NlIHRoZSBkaWFsb2cgYm94OgogICAgICAgICAgICAgICAgICAgIEFnYWluLCBub3RlIHRoYXQgdGhlIGRpYWxvZyBib3ggd29uJ3QgYWN0dWFsbHkgZGlzYXBwZWFyCiAgICAgICAgICAgICAgICAgICAgdW50aWwgd2UndmUgdW53b3VuZCBhbmQgcmV0dXJuZWQgdG8gdGhlIG1haW4gZXZlbnQKICAgICAgICAgICAgICAgICAgICBsb29wLiBJZiB5b3UgZGVwZW5kIHVwb24gY2xvc3VyZSwgdXNlIHNldFRpbWVvdXQoKS4gKi8KCiAgICAgICAgICAgICAgICBjYWxsYmFjaygKICAgICAgICAgICAgICAgICAgICB0cnVlLCB3aWRnZXQuZ2V0VmFsdWUoZGl2LCBwYXRoLCB3aWRnZXRfb3B0aW9ucykKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgLyogT3JkZXIgbWF0dGVyczoKICAgICAgICAgICAgICAgICAgICBUaGUgY2FsbGJhY2sgbWF5IHJlZmVyIHRvIGVsZW1lbnRzIGluc2lkZSBvZiB0aGUgbW9kYWwKICAgICAgICAgICAgICAgICAgICBkaWFsb2csIHNvIGRvbid0IGRlc3Ryb3kgaXQgdW50aWwgYWZ0ZXIgaXQgcmV0dXJucywgYW5kCiAgICAgICAgICAgICAgICAgICAgaGFzIGhhZCBhIGNoYW5jZSB0byByZWdpc3RlciBhbnkgY2FsbGJhY2tzIC8gdGltZW91dHMuICovCgogICAgICAgICAgICAgICAgJC5tb2RhbC5jbG9zZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0pOwoKICAgICAgICAvKiBIYW5kbGUgZmFpbHVyZSAqLwogICAgICAgIGNhbmNlbF9lbHQuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjYWxsYmFjaygKICAgICAgICAgICAgICAgIGZhbHNlLCB3aWRnZXQuZ2V0VmFsdWUoZGl2LCBwYXRoLCB3aWRnZXRfb3B0aW9ucykKICAgICAgICAgICAgKTsKICAgICAgICAgICAgJC5tb2RhbC5jbG9zZSgpOwogICAgICAgIH0pOwoKICAgICAgICAvKiBNYWtlIGRlZmF1bHQgZm9ybSBhY3Rpb24gJ29rJyAqLwogICAgICAgIGZvcm1fZWx0LnN1Ym1pdChmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgb2tfZWx0LmNsaWNrKCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9KTsKCiAgICAgICAgLyogSW5zZXJ0IGRpYWxvZy1tYW5hZ2VkIGVsZW1lbnRzICovCiAgICAgICAgYWN0aW9uc19lbHQuYXBwZW5kKG9rX2VsdCk7CiAgICAgICAgYWN0aW9uc19lbHQuYXBwZW5kKGNhbmNlbF9lbHQpOwogICAgICAgIGZvcm1fZWx0LmFwcGVuZChhY3Rpb25zX2VsdCk7CgogICAgICAgIC8qIExhdW5jaCBkaWFsb2cgKi8KICAgICAgICBkaXYubW9kYWwoKTsKCiAgICAgICAgLyogSW5pdGlhbGl6ZSB3aWRnZXQ6CiAgICAgICAgICAgIFdlIGRvIHRoaXMgbGFzdCAtLSB0aGlzIG1ha2VzIHN1cmUgYWxsIGVsZW1lbnRzIGFyZSBwcmVzZW50CiAgICAgICAgICAgIGFuZCBpbml0aWFsaXplZCBwcmlvciB0byBjbGllbnQtc2lkZSB3aWRnZXQgaW5pdGlhbGl6YXRpb24uICovCgogICAgICAgIHdpZGdldC5jbGllbnRJbml0KAogICAgICAgICAgICBmaWVsZCwgcGF0aCwgdmFsdWUsIHJhdywgZXJyb3JzLCB3aWRnZXRfb3B0aW9ucwogICAgICAgICk7CiAgICB9OwoKICAgIHJldHVybiBnZW5lcmF0ZU1vZGFsRGlhbG9nKCk7Cn07CgoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL2Nvb2tpZXMgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby9jb29raWVzIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qZ2xvYmFsIGVzY2FwZTogZmFsc2UgKi8KCi8qKgogKiBGdW5jdGlvbnMgcmVsYXRlZCB0byB0aGUgbWFuaXB1bGF0aW9uIGFuZCByZWFkaW5nIG9mIGNvb2tpZXMuCiAqCiAqIEBtb2R1bGUKICovCgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7CgoKLyoqCiAqIFJlYWQgY29va2llcyBjdXJyZW50bHkgc3RvcmVkIGluIHRoZSBicm93c2VyLCByZXR1cm5pbmcgYW4gb2JqZWN0CiAqIGtleWVkIGJ5IGNvb2tpZSBuYW1lLgogKgogKiBAbmFtZSByZWFkQnJvd3NlckNvb2tpZXMoKQogKiBAcmV0dXJucyBPYmplY3QKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJlYWRCcm93c2VyQ29va2llcyA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdXRpbHMuaXNCcm93c2VyKCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlYWRCcm93c2VyQ29va2llcyBjYW5ub3QgYmUgY2FsbGVkIHNlcnZlci1zaWRlJyk7CiAgICB9CiAgICB2YXIgY29va2llcyA9IHt9OwogICAgdmFyIHBhcnRzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICB2YXIgbmFtZSA9IHBhcnRzW2ldLnNwbGl0KCc9JylbMF07CiAgICAgICAgdmFyIHZhbHVlID0gcGFydHNbaV0uc3BsaXQoJz0nKS5zbGljZSgxKS5qb2luKCc9Jyk7CiAgICAgICAgY29va2llc1tuYW1lXSA9IHZhbHVlOwogICAgfQogICAgcmV0dXJuIGNvb2tpZXM7Cn07CgovKioKICogUmVhZHMgYnJvd3NlciBjb29raWVzIGFuZCByZXR1cm5lZCB0aGUgdmFsdWUgb2YgdGhlIG5hbWVkIGNvb2tpZS4KICoKICogQG5hbWUgcmVhZEJyb3dzZXJDb29raWUobmFtZSkKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJlYWRCcm93c2VyQ29va2llID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHJldHVybiBleHBvcnRzLnJlYWRCcm93c2VyQ29va2llcygpW25hbWVdOwp9OwoKLyoqCiAqIENyZWF0ZXMgYSBzdHJpbmcgZm9yIHN0b3JpbmcgYSBjb29raWUgb24gdGhlIGJyb3dzZXIuCiAqCiAqIEBuYW1lIGNvb2tpZVN0cmluZyhyZXEsIG9wdCkKICogQHBhcmFtIHtSZXF1ZXN0IE9iamVjdH0gcmVxCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHQKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmNvb2tpZVN0cmluZyA9IGZ1bmN0aW9uIChyZXEsIG9wdCkgewogICAgdmFyIHBhdGggPSBvcHQucGF0aCB8fCB1dGlscy5nZXRCYXNlVVJMKHJlcSkgKyAnLyc7CiAgICB2YXIgc3RyID0gZXNjYXBlKG9wdC5uYW1lKSArICc9JyArIGVzY2FwZShvcHQudmFsdWUpICsgJzsgcGF0aD0nICsgcGF0aDsKICAgIGlmIChvcHQuZGF5cykgewogICAgICAgIHZhciBleHBpcmVzID0gbmV3IERhdGUoKS5zZXRUaW1lKAogICAgICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIDEwMDAgKiA2MCAqIDYwICogMjQgKiBvcHQuZGF5cwogICAgICAgICk7CiAgICAgICAgc3RyICs9ICc7IGV4cGlyZXM9JyArIGV4cGlyZXMudG9HTVRTdHJpbmcoKTsKICAgIH0KICAgIHJldHVybiBzdHI7Cn07CgovKioKICogU2V0cyBhIGNvb2tpZSBvbiB0aGUgYnJvd3NlciwgZm9yIHVzZSBjbGllbnQtc2lkZSBvbmx5LgogKgogKiBAbmFtZSBzZXRCcm93c2VyQ29va2llKHJlcSwgb3B0KQogKiBAcGFyYW0ge1JlcXVlc3QgT2JqZWN0fSByZXEKICogQHBhcmFtIHtPYmplY3R9IG9wdAogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuc2V0QnJvd3NlckNvb2tpZSA9IGZ1bmN0aW9uIChyZXEsIG9wdCkgewogICAgaWYgKCF1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignc2V0QnJvd3NlckNvb2tpZSBjYW5ub3QgYmUgY2FsbGVkIHNlcnZlci1zaWRlJyk7CiAgICB9CiAgICB2YXIgc3RyID0gKHR5cGVvZiBvcHQgPT09ICdzdHJpbmcnKSA/IG9wdDogZXhwb3J0cy5jb29raWVTdHJpbmcocmVxLCBvcHQpOwogICAgLy9jb25zb2xlLmxvZygnZG9jdW1lbnQuY29va2llID0gJyArIHN0cik7CiAgICBkb2N1bWVudC5jb29raWUgPSBzdHI7Cn07CgovKioKICogQ3JlYXRlcyBhIFNldC1Db29raWUgaGVhZGVyIG9uIGEgcmVzcG9uc2Ugb2JqZWN0LgogKgogKiBAbmFtZSBzZXRSZXNwb25zZUNvb2tpZShyZXEsIHJlcywgb3B0KQogKiBAcGFyYW0ge1JlcXVlc3QgT2JqZWN0fSByZXEKICogQHBhcmFtIHtSZXNwb25zZSBPYmplY3R9IHJlcwogKiBAcGFyYW0ge09iamVjdH0gb3B0CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5zZXRSZXNwb25zZUNvb2tpZSA9IGZ1bmN0aW9uIChyZXEsIHJlcywgb3B0KSB7CiAgICB2YXIgc3RyID0gKHR5cGVvZiBvcHQgPT09ICdzdHJpbmcnKSA/IG9wdDogZXhwb3J0cy5jb29raWVTdHJpbmcocmVxLCBvcHQpOwogICAgaWYgKHR5cGVvZiByZXMgIT09ICdvYmplY3QnKSB7CiAgICAgICAgcmVzID0ge2NvZGU6IDIwMCwgYm9keTogcmVzfTsKICAgIH0KICAgIGlmICghcmVzLmhlYWRlcnMpIHsKICAgICAgICByZXMuaGVhZGVycyA9IHt9OwogICAgfQogICAgLy8gVE9ETzogaXMgaXQgcG9zc2libGUgdG8gc2VuZCBtdWx0aXBsZSBzZXQtY29va2llIGhlYWRlcnMgYnkgdHVybmluZwogICAgLy8gaGVhZGVycyBpbnRvIGFuIGFycmF5IGxpa2UgaW4gbm9kZT8KICAgIC8vIFhYWDoganVzdCByZXBsYWNpbmcgYWxsIGNvb2tpZXMgZm9yIG5vdyAtIG5vdCBpZGVhbCEKICAgIHJlcy5oZWFkZXJzWydTZXQtQ29va2llJ10gPSBzdHI7Cn07CgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vY29yZSAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL2NvcmUiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLypnbG9iYWwgd2luZG93OiBmYWxzZSwgZ2V0Um93OiB0cnVlLCBzdGFydDogdHJ1ZSwgJDogZmFsc2UsIHBhZ2VUcmFja2VyOiB0cnVlLAogIGthbnNvOiB0cnVlLCBsb2c6IHRydWUsIGNvbnNvbGU6IHRydWUsIHNlbmQ6IHRydWUgKi8KCi8qKgogKiBUaGUgY29yZSBtb2R1bGUgY29udGFpbnMgZnVuY3Rpb25zIHVzZWQgYnkga2Fuc28gdG8gZmFjaWxpdGF0ZSB0aGUgcnVubmluZwogKiBvZiB5b3VyIGFwcC4gWW91IHNob3VsZG4ndCBuZWVkIHRvIHVzZSBhbnkgb2YgdGhlIGZ1bmN0aW9ucyBoZXJlIGRpcmVjdGx5CiAqIHVubGVzcyB5b3UncmUgbWVzc2luZyB3aXRoIHRoZSBpbnRlcm5hbHMgb2YgS2Fuc28uCiAqCiAqIEBtb2R1bGUKICovCgoKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgc2V0dGluZ3MgPSByZXF1aXJlKCcuL3NldHRpbmdzJyksIC8vIG1vZHVsZSBhdXRvLWdlbmVyYXRlZAogICAgdXJsID0gcmVxdWlyZSgnLi91cmwnKSwKICAgIGRiID0gcmVxdWlyZSgnLi9kYicpLAogICAgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyksCiAgICBzZXNzaW9uID0gcmVxdWlyZSgnLi9zZXNzaW9uJyksCiAgICBjb29raWVzID0gcmVxdWlyZSgnLi9jb29raWVzJyksCiAgICBmbGFzaG1lc3NhZ2VzID0gcmVxdWlyZSgnLi9mbGFzaG1lc3NhZ2VzJyksCiAgICB0ZW1wbGF0ZXMgPSByZXF1aXJlKCcuL3RlbXBsYXRlcycpLAogICAgZXZlbnRzID0gcmVxdWlyZSgnLi9ldmVudHMnKSwKICAgIHVybFBhcnNlID0gdXJsLnBhcnNlLAogICAgdXJsRm9ybWF0ID0gdXJsLmZvcm1hdCwKICAgIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fOwoKCi8qKgogKiBUaGlzIGlzIGJlY2F1c2UgdGhlIGZpcnN0IHBhZ2UgaGl0IGFsc28gdHJpZ2dlcnMga2Fuc28gdG8gaGFuZGxlIHRoZSB1cmwKICogY2xpZW50LXNpZGUuIEtub3dpbmcgaXQgaXMgdGhlIGZpcnN0IHBhZ2UgYmVpbmcgbG9hZGVkIG1lYW5zIHdlIGNhbiBzdG9wCiAqIHRoZSBwYWdlVHJhY2tlciBjb2RlIGZyb20gc3VibWl0dGluZyB0aGUgVVJMIHR3aWNlLiBFeHBvcnRlZCBiZWNhdXNlIHRoaXMKICogbWlnaHQgYmUgdXNlZnVsIGluZm9ybWF0aW9uIHRvIG90aGVyIG1vZHVsZXMsIGl0IHNob3VsZCBub3QgYmUgbW9kaWZpZWQKICogYnkgdGhlbS4KICovCgovL2V4cG9ydHMuaW5pdGlhbF9oaXQgPSB1dGlscy5pbml0aWFsX2hpdDsKCgovKioKICogVGhpcyB2YXJpYWJsZSBrZWVwcyB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgYnJvd3NlciBzdXBwb3J0cwogKiBwdXNoc3RhdGUgZm9yIG1hbmlwdWxhdGluZyBicm93c2VyIGhpc3RvcnkuCiAqLwoKZXhwb3J0cy5oaXN0b3J5X3N1cHBvcnQgPSBmYWxzZTsKCi8qKgogKiBTdG9yZXMgdGhlIGN1cnJlbnQgaHRtbDUgaGlzdG9yeSBzdGF0ZSB0byBkZXRlY3QgZHVwbGljYXRlIHBvcHN0YXRlIGV2ZW50cwogKi8KCmV4cG9ydHMuY3VycmVudF9zdGF0ZSA9IG51bGw7CgovKioKICogU2V0IHRvIHRydWUgd2hlbiBzZXRVUkwgaXMgY2FsbGVkIHNvIHRoZSBvbnBvcHN0YXRlIHdoaWNoIGZpcmVzIGFmdGVyd2FyZHMKICoga25vd3MgaXQgaXMgdGhlIHJlc3VsdCBvZiBhbiBleHBsaWNpdCBjYWxsIHRvIHNldFVSTCAoYXMgb3Bwb3NlZCB0byBjbGlja2luZwogKiB0aGUgYmFjaywgZm9yd2FyZCBvciByZWxvYWQgYnV0dG9ucykuIFRoaXMgbWVhbnMgd2UgY2FuIGF2b2lkIHNob3dpbmcgYQogKiBjb25maXJtYXRpb24gZGlhbG9nIGZvciBQT1NUIHJlcXVlc3RzIGluIHRoZXNlIGNpcmN1bXN0YW5jZXMuCiAqLwoKZXhwb3J0cy5zZXRfY2FsbGVkID0gZmFsc2U7CgoKaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7CiAgICBpZiAoIXdpbmRvdy5jb25zb2xlKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2cgaXMgZ29pbmcgdG8gY2F1c2UgZXJyb3JzLCBqdXN0IHN0dWIgdGhlIGZ1bmN0aW9ucwogICAgICAgIC8vIGZvciBub3cuIFRPRE86IGFkZCBsb2dnaW5nIHV0aWxpdHkgZm9yIElFPwogICAgICAgIHdpbmRvdy5jb25zb2xlID0gewogICAgICAgICAgICBsb2c6IGZ1bmN0aW9uICgpIHt9LAogICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkge30sCiAgICAgICAgICAgIGluZm86IGZ1bmN0aW9uICgpIHt9LAogICAgICAgICAgICB3YXJuOiBmdW5jdGlvbiAoKSB7fQogICAgICAgIH07CiAgICB9CiAgICB2YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlOwp9CgoKLyoqCiAqIEdsb2JhbCBmdW5jdGlvbnMgcmVxdWlyZWQgdG8gbWF0Y2ggdGhlIENvdWNoREIgSmF2YVNjcmlwdCBlbnZpcm9ubWVudC4KICovCgppZiAodHlwZW9mIGdldFJvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIHdpbmRvdy5nZXRSb3cgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9Owp9CmlmICh0eXBlb2Ygc3RhcnQgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7CiAgICB3aW5kb3cuc3RhcnQgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgIC8vY29uc29sZS5sb2coJ3N0YXJ0Jyk7CiAgICAgICAgLy9jb25zb2xlLmxvZyhvcHRpb25zKTsKICAgIH07Cn0KaWYgKHR5cGVvZiBzZW5kID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgewogICAgd2luZG93LnNlbmQgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgIC8vY29uc29sZS5sb2coJ3NlbmQnKTsKICAgICAgICAvL2NvbnNvbGUubG9nKG9wdGlvbnMpOwogICAgfTsKfQppZiAodHlwZW9mIGxvZyA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIHdpbmRvdy5sb2cgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7CiAgICB9Owp9CgoKLyoqCiAqIFVzZWQgdG8gc3RvcmUgdXNlckN0eCwgcGVyaW9kaWNhbGx5IHVwZGF0ZWQgbGlrZSBvbiBzZXNzaW9uLmxvZ2luIGFuZAogKiBzZXNzaW9uLmxvZ291dC4gVE9ETzogT3IgaWYgYSBwZXJtaXNzaW9ucyBlcnJvciBpcyByZXR1cm5lZCBmcm9tIGEgZGIgbWV0aG9kPwogKi8KCi8vIFRPRE86IGFkZGVkIHRvIHV0aWxzIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgYnVnIGluIGNvdWNoZGIKLy9leHBvcnRzLnVzZXJDdHggPSB1dGlscy51c2VyQ3R4OwoKCgoKLyoqCiAqIFRoZSBtb2R1bGUgbG9hZGVkIGFzIHRoZSBkZXNpZ24gZG9jdW1lbnQgKGxvYWQgcHJvcGVydHkgaW4ga2Fuc28uanNvbikuCiAqIExpa2VseSB0byBjYXVzZSBjaXJjdWxhciByZXF1aXJlIGluIGNvdWNoZGIgc28gb25seSBydW4gYnJvd3NlciBzaWRlLgogKiBUT0RPOiB3aGVuIGNpcmN1bGFyIHJlcXVpcmVzIGFyZSBmaXhlZCBpbiBjb3VjaGRiLCByZW1vdmUgdGhlIGlzQnJvd3NlciBjaGVjawogKi8KCmlmICh1dGlscy5pc0Jyb3dzZXIpIHsKICAgIGV4cG9ydHMuYXBwID0ge307CiAgICBpZiAoc2V0dGluZ3MubG9hZCkgewogICAgICAgIGV4cG9ydHMuYXBwID0gcmVxdWlyZShzZXR0aW5ncy5sb2FkKTsKICAgIH0KfQoKCi8qKgogKiBDYWxsZWQgYnkga2Fuc28uanMgb25jZSB0aGUgZGVzaWduIGRvYyBoYXMgYmVlbiBsb2FkZWQuCiAqLwoKZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkgewoKICAgIGlmICh3aW5kb3cuaGlzdG9yeSAmJiBoaXN0b3J5LnB1c2hTdGF0ZSkgewogICAgICAgIGV4cG9ydHMuaGlzdG9yeV9zdXBwb3J0ID0gdHJ1ZTsKCiAgICAgICAgJCgnZm9ybScpLmxpdmUoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldikgewogICAgICAgICAgICB2YXIgYWN0aW9uID0gJCh0aGlzKS5hdHRyKCdhY3Rpb24nKSB8fCBleHBvcnRzLmdldFVSTCgpOwogICAgICAgICAgICB2YXIgbWV0aG9kID0gJCh0aGlzKS5hdHRyKCdtZXRob2QnKS50b1VwcGVyQ2FzZSgpOwoKICAgICAgICAgICAgLy8gX3Nlc3Npb24gaXMgYSBzcGVjaWFsIGNhc2UgYWx3YXlzIGF2YWlsYWJsZSBhdCB0aGUgcm9vdCB1cmwKICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJy9fc2Vzc2lvbicgJiYgZXhwb3J0cy5pc0FwcFVSTChhY3Rpb24pKSB7CiAgICAgICAgICAgICAgICB2YXIgdXJsID0gZXhwb3J0cy5hcHBQYXRoKGFjdGlvbik7CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgdmFyIGZpZWxkcyA9ICQodGhpcykuc2VyaWFsaXplQXJyYXkoKTsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGRhdGFbZmllbGRzW2ldLm5hbWVdID0gZmllbGRzW2ldLnZhbHVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZXhwb3J0cy5zZXRVUkwobWV0aG9kLCB1cmwsIGRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgICQoJ2EnKS5saXZlKCdjbGljaycsIGZ1bmN0aW9uIChldikgewogICAgICAgICAgICB2YXIgaHJlZiA9ICQodGhpcykuYXR0cignaHJlZicpOwoKICAgICAgICAgICAgaWYgKGhyZWYgJiYgZXhwb3J0cy5pc0FwcFVSTChocmVmKSkgewogICAgICAgICAgICAgICAgdmFyIHVybCA9IGV4cG9ydHMuYXBwUGF0aChocmVmKTsKICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBleHBvcnRzLnNldFVSTCgnR0VUJywgdXJsLCB7fSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgd2luZG93Lm9ucG9wc3RhdGUgPSBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgdmFyIHVybCA9IGV4cG9ydHMuZ2V0VVJMKCk7CiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGV2LnN0YXRlIHx8IHt9OwogICAgICAgICAgICB2YXIgbWV0aG9kID0gc3RhdGUubWV0aG9kIHx8ICdHRVQnOwogICAgICAgICAgICB2YXIgZGF0YSA9IHN0YXRlLmRhdGE7CiAgICAgICAgICAgIHZhciBjb3VudCA9IHN0YXRlLmhpc3RvcnlfY291bnQ7CgogICAgICAgICAgICBpZiAobWV0aG9kICE9PSAnR0VUJyAmJiBtZXRob2QgIT09ICdIRUFEJykgewogICAgICAgICAgICAgICAgLy8gdW5zYWZlIG1ldGhvZCwgdW5sZXNzIGNhdXNlZCBieSBhbiBleHBsaWNpdCBjYWxsIHRvIHNldFVSTAogICAgICAgICAgICAgICAgLy8gc2hvdyBhIGNvbmZpcm1hdGlvbiBkaWFsb2cKICAgICAgICAgICAgICAgIGlmICghZXhwb3J0cy5zZXRfY2FsbGVkKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogYXQgdGhpcyBwb2ludCBpcyBpdCB0b28gbGF0ZSB0byB1bmRvIHRoZSBwb3BzdGF0ZT8KICAgICAgICAgICAgICAgICAgICB2YXIgcmVzZW5kID0gY29uZmlybSgKICAgICAgICAgICAgICAgICAgICAgICAgJ0luIG9yZGVyIHRvIGNvbXBsZXRlIHRoaXMgcmVxdWVzdCB0aGUgYnJvd3NlciB3aWxsICcgKwogICAgICAgICAgICAgICAgICAgICAgICAnaGF2ZSB0byByZS1zZW5kIGluZm9ybWF0aW9uLCByZXBlYXRpbmcgYW55ICcgKwogICAgICAgICAgICAgICAgICAgICAgICAncHJldmlvdXMgYWN0aW9uIChzdWNoIGFzIGNyZWF0aW5nIGEgZG9jdW1lbnQpLlxuXG4nICsKICAgICAgICAgICAgICAgICAgICAgICAgJ1JlLXNlbmQgaW5mb3JtYXRpb24/JwogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNlbmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJfY291bnQgPSBleHBvcnRzLmN1cnJlbnRfc3RhdGUuaGlzdG9yeV9jb3VudDsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkuZ28oY3Vycl9jb3VudCAtIGNvdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyByZXNldCBzZXRfY2FsbGVkCiAgICAgICAgICAgIGV4cG9ydHMuc2V0X2NhbGxlZCA9IGZhbHNlOwoKICAgICAgICAgICAgdmFyIGN1cnIgPSBleHBvcnRzLmN1cnJlbnRfc3RhdGU7CiAgICAgICAgICAgIGlmIChjdXJyICYmCiAgICAgICAgICAgICAgICBjdXJyLnVybCA9PT0gdXJsICYmCiAgICAgICAgICAgICAgICBjdXJyLnRpbWVzdGFtcCA9PT0gc3RhdGUudGltZXN0YW1wICYmCiAgICAgICAgICAgICAgICAoY3Vyci5tZXRob2QgfHwgJ0dFVCcpID09PSAoc3RhdGUubWV0aG9kIHx8ICdHRVQnKSkgewogICAgICAgICAgICAgICAgLy8gZHVwbGljYXRlIHBvcHN0YXRlIGV2ZW50CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZHVwbGljYXRlIHBvcHN0YXRlIGV2ZW50Jyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZXhwb3J0cy5jdXJyZW50X3N0YXRlID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHN0YXRlLnRpbWVzdGFtcCwKICAgICAgICAgICAgICAgIGhpc3RvcnlfY291bnQ6IGNvdW50CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGV4cG9ydHMuaGFuZGxlKG1ldGhvZCwgdXJsLCBkYXRhKTsKICAgICAgICB9OwogICAgICAgIHdpbmRvdy5vbnBvcHN0YXRlKHt9KTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIC8vIFRoaXMgYnJvd3NlciBoYXMgbm8gaHRtbDUgIGhpc3Rvcnkgc3VwcG9ydCwgYXR0ZW1wdCB0bwogICAgICAgIC8vIGVuaGFuY2UgdGhlIHBhZ2UgYW55d2F5CiAgICAgICAgLy8gVE9ETzogZmlndXJlIG91dCB0aGUgZGF0YSBmcm9tIHRoZSBpbml0aWFsIHJlcXVlc3QgYXMgdGhpcwogICAgICAgIC8vIHJlLXJlbmRlcmluZyBtaWdodCB3aXBlIHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgcmVzcG9uc2UKICAgICAgICAvLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBtZXRob2QgZnJvbSB0aGUgaW5pdGlhbCByZXF1ZXN0CiAgICAgICAgLy8gYmVjYXVzZSB0aGUgaW5pdGlhbCByZXF1ZXN0IG1heSBoYXZlIGJlZW4gYSBQT1NUIChwb2ludGluZyB0bwogICAgICAgIC8vIGFuIHVwZGF0ZSBmdW5jdGlvbiBpbnN0ZWFkIG9mIHRoZSBzaG93IHRoaXMgR0VUIG1pZ2h0IHJlbmRlcikKICAgICAgICAvLwogICAgICAgIC8vIC0gcGVyaGFwcyB1c2UgY29va2llcyB0byBwYXNzIHRoZSBtZXRob2QgYW5kIGRhdGEgYmFjayB0byB0aGUgY2xpZW50PwogICAgICAgIC8vCiAgICAgICAgZXhwb3J0cy5oYW5kbGUoJ0dFVCcsIGV4cG9ydHMuZ2V0VVJMKCksIHt9KTsKICAgIH0KCiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBhZnRlciB1c2VyQ3R4IGlzIGF2YWlsYWJsZT8/CiAgICAvLyBjYWxsIGluaXQgb24gYXBwIHRvbwogICAgZXZlbnRzLmVtaXQoJ2luaXQnKTsKfTsKCgovKioKICogRXh0cmFjdHMgZ3JvdXBzIGZyb20gYSB1cmwsIGVnOgogKiAnL3NvbWUvcGF0aCcgd2l0aCBwYXR0ZXJuICcvc29tZS86bmFtZScgLT4ge25hbWU6ICdwYXRoJ30KICoKICogQG5hbWUgcmV3cml0ZUdyb3VwcyhwYXR0ZXJuLCB1cmwpCiAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuCiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwKICogQHJldHVybnMge09iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJld3JpdGVHcm91cHMgPSBmdW5jdGlvbiAocGF0dGVybiwgdXJsKSB7CiAgICB2YXIgcGF0aG5hbWUgPSB1cmxQYXJzZSh1cmwpLnBhdGhuYW1lOwogICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgKICAgICAgICAnXicgKyBwYXR0ZXJuLnJlcGxhY2UoLzpcdysvZywgJyhbXi9dKyknKS5yZXBsYWNlKC9cKi9nLCAnLionKSArICckJwogICAgKTsKICAgIHZhciBtID0gcmUuZXhlYyhwYXRobmFtZSk7CiAgICBpZiAoIW0pIHsKICAgICAgICByZXR1cm4gW107CiAgICB9CiAgICB2YXIgdmFsdWVzID0gbS5zbGljZSgxKTsKICAgIHZhciBrZXlzID0gW107CiAgICB2YXIgbWF0Y2hlcyA9IHBhdHRlcm4ubWF0Y2goLzpcdysvZykgfHwgW107CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBrZXlzLnB1c2gobWF0Y2hlc1tpXS5zdWJzdHIoMSkpOwogICAgfQogICAgdmFyIGdyb3VwcyA9IHt9OwogICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgZ3JvdXBzW2tleXNbal1dID0gdmFsdWVzW2pdOwogICAgfQogICAgcmV0dXJuIGdyb3VwczsKfTsKCi8qKgogKiBFeHRyYWN0cyBhIHNwbGF0IHZhbHVlIGZyb20gYSByZXdyaXRlIHBhdHRlcm4gYW5kIG1hdGNoaW5nIFVSTC4KICoKICogQG5hbWUgcmV3cml0ZVNwbGF0KHBhdHRlcm4sIHVybCkKICogQHBhcmFtIHtTdHJpbmd9IHBhdHRlcm4KICogQHBhcmFtIHtTdHJpbmd9IHVybAogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMucmV3cml0ZVNwbGF0ID0gZnVuY3Rpb24gKHBhdHRlcm4sIHVybCkgewogICAgLy8gc3BsYXRzIGFyZSBvbmx5IHN1cHBvcnRlZCBhdCB0aGUgZW5kIG9mIGEgcmV3cml0ZSBwYXR0ZXJuCiAgICBpZiAocGF0dGVybi5jaGFyQXQocGF0dGVybi5sZW5ndGggLSAxKSA9PT0gJyonKSB7CiAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChwYXR0ZXJuLnN1YnN0cigwLCBwYXR0ZXJuLmxlbmd0aCAtIDEpICsgJyguKiknKTsKICAgICAgICB2YXIgbWF0Y2ggPSByZS5leGVjKHVybCk7CiAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgIHJldHVybiBtYXRjaFsxXTsKICAgICAgICB9CiAgICB9Cn07CgoKLyoqCiAqIEF0dGVtcHRzIHRvIG1hdGNoIHJld3JpdGUgZnJvbSBwYXR0ZXJucyB0byBhIFVSTCwgcmV0dXJuaW5nIHRoZQogKiBtYXRjaGluZyByZXdyaXRlIG9iamVjdCBpZiBzdWNjZXNzZnVsLgogKgogKiBAbmFtZSBtYXRjaFVSTChtZXRob2QsIHVybCkKICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZAogKiBAcGFyYW0ge1N0cmluZ30gdXJsCiAqIEByZXR1cm5zIHtPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5tYXRjaFVSTCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCkgewogICAgdmFyIHBhdGhuYW1lID0gdXJsUGFyc2UodXJsKS5wYXRobmFtZTsKICAgIHZhciByZXdyaXRlcyA9IGthbnNvLmFwcC5yZXdyaXRlczsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmV3cml0ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgciA9IHJld3JpdGVzW2ldOwogICAgICAgIGlmICghci5tZXRob2QgfHwgbWV0aG9kID09PSByLm1ldGhvZCkgewogICAgICAgICAgICB2YXIgZnJvbSA9IHIuZnJvbTsKICAgICAgICAgICAgZnJvbSA9IGZyb20ucmVwbGFjZSgvXCokLywgJyguKiknKTsKICAgICAgICAgICAgZnJvbSA9IGZyb20ucmVwbGFjZSgvOlx3Ky9nLCAnKFteL10rKScpOwogICAgICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKCdeJyArIGZyb20gKyAnJCcpOwogICAgICAgICAgICBpZiAocmUudGVzdChwYXRobmFtZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiByOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwoKLyoqCiAqIFJlcGxhY2UgZ3JvdXAgbmFtZXMgaW4gYSBzdHJpbmcgd2l0aCB0aGUgdmFsdWUgb2YgdGhhdCBncm91cAogKiBlZzogIi86bmFtZSIgd2l0aCBncm91cHMge25hbWU6ICd0ZXN0J30gLT4gIi90ZXN0IgogKgogKiBAbmFtZSByZXBsYWNlR3JvdXBzKHZhbCwgZ3JvdXBzLCBzcGxhdCkKICogQHBhcmFtIHtTdHJpbmd9IHZhbAogKiBAcGFyYW0ge09iamVjdH0gZ3JvdXBzCiAqIEBwYXJhbSB7U3RyaW5nfSBzcGxhdAogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMucmVwbGFjZUdyb3VwcyA9IGZ1bmN0aW9uICh2YWwsIGdyb3Vwcywgc3BsYXQpIHsKICAgIHZhciBrLCBtYXRjaCwgcmVzdWx0ID0gdmFsOwoKICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewogICAgICAgIHJlc3VsdCA9IHZhbC5zcGxpdCgnLycpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIG1hdGNoID0gZmFsc2U7CiAgICAgICAgICAgIGZvciAoayBpbiBncm91cHMpIHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbaV0gPT09ICc6JyArIGspIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBkZWNvZGVVUklDb21wb25lbnQoZ3JvdXBzW2tdKTsKICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFtYXRjaCAmJiByZXN1bHRbaV0gPT09ICcqJykgewogICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gc3BsYXQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmpvaW4oJy8nKTsKICAgIH0KICAgIGVsc2UgaWYgKHZhbC5sZW5ndGgpIHsKICAgICAgICByZXN1bHQgPSB2YWwuc2xpY2UoKTsKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbC5sZW5ndGg7IGorKykgewogICAgICAgICAgICBtYXRjaCA9IGZhbHNlOwogICAgICAgICAgICBmb3IgKGsgaW4gZ3JvdXBzKSB7CiAgICAgICAgICAgICAgICBpZiAodmFsW2pdID09PSAnOicgKyBrKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2pdID0gZGVjb2RlVVJJQ29tcG9uZW50KGdyb3Vwc1trXSk7CiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghbWF0Y2ggJiYgdmFsW2pdID09PSAnKicpIHsKICAgICAgICAgICAgICAgIHJlc3VsdFtqXSA9IHNwbGF0OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKfTsKCgovKioKICogQ3JlYXRlcyBhIG5ldyByZXF1ZXN0IG9iamVjdCBmcm9tIGEgdXJsIGFuZCBtYXRjaGluZyByZXdyaXRlIG9iamVjdC4KICogUXVlcnkgcGFyYW1ldGVycyBhcmUgYXV0b21hdGljYWxseSBwb3B1bGF0ZWQgZnJvbSByZXdyaXRlIHBhdHRlcm4uCiAqCiAqIEBuYW1lIGNyZWF0ZVJlcXVlc3QobWV0aG9kLCB1cmwsIGRhdGEsIG1hdGNoLCBjYWxsYmFjaykKICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZAogKiBAcGFyYW0ge1N0cmluZ30gdXJsCiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAqIEBwYXJhbSB7T2JqZWN0fSBtYXRjaAogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSwgbWF0Y2gsIGNhbGxiYWNrKSB7CiAgICB2YXIgZ3JvdXBzID0gZXhwb3J0cy5yZXdyaXRlR3JvdXBzKG1hdGNoLmZyb20sIHVybCk7CiAgICB2YXIgcXVlcnkgPSB1cmxQYXJzZSh1cmwsIHRydWUpLnF1ZXJ5IHx8IHt9OwogICAgdmFyIGs7CiAgICBpZiAobWF0Y2gucXVlcnkpIHsKICAgICAgICBmb3IgKGsgaW4gbWF0Y2gucXVlcnkpIHsKICAgICAgICAgICAgaWYgKG1hdGNoLnF1ZXJ5Lmhhc093blByb3BlcnR5KGspKSB7CiAgICAgICAgICAgICAgICBxdWVyeVtrXSA9IGV4cG9ydHMucmVwbGFjZUdyb3VwcyhtYXRjaC5xdWVyeVtrXSwgZ3JvdXBzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChncm91cHMpIHsKICAgICAgICBmb3IgKGsgaW4gZ3JvdXBzKSB7CiAgICAgICAgICAgIGlmIChncm91cHMuaGFzT3duUHJvcGVydHkoaykpIHsKICAgICAgICAgICAgICAgIHF1ZXJ5W2tdID0gZGVjb2RlVVJJQ29tcG9uZW50KGdyb3Vwc1trXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAvLyBzcGxhdHMgYXJlIGF2YWlsYWJsZSBmb3IgcmV3cml0aW5nIG1hdGNoLnRvLCBidXQgbm90IGFjY2Vzc2libGUgb24KICAgIC8vIHRoZSByZXF1ZXN0IG9iamVjdCAoY291Y2hkYiAxLjEueCksIHN0b3JpbmcgaW4gYSBzZXBhcmF0ZSB2YXJpYWJsZQogICAgLy8gZm9yIG5vdwogICAgdmFyIHNwbGF0ID0gZXhwb3J0cy5yZXdyaXRlU3BsYXQobWF0Y2guZnJvbSwgdXJsKTsKICAgIHZhciB0byA9IGV4cG9ydHMucmVwbGFjZUdyb3VwcyhtYXRjaC50bywgcXVlcnksIHNwbGF0KTsKICAgIHZhciByZXEgPSB7CiAgICAgICAgbWV0aG9kOiBtZXRob2QsCiAgICAgICAgcXVlcnk6IHF1ZXJ5LAogICAgICAgIGhlYWRlcnM6IHt9LAogICAgICAgIHBhdGg6IHRvLnNwbGl0KCcvJyksCiAgICAgICAgY2xpZW50OiB0cnVlLAogICAgICAgIGluaXRpYWxfaGl0OiB1dGlscy5pbml0aWFsX2hpdCwKICAgICAgICBjb29raWU6IGNvb2tpZXMucmVhZEJyb3dzZXJDb29raWVzKCkKICAgIH07CiAgICBpZiAoZGF0YSkgewogICAgICAgIHJlcS5mb3JtID0gZGF0YTsKICAgIH0KCiAgICBkYi5uZXdVVUlEKDEwMCwgZnVuY3Rpb24gKGVyciwgdXVpZCkgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIHJlcS51dWlkID0gdXVpZDsKCiAgICAgICAgaWYgKHV0aWxzLnVzZXJDdHgpIHsKICAgICAgICAgICAgcmVxLnVzZXJDdHggPSB1dGlscy51c2VyQ3R4OwogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVxKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHNlc3Npb24uaW5mbyhmdW5jdGlvbiAoZXJyLCBzZXNzaW9uKSB7CiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXEudXNlckN0eCA9IHNlc3Npb24udXNlckN0eDsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0pOwp9OwoKCi8qKgogKiBIYW5kbGVzIHJldHVybiB2YWx1ZXMgZnJvbSBzaG93IC8gbGlzdCAvIHVwZGF0ZSBmdW5jdGlvbnMKICovCgpleHBvcnRzLmhhbmRsZVJlc3BvbnNlID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7CiAgICAvL2NvbnNvbGUubG9nKCdyZXNwb25zZScpOwogICAgLy9jb25zb2xlLmxvZyhyZXMpOwogICAgaWYgKHJlcSAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JykgewogICAgICAgIGlmIChyZXMuaGVhZGVycykgewogICAgICAgICAgICBpZiAocmVzLmhlYWRlcnNbJ1NldC1Db29raWUnXSkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gcmVzLmhlYWRlcnNbJ1NldC1Db29raWUnXTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbG9jID0gcmVzLmhlYWRlcnNbJ0xvY2F0aW9uJ107CiAgICAgICAgICAgIGlmIChsb2MgJiYgXy5pbmRleE9mKFszMDEsIDMwMiwgMzAzLCAzMDddLCByZXMuY29kZSkgIT09IC0xKSB7CiAgICAgICAgICAgICAgICBpZiAoZXhwb3J0cy5pc0FwcFVSTChsb2MpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgbWV0aG9kIHRvIEdFVCB1bmxlc3MgcmVzcG9uc2UgaXMgYSAzMDcKICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gcmVzLmNvZGUgPT09IDMwNyA/IHJlcS5tZXRob2QgfHwgJ0dFVCc6ICdHRVQnOwogICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuc2V0VVJMKG1ldGhvZCwgZXhwb3J0cy5hcHBQYXRoKGxvYykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBsb2M7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn07CgoKLyoqCiAqIEZldGNoZXMgdGhlIHJlbGV2YW50IGRvY3VtZW50IGFuZCBjYWxscyB0aGUgbmFtZWQgc2hvdyBmdW5jdGlvbi4KICoKICogQG5hbWUgcnVuU2hvd0Jyb3dzZXIocmVxLCBuYW1lLCBkb2NpZCwgY2FsbGJhY2spCiAqIEBwYXJhbSB7T2JqZWN0fSByZXEKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHBhcmFtIHtTdHJpbmd9IGRvY2lkCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5ydW5TaG93QnJvd3NlciA9IGZ1bmN0aW9uIChyZXEsIG5hbWUsIGRvY2lkLCBjYWxsYmFjaykgewogICAgdmFyIHJlc3VsdDsKICAgIHZhciBmbiA9IGthbnNvLmFwcC5zaG93c1tuYW1lXTsKCiAgICB2YXIgaW5mbyA9IHsKICAgICAgICB0eXBlOiAnc2hvdycsCiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICB0YXJnZXQ6IGRvY2lkLAogICAgICAgIHF1ZXJ5OiByZXEucXVlcnksCiAgICAgICAgZm46IGZuCiAgICB9OwogICAgZXZlbnRzLmVtaXQoJ2JlZm9yZVJlc291cmNlJywgaW5mbyk7CgogICAgaWYgKGRvY2lkKSB7CiAgICAgICAgZGIuZ2V0RG9jKGRvY2lkLCByZXEucXVlcnksIGZ1bmN0aW9uIChlcnIsIGRvYykgewogICAgICAgICAgICB2YXIgY3VycmVudF9yZXEgPSAodXRpbHMuY3VycmVudFJlcXVlc3QoKSB8fCB7fSk7CiAgICAgICAgICAgIGlmIChjdXJyZW50X3JlcS51dWlkID09PSByZXEudXVpZCkgewogICAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHJlcyA9IGV4cG9ydHMucnVuU2hvdyhmbiwgZG9jLCByZXEpOwogICAgICAgICAgICAgICAgZXZlbnRzLmVtaXQoJ2FmdGVyUmVzcG9uc2UnLCBpbmZvLCByZXEsIHJlcyk7CiAgICAgICAgICAgICAgICBpZiAocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5oYW5kbGVSZXNwb25zZShyZXEsIHJlcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5lZCB3aXRob3V0IHJlc3BvbnNlLCBtZWFuaW5nIGNvb2tpZXMgd29uJ3QgYmUgc2V0CiAgICAgICAgICAgICAgICAgICAgLy8gYnkgaGFuZGxlUmVzcG9uc2VIZWFkZXJzCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcS5vdXRnb2luZ19mbGFzaF9tZXNzYWdlcykgewogICAgICAgICAgICAgICAgICAgICAgICBmbGFzaG1lc3NhZ2VzLnNldENvb2tpZUJyb3dzZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEsIHJlcS5vdXRnb2luZ19mbGFzaF9tZXNzYWdlcwogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHZhciByZXMgPSBleHBvcnRzLnJ1blNob3coZm4sIG51bGwsIHJlcSk7CiAgICAgICAgZXZlbnRzLmVtaXQoJ2FmdGVyUmVzcG9uc2UnLCBpbmZvLCByZXEsIHJlcyk7CiAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgICBleHBvcnRzLmhhbmRsZVJlc3BvbnNlKHJlcSwgcmVzKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIC8vIHJldHVybmVkIHdpdGhvdXQgcmVzcG9uc2UsIG1lYW5pbmcgY29va2llcyB3b24ndCBiZSBzZXQgYnkKICAgICAgICAgICAgLy8gaGFuZGxlUmVzcG9uc2VIZWFkZXJzCiAgICAgICAgICAgIGlmIChyZXEub3V0Z29pbmdfZmxhc2hfbWVzc2FnZXMpIHsKICAgICAgICAgICAgICAgIGZsYXNobWVzc2FnZXMuc2V0Q29va2llQnJvd3NlcigKICAgICAgICAgICAgICAgICAgICByZXEsIHJlcS5vdXRnb2luZ19mbGFzaF9tZXNzYWdlcwogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjYWxsYmFjaygpOwogICAgfQp9OwoKLyoqCiAqIEhlbHBlciBmb3IgcnVuU2hvdy9ydW5MaXN0LgogKgogKiBAbmFtZSBwYXJzZVJlc3BvbnNlKHJlcSwgcmVzKQogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEBwYXJhbSB7T2JqZWN0fSByZXMKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnBhcnNlUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVxLCByZXMpIHsKICAgIHZhciBpZHMgPSBfLndpdGhvdXQoXy5rZXlzKHJlcyksICd0aXRsZScsICdjb2RlJywgJ2hlYWRlcnMnLCAnYm9keScpOwogICAgaWYgKHJlcS5jbGllbnQpIHsKICAgICAgICBpZiAocmVzLnRpdGxlKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gcmVzLnRpdGxlOwogICAgICAgIH0KICAgICAgICBfLmVhY2goaWRzLCBmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgJCgnIycgKyBpZCkuaHRtbChyZXNbaWRdKTsKICAgICAgICB9KTsKICAgIH0KICAgIGVsc2UgaWYgKCFyZXMuYm9keSkgewogICAgICAgIHZhciBjb250ZXh0ID0ge3RpdGxlOiByZXMudGl0bGUgfHwgJyd9OwogICAgICAgIF8uZWFjaChpZHMsIGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgICBjb250ZXh0W2lkXSA9IHJlc1tpZF07CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGJvZHkgPSB0ZW1wbGF0ZXMucmVuZGVyKAogICAgICAgICAgICBzZXR0aW5ncy5iYXNlX3RlbXBsYXRlIHx8ICdiYXNlLmh0bWwnLCByZXEsIGNvbnRleHQKICAgICAgICApOwogICAgICAgIHJlcyA9IHsKICAgICAgICAgICAgYm9keTogYm9keSwKICAgICAgICAgICAgY29kZTogcmVzLmNvZGUgfHwgMjAwLAogICAgICAgICAgICBoZWFkZXJzOiByZXMuaGVhZGVycwogICAgICAgIH07CiAgICB9CiAgICByZXR1cm4gewogICAgICAgIGJvZHk6IHJlcy5ib2R5LAogICAgICAgIGNvZGU6IHJlcy5jb2RlLAogICAgICAgIGhlYWRlcnM6IHJlcy5oZWFkZXJzCiAgICB9Owp9OwoKLyoqCiAqIFJ1bnMgYSBzaG93IGZ1bmN0aW9uIHdpdGggdGhlIGdpdmVuIGRvY3VtZW50IGFuZCByZXF1ZXN0IG9iamVjdCwKICogZW1pdHRpbmcgcmVsZXZhbnQgZXZlbnRzLiBUaGlzIGZ1bmN0aW9uIHJ1bnMgYm90aCBzZXJ2ZXIgYW5kIGNsaWVudC1zaWRlLgogKgogKiBAbmFtZSBydW5TaG93KGZuLCBkb2MsIHJlcSkKICogQHBhcmFtIHtGdW5jdGlvbn0gZm4KICogQHBhcmFtIHtPYmplY3R9IGRvYwogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5wYXJzZVJlc3BvbnNlID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7CiAgICB2YXIgaWRzID0gXy53aXRob3V0KF8ua2V5cyhyZXMpLCAndGl0bGUnLCAnY29kZScsICdoZWFkZXJzJywgJ2JvZHknKTsKICAgIGlmIChyZXEuY2xpZW50KSB7CiAgICAgICAgaWYgKHJlcy50aXRsZSkgewogICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IHJlcy50aXRsZTsKICAgICAgICB9CiAgICAgICAgXy5lYWNoKGlkcywgZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgICQoJyMnICsgaWQpLmh0bWwocmVzW2lkXSk7CiAgICAgICAgfSk7CiAgICB9CiAgICBlbHNlIGlmICghcmVzLmJvZHkpIHsKICAgICAgICB2YXIgY29udGV4dCA9IHt0aXRsZTogcmVzLnRpdGxlIHx8ICcnfTsKICAgICAgICBfLmVhY2goaWRzLCBmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgY29udGV4dFtpZF0gPSByZXNbaWRdOwogICAgICAgIH0pOwogICAgICAgIHZhciBib2R5ID0gdGVtcGxhdGVzLnJlbmRlcigKICAgICAgICAgICAgc2V0dGluZ3MuYmFzZV90ZW1wbGF0ZSB8fCAnYmFzZS5odG1sJywgcmVxLCBjb250ZXh0CiAgICAgICAgKTsKICAgICAgICByZXMgPSB7CiAgICAgICAgICAgIGJvZHk6IGJvZHksCiAgICAgICAgICAgIGNvZGU6IHJlcy5jb2RlIHx8IDIwMCwKICAgICAgICAgICAgaGVhZGVyczogcmVzLmhlYWRlcnMKICAgICAgICB9OwogICAgfQogICAgcmV0dXJuIHsKICAgICAgICBib2R5OiByZXMuYm9keSwKICAgICAgICBjb2RlOiByZXMuY29kZSwKICAgICAgICBoZWFkZXJzOiByZXMuaGVhZGVycwogICAgfTsKfTsKCmV4cG9ydHMucnVuU2hvdyA9IGZ1bmN0aW9uIChmbiwgZG9jLCByZXEpIHsKICAgIHJlcSA9IGZsYXNobWVzc2FnZXMudXBkYXRlUmVxdWVzdChyZXEpOwogICAgdXRpbHMuY3VycmVudFJlcXVlc3QocmVxKTsKICAgIHZhciBpbmZvID0gewogICAgICAgIHR5cGU6ICdzaG93JywKICAgICAgICBuYW1lOiByZXEucGF0aFsxXSwKICAgICAgICB0YXJnZXQ6IHJlcS5wYXRoWzJdLAogICAgICAgIHF1ZXJ5OiByZXEucXVlcnksCiAgICAgICAgZm46IGZuCiAgICB9OwogICAgZXZlbnRzLmVtaXQoJ2JlZm9yZVJlcXVlc3QnLCBpbmZvLCByZXEpOwogICAgdmFyIHJlcyA9IGZuKGRvYywgcmVxKTsKCiAgICBpZiAoIShyZXMgaW5zdGFuY2VvZiBPYmplY3QpKSB7CiAgICAgICAgcmVzID0ge2NvZGU6IDIwMCwgYm9keTogcmVzfTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHJlcyA9IGV4cG9ydHMucGFyc2VSZXNwb25zZShyZXEsIHJlcyk7CiAgICB9CiAgICBldmVudHMuZW1pdCgnYmVmb3JlUmVzcG9uc2VTdGFydCcsIGluZm8sIHJlcSwgcmVzKTsKICAgIGV2ZW50cy5lbWl0KCdiZWZvcmVSZXNwb25zZURhdGEnLCBpbmZvLCByZXEsIHJlcywgcmVzLmJvZHkgfHwgJycpOwoKICAgIHJlcyA9IGZsYXNobWVzc2FnZXMudXBkYXRlUmVzcG9uc2UocmVxLCByZXMpOwogICAgcmVxLnJlc3BvbnNlX3JlY2VpdmVkID0gdHJ1ZTsKICAgIHJldHVybiByZXM7Cn07CgovKioKICogRmV0Y2hlcyB0aGUgcmVsZXZhbnQgZG9jdW1lbnQgYW5kIGNhbGxzIHRoZSBuYW1lZCB1cGRhdGUgZnVuY3Rpb24uCiAqCiAqIEBuYW1lIHJ1blVwZGF0ZUJyb3dzZXIocmVxLCBuYW1lLCBkb2NpZCwgY2FsbGJhY2spCiAqIEBwYXJhbSB7T2JqZWN0fSByZXEKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHBhcmFtIHtTdHJpbmd9IGRvY2lkCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5ydW5VcGRhdGVCcm93c2VyID0gZnVuY3Rpb24gKHJlcSwgbmFtZSwgZG9jaWQsIGNhbGxiYWNrKSB7CiAgICB2YXIgcmVzdWx0OwogICAgdmFyIGZuID0ga2Fuc28uYXBwLnVwZGF0ZXNbbmFtZV07CgogICAgdmFyIGluZm8gPSB7CiAgICAgICAgdHlwZTogJ3VwZGF0ZScsCiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICB0YXJnZXQ6IGRvY2lkLAogICAgICAgIHF1ZXJ5OiByZXEucXVlcnksCiAgICAgICAgZm46IGZuCiAgICB9OwogICAgZXZlbnRzLmVtaXQoJ2JlZm9yZVJlc291cmNlJywgaW5mbyk7CgogICAgaWYgKGRvY2lkKSB7CiAgICAgICAgZGIuZ2V0RG9jKGRvY2lkLCByZXEucXVlcnksIGZ1bmN0aW9uIChlcnIsIGRvYykgewogICAgICAgICAgICB2YXIgY3VycmVudF9yZXEgPSAodXRpbHMuY3VycmVudFJlcXVlc3QoKSB8fCB7fSk7CiAgICAgICAgICAgIGlmIChjdXJyZW50X3JlcS51dWlkID09PSByZXEudXVpZCkgewogICAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZXhwb3J0cy5ydW5VcGRhdGUoZm4sIGRvYywgcmVxLCBmdW5jdGlvbiAoZXJyLCByZXMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5lbWl0KCd1cGRhdGVGYWlsdXJlJywgZXJyLCBpbmZvLCByZXEsIHJlcywgZG9jKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGV2ZW50cy5lbWl0KCdhZnRlclJlc3BvbnNlJywgaW5mbywgcmVxLCByZXMpOwogICAgICAgICAgICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5oYW5kbGVSZXNwb25zZShyZXEsIHJlc1sxXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5lZCB3aXRob3V0IHJlc3BvbnNlLCBtZWFuaW5nIGNvb2tpZXMgd29uJ3QgYmUKICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGJ5IGhhbmRsZVJlc3BvbnNlSGVhZGVycwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxLm91dGdvaW5nX2ZsYXNoX21lc3NhZ2VzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaG1lc3NhZ2VzLnNldENvb2tpZUJyb3dzZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLCByZXEub3V0Z29pbmdfZmxhc2hfbWVzc2FnZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBleHBvcnRzLnJ1blVwZGF0ZShmbiwgbnVsbCwgcmVxLCBmdW5jdGlvbiAoZXJyLCByZXMpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgZXZlbnRzLmVtaXQoJ3VwZGF0ZUZhaWx1cmUnLCBlcnIsIGluZm8sIHJlcSwgcmVzLCBudWxsKTsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV2ZW50cy5lbWl0KCdhZnRlclJlc3BvbnNlJywgaW5mbywgcmVxLCByZXMpOwogICAgICAgICAgICBpZiAocmVzKSB7CiAgICAgICAgICAgICAgICBleHBvcnRzLmhhbmRsZVJlc3BvbnNlKHJlcSwgcmVzWzFdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIHJldHVybmVkIHdpdGhvdXQgcmVzcG9uc2UsIG1lYW5pbmcgY29va2llcyB3b24ndCBiZSBzZXQgYnkKICAgICAgICAgICAgICAgIC8vIGhhbmRsZVJlc3BvbnNlSGVhZGVycwogICAgICAgICAgICAgICAgaWYgKHJlcS5vdXRnb2luZ19mbGFzaF9tZXNzYWdlcykgewogICAgICAgICAgICAgICAgICAgIGZsYXNobWVzc2FnZXMuc2V0Q29va2llQnJvd3NlcigKICAgICAgICAgICAgICAgICAgICAgICAgcmVxLCByZXEub3V0Z29pbmdfZmxhc2hfbWVzc2FnZXMKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgfSk7CiAgICB9Cn07CgovKioKICogUnVucyBhIHVwZGF0ZSBmdW5jdGlvbiB3aXRoIHRoZSBnaXZlbiBkb2N1bWVudCBhbmQgcmVxdWVzdCBvYmplY3QsCiAqIGVtaXR0aW5nIHJlbGV2YW50IGV2ZW50cy4gVGhpcyBmdW5jdGlvbiBydW5zIGJvdGggc2VydmVyIGFuZCBjbGllbnQtc2lkZS4KICoKICogQG5hbWUgcnVuVXBkYXRlKGZuLCBkb2MsIHJlcSkKICogQHBhcmFtIHtGdW5jdGlvbn0gZm4KICogQHBhcmFtIHtPYmplY3R9IGRvYwogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5ydW5VcGRhdGUgPSBmdW5jdGlvbiAoZm4sIGRvYywgcmVxLCBjYikgewogICAgcmVxID0gZmxhc2htZXNzYWdlcy51cGRhdGVSZXF1ZXN0KHJlcSk7CiAgICB1dGlscy5jdXJyZW50UmVxdWVzdChyZXEpOwogICAgdmFyIGluZm8gPSB7CiAgICAgICAgdHlwZTogJ3VwZGF0ZScsCiAgICAgICAgbmFtZTogcmVxLnBhdGhbMV0sCiAgICAgICAgdGFyZ2V0OiByZXEucGF0aFsyXSwKICAgICAgICBxdWVyeTogcmVxLnF1ZXJ5LAogICAgICAgIGZuOiBmbgogICAgfTsKICAgIGV2ZW50cy5lbWl0KCdiZWZvcmVSZXF1ZXN0JywgaW5mbywgcmVxKTsKICAgIHZhciB2YWwgPSBmbihkb2MsIHJlcSk7CgogICAgdmFyIHJlcyA9IHZhbCA/IHZhbFsxXTogbnVsbDsKICAgIGlmICghKHJlcyBpbnN0YW5jZW9mIE9iamVjdCkpIHsKICAgICAgICByZXMgPSB7Y29kZTogMjAwLCBib2R5OiByZXN9OwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmVzID0gZXhwb3J0cy5wYXJzZVJlc3BvbnNlKHJlcSwgcmVzKTsKICAgIH0KICAgIGV2ZW50cy5lbWl0KCdiZWZvcmVSZXNwb25zZVN0YXJ0JywgaW5mbywgcmVxLCByZXMpOwogICAgZXZlbnRzLmVtaXQoJ2JlZm9yZVJlc3BvbnNlRGF0YScsIGluZm8sIHJlcSwgcmVzLCByZXMuYm9keSB8fCAnJyk7CgogICAgdmFyIHIgPSBbCiAgICAgICAgdmFsID8gdmFsWzBdOiBudWxsLAogICAgICAgIGZsYXNobWVzc2FnZXMudXBkYXRlUmVzcG9uc2UocmVxLCByZXMpCiAgICBdOwogICAgaWYgKHJlcS5jbGllbnQgJiYgclswXSkgewogICAgICAgIGRiLnNhdmVEb2MoclswXSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlcS5yZXNwb25zZV9yZWNlaXZlZCA9IHRydWU7CiAgICAgICAgICAgIGNiKG51bGwsIHIpOwogICAgICAgIH0pOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmVxLnJlc3BvbnNlX3JlY2VpdmVkID0gdHJ1ZTsKICAgICAgICBjYihudWxsLCByKTsKICAgIH0KfTsKCgovKioKICogQ3JlYXRlcyBhIGZha2UgaGVhZCBvYmplY3QgZnJvbSB2aWV3IHJlc3VsdHMgZm9yIHBhc3NpbmcgdG8gYSBsaXN0IGZ1bmN0aW9uCiAqIGJlaW5nIHJ1biBjbGllbnQtc2lkZS4KICoKICogQG5hbWUgY3JlYXRlSGVhZChkYXRhKQogKiBAcGFyYW0ge09iamVjdH0gZGF0YQogKiBAcmV0dXJucyB7T2JqZWN0fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuY3JlYXRlSGVhZCA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgaGVhZCA9IHt9OwogICAgZm9yICh2YXIgayBpbiBkYXRhKSB7CiAgICAgICAgaWYgKGsgIT09ICdyb3dzJykgewogICAgICAgICAgICBoZWFkW2tdID0gZGF0YVtrXTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gaGVhZDsKfTsKCgovKioKICogRmV0Y2hlcyB0aGUgcmVsZXZhbnQgdmlldyBhbmQgY2FsbHMgdGhlIG5hbWVkIGxpc3QgZnVuY3Rpb24gd2l0aCB0aGUgcmVzdWx0cy4KICoKICogQG5hbWUgcnVuTGlzdEJyb3dzZXIocmVxLCBuYW1lLCB2aWV3LCBjYWxsYmFjaykKICogQHBhcmFtIHtPYmplY3R9IHJlcQogKiBAcGFyYW0ge1N0cmluZ30gbmFtZQogKiBAcGFyYW0ge1N0cmluZ30gdmlldwogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMucnVuTGlzdEJyb3dzZXIgPSBmdW5jdGlvbiAocmVxLCBuYW1lLCB2aWV3LCBjYWxsYmFjaykgewogICAgdmFyIGZuID0ga2Fuc28uYXBwLmxpc3RzW25hbWVdOwoKICAgIHZhciBpbmZvID0gewogICAgICAgIHR5cGU6ICdsaXN0JywKICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgIHRhcmdldDogdmlldywKICAgICAgICBxdWVyeTogcmVxLnF1ZXJ5LAogICAgICAgIGZuOiBmbgogICAgfTsKICAgIGV2ZW50cy5lbWl0KCdiZWZvcmVSZXNvdXJjZScsIGluZm8pOwoKICAgIGlmICh2aWV3KSB7CiAgICAgICAgLy8gdXBkYXRlX3NlcSB1c2VkIGluIGhlYWQgcGFyYW1ldGVyIHBhc3NlZCB0byBsaXN0IGZ1bmN0aW9uCiAgICAgICAgcmVxLnF1ZXJ5LnVwZGF0ZV9zZXEgPSB0cnVlOwogICAgICAgIGRiLmdldFZpZXcodmlldywgcmVxLnF1ZXJ5LCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50X3JlcSA9ICh1dGlscy5jdXJyZW50UmVxdWVzdCgpIHx8IHt9KTsKICAgICAgICAgICAgaWYgKGN1cnJlbnRfcmVxLnV1aWQgPT09IHJlcS51dWlkKSB7CiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBnZXRSb3cgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEucm93cy5zaGlmdCgpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHN0YXJ0ID0gZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3N0YXJ0Jyk7CiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXMpOwogICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuaGFuZGxlUmVzcG9uc2UocmVxLCByZXMpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBoZWFkID0gZXhwb3J0cy5jcmVhdGVIZWFkKGRhdGEpOwogICAgICAgICAgICAgICAgdmFyIHJlcyA9IGV4cG9ydHMucnVuTGlzdChmbiwgaGVhZCwgcmVxKTsKICAgICAgICAgICAgICAgIGV2ZW50cy5lbWl0KCdhZnRlclJlc3BvbnNlJywgaW5mbywgcmVxLCByZXMpOwogICAgICAgICAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuaGFuZGxlUmVzcG9uc2UocmVxLCByZXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuZWQgd2l0aG91dCByZXNwb25zZSwgbWVhbmluZyBjb29raWVzIHdvbid0IGJlIHNldAogICAgICAgICAgICAgICAgICAgIC8vIGJ5IGhhbmRsZVJlc3BvbnNlSGVhZGVycwogICAgICAgICAgICAgICAgICAgIGlmIChyZXEub3V0Z29pbmdfZmxhc2hfbWVzc2FnZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmxhc2htZXNzYWdlcy5zZXRDb29raWVCcm93c2VyKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLCByZXEub3V0Z29pbmdfZmxhc2hfbWVzc2FnZXMKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBnZXRSb3cgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQogICAgLy8gVE9ETzogY2hlY2sgaWYgaXQgc2hvdWxkIHRocm93IGhlcmUKICAgIGVsc2UgewogICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdubyB2aWV3IHNwZWNpZmllZCcpOwogICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICBjYWxsYmFjayhlKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgfQp9OwoKLyoqCiAqIFJ1bnMgYSBsaXN0IGZ1bmN0aW9uIHdpdGggdGhlIGdpdmVuIGRvY3VtZW50IGFuZCByZXF1ZXN0IG9iamVjdCwKICogZW1pdHRpbmcgcmVsZXZhbnQgZXZlbnRzLiBUaGlzIGZ1bmN0aW9uIHJ1bnMgYm90aCBzZXJ2ZXIgYW5kIGNsaWVudC1zaWRlLgogKgogKiBAbmFtZSBydW5MaXN0KGZuLCBoZWFkLCByZXEpCiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuCiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkCiAqIEBwYXJhbSB7T2JqZWN0fSByZXEKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJ1bkxpc3QgPSBmdW5jdGlvbiAoZm4sIGhlYWQsIHJlcSkgewogICAgcmVxID0gZmxhc2htZXNzYWdlcy51cGRhdGVSZXF1ZXN0KHJlcSk7CiAgICB1dGlscy5jdXJyZW50UmVxdWVzdChyZXEpOwogICAgdmFyIGluZm8gPSB7CiAgICAgICAgdHlwZTogJ2xpc3QnLAogICAgICAgIG5hbWU6IHJlcS5wYXRoWzFdLAogICAgICAgIHRhcmdldDogcmVxLnBhdGhbMl0sCiAgICAgICAgcXVlcnk6IHJlcS5xdWVyeSwKICAgICAgICBmbjogZm4KICAgIH07CiAgICAvLyBjYWNoZSByZXNwb25zZSBmcm9tIHN0YXJ0IGNhbGwKICAgIHZhciBzdGFydF9yZXM7CiAgICB2YXIgX3N0YXJ0ID0gc3RhcnQ7CiAgICBzdGFydCA9IGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBzdGFydF9yZXMgPSByZXM7CiAgICAgICAgZXZlbnRzLmVtaXQoJ2JlZm9yZVJlc3BvbnNlU3RhcnQnLCBpbmZvLCByZXEsIHJlcyk7CiAgICAgICAgaWYgKHJlcy5ib2R5KSB7CiAgICAgICAgICAgIGV2ZW50cy5lbWl0KCdiZWZvcmVSZXNwb25zZURhdGEnLCBpbmZvLCByZXEsIHJlcywgcmVzLmJvZHkpOwogICAgICAgIH0KICAgICAgICBfc3RhcnQoZmxhc2htZXNzYWdlcy51cGRhdGVSZXNwb25zZShyZXEsIHJlcykpOwogICAgfTsKICAgIHZhciBfc2VuZCA9IHNlbmQ7CiAgICBzZW5kID0gZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAoIXN0YXJ0X3Jlcy5ib2R5KSB7CiAgICAgICAgICAgIHN0YXJ0X3Jlcy5ib2R5ID0gJyc7CiAgICAgICAgfQogICAgICAgIC8vIFRPRE86IGRvZXMgaXQgbWFrZSBzZW5zZSB0byBzdG9yZSBkYXRhIGhlcmUgYW5kIHVzZSB1cCBtZW1vcnkKICAgICAgICAvLyBvbiB0aGUgc2VydmVyPwogICAgICAgIHN0YXJ0X3Jlcy5ib2R5ICs9IGRhdGE7CiAgICAgICAgZXZlbnRzLmVtaXQoJ2JlZm9yZVJlc3BvbnNlRGF0YScsIGluZm8sIHJlcSwgc3RhcnRfcmVzLCBkYXRhKTsKICAgICAgICBfc2VuZChkYXRhKTsKICAgIH07CiAgICBldmVudHMuZW1pdCgnYmVmb3JlUmVxdWVzdCcsIGluZm8sIHJlcSk7CiAgICB2YXIgdmFsID0gZm4oaGVhZCwgcmVxKTsKCiAgICBpZiAodmFsIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgdmFsID0gZXhwb3J0cy5wYXJzZVJlc3BvbnNlKHJlcSwgdmFsKS5ib2R5OwogICAgfQogICAgaWYgKCFzdGFydF9yZXMpIHsKICAgICAgICBzdGFydF9yZXMgPSB7Y29kZTogMjAwLCBib2R5OiB2YWx9OwogICAgICAgIGV2ZW50cy5lbWl0KCdiZWZvcmVSZXNwb25zZVN0YXJ0JywgaW5mbywgcmVxLCBzdGFydF9yZXMpOwogICAgICAgIGV2ZW50cy5lbWl0KCdiZWZvcmVSZXNwb25zZURhdGEnLCBpbmZvLCByZXEsIHN0YXJ0X3JlcywgdmFsKTsKICAgICAgICBzdGFydCA9IF9zdGFydDsKICAgICAgICBzZW5kID0gX3NlbmQ7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBzdGFydF9yZXMuYm9keSA9IHN0YXJ0X3Jlcy5ib2R5ID8gc3RhcnRfcmVzLmJvZHkgKyB2YWw6IHZhbDsKICAgICAgICBldmVudHMuZW1pdCgnYmVmb3JlUmVzcG9uc2VEYXRhJywgaW5mbywgcmVxLCBzdGFydF9yZXMsIHZhbCk7CiAgICB9CiAgICBzdGFydCA9IF9zdGFydDsKICAgIHNlbmQgPSBfc2VuZDsKICAgIHJlcS5yZXNwb25zZV9yZWNlaXZlZCA9IHRydWU7CiAgICByZXR1cm4gdmFsOwp9OwoKCi8qKgogKiBDcmVhdGVzIGEgcmVxdWVzdCBvYmplY3QgZm9yIHRoZSB1cmwgYW5kIHJ1bnMgYXBwcm9wcmlhdGUgc2hvdywgbGlzdCBvcgogKiB1cGRhdGUgZnVuY3Rpb25zLgogKgogKiBAbmFtZSBoYW5kbGUobWV0aG9kLCB1cmwsIGRhdGEpCiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QKICogQHBhcmFtIHtTdHJpbmd9IHVybAogKiBAcGFyYW0ge09iamVjdH0gZGF0YQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuaGFuZGxlID0gZnVuY3Rpb24gKG1ldGhvZCwgdXJsLCBkYXRhKSB7CiAgICB2YXIgbWF0Y2ggPSBleHBvcnRzLm1hdGNoVVJMKG1ldGhvZCwgdXJsKTsKICAgIGlmIChtYXRjaCkgewogICAgICAgIHZhciBwYXJzZWQgPSB1cmxQYXJzZSh1cmwpOwogICAgICAgIGV4cG9ydHMuY3JlYXRlUmVxdWVzdChtZXRob2QsIHVybCwgZGF0YSwgbWF0Y2gsIGZ1bmN0aW9uIChlcnIsIHJlcSkgewogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXEpOwoKICAgICAgICAgICAgdmFyIG1zZyA9IG1ldGhvZCArICcgJyArIHVybCArICcgLT4gJyArCiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShyZXEucGF0aC5qb2luKCcvJykpICsgJyAnICsKICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHJlcS5xdWVyeSk7CgogICAgICAgICAgICBpZiAoZGF0YSkgewogICAgICAgICAgICAgICAgbXNnICs9ICcgZGF0YTogJyArIEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpOwogICAgICAgICAgICB1dGlscy5jdXJyZW50UmVxdWVzdChyZXEpOwoKICAgICAgICAgICAgdmFyIGFmdGVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5oYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byBoYW5kbGUgaW4tcGFnZSBhbmNob3JzIG1hbnVhbGx5IGJlY2F1c2Ugd2UndmUKICAgICAgICAgICAgICAgICAgICAvLyBoaWphY2tlZCB0aGUgaGFzaCBwYXJ0IG9mIHRoZSB1cmwKICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBkb24ndCByZS1oYW5kbGUgdGhlIHBhZ2UgaWYgb25seSB0aGUgaGFzaCBoYXMKICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2VkCgogICAgICAgICAgICAgICAgICAgIC8vIHRlc3QgaWYgYSB2YWxpZCBlbGVtZW50IG5hbWUgb3IgaWQKICAgICAgICAgICAgICAgICAgICBpZiAoLyNbQS1aYS16X1wtOlwuXSsvLnRlc3QocGFyc2VkLmhhc2gpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9ICQocGFyc2VkLmhhc2gpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgZWwub2Zmc2V0KCkudG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJzZWQuaGFzaCA9PT0gJyMnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNjcm9sbCB0byB0b3Agb2YgcGFnZQogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGhhbmRsZSBpbnZhbGlkIHZhbHVlcz8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciBzcmMsIGZuLCBuYW1lOwoKICAgICAgICAgICAgaWYgKHJlcS5wYXRoWzBdID09PSAnX3Nob3cnKSB7CiAgICAgICAgICAgICAgICBleHBvcnRzLnJ1blNob3dCcm93c2VyKAogICAgICAgICAgICAgICAgICAgIHJlcSwgcmVxLnBhdGhbMV0sIHJlcS5wYXRoLnNsaWNlKDIpLmpvaW4oJy8nKSwgYWZ0ZXIKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAocmVxLnBhdGhbMF0gPT09ICdfbGlzdCcpIHsKICAgICAgICAgICAgICAgIGV4cG9ydHMucnVuTGlzdEJyb3dzZXIoCiAgICAgICAgICAgICAgICAgICAgcmVxLCByZXEucGF0aFsxXSwgcmVxLnBhdGguc2xpY2UoMikuam9pbignLycpLCBhZnRlcgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChyZXEucGF0aFswXSA9PT0gJ191cGRhdGUnKSB7CiAgICAgICAgICAgICAgICBleHBvcnRzLnJ1blVwZGF0ZUJyb3dzZXIoCiAgICAgICAgICAgICAgICAgICAgcmVxLCByZXEucGF0aFsxXSwgcmVxLnBhdGguc2xpY2UoMikuam9pbignLycpLCBhZnRlcgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmtub3duIHJld3JpdGUgdGFyZ2V0OiAnICsgcmVxLnBhdGguam9pbignLycpKTsKICAgICAgICAgICAgICAgIHZhciBuZXd1cmwgPSBleHBvcnRzLmdldEJhc2VVUkwoKSArICcvX2RiL19kZXNpZ24vJyArCiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MubmFtZSArICcvJyArIHJlcS5wYXRoLmpvaW4oJy8nKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWRpcmVjdGluZyB0bzogJyArIG5ld3VybCk7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBuZXd1cmw7CiAgICAgICAgICAgIH0KCiAgICAgICAgfSk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZyhtZXRob2QgKyAnICcgKyB1cmwgKyAnIC0+IFs0MDRdJyk7CiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gZXhwb3J0cy5nZXRCYXNlVVJMKCkgKyB1cmw7CiAgICB9CgogICAgLyoqCiAgICAgKiBpZiBnb29nbGUgYW5hbHl0aWNzIGlzIGluY2x1ZGVkIG9uIHRoZSBwYWdlLCBhbmQgdGhpcyB1cmwKICAgICAqIGhhcyBub3QgYmVlbiB0cmFja2VkIChub3QgdGhlIGluaXRpYWwgaGl0KSB0aGVuIG1hbnVhbGx5CiAgICAgKiB0cmFjayBhIHBhZ2Ugdmlldy4gVGhpcyBpcyBkb25lIGNvbnNpc3RlbnRseSBmb3IgaGFzaC1iYXNlZAogICAgICogYW5kIHB1c2hTdGF0ZSB1cmxzCiAgICAgKi8KICAgIGlmICh3aW5kb3cucGFnZVRyYWNrZXIgJiYgIXV0aWxzLmluaXRpYWxfaGl0KSB7CiAgICAgICAgcGFnZVRyYWNrZXIuX3RyYWNrUGFnZXZpZXcodXJsKTsKICAgIH0KICAgIHV0aWxzLmluaXRpYWxfaGl0ID0gZmFsc2U7Cn07CgoKLyoqCiAqIEFkZCBhIGhpc3RvcnkgZW50cnkgZm9yIHRoZSBnaXZlbiB1cmwsIHByZWZpeGVkIHdpdGggdGhlIGJhc2VVUkwgZm9yIHRoZSBhcHAuCiAqCiAqIEBuYW1lIHNldFVSTChtZXRob2QsIHVybCwgZGF0YSkKICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZAogKiBAcGFyYW0ge1N0cmluZ30gdXJsCiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIChvcHRpb25hbCkKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnNldFVSTCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSkgewogICAgdmFyIGZ1bGx1cmwgPSBleHBvcnRzLmdldEJhc2VVUkwoKSArIHVybDsKICAgIHZhciBzdGF0ZSA9IHsKICAgICAgICBtZXRob2Q6IG1ldGhvZCwKICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS5nZXRUaW1lKCksCiAgICAgICAgaGlzdG9yeV9jb3VudDogd2luZG93Lmhpc3RvcnkubGVuZ3RoICsgMQogICAgfTsKICAgIC8vIHRoaXMgaXMgdGhlIHJlc3VsdCBvZiBhIGRpcmVjdCBjYWxsIHRvIHNldFVSTAogICAgLy8gKGRvbid0IHNob3cgY29uZmlybWF0aW9uIGRpYWxvZyBmb3IgdW5zYWZlIHN0YXRlcyBuZWVkaW5nIHRvIHJlLXN1Ym1pdCkKICAgIGV4cG9ydHMuc2V0X2NhbGxlZCA9IHRydWU7CgogICAgLyoqCiAgICAgKiBpZiB0aGUgY3VycmVudCByZXF1ZXN0IGlzIHVuc2FmZSwgd2UgcmVwbGFjZSBpdCBzbyBjbGlja2luZyB0aGUgYmFjawogICAgICogYnV0dG9uICdza2lwcycgaXQgd2l0aG91dCBzaG93aW5nIGEgZGlhbG9nLgogICAgICoKICAgICAqIFRoaXMgbWVhbnMgR0VUMSwgUE9TVDIsIEdFVDMgd291bGQgcmVzdWx0IGluIGEgaGlzdG9yeSBvZiBHRVQxLCBHRVQzLgogICAgICogQ2xpY2tpbmcgYmFjayBhZnRlciBHRVQzIHdvdWxkbid0IHJlLXN1Ym1pdCBhIGZvcm0uCiAgICAgKgogICAgICogRG9pbmcgR0VUMSwgUE9TVDIsIHRoZW4gY2xpY2tpbmcgYmFjayBhbmQgZm9yd2FyZCBhZ2FpbiB3b3VsZCByZXN1bHQKICAgICAqIGluIGEgY29uZmlybWF0aW9uIGRpYWxvZyBhc2tpbmcgaWYgeW91IHdhbnQgdG8gcmUtc3VibWl0LgogICAgICovCgogICAgdmFyIGN1cnJfc3RhdGUgPSBleHBvcnRzLmN1cnJlbnRfc3RhdGU7CiAgICB2YXIgY3Vycl9tZXRob2QgPSBjdXJyX3N0YXRlID8gKGN1cnJfc3RhdGUubWV0aG9kIHx8ICdHRVQnKTogJ0dFVCc7CgogICAgaWYgKGN1cnJfbWV0aG9kICE9PSAnR0VUJyAmJiBjdXJyX21ldGhvZCAhPT0gJ0hFQUQnKSB7CiAgICAgICAgLy8gdW5zYWZlIG1ldGhvZCBvbiBjdXJyZW50IHJlcXVlc3QsIHJlcGxhY2UgaXQKICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIGRvY3VtZW50LnRpdGxlLCBmdWxsdXJsKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIC8vIGxhc3QgcmVxdWVzdCB3YXMgc2FmZSwgYWRkIGEgbmV3IGVudHJ5IGluIHRoZSBoaXN0b3J5CiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCBkb2N1bWVudC50aXRsZSwgZnVsbHVybCk7CiAgICB9CiAgICAvLyBtYW51YWxseSBmaXJlIHBvcHN0YXRlIGV2ZW50CiAgICB3aW5kb3cub25wb3BzdGF0ZSh7c3RhdGU6IHN0YXRlfSk7Cn07CgoKLyoqCiAqIFRoaXMgd2FzIG1vdmVkIHRvIHV0aWxzIHRvIGF2b2lkIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSBiZXR3ZWVuCiAqIGNvcmUuanMgYW5kIGRiLmpzLi4uIGhvd2V2ZXIsIGl0IHNob3VsZCBiZSBhY2Nlc3NlZCB2aWEgdGhlIGNvcmUuanMgbW9kdWxlCiAqIGFzIGl0IG1heSBnZXQgbW92ZWQgYmFjayBvbmNlIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhcmUgZml4ZWQgaW4gY291Y2hkYidzCiAqIGNvbW1vbmpzIGltcGxlbWVudGF0aW9uLgogKi8KCmV4cG9ydHMuZ2V0QmFzZVVSTCA9IHV0aWxzLmdldEJhc2VVUkw7CgoKLyoqCiAqIEdldHMgdGhlIGN1cnJlbnQgYXBwLWxldmVsIFVSTCAod2l0aG91dCBiYXNlVVJMIHByZWZpeCkuCiAqCiAqIEBuYW1lIGdldFVSTCgpCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5nZXRVUkwgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKCdcXC9fcmV3cml0ZSguKikkJyk7CgogICAgdmFyIGxvYyA9IHVybFBhcnNlKHdpbmRvdy5sb2NhdGlvbiksCiAgICAgICAgbWF0Y2ggPSByZS5leGVjKGxvYy5wYXRobmFtZSk7CgogICAgaWYgKG1hdGNoKSB7CiAgICAgICAgdmFyIG5ld3VybCA9IHsKICAgICAgICAgICAgcGF0aG5hbWU6IG1hdGNoWzFdIHx8ICcvJywKICAgICAgICAgICAgaGFzaDogbG9jLmhhc2gKICAgICAgICB9OwogICAgICAgIGlmIChsb2Muc2VhcmNoKSB7CiAgICAgICAgICAgIG5ld3VybC5zZWFyY2ggPSBsb2Muc2VhcmNoOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXJsRm9ybWF0KG5ld3VybCkgfHwgJy8nOwogICAgfQogICAgcmV0dXJuICcnICsgd2luZG93LmxvY2F0aW9uIHx8ICcvJzsKfTsKCi8qKgogKiBUZXN0cyBpcyB0d28gdXJscyBhcmUgb2YgdGhlIHNhbWUgb3JpZ2luLiBBY2NlcHRzIHBhcnNlZCB1cmwgb2JqZWN0cwogKiBvciBzdHJpbmdzIGFzIGFyZ3VtZW50cy4KICoKICogQG5hbWUgc2FtZU9yaWdpbihhLCBiKQogKiBAcGFyYW0gYQogKiBAcGFyYW0gYgogKiBAcmV0dXJucyBCb29sZWFuCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5zYW1lT3JpZ2luID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHZhciBhcCA9ICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpID8gdXJsUGFyc2UoYSk6IGE7CiAgICB2YXIgYnAgPSAodHlwZW9mIGIgPT09ICdzdHJpbmcnKSA/IHVybFBhcnNlKGIpOiBiOwogICAgLy8gaWYgb25lIHVybCBpcyByZWxhdGl2ZSB0byBjdXJyZW50IG9yaWdpbiwgcmV0dXJuIHRydWUKICAgIGlmIChhcC5wcm90b2NvbCA9PT0gdW5kZWZpbmVkIHx8IGJwLnByb3RvY29sID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiAoCiAgICAgICAgYXAucHJvdG9jb2wgPT09IGJwLnByb3RvY29sICYmCiAgICAgICAgYXAuaG9zdG5hbWUgPT09IGJwLmhvc3RuYW1lICYmCiAgICAgICAgYXAucG9ydCA9PT0gYnAucG9ydAogICAgKTsKfTsKCi8qKgogKiBDb252ZXJ0cyBhIGZ1bGwgdXJsIHRvIGFuIGFwcC1sZXZlbCB1cmwgKHdpdGhvdXQgYmFzZVVSTCBwcmVmaXgpLgogKiBleGFtcGxlOiB7YmFzZVVSTH0vc29tZS9wYXRoIC0+IC9zb21lL3BhdGgKICoKICogQG5hbWUgYXBwUGF0aChwKQogKiBAcGFyYW0ge1N0cmluZ30gcAogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuYXBwUGF0aCA9IGZ1bmN0aW9uIChwKSB7CiAgICAvLyBoYXNoIGxpbmtzIG5lZWQgY3VycmVudCBVUkwgcHJlcGVuZGluZwogICAgaWYgKHAuY2hhckF0KDApID09PSAnIycpIHsKICAgICAgICB2YXIgbmV3dXJsID0gdXJsUGFyc2UoZXhwb3J0cy5nZXRVUkwoKSk7CiAgICAgICAgbmV3dXJsLmhhc2ggPSBwOwogICAgICAgIHJldHVybiBleHBvcnRzLmFwcFBhdGgodXJsRm9ybWF0KG5ld3VybCkpOwogICAgfQogICAgZWxzZSBpZiAocC5jaGFyQXQoMCkgPT09ICc/JykgewogICAgICAgIC8vIGlmIHRoZSByZXF1ZXN0IGlzIGp1c3QgYSBxdWVyeSwgdGhlbiBwcmVwZW5kIHRoZSBjdXJyZW50IGFwcCBwYXRoCiAgICAgICAgLy8gYXMgYSBicm93c2VyIHdvdWxkCiAgICAgICAgdmFyIG5ld3VybDIgPSB1cmxQYXJzZShleHBvcnRzLmdldFVSTCgpKTsKICAgICAgICBkZWxldGUgbmV3dXJsMi5xdWVyeTsKICAgICAgICBkZWxldGUgbmV3dXJsMi5zZWFyY2g7CiAgICAgICAgZGVsZXRlIG5ld3VybDIuaHJlZjsKICAgICAgICBuZXd1cmwyLnNlYXJjaCA9IHA7CiAgICAgICAgcmV0dXJuIGV4cG9ydHMuYXBwUGF0aCh1cmxGb3JtYXQobmV3dXJsMikpOwogICAgfQogICAgZWxzZSBpZiAoL1x3KzovLnRlc3QocCkpIHsKICAgICAgICAvLyBpbmNsdWRlIHByb3RvY29sCiAgICAgICAgdmFyIG9yaWdpbiA9IHAuc3BsaXQoJy8nKS5zbGljZSgwLCAzKS5qb2luKCcvJyk7CiAgICAgICAgLy8gY29lcmNlIHdpbmRvdy5sb2NhdGlvbiB0byBhIHJlYWwgc3RyaW5nIHNvIHdlIGNhbiB1c2Ugc3BsaXQgaW4gSUUKICAgICAgICB2YXIgbG9jID0gJycgKyB3aW5kb3cubG9jYXRpb247CiAgICAgICAgaWYgKG9yaWdpbiA9PT0gbG9jLnNwbGl0KCcvJykuc2xpY2UoMCwgMykuam9pbignLycpKSB7CiAgICAgICAgICAgIC8vIHJlbW92ZSBvcmlnaW4sIHNldCBwIHRvIHBhdGhuYW1lIG9ubHkKICAgICAgICAgICAgLy8gSUUgb2Z0ZW4gYWRkcyB0aGlzIHRvIGEgdGFncywgaGVuY2Ugd2h5IHdlIHN0cmlwIGl0IG91dCBub3cKICAgICAgICAgICAgcCA9IHAuc3Vic3RyKG9yaWdpbi5sZW5ndGgpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgLy8gbm90IHNhbWUgb3JpZ2luLCByZXR1cm4gb3JpZ2luYWwgZnVsbCBwYXRoCiAgICAgICAgICAgIHJldHVybiBwOwogICAgICAgIH0KICAgIH0KICAgIHZhciBiYXNlID0gZXhwb3J0cy5nZXRCYXNlVVJMKCk7CiAgICBpZiAocC5zdWJzdHIoMCwgYmFzZS5sZW5ndGgpID09PSBiYXNlKSB7CiAgICAgICAgcmV0dXJuIHAuc3Vic3RyKGJhc2UubGVuZ3RoKTsKICAgIH0KICAgIHJldHVybiBwOwp9OwoKCi8qKgogKiBVc2VkIHRvIGRlY2lkZSB3aGV0aGVyIHRvIGhhbmRsZSBhIGxpbmsgb3Igbm90LiBTaG91bGQgZGV0ZWN0IGFwcCB2cy4KICogZXh0ZXJuYWwgdXJscy4KICoKICogQG5hbWUgaXNBcHBVUkwodXJsKQogKiBAcGFyYW0ge1N0cmluZ30gdXJsCiAqIEByZXR1cm5zIHtCb29sZWFufQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuaXNBcHBVUkwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAvLyBjb2VyY2Ugd2luZG93LmxvY2F0aW9uIHRvIGEgcmVhbCBzdHJpbmcgaW4gSUUKICAgIHJldHVybiBleHBvcnRzLnNhbWVPcmlnaW4odXJsLCAnJyArIHdpbmRvdy5sb2NhdGlvbik7Cn07CgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vZXZlbnRzICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsia2Fuc28vZXZlbnRzIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qZ2xvYmFsIF9fa2Fuc29qc19ldmVudF9saXN0ZW5lcnM6IHRydWUqLwoKLyoqCiAqIFRoZSBldmVudHMgbW9kdWxlIGhhbmRsZXMgZXZlbnRzIGVtaXR0ZWQgYnkgS2Fuc28gYXMgd2VsbCBhcyBjdXN0b20KICogZXZlbnRzIGRlZmluZWQgYnkgYSBLYW5zbyBhcHAuIFRoZXNlIGV2ZW50cyBjYW4gYmUgdXNlZCBjbGllbnQtc2lkZQogKiBvciBzZXJ2ZXItc2lkZS4gQWx0aG91Z2ggeW91IGFyZSBsaW1pdGVkIHRvIHN5bmNocm9ub3VzIG9wZXJhdGlvbiBvbgogKiB0aGUgc2VydmVyLCBzbyBldmVudHMgYXJlIGxlc3MgbGlrZWx5IHRvIGJlIHVzZWZ1bCB0aGVyZS4KICoKICogQG1vZHVsZQogKi8KCi8qKgogKiBNb2R1bGUgZGVwZW5kZW5jaWVzCiAqLwoKdmFyIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fOwoKCi8qKgogKiBTdG9yZXMgdGhlIGJvdW5kIGxpc3RlbmVycwogKgogKiBUaGVzZSBtdXN0IGJlIHN0b3JlZCBpbiBhIGdsb2JhbCBzaW5jZSB0aGUgZm9ybXMgY29kZSBmaXJlcyBzb21lIGV2ZW50cyB1c2luZwogKiBzY3JpcHQgdGFncywgd2hpY2ggd2lsbCBmYWlsIHRvIHJlZmVyZW5jZSB0aGUgbGlzdGVuZXJzIG9iamVjdCBpZiBhIGxvY2FsIHZhcgogKiBpcyB1c2VkLgogKgogKiBXZSB0ZXN0IGZvciBhIHByZS1leGlzdGluZyBnbG9iYWwgYXMgYWRtaW4gYXBwIG1pZ2h0IHJlcXVpcmUgdGhpcyBtb2R1bGUKICogaW4gbXVsdGlwbGUgY29udGV4dHMsIGFuZCB3ZSBkb24ndCB3YW50IHRvIGxvc2UgcHJldmlvdXMgZXZlbnQgbGlzdGVuZXJzLgogKi8KCmlmICh0eXBlb2YgX19rYW5zb2pzX2V2ZW50X2xpc3RlbmVycyA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIF9fa2Fuc29qc19ldmVudF9saXN0ZW5lcnMgPSB7fTsKfQoKCi8qKgogKiBBZGRzIGEgbGlzdGVuZXIgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lLgogKgogKiBAbmFtZSBvbihuYW1lLCBsaXN0ZW5lcikKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLm9uID0gZnVuY3Rpb24gKG5hbWUsIGxpc3RlbmVyKSB7CiAgICBpZiAoIV9fa2Fuc29qc19ldmVudF9saXN0ZW5lcnNbbmFtZV0pIHsKICAgICAgICBfX2thbnNvanNfZXZlbnRfbGlzdGVuZXJzW25hbWVdID0gW107CiAgICB9CiAgICBfX2thbnNvanNfZXZlbnRfbGlzdGVuZXJzW25hbWVdLnB1c2gobGlzdGVuZXIpOwp9OwoKLyoqCiAqIEJpbmRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBnaXZlbiBldmVudCBuYW1lLCBidXQgdW5iaW5kcyBpdAogKiBhZnRlciBpdHMgZmlyc3QgaW52b2NhdGlvbi4KICoKICogQG5hbWUgb25jZShuYW1lLCBsaXN0ZW5lcikKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLm9uY2UgPSBmdW5jdGlvbiAobmFtZSwgbGlzdGVuZXIpIHsKICAgIHZhciBmbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgcmVzdWx0ID0gbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICBleHBvcnRzLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGxpc3RlbmVyKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICAgIGZuLmxpc3RlbmVyID0gbGlzdGVuZXI7CiAgICBleHBvcnRzLm9uKG5hbWUsIGZuKTsKfTsKCi8qKgogKiBUcmlnZ2VycyBhbnkgZXZlbnQgbGlzdGVuZXJzIGJvdW5kIHRvIHRoZSBnaXZlbiBldmVudCBuYW1lLiBMaXN0ZW5lcnMKICogYXJlIGNhbGxlZCBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIGJvdW5kLiBJZiBhIGxpc3RlbmVyIHJldHVybnMgZmFsc2UKICogc3Vic2VxdWVudCBldmVudCBsaXN0ZW5lcnMgaW4gdGhlIGNoYWluIGFyZSBub3QgY2FsbGVkLgogKgogKiBUaGUgZmlyc3QgYXJndW1lbnQgaXMgdGhlIGV2ZW50IG5hbWUgdG8gZW1pdCBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMKICogYXJlIHVzZWQgYXMgYXJndW1lbnRzIHRvIHRoZSBib3VuZCBldmVudCBsaXN0ZW5lcnMuCiAqCiAqIEBuYW1lIGVtaXQobmFtZSwgWy4uLl0pCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAqIEBwYXJhbSAuLi4KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmVtaXQgPSBmdW5jdGlvbiAobmFtZSkgewogICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgdmFyIGZucyA9IGV4cG9ydHMubGlzdGVuZXJzKG5hbWUpOwogICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZucy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgIHZhciByZXN1bHQgPSBmbnNbaV0uYXBwbHkobnVsbCwgYXJncyk7CiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KfTsKCi8qKgogKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBib3VuZCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lLgogKiBJZiBubyBldmVudHMgYXJlIGJvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZC4KICoKICogQG5hbWUgbGlzdGVuZXJzKG5hbWUpCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICB2YXIgZm5zID0gX19rYW5zb2pzX2V2ZW50X2xpc3RlbmVyc1tuYW1lXSB8fCBbXTsKICAgIHJldHVybiBfX2thbnNvanNfZXZlbnRfbGlzdGVuZXJzW25hbWVdIHx8IFtdOwp9OwoKLyoqCiAqIFJlbW92ZXMgYWxsIGJvdW5kIGV2ZW50IGxpc3RlbmVycyBmb3IgYSBnaXZlbiBldmVudCBuYW1lLgogKgogKiBAbmFtZSByZW1vdmVBbGxMaXN0ZW5lcnMobmFtZSkKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICBkZWxldGUgX19rYW5zb2pzX2V2ZW50X2xpc3RlbmVyc1tuYW1lXTsKfTsKCi8qKgogKiBSZW1vdmVzIGEgc3BlY2lmaWMgZXZlbnQgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQgbmFtZS4KICoKICogQG5hbWUgcmVtb3ZlTGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChuYW1lLCBsaXN0ZW5lcikgewogICAgX19rYW5zb2pzX2V2ZW50X2xpc3RlbmVyc1tuYW1lXSA9IF8uZmlsdGVyKGV4cG9ydHMubGlzdGVuZXJzKG5hbWUpLCBmdW5jdGlvbiAobCkgewogICAgICAgIHJldHVybiBsICE9PSBsaXN0ZW5lciAmJiAoIWwubGlzdGVuZXIgfHwgbC5saXN0ZW5lciAhPT0gbGlzdGVuZXIpOwogICAgfSk7Cn07CgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vZGIgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby9kYiJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKmdsb2JhbCAkOiBmYWxzZSwga2Fuc286IHRydWUgKi8KCi8qKgogKiBDb250YWlucyBmdW5jdGlvbnMgZm9yIHF1ZXJ5aW5nIGFuZCBzdG9yaW5nIGRhdGEgaW4gQ291Y2hEQi4KICoKICogQG1vZHVsZQogKi8KCgovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKSwKICAgIHNldHRpbmdzID0gcmVxdWlyZSgnLi9zZXR0aW5ncycpLAogICAgc2Vzc2lvbiA9IG51bGw7CgovKiBBdm9pZCBhIGNpcmN1bGFyIHJlcXVpcmUgaW4gQ291Y2hEQiAqLwoKaWYgKHV0aWxzLmlzQnJvd3NlcikgewogICAgc2Vzc2lvbiA9IHJlcXVpcmUoJy4vc2Vzc2lvbicpOwp9CgoKLyoqCiAqIFdoZW4gYSBkYiBjYWxsIHJlc3VsdHMgaW4gYW4gdW5hdXRob3JpemVkIHJlc3BvbnNlLCB0aGUgdXNlcidzIHNlc3Npb24gaXMKICogY2hlY2tlZCB0byBzZWUgaWYgdGhlaXIgc2Vzc2lvbiBoYXMgdGltZWQgb3V0IG9yIHRoZXkndmUgbG9nZ2VkIG91dCBpbgogKiBhbm90aGVyIHNjcmVlbi4KICoKICogVGhpcyBjaGVjayBpcyB0aHJvdHRsZWQgdG8gb25jZSBwZXIgc2Vjb25kLCB0byBhdm9pZCBmbG9vZGluZyB0aGUgc2VydmVyIGlmCiAqIG11bHRpcGxlIHJlcXVlc3RzIGFyZSBtYWRlIHdpdGggaW5jb3JyZWN0IHBlcm1pc3Npb25zLgogKi8KCnZhciBsYXN0X3Nlc3Npb25fY2hlY2sgPSAwOwoKCi8qKgogKiBDYWNoZSBmb3IgZGVzaWduIGRvY3VtZW50cyBmZXRjaGVkIHZpYSBnZXREZXNpZ25Eb2MuCiAqLwoKZXhwb3J0cy5kZXNpZ25fZG9jcyA9IHt9OwoKCi8qKgogKiBUYWtlbiBmcm9tIGpRdWVyeSAxLjQuNCBzbyB3ZSBjYW4gc3VwcG9ydCBtb3JlIHJlY2VudCB2ZXJzaW9ucyBvZiBqUXVlcnkuCiAqLwoKdmFyIGh0dHBEYXRhID0gZnVuY3Rpb24gKHhociwgdHlwZSwgcykgewogICAgdmFyIGN0ID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCJjb250ZW50LXR5cGUiKSB8fCAiIiwKICAgICAgICB4bWwgPSB0eXBlID09PSAieG1sIiB8fCAhdHlwZSAmJiBjdC5pbmRleE9mKCJ4bWwiKSA+PSAwLAogICAgICAgIGRhdGEgPSB4bWwgPyB4aHIucmVzcG9uc2VYTUwgOiB4aHIucmVzcG9uc2VUZXh0OwoKICAgIGlmICh4bWwgJiYgZGF0YS5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgPT09ICJwYXJzZXJlcnJvciIpIHsKICAgICAgICAkLmVycm9yKCJwYXJzZXJlcnJvciIpOwogICAgfQogICAgaWYgKHMgJiYgcy5kYXRhRmlsdGVyKSB7CiAgICAgICAgZGF0YSA9IHMuZGF0YUZpbHRlcihkYXRhLCB0eXBlKTsKICAgIH0KICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gInN0cmluZyIpIHsKICAgICAgICBpZiAodHlwZSA9PT0gImpzb24iIHx8ICF0eXBlICYmIGN0LmluZGV4T2YoImpzb24iKSA+PSAwKSB7CiAgICAgICAgICAgIGRhdGEgPSAkLnBhcnNlSlNPTihkYXRhKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gInNjcmlwdCIgfHwgIXR5cGUgJiYgY3QuaW5kZXhPZigiamF2YXNjcmlwdCIpID49IDApIHsKICAgICAgICAgICAgJC5nbG9iYWxFdmFsKGRhdGEpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBkYXRhOwp9OwoKCi8qKgogKiBSZXR1cm5zIGEgZnVuY3Rpb24gZm9yIGhhbmRsaW5nIGFqYXggcmVzcG9uc2VkIGZyb20ganF1ZXJ5IGFuZCBjYWxscwogKiB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgZGF0YSBvciBhcHByb3ByaWF0ZSBlcnJvci4KICoKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwcml2YXRlCiAqLwoKZnVuY3Rpb24gb25Db21wbGV0ZShvcHRpb25zLCBjYWxsYmFjaykgewogICAgcmV0dXJuIGZ1bmN0aW9uIChyZXEpIHsKICAgICAgICB2YXIgcmVzcDsKICAgICAgICB2YXIgY3R5cGUgPSByZXEuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpOwogICAgICAgIGlmIChjdHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nIHx8IGN0eXBlID09PSAndGV4dC9qc29uJykgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmVzcCA9IGh0dHBEYXRhKHJlcSwgImpzb24iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAob3B0aW9ucy5leHBlY3RfanNvbikgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKAogICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcignRXhwZWN0ZWQgSlNPTiByZXNwb25zZSwgZ290ICcgKyBjdHlwZSkKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzcCA9IHJlcS5yZXNwb25zZVRleHQ7CiAgICAgICAgfQogICAgICAgIGlmIChyZXEuc3RhdHVzID09PSA0MDEpIHsKICAgICAgICAgICAgLy8gcmV0dXJuZWQgJ1VuYXV0aG9yaXplZCcsIGNoZWNrIHRoZSB1c2VyJ3Mgc2Vzc2lvbiBpZiBpdCdzIG5vdAogICAgICAgICAgICAvLyBiZWVuIGNoZWNrZWQgb24gYW4gJ1VuYXV0aG9yaXplZCcgcmVwc29uc2UgaW4gdGhlIGxhc3Qgc2Vjb25kCiAgICAgICAgICAgIGlmIChzZXNzaW9uICYmIGxhc3Rfc2Vzc2lvbl9jaGVjayA8IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gMTAwMCkgewogICAgICAgICAgICAgICAgc2Vzc2lvbi5pbmZvKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCB8fCByZXEuc3RhdHVzID09PSAyMDEgfHwgcmVxLnN0YXR1cyA9PT0gMjAyKSB7CiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3ApOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChyZXNwLmVycm9yKSB7CiAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IocmVzcC5yZWFzb24gfHwgcmVzcC5lcnJvcik7CiAgICAgICAgICAgIGVyci5lcnJvciA9IHJlc3AuZXJyb3I7CiAgICAgICAgICAgIGVyci5yZWFzb24gPSByZXNwLnJlYXNvbjsKICAgICAgICAgICAgZXJyLnN0YXR1cyA9IHJlcS5zdGF0dXM7CiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAvLyBUT0RPOiBtYXAgc3RhdHVzIGNvZGUgdG8gbWVhbmluZ2Z1bCBlcnJvciBtZXNzYWdlCiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignUmV0dXJuZWQgc3RhdHVzIGNvZGU6ICcgKyByZXEuc3RhdHVzKSk7CiAgICAgICAgfQogICAgfTsKfQoKLyoqCiAqIEVuY29kZXMgYSBkb2N1bWVudCBpZCBvciB2aWV3LCBsaXN0IG9yIHNob3cgbmFtZS4KICoKICogQG5hbWUgZW5jb2RlKHN0cikKICogQHBhcmFtIHtTdHJpbmd9IHN0cgogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikgewogICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL15fZGVzaWduJTJGLywgJ19kZXNpZ24vJyk7Cn07CgoKLyoqCiAqIE1ha2UgYSByZXF1ZXN0LCB3aXRoIHNvbWUgZGVmYXVsdCBzZXR0aW5ncyBhbmQgcHJvcGVyIGNhbGxiYWNrCiAqIGhhbmRsaW5nLiBVc2VkIGJlaGluZC10aGUtc2NlbmVzIGJ5IG1vc3Qgb3RoZXIgREIgbW9kdWxlIGZ1bmN0aW9ucy4KICoKICogQG5hbWUgcmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaykKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHsKICAgIG9wdGlvbnMuY29tcGxldGUgPSBvbkNvbXBsZXRlKG9wdGlvbnMsIGNhbGxiYWNrKTsKICAgIG9wdGlvbnMuZGF0YVR5cGUgPSAnanNvbic7CiAgICAkLmFqYXgob3B0aW9ucyk7Cn07CgoKLyoqCiAqIEZldGNoZXMgYSByZXdyaXRlIGZyb20gdGhlIGRhdGFiYXNlIHRoZSBhcHAgaXMgcnVubmluZyBvbi4gUmVzdWx0cwogKiBhcmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjaywgd2l0aCB0aGUgZmlyc3QgYXJndW1lbnQgb2YgdGhlIGNhbGxiYWNrCiAqIHJlc2VydmVkIGZvciBhbnkgZXhjZXB0aW9ucyB0aGF0IG9jY3VycmVkIChub2RlLmpzIHN0eWxlKS4KICoKICogQG5hbWUgZ2V0UmV3cml0ZShwYXRoLCBbcV0sIGNhbGxiYWNrKQogKiBAcGFyYW0ge1N0cmluZ30gcGF0aAogKiBAcGFyYW0ge09iamVjdH0gcSAob3B0aW9uYWwpCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5nZXRSZXdyaXRlID0gZnVuY3Rpb24gKHBhdGgsIC8qb3B0aW9uYWwqL3EsIGNhbGxiYWNrKSB7CiAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRSZXdyaXRlIGNhbm5vdCBiZSBjYWxsZWQgc2VydmVyLXNpZGUnKTsKICAgIH0KICAgIGlmICghY2FsbGJhY2spIHsKICAgICAgICBjYWxsYmFjayA9IHE7CiAgICAgICAgcSA9IHt9OwogICAgfQogICAgLy8gcHJlcGVuZCBmb3J3YXJkLXNsYXNoIGlmIG1pc3NpbmcKICAgIHBhdGggPSAocGF0aFswXSA9PT0gJy8nKSA/IHBhdGg6ICcvJyArIHBhdGg7CgogICAgdmFyIGJhc2UgPSB1dGlscy5nZXRCYXNlVVJMKCk7CiAgICB2YXIgbmFtZSA9IGV4cG9ydHMuZW5jb2RlKHNldHRpbmdzLm5hbWUpOwogICAgdmFyIHJlcSA9IHsKICAgICAgICB1cmw6IGJhc2UgKyAnL19kYi9fZGVzaWduLycgKyBuYW1lICsgJy9fcmV3cml0ZScgKyBwYXRoLAogICAgICAgIGRhdGE6IGV4cG9ydHMuc3RyaW5naWZ5UXVlcnkocSkKICAgIH07CiAgICBleHBvcnRzLnJlcXVlc3QocmVxLCBjYWxsYmFjayk7Cn07CgoKLyoqCiAqIEZldGNoZXMgYSBkb2N1bWVudCBmcm9tIHRoZSBkYXRhYmFzZSB0aGUgYXBwIGlzIHJ1bm5pbmcgb24uIFJlc3VsdHMgYXJlCiAqIHBhc3NlZCB0byB0aGUgY2FsbGJhY2ssIHdpdGggdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBjYWxsYmFjayByZXNlcnZlZAogKiBmb3IgYW55IGV4Y2VwdGlvbnMgdGhhdCBvY2N1cnJlZCAobm9kZS5qcyBzdHlsZSkuCiAqCiAqIEBuYW1lIGdldERvYyhpZCwgW3EsIG9wdGlvbnNdLCBjYWxsYmFjaykKICogQHBhcmFtIHtTdHJpbmd9IGlkCiAqIEBwYXJhbSB7T2JqZWN0fSBxIChvcHRpb25hbCkKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgKG9wdGlvbmFsKQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZ2V0RG9jID0gZnVuY3Rpb24gKGlkLCAvKm9wdGlvbmFsKi9xLCAvKm9wdGlvbmFsKi9vcHRpb25zLCBjYWxsYmFjaykgewogICAgaWYgKCF1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0RG9jIGNhbm5vdCBiZSBjYWxsZWQgc2VydmVyLXNpZGUnKTsKICAgIH0KICAgIGlmICghaWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldERvYyByZXF1aXJlcyBhbiBpZCBwYXJhbWV0ZXIgdG8gd29yayBwcm9wZXJseScpOwogICAgfQogICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgIGlmICghb3B0aW9ucykgewogICAgICAgICAgICAvKiBBcml0eSA9IDI6IE9taXRzIHEsIG9wdGlvbnMgKi8KICAgICAgICAgICAgY2FsbGJhY2sgPSBxOwogICAgICAgICAgICBvcHRpb25zID0ge307CiAgICAgICAgICAgIHEgPSB7fTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLyogQXJpdHkgPSAzOiBPbWl0cyBvcHRpb25zICovCiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgIH0KICAgIH0KICAgIHZhciB1cmw7CiAgICBpZiAob3B0aW9ucy5kYikgewogICAgICAgIC8qIEZvcmNlIGxlYWRpbmcgc2xhc2g7IG1ha2UgYWJzb2x1dGUgcGF0aCAqLwogICAgICAgIHVybCA9IChvcHRpb25zLmRiLnN1YnN0cigwLCAxKSAhPT0gJy8nID8gJy8nIDogJycpICsgb3B0aW9ucy5kYjsKICAgIH0gZWxzZSB7CiAgICAgICAgdXJsID0gdXRpbHMuZ2V0QmFzZVVSTCgpICsgJy9fZGInOwogICAgfQogICAgdmFyIHJlcSA9IHsKICAgICAgICB1cmw6IHVybCArICcvJyArIGV4cG9ydHMuZW5jb2RlKGlkKSwKICAgICAgICBkYXRhOiBleHBvcnRzLnN0cmluZ2lmeVF1ZXJ5KHEpLAogICAgICAgIGV4cGVjdF9qc29uOiB0cnVlCiAgICB9OwogICAgZXhwb3J0cy5yZXF1ZXN0KHJlcSwgY2FsbGJhY2spOwp9OwoKCi8qKgogKiBTYXZlcyBhIGRvY3VtZW50IHRvIHRoZSBkYXRhYmFzZSB0aGUgYXBwIGlzIHJ1bm5pbmcgb24uIFJlc3VsdHMgYXJlCiAqIHBhc3NlZCB0byB0aGUgY2FsbGJhY2ssIHdpdGggdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBjYWxsYmFjayByZXNlcnZlZAogKiBmb3IgYW55IGV4Y2VwdGlvbnMgdGhhdCBvY2N1cnJlZCAobm9kZS5qcyBzdHlsZSkuCiAqCiAqIEBuYW1lIHNhdmVEb2MoZG9jLCBbb3B0aW9uc10sIGNhbGxiYWNrKQogKiBAcGFyYW0ge09iamVjdH0gZG9jCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIChvcHRpb25hbCkKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnNhdmVEb2MgPSBmdW5jdGlvbiAoZG9jLCAvKm9wdGlvbmFsKi9vcHRpb25zLCBjYWxsYmFjaykgewogICAgaWYgKCF1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignc2F2ZURvYyBjYW5ub3QgYmUgY2FsbGVkIHNlcnZlci1zaWRlJyk7CiAgICB9CiAgICB2YXIgbWV0aG9kLCB1cmw7CiAgICBpZiAob3B0aW9ucy5kYikgewogICAgICAgIC8qIEZvcmNlIGxlYWRpbmcgc2xhc2g7IG1ha2UgYWJzb2x1dGUgcGF0aCAqLwogICAgICAgIHVybCA9IChvcHRpb25zLmRiLnN1YnN0cigwLCAxKSAhPT0gJy8nID8gJy8nIDogJycpICsgb3B0aW9ucy5kYjsKICAgIH0gZWxzZSB7CiAgICAgICAgdXJsID0gdXRpbHMuZ2V0QmFzZVVSTCgpICsgJy9fZGInOwogICAgfQogICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgIC8qIEFyaXR5ID0gMjogT21pdHMgb3B0aW9ucyAqLwogICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0ge307CiAgICB9CiAgICBpZiAoZG9jLl9pZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbWV0aG9kID0gIlBPU1QiOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgbWV0aG9kID0gIlBVVCI7CiAgICAgICAgdXJsICs9ICcvJyArIGRvYy5faWQ7CiAgICB9CiAgICB2YXIgcmVxID0gewogICAgICAgIHR5cGU6IG1ldGhvZCwKICAgICAgICB1cmw6IHVybCwKICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkb2MpLAogICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSwKICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgIGV4cGVjdF9qc29uOiB0cnVlCiAgICB9OwogICAgZXhwb3J0cy5yZXF1ZXN0KHJlcSwgY2FsbGJhY2spOwp9OwoKLyoqCiAqIERlbGV0ZXMgYSBkb2N1bWVudCBmcm9tIHRoZSBkYXRhYmFzZSB0aGUgYXBwIGlzIHJ1bm5pbmcgb24uIFJlc3VsdHMgYXJlCiAqIHBhc3NlZCB0byB0aGUgY2FsbGJhY2ssIHdpdGggdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBjYWxsYmFjayByZXNlcnZlZAogKiBmb3IgYW55IGV4Y2VwdGlvbnMgdGhhdCBvY2N1cnJlZCAobm9kZS5qcyBzdHlsZSkuCiAqCiAqIEBuYW1lIHJlbW92ZURvYyhkb2MsIFtvcHRpb25zXSwgY2FsbGJhY2spCiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJlbW92ZURvYyA9IGZ1bmN0aW9uIChkb2MsIC8qb3B0aW9uYWwqL29wdGlvbnMsIGNhbGxiYWNrKSB7CiAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVEb2MgY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgaWYgKCFkb2MuX2lkKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVEb2MgcmVxdWlyZXMgYW4gX2lkIGZpZWxkIGluIHlvdXIgZG9jdW1lbnQnKTsKICAgIH0KICAgIGlmICghZG9jLl9yZXYpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlbW92ZURvYyByZXF1aXJlcyBhIF9yZXYgZmllbGQgaW4geW91ciBkb2N1bWVudCcpOwogICAgfQogICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgIC8qIEFyaXR5ID0gMjogT21pdHMgb3B0aW9ucyAqLwogICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0ge307CiAgICB9CiAgICB2YXIgdXJsOwogICAgaWYgKG9wdGlvbnMuZGIpIHsKICAgICAgICAvKiBGb3JjZSBsZWFkaW5nIHNsYXNoOyBtYWtlIGFic29sdXRlIHBhdGggKi8KICAgICAgICB1cmwgPSAob3B0aW9ucy5kYi5zdWJzdHIoMCwgMSkgIT09ICcvJyA/ICcvJyA6ICcnKSArIG9wdGlvbnMuZGIgKyAnLyc7CiAgICB9IGVsc2UgewogICAgICAgIHVybCA9IHV0aWxzLmdldEJhc2VVUkwoKSArICcvX2RiLyc7CiAgICB9CiAgICB1cmwgKz0gZXhwb3J0cy5lbmNvZGUoZG9jLl9pZCkgKyAnP3Jldj0nICsgZXhwb3J0cy5lbmNvZGUoZG9jLl9yZXYpOwogICAgdmFyIHJlcSA9IHsKICAgICAgICB0eXBlOiAnREVMRVRFJywKICAgICAgICB1cmw6IHVybAogICAgfTsKICAgIGV4cG9ydHMucmVxdWVzdChyZXEsIGNhbGxiYWNrKTsKfTsKCgovKioKICogRmV0Y2hlcyBhIHZpZXcgZnJvbSB0aGUgZGF0YWJhc2UgdGhlIGFwcCBpcyBydW5uaW5nIG9uLiBSZXN1bHRzIGFyZQogKiBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLCB3aXRoIHRoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgY2FsbGJhY2sgcmVzZXJ2ZWQKICogZm9yIGFueSBleGNlcHRpb25zIHRoYXQgb2NjdXJyZWQgKG5vZGUuanMgc3R5bGUpLgogKgogKiBAbmFtZSBnZXRWaWV3KHZpZXcsIFtxXSwgY2FsbGJhY2spCiAqIEBwYXJhbSB7U3RyaW5nfSB2aWV3CiAqIEBwYXJhbSB7T2JqZWN0fSBxIChvcHRpb25hbCkKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmdldFZpZXcgPSBmdW5jdGlvbiAodmlldywgLypvcHRpb25hbCovcSwgLypvcHRpb25hbCovb3B0aW9ucywgY2FsbGJhY2spIHsKICAgIGlmICghdXRpbHMuaXNCcm93c2VyKCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldFZpZXcgY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgIGlmICghb3B0aW9ucykgewogICAgICAgICAgICAvKiBBcml0eSA9IDI6IE9taXRzIHEsIG9wdGlvbnMgKi8KICAgICAgICAgICAgY2FsbGJhY2sgPSBxOwogICAgICAgICAgICBvcHRpb25zID0ge307CiAgICAgICAgICAgIHEgPSB7fTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLyogQXJpdHkgPSAzOiBPbWl0cyBvcHRpb25zICovCiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgIH0KICAgIH0KICAgIHZhciBiYXNlOwogICAgaWYgKG9wdGlvbnMuZGIpIHsKICAgICAgICAvKiBGb3JjZSBsZWFkaW5nIHNsYXNoOyBtYWtlIGFic29sdXRlIHBhdGggKi8KICAgICAgICBiYXNlID0gKG9wdGlvbnMuZGIuc3Vic3RyKDAsIDEpICE9PSAnLycgPyAnLycgOiAnJykgKyBvcHRpb25zLmRiOwogICAgfSBlbHNlIHsKICAgICAgICBiYXNlID0gdXRpbHMuZ2V0QmFzZVVSTCgpOwogICAgfQogICAgdmFyIG5hbWUgPSBleHBvcnRzLmVuY29kZShzZXR0aW5ncy5uYW1lKTsKICAgIHZhciB2aWV3bmFtZSA9IGV4cG9ydHMuZW5jb2RlKHZpZXcpOwogICAgdmFyIHJlcSA9IHsKICAgICAgICB1cmw6ICgKICAgICAgICAgICAgYmFzZSArIChvcHRpb25zLmRiID8gJycgOiAnL19kYicpICsgJy9fZGVzaWduLycgKwogICAgICAgICAgICAgICAgKG9wdGlvbnMuZGIgfHwgbmFtZSkgKyAnL192aWV3LycgKyB2aWV3bmFtZQogICAgICAgICksCiAgICAgICAgZGF0YTogZXhwb3J0cy5zdHJpbmdpZnlRdWVyeShxKSwKICAgICAgICBleHBlY3RfanNvbjogdHJ1ZQogICAgfTsKICAgIGV4cG9ydHMucmVxdWVzdChyZXEsIGNhbGxiYWNrKTsKfTsKCgovKioKICogVHJhbnNmb3JtcyBhbmQgZmV0Y2hlcyBhIHZpZXcgdGhyb3VnaCBhIGxpc3QgZnJvbSB0aGUgZGF0YWJhc2UgdGhlIGFwcAogKiBpcyBydW5uaW5nIG9uLiBSZXN1bHRzIGFyZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLCB3aXRoIHRoZSBmaXJzdAogKiBhcmd1bWVudCBvZiB0aGUgY2FsbGJhY2sgcmVzZXJ2ZWQgZm9yIGFueSBleGNlcHRpb25zIHRoYXQgb2NjdXJyZWQKICogKG5vZGUuanMgc3R5bGUpLgogKgogKiBAbmFtZSBnZXRMaXN0KGxpc3QsIHZpZXcsIFtxXSwgY2FsbGJhY2spCiAqIEBwYXJhbSB7U3RyaW5nfSBsaXN0CiAqIEBwYXJhbSB7U3RyaW5nfSB2aWV3CiAqIEBwYXJhbSB7T2JqZWN0fSBxIChvcHRpb25hbCkKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgovLyBUT0RPOiBydW4gbGlzdCBmdW5jdGlvbiBjbGllbnQtc2lkZT8KZXhwb3J0cy5nZXRMaXN0ID0gZnVuY3Rpb24gKGxpc3QsIHZpZXcsIC8qb3B0aW9uYWwqL3EsIGNhbGxiYWNrKSB7CiAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRMaXN0IGNhbm5vdCBiZSBjYWxsZWQgc2VydmVyLXNpZGUnKTsKICAgIH0KICAgIGlmICghY2FsbGJhY2spIHsKICAgICAgICBjYWxsYmFjayA9IHE7CiAgICAgICAgcSA9IHt9OwogICAgfQogICAgdmFyIGJhc2UgPSB1dGlscy5nZXRCYXNlVVJMKCk7CiAgICB2YXIgbmFtZSA9IGV4cG9ydHMuZW5jb2RlKHNldHRpbmdzLm5hbWUpOwogICAgdmFyIGxpc3RuYW1lID0gZXhwb3J0cy5lbmNvZGUobGlzdCk7CiAgICB2YXIgdmlld25hbWUgPSBleHBvcnRzLmVuY29kZSh2aWV3KTsKICAgIHZhciByZXEgPSB7CiAgICAgICAgdXJsOiBiYXNlICsgJy9fZGIvX2Rlc2lnbi8nICsgbmFtZSArICcvX2xpc3QvJyArIGxpc3RuYW1lICsKICAgICAgICAgICAgICcvJyArIHZpZXduYW1lLAogICAgICAgIGRhdGE6IGV4cG9ydHMuc3RyaW5naWZ5UXVlcnkocSkKICAgIH07CiAgICBleHBvcnRzLnJlcXVlc3QocmVxLCBjYWxsYmFjayk7Cn07CgovKioKICogVHJhbnNmb3JtcyBhbmQgZmV0Y2hlcyBhIGRvY3VtZW50IHRocm91Z2ggYSBzaG93IGZyb20gdGhlIGRhdGFiYXNlIHRoZSBhcHAKICogaXMgcnVubmluZyBvbi4gUmVzdWx0cyBhcmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjaywgd2l0aCB0aGUgZmlyc3QKICogYXJndW1lbnQgb2YgdGhlIGNhbGxiYWNrIHJlc2VydmVkIGZvciBhbnkgZXhjZXB0aW9ucyB0aGF0IG9jY3VycmVkCiAqIChub2RlLmpzIHN0eWxlKS4KICoKICogQG5hbWUgZ2V0U2hvdyhzaG93LCBkb2NpZCwgW3FdLCBjYWxsYmFjaykKICogQHBhcmFtIHtTdHJpbmd9IHNob3cKICogQHBhcmFtIHtTdHJpbmd9IGRvY2lkCiAqIEBwYXJhbSB7T2JqZWN0fSBxIChvcHRpb25hbCkKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgovLyBUT0RPOiBydW4gc2hvdyBmdW5jdGlvbiBjbGllbnQtc2lkZT8KZXhwb3J0cy5nZXRTaG93ID0gZnVuY3Rpb24gKHNob3csIGRvY2lkLCAvKm9wdGlvbmFsKi9xLCBjYWxsYmFjaykgewogICAgaWYgKCF1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0U2hvdyBjYW5ub3QgYmUgY2FsbGVkIHNlcnZlci1zaWRlJyk7CiAgICB9CiAgICBpZiAoIWNhbGxiYWNrKSB7CiAgICAgICAgY2FsbGJhY2sgPSBxOwogICAgICAgIHEgPSB7fTsKICAgIH0KICAgIHZhciBiYXNlID0gdXRpbHMuZ2V0QmFzZVVSTCgpOwogICAgdmFyIG5hbWUgPSBleHBvcnRzLmVuY29kZShzZXR0aW5ncy5uYW1lKTsKICAgIHZhciBzaG93bmFtZSA9IGV4cG9ydHMuZW5jb2RlKHNob3cpOwogICAgdmFyIHNob3dfdXJsID0gYmFzZSArICcvX2RiL19kZXNpZ24vJyArIG5hbWUgKyAnL19zaG93LycgKyBzaG93bmFtZTsKICAgIHZhciByZXEgPSB7CiAgICAgICAgdXJsOiBzaG93X3VybCArIChkb2NpZCA/ICcvJyArIGV4cG9ydHMuZW5jb2RlKGRvY2lkKTogJycpLAogICAgICAgIGRhdGE6IGV4cG9ydHMuc3RyaW5naWZ5UXVlcnkocSkKICAgIH07CiAgICBleHBvcnRzLnJlcXVlc3QocmVxLCBjYWxsYmFjayk7Cn07CgoKLyoqCiAqIEdldCBhbGwgZG9jdW1lbnRzIChpbmNsdWRpbmcgZGVzaWduIGRvY3MpLgogKgogKiBAbmFtZSBhbGwoW3FdLCBjYWxsYmFjaykKICogQHBhcmFtIHtPYmplY3R9IHEgKG9wdGlvbmFsKQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuYWxsID0gZnVuY3Rpb24gKC8qb3B0aW9uYWwqL3EsIGNhbGxiYWNrKSB7CiAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbGwgY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgIGNhbGxiYWNrID0gcTsKICAgICAgICBxID0ge307CiAgICB9CiAgICB2YXIgYmFzZSA9IHV0aWxzLmdldEJhc2VVUkwoKTsKICAgIHZhciByZXEgPSB7CiAgICAgICAgdXJsOiBiYXNlICsgJy9fZGIvX2FsbF9kb2NzJywKICAgICAgICBkYXRhOiBleHBvcnRzLnN0cmluZ2lmeVF1ZXJ5KHEpLAogICAgICAgIGV4cGVjdF9qc29uOiB0cnVlCiAgICB9OwogICAgZXhwb3J0cy5yZXF1ZXN0KHJlcSwgY2FsbGJhY2spOwp9OwoKCi8qKgogKiBQcm9wZXJseSBlbmNvZGVzIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gQ291Y2hEQiB2aWV3cyBldGMuIEhhbmRsZSBjb21wbGV4CiAqIGtleXMgYW5kIG90aGVyIG5vbi1zdHJpbmcgcGFyYW1ldGVycyBieSBwYXNzaW5nIHRocm91Z2ggSlNPTi5zdHJpbmdpZnkuCiAqIFJldHVybnMgYSBzaGFsbG93LWNvcGllZCBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgcXVlcnkgYWZ0ZXIgY29tcGxleCB2YWx1ZXMKICogaGF2ZSBiZWVuIHN0cmluZ2lmaWVkLgogKgogKiBAbmFtZSBzdHJpbmdpZnlRdWVyeShxdWVyeSkKICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5CiAqIEByZXR1cm5zIHtPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5zdHJpbmdpZnlRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkgewogICAgdmFyIHEgPSB7fTsKICAgIGZvciAodmFyIGsgaW4gcXVlcnkpIHsKICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5W2tdICE9PSAnc3RyaW5nJykgewogICAgICAgICAgICBxW2tdID0gSlNPTi5zdHJpbmdpZnkocXVlcnlba10pOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcVtrXSA9IHF1ZXJ5W2tdOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBxOwp9OwoKCi8qKgogKiBSZXR1cm5zIGEgbmV3IFVVSUQgZ2VuZXJhdGVkIGJ5IENvdWNoREIuIEl0cyBwb3NzaWJsZSB0byBjYWNoZQogKiBtdWx0aXBsZSBVVUlEcyBmb3IgbGF0ZXIgdXNlLCB0byBhdm9pZCBtYWtpbmcgdG9vIG1hbnkgcmVxdWVzdHMuCiAqCiAqIEBuYW1lIG5ld1VVSUQoY2FjaGVOdW0sIGNhbGxiYWNrKQogKiBAcGFyYW0ge051bWJlcn0gY2FjaGVOdW0gKG9wdGlvbmFsLCBkZWZhdWx0OiAxKQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCnZhciB1dWlkQ2FjaGUgPSBbXTsKCmV4cG9ydHMubmV3VVVJRCA9IGZ1bmN0aW9uIChjYWNoZU51bSwgY2FsbGJhY2spIHsKICAgIGlmICghdXRpbHMuaXNCcm93c2VyKCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25ld1VVSUQgY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgIGNhbGxiYWNrID0gY2FjaGVOdW07CiAgICAgICAgY2FjaGVOdW0gPSAxOwogICAgfQogICAgaWYgKHV1aWRDYWNoZS5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdXVpZENhY2hlLnNoaWZ0KCkpOwogICAgfQogICAgdmFyIGJhc2UgPSB1dGlscy5nZXRCYXNlVVJMKCk7CiAgICB2YXIgcmVxID0gewogICAgICAgIHVybDogJy9fdXVpZHMnLAogICAgICAgIGRhdGE6IHtjb3VudDogY2FjaGVOdW19LAogICAgICAgIGV4cGVjdF9qc29uOiB0cnVlCiAgICB9OwogICAgZXhwb3J0cy5yZXF1ZXN0KHJlcSwgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIHV1aWRDYWNoZSA9IHJlc3AudXVpZHM7CiAgICAgICAgY2FsbGJhY2sobnVsbCwgdXVpZENhY2hlLnNoaWZ0KCkpOwogICAgfSk7Cn07CgovKioKICogQ3JlYXRlcyBhIENvdWNoREIgZGF0YWJhc2UuCiAqCiAqIElmIHlvdSdyZSBydW5uaW5nIGJlaGluZCBhIHZpcnR1YWwgaG9zdCB5b3UnbGwgbmVlZCB0byBzZXQgdXAKICogYXBwcm9wcmlhdGUgcmV3cml0ZXMgZm9yIGEgUFVUIHJlcXVlc3QgdG8gJy8nIGFuZCB0dXJuIG9mZiBzYWZlIHJld3JpdGVzLgogKgogKiBAbmFtZSBjcmVhdGVEYXRhYmFzZShuYW1lLCBjYWxsYmFjaykKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmNyZWF0ZURhdGFiYXNlID0gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7CiAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVEYXRhYmFzZSBjYW5ub3QgYmUgY2FsbGVkIHNlcnZlci1zaWRlJyk7CiAgICB9CiAgICB2YXIgcmVxID0gewogICAgICAgIHR5cGU6ICdQVVQnLAogICAgICAgIHVybDogJy8nICsgZXhwb3J0cy5lbmNvZGUobmFtZS5yZXBsYWNlKC9eXC8rLywgJycpKQogICAgfTsKICAgIGV4cG9ydHMucmVxdWVzdChyZXEsIGNhbGxiYWNrKTsKfTsKCi8qKgogKiBEZWxldGVzIGEgQ291Y2hEQiBkYXRhYmFzZS4KICoKICogSWYgeW91J3JlIHJ1bm5pbmcgYmVoaW5kIGEgdmlydHVhbCBob3N0IHlvdSdsbCBuZWVkIHRvIHNldCB1cAogKiBhcHByb3ByaWF0ZSByZXdyaXRlcyBmb3IgYSBERUxFVEUgcmVxdWVzdCB0byAnLycgYW5kIHR1cm4gb2ZmIHNhZmUgcmV3cml0ZXMuCiAqCiAqIEBuYW1lIGRlbGV0ZURhdGFiYXNlKG5hbWUsIGNhbGxiYWNrKQogKiBAcGFyYW0ge1N0cmluZ30gbmFtZQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZGVsZXRlRGF0YWJhc2UgPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHsKICAgIGlmICghdXRpbHMuaXNCcm93c2VyKCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlbGV0ZURhdGFiYXNlIGNhbm5vdCBiZSBjYWxsZWQgc2VydmVyLXNpZGUnKTsKICAgIH0KICAgIHZhciByZXEgPSB7CiAgICAgICAgdHlwZTogJ0RFTEVURScsCiAgICAgICAgdXJsOiAnLycgKyBleHBvcnRzLmVuY29kZShuYW1lLnJlcGxhY2UoL15cLysvLCAnJykpCiAgICB9OwogICAgZXhwb3J0cy5yZXF1ZXN0KHJlcSwgY2FsbGJhY2spOwp9OwoKCi8qKgogKiBGZXRjaGVzIHRoZSBtb3N0IHJlY2VudCByZXZpc2lvbiBvZiB0aGUgcmVwbGljYXRpb24gZG9jdW1lbnQKICogcmVmZXJyZWQgdG8gYnkgdGhlIGlkIHBhcmFtZXRlci4KICoKICogSWYgeW91J3JlIHJ1bm5pbmcgYmVoaW5kIGEgdmlydHVhbCBob3N0IHlvdSdsbCBuZWVkIHRvIHNldCB1cAogKiBhcHByb3ByaWF0ZSByZXdyaXRlcyB0byAvX3JlcGxpY2F0b3IsIHdoaWNoIHdpbGwgYWxzbyBtZWFuIHR1cm5pbmcKICogb2ZmIHNhZmUgcmV3cml0ZXMuCiAqCiAqIFRoaXMgZnVuY3Rpb24gb25seSB3b3JrcyB3aXRoIENvdWNoREIgPj0gMS4xLCBzaW5jZSBpdCB1c2VzIHRoZQogKiBfcmVwbGljYXRvciBkYXRhYmFzZS4KICoKICogQG5hbWUgZ2V0UmVwbGljYXRpb24oaWQsIGNhbGxiYWNrKQogKiBAcGFyYW0ge1N0cmluZ30gaWQKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmdldFJlcGxpY2F0aW9uID0gZnVuY3Rpb24gKGlkLCBjYWxsYmFjaykgewogICAgaWYgKCF1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0UmVwbGljYXRpb24gY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgdmFyIHJlcSA9IHsKICAgICAgICB1cmw6ICcvX3JlcGxpY2F0b3IvJyArIGV4cG9ydHMuZW5jb2RlKGlkKSwKICAgICAgICBjYWNoZTogZmFsc2UgLyogV29yayBhcm91bmQgSUU3IGlzc3VlICovCiAgICB9OwogICAgZXhwb3J0cy5yZXF1ZXN0KHJlcSwgY2FsbGJhY2spOwp9OwoKLyoqCiAqIFJlcGxpY2F0ZXMgb3B0aW9ucy5zb3VyY2UgdG8gb3B0aW9ucy50YXJnZXQuIFRoZSBzdHJpbmdzCiAqIG9wdGlvbnMuc291cmNlIGFuZCBvcHRpb25zLnRhcmdldCBhcmUgZWFjaCBlaXRoZXIgYQogKiBDb3VjaERCIGRhdGFiYXNlIG5hbWUgb3IgYSBDb3VjaERCIGRhdGFiYXNlIFVSSS4KICoKICogSWYgeW91J3JlIHJ1bm5pbmcgYmVoaW5kIGEgdmlydHVhbCBob3N0IHlvdSdsbCBuZWVkIHRvIHNldCB1cAogKiBhcHByb3ByaWF0ZSByZXdyaXRlcyB0byAvX3JlcGxpY2F0b3IsIHdoaWNoIHdpbGwgYWxzbyBtZWFuIHR1cm5pbmcKICogb2ZmIHNhZmUgcmV3cml0ZXMuCiAqCiAqIFRoaXMgZnVuY3Rpb24gb25seSB3b3JrcyB3aXRoIENvdWNoREIgPj0gMS4xLCBzaW5jZSBpdCB1c2VzIHRoZQogKiBfcmVwbGljYXRvciBkYXRhYmFzZS4KICoKICogQG5hbWUgc3RhcnRSZXBsaWNhdGlvbihvcHRpb25zLCBjYWxsYmFjaykKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnN0YXJ0UmVwbGljYXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHsKICAgIGlmICghdXRpbHMuaXNCcm93c2VyKCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0UmVwbGljYXRpb24gY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgaWYgKCFvcHRpb25zLnNvdXJjZSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignc291cmNlIHBhcmFtZXRlciBtdXN0IGJlIHByb3ZpZGVkJyk7CiAgICB9CiAgICBpZiAoIW9wdGlvbnMudGFyZ2V0KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0YXJnZXQgcGFyYW1ldGVyIG11c3QgYmUgcHJvdmlkZWQnKTsKICAgIH0KICAgIHZhciByZXEgPSB7CiAgICAgICAgdHlwZTogJ1BPU1QnLAogICAgICAgIHVybDogJy9fcmVwbGljYXRvcicsCiAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkob3B0aW9ucyksCiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgfTsKICAgIGV4cG9ydHMucmVxdWVzdChyZXEsIGNhbGxiYWNrKTsKfTsKCi8qKgogKiBXYWl0cyBmb3IgYSByZXBsaWNhdGlvbiBvcGVyYXRpb24gdG8gZW50ZXIgYSBzcGVjaWZpYyBzdGF0ZS4KICogd2FpdFJlcGxpY2F0aW9uIHBvbGxzIHRoZSBfcmVwbGljYXRpb24gZGF0YWJhc2UgdXNpbmcgdGhlCiAqIGRvYyBwcm92aWRlZCwgYW5kIGV2YWx1YXRlcyBzdGF0ZV9mdW5jdGlvbihkb2MpIGF0IGVhY2ggaXRlcmF0aW9uLgogKiBUaGlzIGZ1bmN0aW9uIHN0b3BzIHBvbGxpbmcgYW5kIGludm9rZXMgY2FsbGJhY2sgd2hlbiB0aGUKICogc3RhdGVfZnVuY3Rpb24gZXZhbHVhdGVzIHRvIHRydWUuIElmIHN0YXRlX2Z1bmN0aW9uIGlzIG5vdAogKiBwcm92aWRlZCwgd2FpdFJlcGxpY2F0aW9uIHdhaXRzIGZvciB0aGUgZG9jJ3MgX3JlcGxpY2F0aW9uX3N0YXRlCiAqIHRvIGNoYW5nZSBmcm9tICd0cmlnZ2VyZWQnIHRvICdjb21wbGV0ZWQnIChvciAnZXJyb3InKS4KICoKICogSWYgeW91J3JlIHJ1bm5pbmcgYmVoaW5kIGEgdmlydHVhbCBob3N0IHlvdSdsbCBuZWVkIHRvIHNldCB1cAogKiBhcHByb3ByaWF0ZSByZXdyaXRlcyB0byAvX3JlcGxpY2F0b3IsIHdoaWNoIHdpbGwgYWxzbyBtZWFuIHR1cm5pbmcKICogb2ZmIHNhZmUgcmV3cml0ZXMuCiAqCiAqIFRoaXMgZnVuY3Rpb24gb25seSB3b3JrcyB3aXRoIENvdWNoREIgPj0gMS4xLCBzaW5jZSBpdCB1c2VzIHRoZQogKiBfcmVwbGljYXRvciBkYXRhYmFzZS4KICoKICogQG5hbWUgd2FpdFJlcGxpY2F0aW9uKGRvYywgW29wdGlvbnMsIHN0YXRlX2Z1bmN0aW9uXSwgY2FsbGJhY2spCiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MKICogQHBhcmFtIHtGdW5jdGlvbn0gc3RhdGVfZnVuY3Rpb24gKG9wdGlvbmFsKQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMud2FpdFJlcGxpY2F0aW9uID0gZnVuY3Rpb24gKGRvYywgLypvcHRpb25hbCovb3B0aW9ucywgLypvcHRpb25hbCovc3RhdGVfZnVuY3Rpb24sIGNhbGxiYWNrKSB7CiAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3YWl0UmVwbGljYXRpb24gY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgdmFyIGRlZmF1bHRfc3RhdGVfZnVuY3Rpb24gPSBmdW5jdGlvbiAocmVjZW50X2RvYywgaW5pdGlhbF9kb2MpIHsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgcmVjZW50X2RvYy5fcmVwbGljYXRpb25fc3RhdGUgPT09ICdjb21wbGV0ZWQnIHx8CiAgICAgICAgICAgICAgcmVjZW50X2RvYy5fcmVwbGljYXRpb25fc3RhdGUgPT09ICdlcnJvcicKICAgICAgICApOwogICAgfTsKICAgIGlmICghY2FsbGJhY2spIHsKICAgICAgICBpZiAoIXN0YXRlX2Z1bmN0aW9uKSB7CiAgICAgICAgICAgIC8qIEFyaXR5ID0gMjogZG9jLCBjYWxsYmFjayAqLwogICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7CiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgc3RhdGVfZnVuY3Rpb24gPSBkZWZhdWx0X3N0YXRlX2Z1bmN0aW9uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8qIEFyaXR5ID0gMzogZG9jLCBvcHRpb25zLCBjYWxsYmFjayAqLwogICAgICAgICAgICBjYWxsYmFjayA9IHN0YXRlX2Z1bmN0aW9uOwogICAgICAgICAgICBzdGF0ZV9mdW5jdGlvbiA9IGRlZmF1bHRfc3RhdGVfZnVuY3Rpb247CiAgICAgICAgfQogICAgfQogICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgewogICAgICAgIG9wdGlvbnMgPSB7fTsKICAgIH0KICAgIGlmIChvcHRpb25zLmxpbWl0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICBvcHRpb25zLmxpbWl0ID0gMTAwOyAvKiB0aW1lcyAqLwogICAgfQogICAgaWYgKG9wdGlvbnMuZGVsYXkgPT09IHVuZGVmaW5lZCkgewogICAgICAgIG9wdGlvbnMuZGVsYXkgPSAyMDAwOyAvKiBtcyAqLwogICAgfQoKICAgIC8qIEZldGNoIGxhdGVzdCByZXZpc2lvbiAqLwogICAgZXhwb3J0cy5nZXRSZXBsaWNhdGlvbihkb2MuaWQsIGZ1bmN0aW9uIChlcnIsIHJ2KSB7CgogICAgICAgIC8qIENoZWNrIGZvciBlcnJvciwgdGhlbiBmb3IgYW4gaW50ZXJlc3RpbmcgZXZlbnQgKi8KICAgICAgICBpZiAoZXJyIHx8IHN0YXRlX2Z1bmN0aW9uKHJ2LCBkb2MpKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIHJ2LCBkb2MpOwogICAgICAgIH0KICAgICAgICAvKiBUZXJtaW5hdGlvbiBjb25kaXRpb24gZm9yIHJlY3Vyc2lvbi4uLiAqLwogICAgICAgIGlmIChvcHRpb25zLmxpbWl0ID4gMCkgewoKICAgICAgICAgICAgLyogLi4ud2l0aCB3ZWxsLWRlZmluZWQgcHJvZ3Jlc3MgdG93YXJkIGl0ICovCiAgICAgICAgICAgIG9wdGlvbnMubGltaXQgLT0gMTsKCiAgICAgICAgICAgIC8qIEdvIGFyb3VuZCAqLwogICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy53YWl0UmVwbGljYXRpb24oCiAgICAgICAgICAgICAgICAgICAgZG9jLCBvcHRpb25zLCBzdGF0ZV9mdW5jdGlvbiwgY2FsbGJhY2sKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0sIG9wdGlvbnMuZGVsYXkpOwogICAgICAgIH0KICAgIH0pOwp9OwoKLyoqCiAqIFN0b3BzIGEgcmVwbGljYXRpb24gb3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MuCiAqIFRoZSBkb2MgcGFyYW1ldGVyIGNhbiBiZSBvYnRhaW5lZCBieSBjYWxsaW5nIGdldFJlcGxpY2F0aW9uLgogKgogKiBJZiB5b3UncmUgcnVubmluZyBiZWhpbmQgYSB2aXJ0dWFsIGhvc3QgeW91J2xsIG5lZWQgdG8gc2V0IHVwCiAqIGFwcHJvcHJpYXRlIHJld3JpdGVzIHRvIC9fcmVwbGljYXRvciwgd2hpY2ggd2lsbCBhbHNvIG1lYW4gdHVybmluZwogKiBvZmYgc2FmZSByZXdyaXRlcy4KICoKICogVGhpcyBmdW5jdGlvbiBvbmx5IHdvcmtzIHdpdGggQ291Y2hEQiA+PSAxLjEsIHNpbmNlIGl0IHVzZXMgdGhlCiAqIF9yZXBsaWNhdG9yIGRhdGFiYXNlLgogKgogKiBAbmFtZSBzdG9wUmVwbGljYXRpb24oZG9jLCBjYWxsYmFjaywgW29wdGlvbnNdKQogKiBAcGFyYW0ge1N0cmluZ30gaWQKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuc3RvcFJlcGxpY2F0aW9uID0gZnVuY3Rpb24gKGRvYywgY2FsbGJhY2ssIC8qb3B0aW9uYWwqL29wdGlvbnMpIHsKCiAgICBpZiAoIXV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9wUmVwbGljYXRpb24gY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQoKICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHsKICAgICAgICBvcHRpb25zID0ge307CiAgICB9CiAgICBpZiAob3B0aW9ucy5saW1pdCA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMubGltaXQgPT09IG51bGwpIHsKICAgICAgICBvcHRpb25zLmxpbWl0ID0gMzsgLyogdGltZXMgKi8KICAgIH0KICAgIGlmIChvcHRpb25zLmRlbGF5ID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5kZWxheSA9PT0gbnVsbCkgewogICAgICAgIG9wdGlvbnMuZGVsYXkgPSA1MDA7IC8qIG1zICovCiAgICB9CgogICAgdmFyIHJlcSA9IHsKICAgICAgICB0eXBlOiAnREVMRVRFJywKICAgICAgICB1cmw6ICcvX3JlcGxpY2F0b3IvJyArCiAgICAgICAgICBleHBvcnRzLmVuY29kZShkb2MuX2lkKSArCiAgICAgICAgICAnP3Jldj0nICsgZXhwb3J0cy5lbmNvZGUoZG9jLl9yZXYpCiAgICB9OwoKICAgIGV4cG9ydHMucmVxdWVzdChyZXEsIGZ1bmN0aW9uIChlcnIsIHJ2KSB7CgogICAgICAgIGlmIChlcnIgJiYgZXJyLnN0YXR1cyA9PT0gNDA5KSB7ICAvKiBEb2N1bWVudCB1cGRhdGUgY29uZmxpY3QgKi8KCiAgICAgICAgICAgIC8qIFJhY2UgY29uZGl0aW9uOgogICAgICAgICAgICAgICAgVGhlIENvdWNoREIgcmVwbGljYXRpb24gZmluaXNoZWQgKG9yIHdhcyB1cGRhdGVkKSBiZXR3ZWVuCiAgICAgICAgICAgICAgICB0aGUgY2FsbGVyJ3MgZ2V0UmVwbGljYXRpb24gYW5kIG5vdy4gU3ViamVjdCB0byByZXN0cmljdGlvbnMKICAgICAgICAgICAgICAgIGluIG9wdGlvbnMsIGNhbGwgZ2V0UmVwbGljYXRpb24gYW5kIHRoZW4gdHJ5IGFnYWluLiAqLwoKICAgICAgICAgICAgLyogVGVybWluYXRpb24gY29uZGl0aW9uIGZvciByZWN1cnNpb24uLi4gKi8KICAgICAgICAgICAgaWYgKG9wdGlvbnMubGltaXQgPiAwKSB7CgogICAgICAgICAgICAgICAgLyogLi4ud2l0aCB3ZWxsLWRlZmluZWQgcHJvZ3Jlc3MgdG93YXJkIGl0ICovCiAgICAgICAgICAgICAgICBvcHRpb25zLmxpbWl0IC09IDE7CgogICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuZ2V0UmVwbGljYXRpb24oZG9jLl9pZCwgZnVuY3Rpb24gKGUsIGQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBzcGVjaWZpZWQgcmVwbGljYXRpb24gZG9jdW1lbnQgY2hhbmdlZCAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2luY2UgbGFzdCByZWFkLCBhbmQgd2UgZmFpbGVkIHRvIHJlLXJlcXVlc3QgaXQnCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8qIEdvIGFyb3VuZCAqLwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5zdG9wUmVwbGljYXRpb24oZCwgY2FsbGJhY2ssIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuZGVsYXkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIC8qIE5vcm1hbCBjYXNlOgogICAgICAgICAgICAgICAgUmVwbGljYXRpb24gZG9jdW1lbnQgd2FzIG5vdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0CiAgICAgICAgICAgICAgICByZWFkOyBnbyBhaGVhZCBhbmQgaW52b2tlIHRoZSBjYWxsYmFjayBhbmQgcmV0dXJuLiAqLwoKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgcnYpOwogICAgICAgIH0KCiAgICAgICAgLyogTm90IHJlYWNoZWQgKi8KICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgfSk7Cgp9OwoKLyoqCiAqIERlbGV0ZXMgYW4gZXhpc3RpbmcgdXNlciBkb2N1bWVudCwgZ2l2ZW4gaXRzIHVzZXJuYW1lLiBZb3UKICogbXVzdCBiZSBsb2dnZWQgaW4gYXMgYW4gYWRtaW5pc3RyYXRpdmUgdXNlciBmb3IgdGhpcyBmdW5jdGlvbgogKiB0byBzdWNjZWVkLgogKgogKiBAbmFtZSBkZWxldGVVc2VyKHVzZXJuYW1lLCBjYWxsYmFjaykKICogQHBhcmFtIHtTdHJpbmd9IHVzZXJuYW1lCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5kZWxldGVVc2VyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBjYWxsYmFjaykgewogICAgdmFyIGlkID0gJ29yZy5jb3VjaGRiLnVzZXI6JyArIHVzZXJuYW1lOwoKICAgIGV4cG9ydHMudXNlckRiKGZ1bmN0aW9uIChlcnIsIHVzZXJkYikgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIHZhciByZXEgPSB7CiAgICAgICAgICAgIHR5cGU6ICdERUxFVEUnLAogICAgICAgICAgICB1cmw6ICcvJyArIGV4cG9ydHMuZW5jb2RlKHVzZXJkYikgKyAnLycgKyBleHBvcnRzLmVuY29kZShpZCksCiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICB9OwogICAgICAgIGV4cG9ydHMucmVxdWVzdChyZXEsIGNhbGxiYWNrKTsKICAgIH0pOwp9OwoKLyoqCiAqIEZldGNoIGEgZGVzaWduIGRvY3VtZW50IGZyb20gQ291Y2hEQi4gQnkgZGVmYXVsdCwgdGhlCiAqIHJlc3VsdHMgb2YgdGhpcyBmdW5jdGlvbiBhcmUgY2FjaGVkIHdpdGhpbiB0aGUgamF2YXNjcmlwdAogKiBlbmdpbmUuIFRvIGF2b2lkIHRoaXMsIHBhc3MgdHJ1ZSBmb3IgdGhlIG5vX2NhY2hlIGFyZ3VtZW50LgogKgogKiBAbmFtZSBnZXREZXNpZ25Eb2MobmFtZSwgY2FsbGJhY2ssIG5vX2NhY2hlKQogKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiAoaS5lLiBwYXRoIHRvKSB0aGUgZGVzaWduIGRvY3VtZW50LgogKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy4KICogQHBhcmFtIG5vX2NhY2hlIG9wdGlvbmFsOyB0cnVlIHRvIGZvcmNlIGEgY2FjaGUgbWlzcyBmb3IgdGhpcyByZXF1ZXN0LgogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZ2V0RGVzaWduRG9jID0gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBub19jYWNoZSkgewogICAgaWYgKCFub19jYWNoZSAmJiBleHBvcnRzLmRlc2lnbl9kb2NzW25hbWVdKSB7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGV4cG9ydHMuZGVzaWduX2RvY3NbbmFtZV0pOwogICAgfQogICAgZXhwb3J0cy5nZXREb2MoJ19kZXNpZ24vJyArIG5hbWUsIHt9LCBmdW5jdGlvbiAoZXJyLCBkZG9jKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTsKICAgICAgICB9CiAgICAgICAgZXhwb3J0cy5kZXNpZ25fZG9jc1tuYW1lXSA9IGRkb2M7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGV4cG9ydHMuZGVzaWduX2RvY3NbbmFtZV0pOwogICAgfSk7Cn07CgoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL2ZpZWxkc2V0ICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsia2Fuc28vZmllbGRzZXQiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIEZ1bmN0aW9ucyBmb3IgZGVhbGluZyB3aXRoIGNvbGxlY3Rpb25zIG9mIGZpZWxkcy4gVXNlZCBieSBib3RoIHRoZQogKiB0eXBlcyBhbmQgZm9ybXMgbW9kdWxlcy4KICoKICogQG1vZHVsZQogKi8KCi8qKgogKiBNb2R1bGUgZGVwZW5kZW5jaWVzCiAqLwoKdmFyIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fLAogICAgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7CgoKLyoqCiAqIFJldHVybnMgYSBoaWVyYWNoeSBvZiBkZWZhdWx0IHZhbHVlcyBmb3IgYSBnaXZlbiBzZXQgb2YgRmllbGQgb2JqZWN0cwogKgogKiBAbmFtZSBjcmVhdGVEZWZhdWx0cyhmaWVsZHMsIHJlcSkKICogQHBhcmFtIHtPYmplY3R9IGZpZWxkcwogKiBAcGFyYW0ge09iamVjdH0gcmVxIC0gdGhlIHJlcXVlc3Qgb2JqZWN0IHRvIHBhc3MgdG8gZGVmYXVsdF92YWx1ZSBmdW5jdGlvbnMKICogQHJldHVybnMge09iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmNyZWF0ZURlZmF1bHRzID0gZnVuY3Rpb24gKGZpZWxkcywgLypvcHRpb25hbCovcmVxKSB7CiAgICBpZiAoIXJlcSkgewogICAgICAgIHJlcSA9IHV0aWxzLmN1cnJlbnRSZXF1ZXN0KCk7CiAgICB9CiAgICB2YXIgZmllbGRzX21vZHVsZSA9IHJlcXVpcmUoJy4vZmllbGRzJyk7CiAgICByZXR1cm4gXy5yZWR1Y2UoXy5rZXlzKGZpZWxkcyksIGZ1bmN0aW9uIChyZXN1bHQsIGspIHsKICAgICAgICB2YXIgZiA9IGZpZWxkc1trXTsKICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRmllbGQgfHwKICAgICAgICAgICAgZiBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRW1iZWRkZWQgfHwKICAgICAgICAgICAgZiBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRW1iZWRkZWRMaXN0KSB7CiAgICAgICAgICAgIGlmIChmLmhhc093blByb3BlcnR5KCdkZWZhdWx0X3ZhbHVlJykpIHsKICAgICAgICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZi5kZWZhdWx0X3ZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrXSA9IGYuZGVmYXVsdF92YWx1ZShyZXEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tdID0gZi5kZWZhdWx0X3ZhbHVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGYgaW5zdGFuY2VvZiBPYmplY3QpIHsKICAgICAgICAgICAgcmVzdWx0W2tdID0gZXhwb3J0cy5jcmVhdGVEZWZhdWx0cyhmLCByZXEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgICdUaGUgZmllbGQgdHlwZSBgJyArICh0eXBlb2YgZikgKyAnYCBpcyBub3Qgc3VwcG9ydGVkLicKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0sIHt9KTsKfTsKCi8qKgogKiBWYWxpZGF0ZSBhIHNwZWNpZmljIGZpZWxkLCByZXR1cm5pbmcgYWxsIHZhbGlkYXRpb24gZXJyb3JzIGFzIGFuIGFycmF5IHdpdGgKICogZWFjaCBlcnJvcidzIGZpZWxkIHByb3BlcnR5IHByZWZpeGVkIGJ5IHRoZSBjdXJyZW50IHBhdGguCiAqCiAqIEBuYW1lIHZhbGlkYXRlRmllbGQoZmllbGQsIGRvYywgdmFsdWUsIHJhdywgcGF0aCkKICogQHBhcmFtIHtGaWVsZH0gZmllbGQKICogQHBhcmFtIHtPYmplY3R9IGRvYwogKiBAcGFyYW0gdmFsdWUKICogQHBhcmFtIHJhdwogKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnZhbGlkYXRlRmllbGQgPSBmdW5jdGlvbiAoZmllbGQsIGRvYywgdmFsdWUsIHJhdywgcGF0aCkgewogICAgcmV0dXJuIF8ubWFwKGZpZWxkLnZhbGlkYXRlKGRvYywgdmFsdWUsIHJhdyksIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBlcnIuZmllbGQgPSBwYXRoLmNvbmNhdChlcnIuZmllbGQgfHwgW10pOwogICAgICAgIGVyci5oYXNfZmllbGQgPSB0cnVlOwogICAgICAgIHJldHVybiBlcnI7CiAgICB9KTsKfTsKCi8qKgogKiBWYWxpZGF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgZmllbGRzIG9yIG90aGVyIHN1Yi1vYmplY3RzLCBpdGVyYXRpbmcgb3ZlcgogKiBlYWNoIHByb3BlcnR5IGFuZCByZWN1cnNpbmcgdGhyb3VnaCBzdWItb2JqZWN0cyB0byBmaW5kIGFsbCBGaWVsZHMuCiAqCiAqIFJldHVybnMgYW4gYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnMsIGVhY2ggd2l0aCBhIGZpZWxkIHByb3BlcnR5IHNldCB0byB0aGUKICogcGF0aCBvZiB0aGUgZmllbGQgd2hpY2ggY2F1c2VkIHRoZSBlcnJvci4KICoKICogQG5hbWUgdmFsaWRhdGUoZmllbGRzLCBkb2MsIHZhbHVlcywgcmF3LCBwYXRoLCBleHRyYSkKICogQHBhcmFtIHtPYmplY3R9IGZpZWxkcwogKiBAcGFyYW0ge09iamVjdH0gZG9jCiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMKICogQHBhcmFtIHtPYmplY3R9IHJhdwogKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAqIEBwYXJhbSB7Qm9vbGVhbn0gZXh0cmEgLSB3aGV0aGVyIHRvIGFsbG93IGV4dHJhIHZhbHVlcyBub3QgY292ZXJlZCBieSBhIGZpZWxkCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnZhbGlkYXRlID0gZnVuY3Rpb24gKGZpZWxkcywgZG9jLCB2YWx1ZXMsIHJhdywgcGF0aCwgZXh0cmEpIHsKICAgIHZhbHVlcyA9IHZhbHVlcyB8fCB7fTsKICAgIGZpZWxkcyA9IGZpZWxkcyB8fCB7fTsKICAgIHJhdyA9IHJhdyB8fCB7fTsKCiAgICAvLyBFeHBlY3Rpbmcgc3ViLW9iamVjdCwgbm90IGEgdmFsdWUKICAgIGlmICh0eXBlb2YgdmFsdWVzICE9PSAnb2JqZWN0JykgewogICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdVbmV4cGVjdGVkIHByb3BlcnR5IC0gdmFsaWRhdGlvbiAxJyk7CiAgICAgICAgZS5maWVsZCA9IHBhdGg7CiAgICAgICAgZS5oYXNfZmllbGQgPSBmYWxzZTsKICAgICAgICByZXR1cm4gW2VdOwogICAgfQoKICAgIC8vIEVuc3VyZSB3ZSB3YWxrIHRocm91Z2ggYWxsIHBhdGhzIG9mIGJvdGggZmllbGRzIGFuZCB2YWx1ZXMgYnkgY29tYmluaW5nCiAgICAvLyB0aGUga2V5cyBvZiBib3RoLiBPdGhlcndpc2UsIHdlIG1pZ2h0IG1pc3Mgb3V0IGNoZWNraW5nIGZvciBtaXNzaW5nCiAgICAvLyByZXF1aXJlZCBmaWVsZHMsIG9yIG1heSBub3QgZGV0ZWN0IHRoZSBwcmVzZW5jZSBvZiBleHRyYSBmaWVsZHMuCgogICAgdmFyIGtleXMgPSBfLnVuaXEoXy5rZXlzKGZpZWxkcykuY29uY2F0KF8ua2V5cyh2YWx1ZXMpKSk7CiAgICB2YXIgZmllbGRzX21vZHVsZSA9IHJlcXVpcmUoJy4vZmllbGRzJyk7CgogICAgcmV0dXJuIF8ucmVkdWNlKGtleXMsIGZ1bmN0aW9uIChlcnJzLCBrKSB7CiAgICAgICAgdmFyIGYgPSBmaWVsZHNba107CiAgICAgICAgaWYgKGYgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAvLyBFeHRyYSB2YWx1ZSB3aXRoIG5vIGFzc29jaWF0ZWQgZmllbGQgZGV0ZWN0ZWQKICAgICAgICAgICAgaWYgKCFleHRyYSkgewogICAgICAgICAgICAgICAgLy8gaWdub3JlIHN5c3RlbSBwcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICBpZiAoIShwYXRoLmxlbmd0aCA9PT0gMCAmJiBrLmNoYXJBdCgwKSA9PT0gJ18nKSkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdVbmV4cGVjdGVkIHByb3BlcnR5IC0gdmFsaWRhdGlvbiAyJyk7CiAgICAgICAgICAgICAgICAgICAgZS5maWVsZCA9IHBhdGguY29uY2F0KFtrXSk7CiAgICAgICAgICAgICAgICAgICAgZS5oYXNfZmllbGQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBlcnJzLnB1c2goZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGVycnM7CiAgICAgICAgfQogICAgICAgIHZhciBmbiA9IGV4cG9ydHMudmFsaWRhdGU7CiAgICAgICAgaWYgKGYgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkZpZWxkIHx8CiAgICAgICAgICAgIGYgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkVtYmVkZGVkIHx8CiAgICAgICAgICAgIGYgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkVtYmVkZGVkTGlzdCkgewogICAgICAgICAgICBmbiA9IGV4cG9ydHMudmFsaWRhdGVGaWVsZDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGVycnMuY29uY2F0KAogICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGYsIGRvYywgdmFsdWVzW2tdLCByYXdba10sIHBhdGguY29uY2F0KFtrXSksIGV4dHJhKQogICAgICAgICk7CiAgICB9LCBbXSk7Cn07CgovKioKICogQXV0aG9yaXplIGEgc3BlY2lmaWMgZmllbGQsIHJldHVybmluZyBhbGwgcGVybWlzc2lvbnMgZXJyb3JzIGFzIGFuIGFycmF5IHdpdGgKICogZWFjaCBlcnJvcidzIGZpZWxkIHByb3BlcnR5IHByZWZpeGVkIGJ5IHRoZSBjdXJyZW50IHBhdGguCiAqCiAqIEBuYW1lIGF1dGhGaWVsZChmLCBuRG9jLCBvRG9jLCBuVmFsLCBvVmFsLCB1c2VyLCBwYXRoKQogKiBAcGFyYW0ge0ZpZWxkfSBmICAgICAtIGZpZWxkIG9iamVjdAogKiBAcGFyYW0ge09iamVjdH0gbkRvYyAtIG5ldyBkb2N1bWVudAogKiBAcGFyYW0ge09iamVjdH0gb0RvYyAtIG9sZCBkb2N1bWVudAogKiBAcGFyYW0gblZhbCAgICAgICAgICAtIG5ldyBmaWVsZCB2YWx1ZQogKiBAcGFyYW0gb1ZhbCAgICAgICAgICAtIG9sZCBmaWVsZCB2YWx1ZQogKiBAcGFyYW0ge09iamVjdH0gdXNlciAtIHVzZXIgY29udGV4dCBvYmplY3QKICogQHBhcmFtIHtBcnJheX0gcGF0aCAgLSBjdXJyZW50IHBhdGgKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuYXV0aEZpZWxkID0gZnVuY3Rpb24gKGYsIG5Eb2MsIG9Eb2MsIG5WYWwsIG9WYWwsIHVzZXIsIHBhdGgpIHsKICAgIC8vbG9nKCdhdXRoRmllbGQ6ICcgKyBwYXRoLmpvaW4oJy4nKSk7CiAgICByZXR1cm4gXy5tYXAoZi5hdXRob3JpemUobkRvYywgb0RvYywgblZhbCwgb1ZhbCwgdXNlciksIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBlcnIuZmllbGQgPSBwYXRoLmNvbmNhdChlcnIuZmllbGQgfHwgW10pOwogICAgICAgIGVyci5oYXNfZmllbGQgPSB0cnVlOwogICAgICAgIHJldHVybiBlcnI7CiAgICB9KTsKfTsKCi8qKgogKiBBdXRob3JpemVzIGFuIG9iamVjdCBjb250YWluaW5nIGZpZWxkcyBvciBvdGhlciBzdWItb2JqZWN0cywgaXRlcmF0aW5nIG92ZXIKICogZWFjaCBwcm9wZXJ0eSBhbmQgcmVjdXJzaW5nIHRocm91Z2ggc3ViLW9iamVjdHMgdG8gZmluZCBhbGwgRmllbGRzLgogKgogKiBSZXR1cm5zIGFuIGFycmF5IG9mIHBlcm1pc3Npb25zIGVycm9ycywgZWFjaCB3aXRoIGEgZmllbGQgcHJvcGVydHkgc2V0IHRvIHRoZQogKiBwYXRoIG9mIHRoZSBmaWVsZCB3aGljaCBjYXVzZWQgdGhlIGVycm9yLgogKgogKiBAbmFtZSBhdXRoRmllbGRTZXQoZiwgbkRvYywgb0RvYywgblZhbCwgb1ZhbCwgdXNlciwgcGF0aCkKICogQHBhcmFtIHtGaWVsZH0gZiAgICAgLSBmaWVsZCBvYmplY3QKICogQHBhcmFtIHtPYmplY3R9IG5Eb2MgLSBuZXcgZG9jdW1lbnQKICogQHBhcmFtIHtPYmplY3R9IG9Eb2MgLSBvbGQgZG9jdW1lbnQKICogQHBhcmFtIG5WYWwgICAgICAgICAgLSBuZXcgZmllbGQgdmFsdWUKICogQHBhcmFtIG9WYWwgICAgICAgICAgLSBvbGQgZmllbGQgdmFsdWUKICogQHBhcmFtIHtPYmplY3R9IHVzZXIgLSB1c2VyIGNvbnRleHQgb2JqZWN0CiAqIEBwYXJhbSB7QXJyYXl9IHBhdGggIC0gY3VycmVudCBwYXRoCiAqIEBwYXJhbSB7Qm9vbGVhbn0gZXh0cmEgLSB3aGV0aGVyIHRvIHJhaXNlIGFuIGVycm9yIG9uIGFkZGl0aW9uYWwgZmllbGRzCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmF1dGhGaWVsZFNldCA9IGZ1bmN0aW9uIChmLCBuRG9jLCBvRG9jLCBuVmFsLCBvVmFsLCB1c2VyLCBwYXRoLCBleHRyYSkgewogICAgLy9sb2coJ2F1dGhGaWVsZFNldDogJyArIHBhdGguam9pbignLicpKTsKICAgIG5WYWwgPSBuVmFsIHx8IHt9OwogICAgb1ZhbCA9IG9WYWwgfHwge307CiAgICBmID0gZiB8fCB7fTsKCiAgICAvLyBFeHBlY3Rpbmcgc3ViLW9iamVjdCwgbm90IGEgdmFsdWUKICAgIC8vIFRoaXMgKnNob3VsZCogYmUgcGlja2VkIHVwIGJ5IHZhbGlkYXRpb24sIGFuZCBiZSByYWlzZWQgYXMgYSB2YWxpZGF0aW9uCiAgICAvLyBlcnJvciBiZWZvcmUgaXQgZ2V0cyB0byB0aGUgYXV0aCBzdGFnZQogICAgaWYgKHR5cGVvZiBuVmFsICE9PSAnb2JqZWN0JykgewogICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdVbmV4cGVjdGVkIHByb3BlcnR5IDEnKTsKICAgICAgICBlLmZpZWxkID0gcGF0aDsKICAgICAgICBlLmhhc19maWVsZCA9IGZhbHNlOwogICAgICAgIHJldHVybiBbZV07CiAgICB9CgogICAgLy8gRW5zdXJlIHdlIHdhbGsgdGhyb3VnaCBhbGwgcGF0aHMgb2YgYm90aCBmaWVsZHMgYW5kIHZhbHVlcyBieSBjb21iaW5pbmcKICAgIC8vIHRoZSBrZXlzIG9mIGJvdGguIE90aGVyd2lzZSwgd2UgbWlnaHQgbWlzcyBvdXQgY2hlY2tpbmcgZm9yIG1pc3NpbmcKICAgIC8vIHJlcXVpcmVkIGZpZWxkcywgb3IgbWF5IG5vdCBkZXRlY3QgdGhlIHByZXNlbmNlIG9mIGV4dHJhIGZpZWxkcy4KCiAgICB2YXIgZktleXMgPSBfLmtleXMoZik7CiAgICB2YXIgbmV3S2V5cyA9IF8ua2V5cyhuVmFsKTsKICAgIHZhciBvbGRLZXlzID0gXy5rZXlzKG9WYWwpOwogICAgdmFyIGtleXMgPSBfLnVuaXEoZktleXMuY29uY2F0KG5ld0tleXMpLmNvbmNhdChvbGRLZXlzKSk7CgogICAgdmFyIGZpZWxkc19tb2R1bGUgPSByZXF1aXJlKCcuL2ZpZWxkcycpOwoKICAgIHJldHVybiBfLnJlZHVjZShrZXlzLCBmdW5jdGlvbiAoZXJycywgaykgewogICAgICAgIHZhciBmaWVsZCA9IGZba107CiAgICAgICAgaWYgKGZpZWxkID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgLy8gRXh0cmEgdmFsdWUgd2l0aCBubyBhc3NvY2lhdGVkIGZpZWxkIGRldGVjdGVkCiAgICAgICAgICAgIC8vIFRoaXMgKnNob3VsZCogYmUgcGlja2VkIHVwIGJ5IHZhbGlkYXRpb24sIGFuZCBiZSByYWlzZWQgYXMgYQogICAgICAgICAgICAvLyB2YWxpZGF0aW9uIGVycm9yIGJlZm9yZSBpdCBnZXRzIHRvIHRoZSBhdXRoIHN0YWdlCiAgICAgICAgICAgIGlmICghZXh0cmEpIHsKICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBzeXN0ZW0gcHJvcGVydGllcwogICAgICAgICAgICAgICAgaWYgKCEocGF0aC5sZW5ndGggPT09IDAgJiYgay5jaGFyQXQoMCkgPT09ICdfJykpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignVW5leHBlY3RlZCBwcm9wZXJ0eSAyJyk7CiAgICAgICAgICAgICAgICAgICAgZS5maWVsZCA9IHBhdGguY29uY2F0KFtrXSk7CiAgICAgICAgICAgICAgICAgICAgZS5oYXNfZmllbGQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBlcnJzLnB1c2goZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGVycnM7CiAgICAgICAgfQogICAgICAgIHZhciBmbiA9IGV4cG9ydHMuYXV0aEZpZWxkU2V0OwogICAgICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRmllbGQgfHwKICAgICAgICAgICAgZmllbGQgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkVtYmVkZGVkIHx8CiAgICAgICAgICAgIGZpZWxkIGluc3RhbmNlb2YgZmllbGRzX21vZHVsZS5FbWJlZGRlZExpc3QpIHsKICAgICAgICAgICAgZm4gPSBleHBvcnRzLmF1dGhGaWVsZDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGVycnMuY29uY2F0KGZuKAogICAgICAgICAgICBmaWVsZCwgbkRvYywgb0RvYywgblZhbFtrXSwgb1ZhbFtrXSwgdXNlciwgcGF0aC5jb25jYXQoW2tdKSwgZXh0cmEKICAgICAgICApKTsKICAgIH0sIFtdKTsKfTsKCgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vZmxhc2htZXNzYWdlcyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL2ZsYXNobWVzc2FnZXMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLypnbG9iYWwgdW5lc2NhcGU6IGZhbHNlICovCgovKioKICogRmxhc2ggbWVzc2FnZXMgaGVscCB5b3Ugc3RvcmUgc3RhdGUgYmV0d2VlbiByZXF1ZXN0cywgc3VjaCBhcyByZXBvcnRpbmcgYQogKiBzdWNjZXNzZnVsIG9yIGZhaWxlZCBvcGVyYXRpb24gYWZ0ZXIgYSByZWRpcmVjdC4KICoKICogVGhlIGZsYXNoIG1lc3NhZ2UgaW1wbGVtZW50YXRpb24gaW4gdGhpcyBtb2R1bGUgaGFuZGxlcyBib3RoIGZhbGxiYWNrIGNvdWNoZGIKICogbW9kZSwgdXNpbmcgY29va2llcyB0byBwZXJzaXN0IHN0YXRlIGJldHdlZW4gcmVxdWVzdHMsIGFzIHdlbGwgYXMgc3VwcG9ydGluZwogKiBjbGllbnQtc2lkZSBvcGVyYXRpb24sIGNvcnJlY3RseSBoYW5kbGluZyBuZXcgbWVzc2FnZXMgZXZlbiBpbnNpZGUgdGhlCiAqIGNhbGxiYWNrcyBvZiBhc3luYyBmdW5jdGlvbnMuCiAqCiAqIEZsYXNoIG1lc3NhZ2VzIG9ubHkgcGVyc2lzdCBmb3IgdGhlIG5leHQgcmVxdWVzdCBvciB0aGUgbmV4dCB0ZW1wbGF0ZSByZW5kZXIhCiAqIFRoYXQgbWVhbnMgMiByZWRpcmVjdHMgd2l0aG91dCBleHBsaWNpdGx5IGN1cnJ5aW5nIHRoZSBmbGFzaCBtZXNzYWdlcyB3aWxsCiAqIGNhdXNlIHRoZSBtZXNzYWdlcyB0byBiZSBsb3N0LgogKgogKiBAbW9kdWxlCiAqLwoKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyksCiAgICBjb29raWVzID0gcmVxdWlyZSgnLi9jb29raWVzJyksCiAgICBfID0gcmVxdWlyZSgnLi91bmRlcnNjb3JlJyk7CgoKLyoqCiAqIFJlYWRzIHRoZSBmbGFzaCBtZXNzYWdlcyBjb29raWUgZnJvbSBhIHJlcXVlc3Qgb2JqZWN0LCByZXR1cm5pbmcgYW4KICogYXJyYXkgb2YgaW5jb21pbmcgbWVzc2FnZXMuCiAqCiAqIEBuYW1lIHJlYWRSZXF1ZXN0Q29va2llKHJlcSkKICogQHBhcmFtIHtPYmplY3R9IHJlcQogKiBAcmV0dXJucyB7QXJyYXl9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5yZWFkUmVxdWVzdENvb2tpZSA9IGZ1bmN0aW9uIChyZXEpIHsKICAgIHZhciBjb29raWUgPSByZXEuY29va2llLl9rYW5zb19mbGFzaDsKICAgIHZhciBtZXNzYWdlcyA9IGNvb2tpZSA/IEpTT04ucGFyc2UodW5lc2NhcGUoY29va2llKSk6IFtdOwogICAgcmV0dXJuIF8ubWFwKG1lc3NhZ2VzLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgdmFsLmluY29taW5nID0gdHJ1ZTsKICAgICAgICB2YWwub3V0Z29pbmcgPSBmYWxzZTsKICAgICAgICByZXR1cm4gdmFsOwogICAgfSk7Cn07CgovKioKICogUmVhZHMgdGhlIGZsYXNoIG1lc3NhZ2VzIGNvb2tpZSBmcm9tIHRoZSBicm93c2VyLCByZXR1cm5pbmcgYW4KICogYXJyYXkgb2YgaW5jb21pbmcgbWVzc2FnZXMuCiAqCiAqIEBuYW1lIHJlYWRCcm93c2VyQ29va2llKCkKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMucmVhZEJyb3dzZXJDb29raWUgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY29va2llID0gY29va2llcy5yZWFkQnJvd3NlckNvb2tpZSgnX2thbnNvX2ZsYXNoJyk7CiAgICB2YXIgbWVzc2FnZXMgPSBjb29raWUgPyBKU09OLnBhcnNlKHVuZXNjYXBlKGNvb2tpZSkpOiBbXTsKICAgIHJldHVybiBfLm1hcChtZXNzYWdlcywgZnVuY3Rpb24gKHZhbCkgewogICAgICAgIHZhbC5pbmNvbWluZyA9IHRydWU7CiAgICAgICAgdmFsLm91dGdvaW5nID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIHZhbDsKICAgIH0pOwp9OwoKLyoqCiAqIEFkZHMgYSBmbGFzaF9tZXNzYWdlcyBwcm9wZXJ0eSB0byBhIHJlcXVlc3QgY29udGFpbmluZyBhbGwgaW5jb21pbmcKICogbWVzc2FnZXMuCiAqCiAqIEBuYW1lIHVwZGF0ZVJlcXVlc3QocmVxKQogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEByZXR1cm5zIHtSZXF1ZXN0IE9iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnVwZGF0ZVJlcXVlc3QgPSBmdW5jdGlvbiAocmVxKSB7CiAgICB2YXIgbWVzc2FnZXMgPSBleHBvcnRzLnJlYWRSZXF1ZXN0Q29va2llKHJlcSk7CiAgICByZXEuZmxhc2hfbWVzc2FnZXMgPSBfLm1hcChtZXNzYWdlcywgZnVuY3Rpb24gKHZhbCkgewogICAgICAgIHZhbC5pbmNvbWluZyA9IHRydWU7CiAgICAgICAgdmFsLm91dGdvaW5nID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIHZhbDsKICAgIH0pOwogICAgcmV0dXJuIHJlcTsKfTsKCi8qKgogKiBHZXQncyBhbGwgY3VycmVudCBmbGFzaCBtZXNzYWdlcywgc3RvcHBpbmcgdGhlbSBmcm9tIGJlaW5nIG91dGdvaW5nIG9uIHRoZQogKiBuZXh0IHJlcXVlc3Qgc28gdGhleSdyZSBub3QgcmVwZWF0ZWQuCiAqCiAqIEBuYW1lIGdldE1lc3NhZ2VzKHJlcSkKICogQHBhcmFtIHtPYmplY3R9IHJlcQogKiBAcmV0dXJucyB7QXJyYXl9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5nZXRNZXNzYWdlcyA9IGZ1bmN0aW9uIChyZXEpIHsKICAgIGlmICh1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIC8vIGFsc28gcmVtb3ZlIGFueSBtZXNzYWdlcyBmcm9tIHRoaXMgcmVxdWVzdCBhbHJlYWR5IHNldCBpbiB0aGUgY29va2llCiAgICAgICAgdmFyIGNvb2tpZV9tZXNzYWdlcyA9IGV4cG9ydHMucmVhZEJyb3dzZXJDb29raWUoKTsKICAgICAgICB2YXIgYm1lc3NhZ2VzID0gXy5maWx0ZXIoY29va2llX21lc3NhZ2VzLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgICAgIHJldHVybiB2YWwucmVxICE9PSByZXEudXVpZDsKICAgICAgICB9KTsKICAgICAgICBpZiAoYm1lc3NhZ2VzLmxlbmd0aCAhPT0gY29va2llX21lc3NhZ2VzLmxlbmd0aCkgewogICAgICAgICAgICBleHBvcnRzLnNldEJyb3dzZXJDb29raWUocmVxLCBibWVzc2FnZXMpOwogICAgICAgIH0KICAgIH0KCiAgICB2YXIgbWVzc2FnZXMgPSBfLm1hcChyZXEuZmxhc2hfbWVzc2FnZXMsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICB2YWwub3V0Z29pbmcgPSBmYWxzZTsKICAgICAgICByZXR1cm4gdmFsOwogICAgfSk7CiAgICByZXEuZmxhc2hfbWVzc2FnZXMgPSBtZXNzYWdlczsKCiAgICByZXR1cm4gXy5tYXAobWVzc2FnZXMsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICByZXR1cm4gdmFsLmRhdGE7CiAgICB9KTsKfTsKCi8qKgogKiBGaWx0ZXJzIGFsbCBhdmFpbGFibGUgbWVzc2FnZXMgb24gYSByZXF1ZXN0IG9iamVjdCwgcmV0dXJuaW5nIG9ubHkgdGhvc2UKICogZmxhZ2dlZCBhcyBvdXRnb2luZyAoc2VuZGluZyBpbiB0aGUgcmVzcG9uc2UgdG8gYmUgbWFkZSBhdmFpbGFibGUgdG8gdGhlIG5leHQKICogcmVxdWVzdCkuCiAqCiAqIEBuYW1lIGdldE91dGdvaW5nTWVzc2FnZXMocmVxKQogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmdldE91dGdvaW5nTWVzc2FnZXMgPSBmdW5jdGlvbiAocmVxKSB7CiAgICByZXR1cm4gXy5maWx0ZXIocmVxLmZsYXNoX21lc3NhZ2VzLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgcmV0dXJuIHZhbC5vdXRnb2luZzsKICAgIH0pOwp9OwoKLyoqCiAqIFVwZGF0ZXMgYSByZXNwb25zZSBvYmplY3QgYWZ0ZXIgYSBsaXN0LCBzaG93IG9yIHVwZGF0ZSBmdW5jdGlvbiBoYXMgcmV0dXJuZWQsCiAqIHNldHRpbmcgdGhlIGZsYXNoIG1lc3NhZ2VzIGNvb2tpZSB0byBpbmNsdWRlIHRoZSBvdXRnb2luZyBtZXNzYWdlcy4KICoKICogQG5hbWUgdXBkYXRlUmVzcG9uc2UocmVxLCByZXMpCiAqIEBwYXJhbSB7T2JqZWN0fSByZXEKICogQHBhcmFtIHtPYmplY3R9IHJlcwogKiBAcmV0dXJucyB7UmVzcG9uc2UgT2JqZWN0fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMudXBkYXRlUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVxLCByZXMpIHsKICAgIHZhciBtZXNzYWdlcyA9IF8ubWFwKGV4cG9ydHMuZ2V0T3V0Z29pbmdNZXNzYWdlcyhyZXEpLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgZGVsZXRlIHZhbC5vdXRnb2luZzsKICAgICAgICBkZWxldGUgdmFsLmluY29taW5nOwogICAgICAgIHJldHVybiB2YWw7CiAgICB9KTsKICAgIGlmIChyZXEucmVzcG9uc2VfcmVjZWl2ZWQpIHsKICAgICAgICBleHBvcnRzLnNldEJyb3dzZXJDb29raWUocmVxLCBtZXNzYWdlcyk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBjb29raWVzLnNldFJlc3BvbnNlQ29va2llKHJlcSwgcmVzLCB7CiAgICAgICAgICAgIG5hbWU6ICdfa2Fuc29fZmxhc2gnLAogICAgICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkobWVzc2FnZXMpCiAgICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gcmVzOwp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgZmxhc2ggbWVzc2FnZSBvYmplY3QsIGFzc29jaWF0aW5nIGl0IHdpdGggdGhlIGdpdmVuIHJlcXVlc3QuCiAqCiAqIEBuYW1lIGNyZWF0ZU1lc3NhZ2UocmVxLCBtc2cpCiAqIEBwYXJhbSB7T2JqZWN0fSByZXEKICogQHBhcmFtIHtTdHJpbmd9IG1zZwogKiBAcmV0dXJucyB7T2JqZWN0fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuY3JlYXRlTWVzc2FnZSA9IGZ1bmN0aW9uIChyZXEsIG1zZykgewogICAgcmV0dXJuIHsKICAgICAgICByZXE6IHJlcS51dWlkLAogICAgICAgIGRhdGE6IG1zZwogICAgfTsKfTsKCi8qKgogKiBTdG9yZXMgYSBsaXN0IG9mIG1lc3NhZ2VzIGluIHRoZSBmbGFzaCBtZXNzYWdlcyBjb29raWUuIFRoaXMgZnVuY3Rpb24gaXMgZm9yCiAqIGNsaWVudC1zaWRlIHVzZS4KICoKICogQG5hbWUgc2V0QnJvd3NlckNvb2tpZShyZXEsIG1lc3NhZ2VzKQogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEBwYXJhbSB7QXJyYXl9IG1lc3NhZ2VzCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5zZXRCcm93c2VyQ29va2llID0gZnVuY3Rpb24gKHJlcSwgbWVzc2FnZXMpIHsKICAgIGNvb2tpZXMuc2V0QnJvd3NlckNvb2tpZShyZXEsIHsKICAgICAgICBuYW1lOiAnX2thbnNvX2ZsYXNoJywKICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkobWVzc2FnZXMpCiAgICB9KTsKfTsKCi8qKgogKiBBZGRzIGEgbmV3IGZsYXNoIG1lc3NhZ2UgZm9yIHRoZSBjdXJyZW50IHJlcXVlc3QuIElmIHRoZSBsaXN0LCBzaG93IG9yIHVwZGF0ZQogKiBmdW5jdGlvbiBoYXMgbm90IHJldHVybmVkLCBpdCdzIGFkZGVkIHRvIHRoZSByZXNwb25zZSBTZXQtQ29va2llIGhlYWRlciwKICogb3RoZXJ3aXNlIChpZiBpdHMgdGhlIHJlc3VsdCBvZiBhIGNsaWVudC1zaWRlIGFzeW5jIG9wZXJhdGlvbikgaXQncyBhZGRlZAogKiBkaXJlY3RseSB0byB0aGUgYnJvd3NlcnMgY29va2llcy4KICoKICogQG5hbWUgYWRkTWVzc2FnZShyZXEsIG1zZykKICogQHBhcmFtIHtPYmplY3R9IHJlcQogKiBAcGFyYW0ge1N0cmluZ30gbXNnCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5hZGRNZXNzYWdlID0gZnVuY3Rpb24gKHJlcSwgbXNnKSB7CiAgICBpZiAoIXJlcS5mbGFzaF9tZXNzYWdlcykgewogICAgICAgIHJlcS5mbGFzaF9tZXNzYWdlcyA9IFtdOwogICAgfQogICAgdmFyIG1lc3NhZ2UgPSBleHBvcnRzLmNyZWF0ZU1lc3NhZ2UocmVxLCBtc2cpOwogICAgaWYgKHJlcS5yZXNwb25zZV9yZWNlaXZlZCkgewogICAgICAgIC8vIHRoZSBmdW5jdGlvbiBoYXMgYWxyZWFkeSByZXR1cm5lZCwgYWRkTWVzc2FnZSBtdXN0IGhhdmUgYmVlbiBjYWxsZWQKICAgICAgICAvLyBpbiBhIGNhbGxiYWNrIGZvciBzb21lIGNsaWVudC1zaWRlIG9ubHkgZnVuY3Rpb24sIHNldCB0aGUgY29va2llCiAgICAgICAgLy8gZGlyZWN0bHkKICAgICAgICB2YXIgbWVzc2FnZXMgPSBleHBvcnRzLnJlYWRCcm93c2VyQ29va2llKCk7CgogICAgICAgIG1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7CiAgICAgICAgZXhwb3J0cy5zZXRCcm93c2VyQ29va2llKHJlcSwgbWVzc2FnZXMpOwogICAgICAgIHJlcS5mbGFzaF9tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgbWVzc2FnZS5vdXRnb2luZyA9IHRydWU7CiAgICAgICAgcmVxLmZsYXNoX21lc3NhZ2VzLnB1c2gobWVzc2FnZSk7CiAgICB9Cn07CgoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL2Zvcm1zICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsia2Fuc28vZm9ybXMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIEZ1bmN0aW9ucyBmb3IgdGhlIHJlbmRlcmluZywgcGFyc2luZyBhbmQgdmFsaWRhdGlvbiBvZiBmb3Jtcy4KICoKICogQG1vZHVsZQogKi8KCi8qKgogKiBNb2R1bGUgZGVwZW5kZW5jaWVzCiAqLwoKdmFyIGNvcmUgPSByZXF1aXJlKCcuL2NvcmUnKSwKICAgIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpLAogICAgZmllbGRzZXQgPSByZXF1aXJlKCcuL2ZpZWxkc2V0JyksCiAgICByZW5kZXIgPSByZXF1aXJlKCcuL3JlbmRlcicpLAogICAgXyA9IHJlcXVpcmUoJy4vdW5kZXJzY29yZScpLl87CgoKLyoqCiAqIEZvcm0gb2JqZWN0LCBwcmVzZW50cyBmaWVsZHMgYW5kIHBhcnNlcyByZXNwb25zZXMuCiAqCiAqICMjIyMgT3B0aW9ucyAjIyMjCiAqCiAqIDx0YWJsZSBjbGFzcz0ib3B0aW9ucyI+CiAqICAgPHRyPgogKiAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+ZXhjbHVkZTwvdGQ+CiAqICAgICAgPHRkIGNsYXNzPSJ0eXBlIj5BcnJheTwvdGQ+CiAqICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiI+YSBsaXN0IG9mIGZpZWxkIG5hbWVzIHRvIGV4Y2x1ZGU8L3RkPgogKiAgIDwvdHI+CiAqICAgPHRyPgogKiAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+ZmllbGRzPC90ZD4KICogICAgICA8dGQgY2xhc3M9InR5cGUiPkFycmF5PC90ZD4KICogICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICogICAgICAgICAgYSBzdWJzZXQgb2YgZmllbGRzIHRvIHVzZSAoaW52ZXJzZSBvZiBleGNsdWRlZCkKICogICAgICA8L3RkPgogKiAgIDwvdHI+CiAqIDwvdGFibGU+CiAqCiAqIEBuYW1lIEZvcm0oZmllbGRzIHwgdHlwZSwgW2RvY10pCiAqIEBwYXJhbSB7T2JqZWN0fSBmaWVsZHMgIC0gYW4gb2JqZWN0IGxpdGVyYWwgY29udGFpbmluZyBmaWVsZHMgb3IgYSBUeXBlCiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgICAgIC0gKG9wdGlvbmFsKSB0aGUgb3JpZ2luYWwgZG9jdW1lbnQgYmVpbmcgZWRpdGVkCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gKG9wdGlvbmFsKSBzZWUgYXZhaWxhYmxlIG9wdGlvbnMgYWJvdmUKICogQGNvbnN0cnVjdG9yCiAqIEBhcGkgcHVibGljCiAqLwoKdmFyIEZvcm0gPSBleHBvcnRzLkZvcm0gPSBmdW5jdGlvbiBGb3JtKGZpZWxkcywgZG9jLCBvcHRpb25zKSB7CiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAgIHRoaXMudmFsdWVzID0gbnVsbDsKICAgIGlmIChkb2MpIHsKICAgICAgICB0aGlzLnZhbHVlcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZG9jKSk7IC8qIENvcHkgKi8KICAgICAgICB0aGlzLmluaXRpYWxfZG9jID0gZG9jOwogICAgfQogICAgaWYgKGZpZWxkcyAmJiBmaWVsZHMuZmllbGRzKSB7CiAgICAgICAgdGhpcy50eXBlID0gZmllbGRzOwogICAgICAgIHRoaXMuZmllbGRzID0gdGhpcy50eXBlLmZpZWxkczsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRoaXMuZmllbGRzID0gZmllbGRzOwogICAgfQogICAgLyppZiAodXRpbHMuY29uc3RydWN0b3JOYW1lKGZpZWxkcykgPT09ICdUeXBlJykgewogICAgICAgIHRoaXMudHlwZSA9IGZpZWxkczsKICAgICAgICB0aGlzLmZpZWxkcyA9IHRoaXMudHlwZS5maWVsZDsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRoaXMuZmllbGRzID0gZmllbGRzOwogICAgfSovCn07CgoKLyoqCiAqIE92ZXJyaWRlcyB2YWx1ZXMgaW4gZG9jX2Egd2l0aCB2YWx1ZXMgaW4gZG9jX2IsIG9ubHkgd2hlbiBhIGZpZWxkIGlzIHByZXNlbnQKICogZm9yIHRoYXQgdmFsdWUuIFRoaXMgbWVhbnMgcHJvcGVydGllcyBub3QgaW4gZmllbGRzIChvciBpbiBleGNsdWRlZCBmaWVsZHMpCiAqIGFyZSByZXRhaW5lZCwgd2hpbGUgcHJvcGVydGllcyB3aGljaCBhcmUgY292ZXJlZCBieSB0aGUgZmllbGRzZXQgYXJlCiAqIHJlcGxhY2VkLgogKgogKiBUaGlzIGlzIHVzZWQgd2hlbiB1cGRhdGluZyB0aGUgZm9ybSdzIHZhbHVlcyB3aXRoIGEgcmVxdWVzdCB3aGVuIGl0cyBiZWVuCiAqIGluaXRpYXRlZCB3aXRoIGEgcHJldmlvdXMgZG9jdW1lbnQuIFlvdSBzaG91bGRuJ3Qgbm9ybWFsbHkgbmVlZCB0byBjYWxsIHRoaXMKICogZGlyZWN0bHkuCiAqCiAqIFJldHVybnMgdGhlIHVwZGF0ZWQgZG9jX2Egb2JqZWN0LgogKgogKiBAbmFtZSBvdmVycmlkZShleGNsdWRlcywgZmllbGRfc3Vic2V0LCBmaWVsZHMsIGRvY19hLCBkb2NfYiwgcGF0aCkKICogQHBhcmFtIHtBcnJheSB8IG51bGx9IGV4Y2x1ZGVzCiAqIEBwYXJhbSB7QXJyYXkgfCBudWxsfSBmaWVsZF9zdWJzZXQKICogQHBhcmFtIHtPYmplY3R9IEZpZWxkcwogKiBAcGFyYW0ge09iamVjdH0gZG9jX2EKICogQHBhcmFtIHtPYmplY3R9IGRvY19iCiAqIEBwYXJhbSB7QXJyYXl9IHBhdGgKICogQHJldHVybnMge09iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLm92ZXJyaWRlID0gZnVuY3Rpb24gKGV4Y2x1ZGVzLCBmaWVsZF9zdWJzZXQsIGZpZWxkcywgZG9jX2EsIGRvY19iLCBwYXRoKSB7CiAgICBmaWVsZHMgPSBmaWVsZHMgfHwge307CiAgICBkb2NfYSA9IGRvY19hIHx8IHt9OwoKICAgIHZhciBmaWVsZHNfbW9kdWxlID0gcmVxdWlyZSgnLi9maWVsZHMnKTsKICAgIHZhciBleGNsdWRlX3BhdGhzID0gXy5tYXAoKGV4Y2x1ZGVzIHx8IFtdKSwgZnVuY3Rpb24gKHApIHsKICAgICAgICByZXR1cm4gcC5zcGxpdCgnLicpOwogICAgfSk7CiAgICB2YXIgc3Vic2V0X3BhdGhzID0gXy5tYXAoKGZpZWxkX3N1YnNldCB8fCBbXSksIGZ1bmN0aW9uIChwKSB7CiAgICAgICAgcmV0dXJuIHAuc3BsaXQoJy4nKTsKICAgIH0pOwoKICAgIHZhciBrZXlzID0gXy5rZXlzKGRvY19iKTsKCiAgICBfLmVhY2goa2V5cywgZnVuY3Rpb24gKGspIHsKICAgICAgICB2YXIgZiA9IGZpZWxkc1trXTsKICAgICAgICB2YXIgYiA9IGRvY19iW2tdOwogICAgICAgIHZhciBmX3BhdGggPSBwYXRoLmNvbmNhdChba10pOwoKICAgICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnIHx8CiAgICAgICAgICAgIGYgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkZpZWxkIHx8CiAgICAgICAgICAgIGYgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkVtYmVkZGVkIHx8CiAgICAgICAgICAgIGYgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkVtYmVkZGVkTGlzdCkgewoKICAgICAgICAgICAgaWYgKGV4Y2x1ZGVzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4Y2x1ZGVfcGF0aHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAodXRpbHMuaXNTdWJQYXRoKGV4Y2x1ZGVfcGF0aHNbaV0sIGZfcGF0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZmllbGRfc3Vic2V0KSB7CiAgICAgICAgICAgICAgICB2YXIgaW5fc3Vic2V0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN1YnNldF9wYXRocy5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgIGlmICh1dGlscy5pc1N1YlBhdGgoc3Vic2V0X3BhdGhzW2pdLCBmX3BhdGgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluX3N1YnNldCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCFpbl9zdWJzZXQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZG9jX2Fba10gPSBiOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgZG9jX2Fba10gPSBleHBvcnRzLm92ZXJyaWRlKAogICAgICAgICAgICAgICAgZXhjbHVkZXMsIGZpZWxkX3N1YnNldCwgZmllbGRzW2tdLCBkb2NfYVtrXSwgYiwgZl9wYXRoCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gZG9jX2E7Cn07CgovKioKICogUGFyc2VzIGEgcmVxdWVzdCBhbmQgdmFsaWRhdGVzIHRoZSByZXN1bHQsIGJpbmRpbmcgdmFsdWVzIGFuZCBlcnJvcnMgdG8KICogdGhlIGZvcm0gaW5zdGFuY2UuCiAqCiAqIEBuYW1lIEZvcm0udmFsaWRhdGUocmVxKQogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEByZXR1cm5zIHtGb3JtfQogKiBAYXBpIHB1YmxpYwogKi8KCkZvcm0ucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKC8qb3B0aW9uYWwqL3JlcSkgewogICAgaWYgKCFyZXEpIHsKICAgICAgICByZXEgPSB1dGlscy5jdXJyZW50UmVxdWVzdCgpOwogICAgfQoKICAgIC8qIFRoaXMgaXMgdGhlIHJlcXVlc3QgcGF5bG9hZDoKICAgICAgICBUaGlzIGNvbnRhaW5zIGFsbCBvZiB0aGUgZm9ybSBmaWVsZHMgdGhhdCBhcmUgdXNlZCBieQogICAgICAgIGZvcm1WYWx1ZXNUb1RyZWUgYW5kIHBhcnNlUmF3LCBhbmQgbXVzdCBiZSBjb3BpZWQgZmlyc3QuICovCgogICAgdGhpcy5yYXcgPSAocmVxLmZvcm0gfHwge30pOwoKICAgIHZhciB0eXBlX2NsYXNzID0gcmVxdWlyZSgnLi90eXBlcycpLlR5cGU7CiAgICB2YXIgdHJlZSA9IGV4cG9ydHMuZm9ybVZhbHVlc1RvVHJlZSh0aGlzLnJhdyk7CgogICAgdGhpcy52YWx1ZXMgPSBleHBvcnRzLm92ZXJyaWRlKAogICAgICAgIHRoaXMub3B0aW9ucy5leGNsdWRlLAogICAgICAgIHRoaXMub3B0aW9ucy5maWVsZHMsCiAgICAgICAgdGhpcy5maWVsZHMsCiAgICAgICAgdGhpcy52YWx1ZXMgfHwgZmllbGRzZXQuY3JlYXRlRGVmYXVsdHModGhpcy5maWVsZHMsIHJlcSkgfHwge30sCiAgICAgICAgZXhwb3J0cy5wYXJzZVJhdyh0aGlzLmZpZWxkcywgdHJlZSksCiAgICAgICAgW10KICAgICk7CiAgICAKICAgIHRoaXMuZXJyb3JzID0gZmllbGRzZXQudmFsaWRhdGUoCiAgICAgICAgdGhpcy5maWVsZHMsIHRoaXMudmFsdWVzLCB0aGlzLnZhbHVlcywgdGhpcy5yYXcsIFtdLCBmYWxzZQogICAgKTsKCiAgICBpZiAodGhpcy50eXBlKSB7CiAgICAgICAgaWYgKHRoaXMudHlwZSBpbnN0YW5jZW9mIHR5cGVfY2xhc3MpIHsKICAgICAgICAgICAgLy8gcnVuIHRvcCBsZXZlbCBwZXJtaXNzaW9ucyBmaXJzdAogICAgICAgICAgICB2YXIgdHlwZV9lcnJzID0gdGhpcy50eXBlLmF1dGhvcml6ZVR5cGVMZXZlbCgKICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzLCB0aGlzLmluaXRpYWxfZG9jLCByZXEudXNlckN0eAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAodHlwZV9lcnJzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5jb25jYXQodHlwZV9lcnJzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGlmIG5vIHRvcC1sZXZlbCBwZXJtaXNzaW9ucyBlcnJvcnMsIGNoZWNrIGVhY2ggZmllbGQKICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KAogICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZS5hdXRob3JpemUoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzLCB0aGlzLmluaXRpYWxfZG9jLCByZXEudXNlckN0eAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvKiBQcm9ncmFtbWVyIGVycm9yOiBkaXNwbGF5IGEgdXNlZnVsIGRpYWdub3N0aWMgbWVzc2FnZSAqLwogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAnRW5jb3VudGVyZWQgYSB0eXBlIG9iamVjdCB0aGF0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZicgKwogICAgICAgICAgICAgICAgICAgICcgYFR5cGVgOyBjaGVjayBsaWIvdHlwZXMuanMgZm9yIHByb3BlciBpbnN0YW5zaWF0aW9uJwogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICAKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KGZpZWxkc2V0LmF1dGhGaWVsZFNldCgKICAgICAgICAgICAgdGhpcy5maWVsZHMsIHRoaXMudmFsdWVzLCB0aGlzLmluaXRpYWxfZG9jLCB0aGlzLnZhbHVlcywKICAgICAgICAgICAgdGhpcy5pbml0aWFsX2RvYywgcmVxLnVzZXJDdHgsIFtdLCB0cnVlCiAgICAgICAgKSk7CiAgICB9CgogICAgLy8gY2xlYXIgZmllbGQgcHJvcGVydGllcyBvbiBlcnJvcnMgZm9yIGV4Y2x1ZGVkIGZpZWxkcwogICAgdmFyIGV4Y2x1ZGVzID0gdGhpcy5vcHRpb25zLmV4Y2x1ZGU7CiAgICBpZiAoZXhjbHVkZXMpIHsKICAgICAgICB2YXIgZXhjbF9wYXRocyA9IF8ubWFwKGV4Y2x1ZGVzLCBmdW5jdGlvbiAocCkgewogICAgICAgICAgICByZXR1cm4gcC5zcGxpdCgnLicpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZXJyb3JzID0gXy5tYXAodGhpcy5lcnJvcnMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmICghZS5maWVsZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4Y2xfcGF0aHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZXhjbF9wYXRoc1tpXTsKICAgICAgICAgICAgICAgIGlmICh1dGlscy5pc1N1YlBhdGgocGF0aCwgZS5maWVsZCkpIHsKICAgICAgICAgICAgICAgICAgICBlLm1lc3NhZ2UgPSBlLmZpZWxkLmpvaW4oJy4nKSArICc6ICcgKyAoCiAgICAgICAgICAgICAgICAgICAgICAgIGUubWVzc2FnZSB8fCBlLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlLmZpZWxkOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgIH0pOwogICAgfQoKICAgIC8vIGNsZWFyIGZpZWxkIHByb3BlcnRpZXMgb24gZXJyb3JzIG5vdCBpbiBmaWVsZHMgc3Vic2V0CiAgICB2YXIgZmllbGRfc3Vic2V0ID0gdGhpcy5vcHRpb25zLmZpZWxkczsKICAgIGlmIChmaWVsZF9zdWJzZXQpIHsKICAgICAgICB2YXIgc3Vic2V0X3BhdGhzID0gXy5tYXAoZmllbGRfc3Vic2V0LCBmdW5jdGlvbiAocCkgewogICAgICAgICAgICByZXR1cm4gcC5zcGxpdCgnLicpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZXJyb3JzID0gXy5tYXAodGhpcy5lcnJvcnMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmICghZS5maWVsZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN1YnNldF9wYXRocy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICAgICAgdmFyIHBhdGggPSBzdWJzZXRfcGF0aHNbaV07CiAgICAgICAgICAgICAgICBpZiAoIXV0aWxzLmlzU3ViUGF0aChwYXRoLCBlLmZpZWxkKSkgewogICAgICAgICAgICAgICAgICAgIGUubWVzc2FnZSA9IGUuZmllbGQuam9pbignLicpICsgJzogJyArICgKICAgICAgICAgICAgICAgICAgICAgICAgZS5tZXNzYWdlIHx8IGUudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGUuZmllbGQ7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn07CgovKioKICogQWZ0ZXIgYSBmb3JtIGhhcyBjYWxsZWQgdmFsaWRhdGUsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGUgZm9ybQogKiBpcyB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlLgogKgogKiBAbmFtZSBGb3JtLmlzVmFsaWQoKQogKiBAcmV0dXJucyB7Qm9vbGVhbn0KICogQGFwaSBwdWJsaWMKICovCgpGb3JtLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICEodGhpcy5lcnJvcnMgJiYgdGhpcy5lcnJvcnMubGVuZ3RoKTsKfTsKCi8qKgogKiBGaWx0ZXJzIGFuIGFycmF5IG9mIGVycm9ycywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgYmVsb3cgYSBzcGVjaWZpYyBmaWVsZCBwYXRoCiAqCiAqIEBwYXJhbSB7QXJyYXl9IGVycnMKICogQHBhcmFtIHtBcnJheX0gcGF0aAogKiBAcmV0dXJucyB7QXJyYXl9CiAqLwoKdmFyIGVycnNCZWxvd1BhdGggPSBmdW5jdGlvbiAoZXJycywgcGF0aCkgewogICAgaWYgKCFwYXRoIHx8ICFwYXRoLmxlbmd0aCkgewogICAgICAgIHJldHVybiBlcnJzOwogICAgfQogICAgcmV0dXJuIF8uZmlsdGVyKGVycnMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKCFlLmZpZWxkKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHV0aWxzLmlzU3ViUGF0aChwYXRoLCBlLmZpZWxkKTsKICAgIH0pOwp9OwoKLyoqCiAqIEZpbHRlcnMgYSBsaXN0IG9mIGVycm9ycywgcmV0dXJuaW5nIG9ubHkgdGhvc2Ugd2l0aG91dCBhIGZpZWxkIHByb3BlcnR5LgogKiBUaGlzIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIGVycm9ycyBhdCB0aGUgdG9wIG9mIHRoZSBmb3JtLCB3aGljaCBhcHBseQogKiBnZW5lcmFsbHksIG9yIGNhbm5vdCBiZSBhdHRyaWJ1dGVkIHRvIGEgc2luZ2xlIGZpZWxkLgogKgogKiBAcGFyYW0ge0FycmF5fSBlcnJzCiAqIEByZXR1cm5zIHtBcnJheX0KICovCgp2YXIgZXJyc1dpdGhvdXRGaWVsZHMgPSBmdW5jdGlvbiAoZXJycykgewogICAgcmV0dXJuIF8uZmlsdGVyKGVycnMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuICFlLmZpZWxkOwogICAgfSk7Cn07CgovKioKICogQ29udmVydHMgY3VycmVudCBmb3JtIHRvIGEgSFRNTCBzdHJpbmcsIHVzaW5nIGFuIG9wdGlvbmFsIHJlbmRlcmVyIGNsYXNzLgogKgogKiBAbmFtZSBGb3JtLnRvSFRNTChyZXEsIFtSZW5kZXJlckNsYXNzXSkKICogQHBhcmFtIHtPYmplY3R9IHJlcSBLYW5zbyByZXF1ZXN0IG9iamVjdDsgbnVsbCBmb3IgbW9zdCByZWNlbnQuIChvcHRpb25hbCkKICogQHBhcmFtIHtSZW5kZXJlcn0gUmVuZGVyZXJDbGFzcyAob3B0aW9uYWwpCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9iamVjdCBjb250YWluaW5nIHdpZGdldCBvcHRpb25zLCB3aGljaAogKiAgICAgICAgICB3aWxsIHVsdGltYXRlbHkgYmUgcHJvdmlkZWQgdG8gZWFjaCB3aWRnZXQncyB0b0hUTUwgbWV0aG9kLgogKiBAcGFyYW0ge0Jvb2xlYW59IGNyZWF0ZV9kZWZhdWx0cyAob3B0aW9uYWwpIFNldCB0aGlzIHRvIHRydWUgaWYgeW91J3ZlCiAqICAgICAgICAgIHByb3ZpZGVkIGEgZG9jdW1lbnQgaW4ge2RvY30sIGJ1dCB3b3VsZCBzdGlsbCBsaWtlIGRlZmF1bHQKICogICAgICAgICAgdmFsdWVzIHRvIGJlIG1lcmdlZCBpbiB0byBpdCB2aWEgY3JlYXRlRGVmYXVsdHMuIEZvciBhIGZpZWxkIGYsCiAqICAgICAgICAgIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGFkZGVkIHRvIHtkb2N9IGlmIGFuZCBvbmx5IGlmIGRvY1tmXQogKiAgICAgICAgICBpcyB1bmRlZmluZWQsIG51bGwsIG9yIG5vdCBwcmVzZW50LiBEZWZhdWx0cyB0byBvZmYuCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKRm9ybS5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gKC8qIG9wdGlvbmFsICovIHJlcSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG9wdGlvbmFsICovIFJlbmRlcmVyQ2xhc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBvcHRpb25hbCAqLyBvcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogb3B0aW9uYWwgKi8gY3JlYXRlX2RlZmF1bHRzKSB7CiAgICBpZiAoIXJlcSkgewogICAgICAgIHJlcSA9IHV0aWxzLmN1cnJlbnRSZXF1ZXN0KCk7CiAgICB9CiAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7CgogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICBvcHRpb25zLm9wZXJhdGlvbiA9IG9wdGlvbnMub3BlcmF0aW9uIHx8ICh2YWx1ZXMgPyAndXBkYXRlJzogJ2FkZCcpOwoKICAgIGlmIChjcmVhdGVfZGVmYXVsdHMpIHsKICAgICAgICB2YWx1ZXMgPSBfLmRlZmF1bHRzKAogICAgICAgICAgICB2YWx1ZXMsIGZpZWxkc2V0LmNyZWF0ZURlZmF1bHRzKHRoaXMuZmllbGRzLCByZXEpCiAgICAgICAgKTsKICAgIH0gZWxzZSBpZiAoIXZhbHVlcykgewogICAgICAgIHZhbHVlcyA9IGZpZWxkc2V0LmNyZWF0ZURlZmF1bHRzKHRoaXMuZmllbGRzLCByZXEpOwogICAgfQoKICAgIFJlbmRlcmVyQ2xhc3MgPSAoUmVuZGVyZXJDbGFzcyB8fCByZW5kZXIuZGVmYXVsdFJlbmRlcmVyKCkpOwogICAgdmFyIHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyQ2xhc3MoKTsKICAgIHJldHVybiAoCiAgICAgICAgcmVuZGVyZXIuc3RhcnQoCiAgICAgICAgICAgIGVycnNXaXRob3V0RmllbGRzKHRoaXMuZXJyb3JzKQogICAgICAgICkgKwogICAgICAgIHRoaXMucmVuZGVyRmllbGRzKAogICAgICAgICAgICByZW5kZXJlciwgdGhpcy5maWVsZHMsIHZhbHVlcywgdGhpcy5yYXcsIHRoaXMuZXJyb3JzLCBbXSwgb3B0aW9ucwogICAgICAgICkgKwogICAgICAgIHJlbmRlcmVyLmVuZCgpICsKICAgICAgICByZW5kZXIuc2NyaXB0VGFnRm9yRXZlbnQoJ3JlbmRlckZpbmlzaCcpCiAgICApOwp9OwoKLyoqCiAqIEZpbHRlcnMgYW4gYXJyYXkgb2YgZXJyb3JzLCByZXR1cm5pbmcgb25seSB0aG9zZSBiZWxvdyBhIHNwZWNpZmljIGZpZWxkIHBhdGgKICoKICogQHBhcmFtIHtBcnJheX0gZXJycwogKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAqIEByZXR1cm5zIHtBcnJheX0KICovCgp2YXIgZXJyc0JlbG93UGF0aCA9IGZ1bmN0aW9uIChlcnJzLCBwYXRoKSB7CiAgICByZXR1cm4gXy5maWx0ZXIoZXJycywgZnVuY3Rpb24gKGUpIHsKICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGF0aC5sZW5ndGg7IGkgPCBsZW47ICsraSkgewogICAgICAgICAgICBpZiAocGF0aFtpXSAhPT0gZS5maWVsZFtpXSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfSk7Cn07CgovKioKICogSXRlcmF0ZXMgb3ZlciBmaWVsZHMgYW5kIHN1Yi1vYmplY3RzIGNhbGxpbmcgdGhlIGNvcnJlY3QgcmVuZGVyZXIgZnVuY3Rpb24gb24KICogZWFjaC4gUmV0dXJucyBhIEhUTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGZpZWxkcy4gVXNlZCBpbnRlcm5hbGx5IGJ5IHRoZQogKiB0b0hUTUwgbWV0aG9kLCB5b3Ugc2hvdWxkIG5vdCBuZWVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiBkaXJlY3RseS4KICoKICogQG5hbWUgRm9ybS5yZW5kZXJGaWVsZHMocmVuZGVyZXIsIGZpZWxkcywgdmFsdWVzLCByYXcsIGVyciwgcGF0aCkKICogQHBhcmFtIHtPYmplY3R9IHJlbmRlcmVyCiAqIEBwYXJhbSB7T2JqZWN0fSBmaWVsZHMKICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcwogKiBAcGFyYW0ge0FycmF5fSBlcnJzCiAqIEBwYXJhbSB7QXJyYXl9IHBhdGgKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgd2lkZ2V0IG9wdGlvbnMsIHdoaWNoCiAqICAgICAgICAgIHdpbGwgdWx0aW1hdGVseSBiZSBwcm92aWRlZCB0byBlYWNoIHdpZGdldCdzIHRvSFRNTCBtZXRob2QuCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKRm9ybS5wcm90b3R5cGUucmVuZGVyRmllbGRzID0gZnVuY3Rpb24gKHJlbmRlcmVyLCBmaWVsZHMsIHZhbHVlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdywgZXJycywgcGF0aCwgb3B0aW9ucykgewogICAgZmllbGRzID0gZmllbGRzIHx8IHt9OwogICAgdmFsdWVzID0gdmFsdWVzIHx8IHt9OwogICAgcmF3ID0gcmF3IHx8IHt9OwogICAgZXJycyA9IGVycnMgfHwgW107CiAgICBwYXRoID0gcGF0aCB8fCBbXTsKCiAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICB2YXIgZXhjbHVkZXMgPSB0aGlzLm9wdGlvbnMuZXhjbHVkZTsKICAgIHZhciBmaWVsZF9zdWJzZXQgPSB0aGlzLm9wdGlvbnMuZmllbGRzOwogICAgdmFyIGtleXMgPSBfLmtleXMoZmllbGRzKTsKCiAgICB2YXIgZmllbGRzX21vZHVsZSA9IHJlcXVpcmUoJy4vZmllbGRzJyk7CgogICAgcmV0dXJuIF8ucmVkdWNlKGtleXMsIGZ1bmN0aW9uIChodG1sLCBrKSB7CgogICAgICAgIHZhciBmX3BhdGggPSBwYXRoLmNvbmNhdChba10pOwoKICAgICAgICBpZiAoZXhjbHVkZXMpIHsKICAgICAgICAgICAgaWYgKF8uaW5kZXhPZihleGNsdWRlcywgZl9wYXRoLmpvaW4oJy4nKSkgIT09IC0xKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZmllbGRfc3Vic2V0KSB7CiAgICAgICAgICAgIGlmIChfLmluZGV4T2YoZmllbGRfc3Vic2V0LCBmX3BhdGguam9pbignLicpKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBodG1sOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgZl9lcnJzID0gZXJyc0JlbG93UGF0aChlcnJzLCBmX3BhdGgpOwogICAgICAgIHZhciBmID0gZmllbGRzW2tdOwoKICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRmllbGQgfHwKICAgICAgICAgICAgZiBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRW1iZWRkZWQgfHwKICAgICAgICAgICAgZiBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRW1iZWRkZWRMaXN0KSB7CgogICAgICAgICAgICByZXR1cm4gaHRtbCArIHJlbmRlcmVyLmZpZWxkKAogICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgIGZfcGF0aCwKICAgICAgICAgICAgICAgIHZhbHVlc1trXSwKICAgICAgICAgICAgICAgIChyYXdba10gPT09IHVuZGVmaW5lZCkgPyB2YWx1ZXNba106IHJhd1trXSwKICAgICAgICAgICAgICAgIGZfZXJycywKICAgICAgICAgICAgICAgIChvcHRpb25zIHx8IHt9KQogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChmIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgIHJldHVybiBodG1sICsgKGsgPyByZW5kZXJlci5iZWdpbkdyb3VwKGZfcGF0aCkgOiAnJykgKwogICAgICAgICAgICAgICAgdGhhdC5yZW5kZXJGaWVsZHMoCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIsCiAgICAgICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZXNba10sCiAgICAgICAgICAgICAgICAgICAgKHJhd1trXSA9PT0gdW5kZWZpbmVkKSA/IHZhbHVlc1trXTogcmF3W2tdLAogICAgICAgICAgICAgICAgICAgIGVycnMsCiAgICAgICAgICAgICAgICAgICAgZl9wYXRoLAogICAgICAgICAgICAgICAgICAgIChvcHRpb25zIHx8IHt9KQogICAgICAgICAgICAgICAgKSArIChrID8gcmVuZGVyZXIuZW5kR3JvdXAoZl9wYXRoKSA6ICcnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAnVGhlIGZpZWxkIHR5cGUgYCcgKyAodHlwZW9mIGYpICsgJ2AgaXMgbm90IHN1cHBvcnRlZC4nCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfSwgJycpOwp9OwoKCi8qKgogKiBUcmFuc2Zvcm1zIGEgZmxhdCBvYmplY3QgZnJvbSBhIHJlcXVlc3QgcXVlcnkgdG8gYSBwcm9wZXIKICogaGllcmFyY2h5IG9mIHByb3BlcnRpZXMuCiAqCiAqIDxwcmU+eydvbmUudHdvJzogJ3ZhbCd9IC0tPiB7b25lOiB7dHdvOiAndmFsJ319PC9wcmU+CiAqCiAqIEBuYW1lIGZvcm1WYWx1ZXNUb1RyZWUoZm9ybSkKICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5mb3JtVmFsdWVzVG9UcmVlID0gZnVuY3Rpb24gKGZvcm0pIHsKICAgIHZhciB0cmVlID0ge307CiAgICBmb3IgKHZhciBrIGluIGZvcm0pIHsKICAgICAgICB1dGlscy5zZXRQcm9wZXJ0eVBhdGgodHJlZSwgay5zcGxpdCgnLicpLCBmb3JtW2tdKTsKICAgIH0KICAgIHJldHVybiB0cmVlOwp9OwoKCi8qKgogKiBUcmFuc2Zvcm1zIGEgcmF3IHF1ZXJ5IG9iamVjdCBmcm9tIGZvcm1WYWx1ZXNUb1RyZWUgdG8gYQogKiBkb2N1bWVudCB3aGljaCBmb2xsb3dzIHRoZSBzY2hlbWEgZm9yIHRoZSBnaXZlbiB0eXBlLgogKgogKiBAbmFtZSBwYXJzZVJhdyhmaWVsZHMsIHJhdykKICogQHBhcmFtIHtPYmplY3R9IGZpZWxkcwogKiBAcGFyYW0ge09iamVjdH0gcmF3CiAqIEByZXR1cm5zIHtPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5wYXJzZVJhdyA9IGZ1bmN0aW9uIChmaWVsZHMsIHJhdykgewogICAgdmFyIGRvYyA9IHt9OwogICAgcmF3ID0gcmF3IHx8IHt9OwogICAgdmFyIGZpZWxkc19tb2R1bGUgPSByZXF1aXJlKCcuL2ZpZWxkcycpOwoKICAgIGZvciAodmFyIGsgaW4gZmllbGRzKSB7CiAgICAgICAgdmFyIGYgPSBmaWVsZHNba107CiAgICAgICAgdmFyIHIgPSByYXdba107CgogICAgICAgIGlmIChmIGluc3RhbmNlb2YgZmllbGRzX21vZHVsZS5GaWVsZCkgewogICAgICAgICAgICBpZiAoIWYuaXNFbXB0eShyKSkgewogICAgICAgICAgICAgICAgZG9jW2tdID0gZi5wYXJzZShyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICghZi5vbWl0X2VtcHR5KSB7CiAgICAgICAgICAgICAgICBkb2Nba10gPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZiBpbnN0YW5jZW9mIGZpZWxkc19tb2R1bGUuRW1iZWRkZWQpIHsKICAgICAgICAgICAgaWYgKCFmLmlzRW1wdHkocikpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICBpZiAociAhPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jW2tdID0gSlNPTi5wYXJzZShyKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBkb2Nba10gPSB7fTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkb2Nba10gPSBleHBvcnRzLnBhcnNlUmF3KGYudHlwZS5maWVsZHMsIHIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGYgaW5zdGFuY2VvZiBmaWVsZHNfbW9kdWxlLkVtYmVkZGVkTGlzdCkgewogICAgICAgICAgICBkb2Nba10gPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJbaV0gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJbaV0gIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY1trXVtpXSA9IEpTT04ucGFyc2UocltpXSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jW2tdW2ldID0ge307CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZG9jW2tdW2ldID0gZXhwb3J0cy5wYXJzZVJhdyhmLnR5cGUuZmllbGRzLCByW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWRvY1trXS5sZW5ndGggJiYgZi5vbWl0X2VtcHR5KSB7CiAgICAgICAgICAgICAgICBkZWxldGUgZG9jW2tdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGYgaW5zdGFuY2VvZiBPYmplY3QpIHsKICAgICAgICAgICAgZG9jW2tdID0gZXhwb3J0cy5wYXJzZVJhdyhmLCByKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAnVGhlIGZpZWxkIHR5cGUgYCcgKyAodHlwZW9mIGYpICsgJ2AgaXMgbm90IHN1cHBvcnRlZC4nCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGRvYzsKfTsKCgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vcGF0aCAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3BhdGgiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLyoqCiAqIFBhdGggZnVuY3Rpb25zIHBvcnRlZCBmcm9tIG5vZGUuanMgdG8gd29yayBpbiBDb3VjaERCIGFuZCB0aGUgYnJvd3Nlci4KICogVGhpcyBtb2R1bGUgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5IEthbnNvLCBhbHRob3VnaCB5b3UgY2FuIHVzZSBpdCBpbiB5b3VyCiAqIGFwcHMgdG9vIGlmIHlvdSBmaW5kIHRoZSBmdW5jdGlvbnMgdXNlZnVsLgogKgogKiBAbW9kdWxlCiAqLwoKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKLyoqCiAqIEZyb20gbm9kZS5qcyB2MC4yLjYKICovCgovKioKICogSm9pbnMgbXVsdGlwbGUgcGF0aHMgdG9nZXRoZXIgdXNpbmcgJy8nLiBBY2NlcHRzIGEgYXJiaXRyYXJ5IG51bWJlciBvZgogKiBzdHJpbmdzIGFzIGFyZ3VtZW50cywgcmV0dXJuaW5nIHRoZSBqb2luZWQgcmVzdWx0IGFzIGEgc2luZ2xlIHN0cmluZy4KICoKICogQG5hbWUgam9pbihwYXRoLCBbLi4uXSkKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmpvaW4gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbChhcmd1bWVudHMsICIvIikpOwp9OwoKLyoqCiAqIE5vcm1hbGl6ZXMgYSBwYXRoIHNwbGl0IGludG8gYW4gYXJyYXksIHRha2luZyBjYXJlIG9mICcuLicgYW5kICcuJyBwYXJ0cy4KICoKICogQG5hbWUgbm9ybWFsaXplQXJyYXkocGFydHMsIFtrZWVwQmxhbmtzXSkKICogQHBhcmFtIHtBcnJheX0gcGFydHMKICogQHBhcmFtIHtCb29sZWFufSBrZWVwQmxhbmtzCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLm5vcm1hbGl6ZUFycmF5ID0gZnVuY3Rpb24gKHBhcnRzLCBrZWVwQmxhbmtzKSB7CiAgICB2YXIgZGlyZWN0b3JpZXMgPSBbXSwgcHJldjsKICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFydHMubGVuZ3RoIC0gMTsgaSA8PSBsOyBpKyspIHsKICAgICAgICB2YXIgZGlyZWN0b3J5ID0gcGFydHNbaV07CgogICAgICAgIC8vIGlmIGl0J3MgYmxhbmssIGJ1dCBpdCdzIG5vdCB0aGUgZmlyc3QgdGhpbmcsIGFuZCBub3QgdGhlIGxhc3QKICAgICAgICAvLyB0aGluZywgc2tpcCBpdC4KICAgICAgICBpZiAoZGlyZWN0b3J5ID09PSAiIiAmJiBpICE9PSAwICYmIGkgIT09IGwgJiYgIWtlZXBCbGFua3MpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBpZiBpdCdzIGEgZG90LCBhbmQgdGhlcmUgd2FzIHNvbWUgcHJldmlvdXMgZGlyIGFscmVhZHksIHRoZW4KICAgICAgICAvLyBza2lwIGl0LgogICAgICAgIGlmIChkaXJlY3RvcnkgPT09ICIuIiAmJiBwcmV2ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBpZiBpdCBzdGFydHMgd2l0aCAiIiwgYW5kIGlzIGEgLiBvciAuLiwgdGhlbiBza2lwIGl0LgogICAgICAgIGlmIChkaXJlY3Rvcmllcy5sZW5ndGggPT09IDEgJiYgZGlyZWN0b3JpZXNbMF0gPT09ICIiICYmIChkaXJlY3RvcnkgPT09ICIuIiB8fCBkaXJlY3RvcnkgPT09ICIuLiIpKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdG9yeSA9PT0gIi4uIiAmJiBkaXJlY3Rvcmllcy5sZW5ndGggJiYgcHJldiAhPT0gIi4uIiAmJiBwcmV2ICE9PSAiLiIgJiYgcHJldiAhPT0gdW5kZWZpbmVkICYmIChwcmV2ICE9PSAiIiB8fCBrZWVwQmxhbmtzKSkgewogICAgICAgICAgICBkaXJlY3Rvcmllcy5wb3AoKTsKICAgICAgICAgICAgcHJldiA9IGRpcmVjdG9yaWVzLnNsaWNlKC0xKVswXTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmIChwcmV2ID09PSAiLiIpIHsKICAgICAgICAgICAgICAgIGRpcmVjdG9yaWVzLnBvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRpcmVjdG9yaWVzLnB1c2goZGlyZWN0b3J5KTsKICAgICAgICAgICAgcHJldiA9IGRpcmVjdG9yeTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gZGlyZWN0b3JpZXM7Cn07CgovKioKICogTm9ybWFsaXplIGEgc3RyaW5nIHBhdGgsIHRha2luZyBjYXJlIG9mICcuLicgYW5kICcuJyBwYXJ0cy4KICoKICogQG5hbWUgbm9ybWFsaXplKHBhdGgsIFtrZWVwQmxhbmtzXSkKICogQHBhcmFtIHtTdHJpbmd9IHBhdGgKICogQHBhcmFtIHtCb29sZWFufSBrZWVwQmxhbmtzCiAqIEByZXR1cm5zIHN0cmluZwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24gKHBhdGgsIGtlZXBCbGFua3MpIHsKICAgIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZUFycmF5KHBhdGguc3BsaXQoIi8iKSwga2VlcEJsYW5rcykuam9pbigiLyIpOwp9OwoKLyoqCiAqIFJldHVybiB0aGUgZGlyZWN0b3J5IG5hbWUgb2YgYSBwYXRoLiBTaW1pbGFyIHRvIHRoZSBVbml4IGRpcm5hbWUgY29tbWFuZC4KICoKICogQG5hbWUgZGlybmFtZShwYXRoKQogKiBAcGFyYW0ge1N0cmluZ30gcGF0aAogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uIChwYXRoKSB7CiAgICBpZiAocGF0aC5sZW5ndGggPiAxICYmICcvJyA9PT0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdKSB7CiAgICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXC8rJC8sICcnKTsKICAgIH0KICAgIHZhciBsYXN0U2xhc2ggPSBwYXRoLmxhc3RJbmRleE9mKCcvJyk7CiAgICBzd2l0Y2ggKGxhc3RTbGFzaCkgewogICAgY2FzZSAtMToKICAgICAgICByZXR1cm4gJy4nOwogICAgY2FzZSAwOgogICAgICAgIHJldHVybiAnLyc7CiAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBwYXRoLnN1YnN0cmluZygwLCBsYXN0U2xhc2gpOwogICAgfQp9OwoKLyoqCiAqIFJldHVybiB0aGUgbGFzdCBwb3J0aW9uIG9mIGEgcGF0aC4gU2ltaWxhciB0byB0aGUgVW5peCBiYXNlbmFtZSBjb21tYW5kLgogKgogKiAqKkV4YW1wbGUqKgogKiA8cHJlPjxjb2RlIGNsYXNzPSJqYXZhc2NyaXB0Ij5wYXRoLmJhc2VuYW1lKCcvZm9vL2Jhci9iYXovYXNkZi9xdXV4Lmh0bWwnKQogKiAvLyByZXR1cm5zCiAqICdxdXV4Lmh0bWwnCiAqCiAqIHBhdGguYmFzZW5hbWUoJy9mb28vYmFyL2Jhei9hc2RmL3F1dXguaHRtbCcsICcuaHRtbCcpCiAqIC8vIHJldHVybnMKICogJ3F1dXgnCiAqIDwvY29kZT48L3ByZT4KICoKICogQG5hbWUgYmFzZW5hbWUocGF0aCwgZXh0KQogKiBAcGFyYW0ge1N0cmluZ30gcGF0aAogKiBAcGFyYW0ge1N0cmluZ30gZXh0CiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uIChwYXRoLCBleHQpIHsKICAgIHZhciBmID0gcGF0aC5zdWJzdHIocGF0aC5sYXN0SW5kZXhPZigiLyIpICsgMSk7CiAgICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkgewogICAgICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpOwogICAgfQogICAgcmV0dXJuIGY7Cn07CgovKioKICogUmV0dXJuIHRoZSBleHRlbnNpb24gb2YgdGhlIHBhdGguIEV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGxhc3QgJy4nIGluIHRoZSBsYXN0CiAqIHBvcnRpb24gb2YgdGhlIHBhdGguIElmIHRoZXJlIGlzIG5vICcuJyBpbiB0aGUgbGFzdCBwb3J0aW9uIG9mIHRoZSBwYXRoIG9yCiAqIHRoZSBvbmx5ICcuJyBpcyB0aGUgZmlyc3QgY2hhcmFjdGVyLCB0aGVuIGl0IHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLgogKgogKiA8cHJlPjxjb2RlIGNsYXNzPSJqYXZhc2NyaXB0Ij5wYXRoLmV4dG5hbWUoJ2luZGV4Lmh0bWwnKQogKiAvLyByZXR1cm5zCiAqICcuaHRtbCcKICoKICogcGF0aC5leHRuYW1lKCdpbmRleCcpCiAqIC8vIHJldHVybnMKICogJycKICogPC9jb2RlPjwvcHJlPgogKgogKiBAbmFtZSBleHRuYW1lKHBhdGgpCiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHsKICAgIHZhciBkb3QgPSBwYXRoLmxhc3RJbmRleE9mKCcuJyksCiAgICAgICAgc2xhc2ggPSBwYXRoLmxhc3RJbmRleE9mKCcvJyk7CiAgICAvLyBUaGUgbGFzdCBkb3QgbXVzdCBiZSBpbiB0aGUgbGFzdCBwYXRoIGNvbXBvbmVudCwgYW5kIGl0ICh0aGUgbGFzdCBkb3QpCiAgICAvLyBtdXN0IG5vdCBzdGFydCB0aGUgbGFzdCBwYXRoIGNvbXBvbmVudCAoaS5lLiBiZSBhIGRvdCB0aGF0IHNpZ25pZmllcyBhCiAgICAvLyBoaWRkZW4gZmlsZSBpbiBVTklYKS4KICAgIHJldHVybiBkb3QgPD0gc2xhc2ggKyAxID8gJycgOiBwYXRoLnN1YnN0cmluZyhkb3QpOwp9OwoKCgp9KX07CgovKioqKioqKioqKiBrYW5zby9wZXJtaXNzaW9ucyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3Blcm1pc3Npb25zIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qKgogKiBQZXJtaXNzaW9ucyBmdW5jdGlvbnMgYXJlIHVzZWQgb24gYm90aCBGaWVsZHMgYW5kIFR5cGVzIHRvIGNoZWNrIGEgZ2l2ZW4KICogdXNlciBpcyBhdXRob3JpemVkIHRvIG1ha2UgYSBjaGFuZ2UgdG8gYSBkb2N1bWVudC4KICoKICogQG1vZHVsZQogKi8KCgovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKSwKICAgIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fOwoKCi8qKgogKiBGaWVsZCdzIG5ldyB2YWx1ZSBzaG91bGQgbWF0Y2ggY3VycmVudCB1c2VyJ3MgbmFtZQogKgogKiBAbmFtZSBtYXRjaFVzZXJuYW1lKCkKICogQHJldHVybnMge0Z1bmN0aW9ufQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMubWF0Y2hVc2VybmFtZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBmdW5jdGlvbiAobmV3RG9jLCBvbGREb2MsIG5ld1ZhbCwgb2xkVmFsLCB1c2VyQ3R4KSB7CiAgICAgICAgdmFyIG5hbWUgPSB1c2VyQ3R4Lm5hbWU7CiAgICAgICAgaWYgKG5hbWUgIT09IG5ld1ZhbCkgewogICAgICAgICAgICAvLyBpZiBib3RoIGFyZSBlbXB0eS1saWtlLCB0aGVuIGNvbnNpZGVyIHRoZW0gdGhlIHNhbWUKICAgICAgICAgICAgaWYgKChuYW1lICE9PSBudWxsICYmIG5hbWUgIT09IHVuZGVmaW5lZCAmJiBuYW1lICE9PSAnJykgfHwKICAgICAgICAgICAgICAgIChuZXdWYWwgIT09IG51bGwgJiYgbmV3VmFsICE9PSB1bmRlZmluZWQgJiYgbmV3VmFsICE9PSAnJykpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmllbGQgZG9lcyBub3QgbWF0Y2ggeW91ciB1c2VybmFtZScpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKfTsKCi8qKgogKiBDaGVja3MgaWYgdGhlIHVzZXIgaGFzIGEgc3BlY2lmaWMgcm9sZQogKgogKiBAbmFtZSBoYXNSb2xlKHJvbGUpCiAqIEBwYXJhbSB7U3RyaW5nfSByb2xlCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmhhc1JvbGUgPSBmdW5jdGlvbiAocm9sZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChuZXdEb2MsIG9sZERvYywgbmV3VmFsLCBvbGRWYWwsIHVzZXJDdHgpIHsKICAgICAgICB2YXIgcm9sZXMgPSB1c2VyQ3R4ID8gKHVzZXJDdHgucm9sZXMgfHwgW10pOiBbXTsKICAgICAgICBpZiAoIV8uaW5jbHVkZShyb2xlcywgcm9sZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG11c3QgaGF2ZSAiJyArIHJvbGUgKyAnIiByb2xlLicpOwogICAgICAgIH0KICAgIH07Cn07CgovKioKICogVGhlIHZhbHVlIG9mIHRoaXMgZmllbGQgc2hvdWxkIG5ldmVyIGNoYW5nZSBhZnRlciB0aGUgZG9jdW1lbnQgaGFzIGJlZW4KICogY3JlYXRlZC4KICoKICogQG5hbWUgZmllbGRVbmVkaXRhYmxlKCkKICogQHJldHVybnMge0Z1bmN0aW9ufQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZmllbGRVbmVkaXRhYmxlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChuZXdEb2MsIG9sZERvYywgbmV3VmFsdWUsIG9sZFZhbHVlLCB1c2VyQ3R4KSB7CiAgICAgICAgaWYgKG9sZERvYykgewogICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpZWxkIGNhbm5vdCBiZSBlZGl0ZWQgb25jZSBjcmVhdGVkJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Owp9OwoKLyoqCiAqIFVzZXIncyBuYW1lIHNob3VsZCBtYXRjaCB0aGUgKm9sZCogdmFsdWUgb2YgdGhlIGdpdmVuIGZpZWxkLiBBIGZpZWxkIGNhbiBiZQogKiBzcGVjaWZpZWQgdXNpbmcgYSBzdHJpbmcgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncyAobGlrZSBhIHBhdGgpLgogKgogKiA8cHJlPgogKiBlZzogdXNlcm5hbWVNYXRjaGVzRmllbGQoJ2NyZWF0b3InKQogKiAgICAgdXNlcm5hbWVNYXRjaGVzRmllbGQoWydtZXRhJywnY3JlYXRvciddKQogKgogKiAgICAgewogKiAgICAgICAgIGNyZWF0b3I6ICduYW1lJywKICogICAgICAgICBtZXRhOiB7Y3JlYXRvcjogJ25hbWUyJ30KICogICAgIH0KICogPC9wcmU+CiAqCiAqIEBuYW1lIHVzZXJuYW1lTWF0Y2hlc0ZpZWxkKHBhdGgpCiAqIEBwYXJhbSB7U3RyaW5nIHwgQXJyYXl9IHBhdGgKICogQHJldHVybnMge0Z1bmN0aW9ufQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMudXNlcm5hbWVNYXRjaGVzRmllbGQgPSBmdW5jdGlvbiAocGF0aCkgewogICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHsKICAgICAgICBwYXRoID0gW3BhdGhdOwogICAgfQogICAgcmV0dXJuIGZ1bmN0aW9uIChuZXdEb2MsIG9sZERvYywgbmV3VmFsdWUsIG9sZFZhbHVlLCB1c2VyQ3R4KSB7CiAgICAgICAgdmFyIGZpZWxkID0gdXRpbHMuZ2V0UHJvcGVydHlQYXRoKG9sZERvYywgcGF0aCk7CiAgICAgICAgaWYgKHVzZXJDdHgubmFtZSAhPT0gZmllbGQpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VybmFtZSBkb2VzIG5vdCBtYXRjaCBmaWVsZCAnICsgcGF0aC5qb2luKCcuJykpOwogICAgICAgIH0KICAgIH07Cn07CgovKioKICogQ2hlY2tzIHRoYXQgdXNlcidzIGNvbnRleHQgaGFzIGEgdXNlcm5hbWUKICoKICogQG5hbWUgbG9nZ2VkSW4oKQogKiBAcmV0dXJucyB7RnVuY3Rpb259CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5sb2dnZWRJbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBmdW5jdGlvbiAobmV3RG9jLCBvbGREb2MsIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgdXNlckN0eCkgewogICAgICAgIGlmICghdXNlckN0eCB8fCAhdXNlckN0eC5uYW1lKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgYmUgbG9nZ2VkIGluJyk7CiAgICAgICAgfQogICAgfTsKfTsKCi8qKgogKiBSdW5zIGFuIGFycmF5IG9mIHBlcm1pc3Npb25zIGZ1bmN0aW9ucyBhbmQgY2hlY2tzIHRoYXQgYWxsIG9mIHRoZW0gcGFzcywKICogcmV0dXJuaW5nIGFsbCBmYWlsdXJlcy4KICoKICogQG5hbWUgYWxsKHBlcm1zKQogKiBAcGFyYW0ge0FycmF5fSBwZXJtcwogKiBAcmV0dXJucyB7RnVuY3Rpb259CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5hbGwgPSBmdW5jdGlvbiAocGVybXMpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgcmV0dXJuIF8ucmVkdWNlKHBlcm1zLCBmdW5jdGlvbiAoZXJycywgcCkgewogICAgICAgICAgICByZXR1cm4gZXJycy5jb25jYXQodXRpbHMuZ2V0RXJyb3JzKHAsIGFyZ3MpKTsKICAgICAgICB9LCBbXSk7CiAgICB9Owp9OwoKLyoqCiAqIFRlc3RzIHRvIHNlZSBpZiBhbnkgb25lIHBlcm1pc3Npb24gZnVuY3Rpb24gcGFzc2VzLCByZXR1cm5pbmcgb24gdGhlCiAqIGZpcnN0IHN1Y2Nlc3MuIElmIGFsbCBwZXJtaXNzaW9ucyBmYWlsLCB0aGVuIGFsbCBlcnJvcnMgYXJlIHJldHVybmVkLgogKgogKiBAbmFtZSBhbnkocGVybXMpCiAqIEBwYXJhbSB7QXJyYXl9IHBlcm1zCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5hbnkgPSBmdW5jdGlvbiAocGVybXMpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGVycnMgPSBbXTsKICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGVybXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBwX2VycnMgPSAocGVybXNbaV0uYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBbXSk7CiAgICAgICAgICAgICAgICBlcnJzID0gZXJycy5jb25jYXQocF9lcnJzKTsKICAgICAgICAgICAgICAgIGlmICghcF9lcnJzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBhcyBzb29uIGFzIG9uZSBwYXNzZXMKICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIC8vIHN0b3JlIHRoZSBmaXJzdCBlcnJvciB0byByZS10aHJvdyBpZiBub25lIHBhc3MKICAgICAgICAgICAgICAgIGVycnMucHVzaChlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZXJyczsKICAgIH07Cn07CgovKioKICogVHJlYXQgbmV3IGFuZCBvbGQgdmFsdWVzIGxpa2UgbmV3IGRvY3VtZW50cyBvZiBhIGdpdmVuIHR5cGUsIGFuZCBhdHRlbXB0IHRvCiAqIGF1dGhvcml6ZSB0aGUgdmFsdWUgYWdhaW5zdCB0aGUgdHlwZSdzIHBlcm1pc3Npb25zLiBVc2VmdWwgd2hlbiBoYW5kbGluZwogKiBwZXJtaXNzaW9ucyBmb3IgYW4gZW1iZWRkZWQgdHlwZS4KICoKICogQ2FuIGJlIGNvbWJpbmVkIHdpdGggcGVybWlzc2lvbnMuYW55IG9yIHBlcm1pc3Npb25zLmFsbCB0byBleHRlbmQgdGhlCiAqIHBlcm1pc3Npb25zIGZvciBhbiBlbWJlZGRlZCB0eXBlIGZpZWxkLiBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBtaWdodAogKiBhbGxvdyBib3RoIHRoZSBvd25lciBvZiB0aGUgcGFyZW50IGRvY3VtZW50IGFuZCB0aGUgb3duZXIgb2YgdGhlIGNvbW1lbnQKICogaXRzZWxmIHRvIHJlbW92ZSBpdC4KICoKICogPHByZT48Y29kZSBjbGFzcz0iamF2YXNjcmlwdCI+CiAqICAgICBjb21tZW50OiBmaWVsZHMuZW1iZWQoewogKiAgICAgICAgIHR5cGU6IHR5cGVzLmNvbW1lbnQsCiAqICAgICAgICAgcGVybWlzc2lvbnM6IHsKICogICAgICAgICAgICAgcmVtb3ZlOiBwZXJtaXNzaW9ucy5hbnkoWwogKiAgICAgICAgICAgICAgICAgcGVybWlzc2lvbnMudXNlcm5hbWVNYXRjaGVzRmllbGQoJ2NyZWF0b3InKSwKICogICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zLmluaGVyaXQodHlwZXMuY29tbWVudCkKICogICAgICAgICAgICAgXSkKICogICAgICAgICB9CiAqICAgICB9KTsKICogPC9jb2RlPjwvcHJlPgogKgogKiBAbmFtZSBpbmhlcml0KHR5cGUpCiAqIEBwYXJhbSB7VHlwZX0gdHlwZQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuaW5oZXJpdCA9IGZ1bmN0aW9uICh0eXBlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKG5ld0RvYywgb2xkRG9jLCBuZXdWYWx1ZSwgb2xkVmFsdWUsIHVzZXJDdHgpIHsKICAgICAgICByZXR1cm4gdHlwZS5hdXRob3JpemUobmV3VmFsdWUgfHwge19kZWxldGVkOiB0cnVlfSwgb2xkVmFsdWUsIHVzZXJDdHgpOwogICAgfTsKfTsKCgp9KX07CgovKioqKioqKioqKiBrYW5zby9xdWVyeXN0cmluZyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3F1ZXJ5c3RyaW5nIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCnZhciBfID0gcmVxdWlyZSgnLi91bmRlcnNjb3JlJykuXzsKCi8qKgogKiBRdWVyeXN0cmluZyBmdW5jdGlvbnMgcG9ydGVkIGZyb20gbm9kZS5qcyB0byB3b3JrIGluIENvdWNoREIgYW5kIHRoZSBicm93c2VyLgogKiBUaGlzIG1vZHVsZSBpcyB1c2VkIGludGVybmFsbHkgYnkgS2Fuc28sIGFsdGhvdWdoIHlvdSBjYW4gdXNlIGl0IGluIHlvdXIKICogYXBwcyB0b28gaWYgeW91IGZpbmQgdGhlIGZ1bmN0aW9ucyB1c2VmdWwuCiAqCiAqIEBtb2R1bGUKICovCgoKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKLy8gUXVlcnkgU3RyaW5nIFV0aWxpdGllcwoKdmFyIFF1ZXJ5U3RyaW5nID0gZXhwb3J0czsKCi8qKgogKiBEZWNvZGVzIGEgVVJJIENvbXBvbmVudCwgcHJvdmlkZWQgc28gdGhhdCBpdCBjb3VsZCBiZSBvdmVycmlkZGVuIGlmCiAqIG5lY2Vzc2FyeS4KICoKICogQG5hbWUgdW5lc2NhcGUoc3RyKQogKiBAcGFyYW0ge1N0cmluZ30gc3RyCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKUXVlcnlTdHJpbmcudW5lc2NhcGUgPSBmdW5jdGlvbiAoc3RyKSB7CiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7Cn07CgovKioKICogRW5jb2RlcyBhIFVSSSBDb21wb25lbnQsIHByb3ZpZGVkIHNvIHRoYXQgaXQgY291bGQgYmUgb3ZlcnJpZGRlbiBpZgogKiBuZWNlc3NhcnkuCiAqCiAqIEBuYW1lIGVzY2FwZShzdHIpCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpRdWVyeVN0cmluZy5lc2NhcGUgPSBmdW5jdGlvbiAoc3RyKSB7CiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cik7Cn07Cgp2YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24gKHYpIHsKICAgIHN3aXRjaCAodHlwZW9mIHYpIHsKICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgcmV0dXJuIHY7CgogICAgY2FzZSAnYm9vbGVhbic6CiAgICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnOwoKICAgIGNhc2UgJ251bWJlcic6CiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnOwoKICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuICcnOwogICAgfQp9OwoKLyoqCiAqIFNlcmlhbGl6ZSBhbiBvYmplY3QgdG8gYSBxdWVyeSBzdHJpbmcuIE9wdGlvbmFsbHkgb3ZlcnJpZGUgdGhlIGRlZmF1bHQKICogc2VwYXJhdG9yIGFuZCBhc3NpZ25tZW50IGNoYXJhY3RlcnMuCiAqCiAqICoqRXhhbXBsZToqKgogKgogKiA8cHJlPjxjb2RlIGNsYXNzPSJqYXZhc2NyaXB0Ij4KICogcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHtmb286ICdiYXInfSkKICogLy8gcmV0dXJucwogKiAnZm9vPWJhcicKICoKICogcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHtmb286ICdiYXInLCBiYXo6ICdib2InfSwgJzsnLCAnOicpCiAqIC8vIHJldHVybnMKICogJ2ZvbzpiYXI7YmF6OmJvYicKICogPC9jb2RlPjwvcHJlPgogKgogKiBAbmFtZSBzdHJpbmdpZnkob2JqLCBbc2VwLCBlcSwgbmFtZV0pCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoKICogQHBhcmFtIHtTdHJpbmd9IHNlcAogKiBAcGFyYW0ge1N0cmluZ30gZXEKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpRdWVyeVN0cmluZy5zdHJpbmdpZnkgPSBRdWVyeVN0cmluZy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqLCBzZXAsIGVxLCBuYW1lKSB7CiAgICBzZXAgPSBzZXAgfHwgJyYnOwogICAgZXEgPSBlcSB8fCAnPSc7CiAgICBvYmogPSAob2JqID09PSBudWxsKSA/IHVuZGVmaW5lZCA6IG9iajsKCiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHsKICAgICAgICByZXR1cm4gXy5tYXAoXy5rZXlzKG9iaiksIGZ1bmN0aW9uIChrKSB7CiAgICAgICAgICAgIGlmIChfLmlzQXJyYXkob2JqW2tdKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIF8ubWFwKG9ialtrXSwgZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUXVlcnlTdHJpbmcuZXNjYXBlKHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICBlcSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIFF1ZXJ5U3RyaW5nLmVzY2FwZShzdHJpbmdpZnlQcmltaXRpdmUodikpOwogICAgICAgICAgICAgICAgfSkuam9pbihzZXApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIFF1ZXJ5U3RyaW5nLmVzY2FwZShzdHJpbmdpZnlQcmltaXRpdmUoaykpICsKICAgICAgICAgICAgICAgICAgICAgICBlcSArCiAgICAgICAgICAgICAgICAgICAgICAgUXVlcnlTdHJpbmcuZXNjYXBlKHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTsKICAgICAgICAgICAgfQogICAgICAgIH0pLmpvaW4oc2VwKTsKICAgIH0KICAgIGlmICghbmFtZSkgewogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIHJldHVybiBRdWVyeVN0cmluZy5lc2NhcGUoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICsKICAgICAgICAgICBRdWVyeVN0cmluZy5lc2NhcGUoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpOwp9OwoKLyoqCiAqIERlc2VyaWFsaXplIGEgcXVlcnkgc3RyaW5nIHRvIGFuIG9iamVjdC4gT3B0aW9uYWxseSBvdmVycmlkZSB0aGUgZGVmYXVsdAogKiBzZXBhcmF0b3IgYW5kIGFzc2lnbm1lbnQgY2hhcmFjdGVycy4KICoKICogKipFeGFtcGxlOioqCiAqCiAqIDxwcmU+PGNvZGUgY2xhc3M9ImphdmFzY3JpcHQiPgogKiBxdWVyeXN0cmluZy5wYXJzZSgnYT1iJmI9YycpCiAqIC8vIHJldHVybnMKICogLy8geyBhOiAnYicsIGI6ICdjJyB9CiAqIDwvY29kZT48L3ByZT4KICoKICogQG5hbWUgZGVjb2RlKHFzLCBbc2VwLCBlcV0pCiAqIEBwYXJhbSB7U3RyaW5nfSBxcwogKiBAcGFyYW0ge1N0cmluZ30gc2VwCiAqIEBwYXJhbSB7U3RyaW5nfSBlcQogKiBAcmV0dXJucyB7T2JqZWN0fQogKiBAYXBpIHB1YmxpYwogKi8KClF1ZXJ5U3RyaW5nLnBhcnNlID0gUXVlcnlTdHJpbmcuZGVjb2RlID0gZnVuY3Rpb24gKHFzLCBzZXAsIGVxKSB7CiAgICBzZXAgPSBzZXAgfHwgJyYnOwogICAgZXEgPSBlcSB8fCAnPSc7CiAgICB2YXIgb2JqID0ge307CgogICAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0KCiAgICBxcy5zcGxpdChzZXApLmZvckVhY2goZnVuY3Rpb24gKGt2cCkgewogICAgICAgIHZhciB4ID0ga3ZwLnNwbGl0KGVxKTsKICAgICAgICB2YXIgayA9IFF1ZXJ5U3RyaW5nLnVuZXNjYXBlKHhbMF0pOwogICAgICAgIHZhciB2ID0gUXVlcnlTdHJpbmcudW5lc2NhcGUoeC5zbGljZSgxKS5qb2luKGVxKSk7CgogICAgICAgIGlmICghKGsgaW4gb2JqKSkgewogICAgICAgICAgICBvYmpba10gPSB2OwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICghXy5pc0FycmF5KG9ialtrXSkpIHsKICAgICAgICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBvYmpba10ucHVzaCh2KTsKICAgICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gb2JqOwp9OwoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL3JlbmRlciAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3JlbmRlciJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogUmVuZGVyZXIgY29uc3RydWN0b3JzIGFuZCBnZW5lcmFsIHV0aWxpdGllcyBmb3IgcmVuZGVyaW5nIEZvcm0gb2JqZWN0cwogKiBhcyBIVE1MLgogKgogKiBAbW9kdWxlCiAqLwoKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgZXZlbnRzID0gcmVxdWlyZSgna2Fuc28vZXZlbnRzJyksCiAgICBzYW5pdGl6ZSA9IHJlcXVpcmUoJ2thbnNvL3Nhbml0aXplJyksCiAgICBfID0gcmVxdWlyZSgnLi91bmRlcnNjb3JlJykuXzsKCnZhciBoID0gc2FuaXRpemUuZXNjYXBlSHRtbDsKCgovKioKICogR2VuZXJhdGVzIGEgc2NyaXB0IHRhZyB0aGF0IGZpcmVzIHRoZSBldmVudCBuYW1lZCB7bmFtZX0uCiAqLwoKZXhwb3J0cy5zY3JpcHRUYWdGb3JFdmVudCA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICB2YXIgcnYgPSAoCiAgICAgICAgJzxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4nICsKICAgICAgICAiLy8gPCFbQ0RBVEFbXG4iICsKICAgICAgICAgICAgInJlcXVpcmUoJ2thbnNvL2V2ZW50cycpLmVtaXQoJyIgKwogICAgICAgICAgICAgICAgc2FuaXRpemUuY2RhdGEoc2FuaXRpemUuanMobmFtZSkpICsKICAgICAgICAgICAgIicpOyIgKwogICAgICAgICIvLyBdXT4iICsKICAgICAgICAnPC9zY3JpcHQ+JwogICAgKTsKCiAgICByZXR1cm4gcnY7Cn07IAoKLyoqCiAqIFJlbmRlcnMgSFRNTCBmb3IgZXJyb3IgbWVzc2FnZXMuCiAqCiAqIEBuYW1lIGVycm9ySFRNTChlcnJvcnMpCiAqIEBwYXJhbSB7QXJyYXl9IGVycm9ycwogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZXJyb3JIVE1MID0gZnVuY3Rpb24gKGVycm9ycykgewogICAgaWYgKGVycm9ycyAmJiBlcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgdmFyIGh0bWwgPSAnPHVsIGNsYXNzPSJlcnJvcnMgcmlnaHQiPic7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlcnJvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaHRtbCArPSAoCiAgICAgICAgICAgICAgICAnPGxpIGNsYXNzPSJlcnJvcl9tc2ciPicgKwogICAgICAgICAgICAgICAgICAgIGgoZXJyb3JzW2ldLm1lc3NhZ2UgfHwgZXJyb3JzW2ldLnRvU3RyaW5nKCkpICsKICAgICAgICAgICAgICAgICc8L2xpPicKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaHRtbCArPSAnPC91bD4nOwogICAgICAgIHJldHVybiBodG1sOwogICAgfQogICAgcmV0dXJuICcnOwp9OwoKLyoqCiAqIEdlbmVyYXRlcyB0aGUgdGV4dCBmb3IgYSBmaWVsZCdzIGxhYmVsLCBkZXBlbmRpbmcgb24gd2hldGhlcgogKiBhIGN1c3RvbSBsYWJlbCBpcyBkZWZpbmVkIG9yIG5vdC4gSWYgbm90LCB0aGUgbmFtZSBpcyBjYXB0aWFsaXplZCBhbmQKICogdW5kZXJzY29yZXMgYXJlIHJlcGxhY2VzIHdpdGggc3BhY2VzIHRvIHByb2R1Y2UgdGhlIGxhYmVsJ3MgdGV4dC4KICoKICogQG5hbWUgbGFiZWxUZXh0KGZpZWxkLCBuYW1lKQogKiBAcGFyYW0ge09iamVjdH0gZmllbGQKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmxhYmVsVGV4dCA9IGZ1bmN0aW9uIChmaWVsZCwgbmFtZSkgewogICAgaWYgKGZpZWxkLmxhYmVsKSB7CiAgICAgICAgcmV0dXJuIGZpZWxkLmxhYmVsOwogICAgfQogICAgcmV0dXJuIG5hbWUuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKS5yZXBsYWNlKC9fL2csICcgJyk7Cn07CgovKioKICogR2VuZXJhdGVzIEhUTUwgZm9yIGxhYmVsIHRhZ3MuCiAqCiAqIEBuYW1lIGxhYmVsSFRNTChmaWVsZCwgbmFtZSwgaWQpCiAqIEBwYXJhbSB7T2JqZWN0fSBmaWVsZAogKiBAcGFyYW0ge1N0cmluZ30gbmFtZQogKiBAcGFyYW0ge1N0cmluZ30gaWQKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmxhYmVsSFRNTCA9IGZ1bmN0aW9uIChmaWVsZCwgbmFtZSwgaWQpIHsKICAgIHJldHVybiAnPGxhYmVsIGZvcj0iJyArIGgoaWQgfHwgc2FuaXRpemUuaWQobmFtZSkpICsgJyI+JyArCiAgICAgICAgaChleHBvcnRzLmxhYmVsVGV4dChmaWVsZCwgbmFtZSwgaWQpKSArCiAgICAnPC9sYWJlbD4nOwp9OwoKLyoqCiAqIEdlbmVyYXRlcyBIVE1MIGZvciBmaWVsZCBkZXNjcmlwdGlvbnMgKGlmIGRlZmluZWQpLgogKgogKiBAbmFtZSBkZXNjcmlwdGlvbkhUTUwob2JqKQogKiBAcGFyYW0ge09iamVjdH0gb2JqCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5kZXNjcmlwdGlvbkhUTUwgPSBmdW5jdGlvbiAob2JqKSB7CiAgICBpZiAob2JqLmRlc2NyaXB0aW9uKSB7CiAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+JyArIGgob2JqLmRlc2NyaXB0aW9uKSArICc8L2Rpdj4nOwogICAgfQogICAgcmV0dXJuICcnOwp9OwoKLyoqCiAqIEdlbmVyYXRlcyBIVE1MIGZvciBmaWVsZCBoaW50cyAoaWYgZGVmaW5lZCkuCiAqCiAqIEBuYW1lIGhpbnRIVE1MKG9iaikKICogQHBhcmFtIHtPYmplY3R9IG9iagogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuaGludEhUTUwgPSBmdW5jdGlvbiAob2JqKSB7CiAgICBpZiAob2JqLmhpbnQpIHsKICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9ImhpbnQiPicgKyBoKG9iai5oaW50KSArICc8L2Rpdj4nOwogICAgfQogICAgcmV0dXJuICcnOwp9OwoKLyoqCiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZGVmYXVsdCBjbGFzcyBuYW1lcyBmb3IgYSBmaWVsZC4gVGhpcyBpbmNsdWRlcwogKiAncmVxdWlyZWQnIGZvciByZXF1aXJlZCBmaWVsZHMgYW5kICdlcnJvcicgZm9yIGZpZWxkcyBmYWlsaW5nIHZhbGlkYXRpb24uCiAqCiAqIEFsbCBmaWVsZHMgYXJlIGdpdmVuIGEgJ2ZpZWxkJyBjbGFzcy4KICoKICogQG5hbWUgY2xhc3NlcyhmaWVsZCwgZXJyb3JzKQogKiBAcGFyYW0ge09iamVjdH0gZmllbGQKICogQHBhcmFtIHtBcnJheX0gZXJyb3JzCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmNsYXNzZXMgPSBmdW5jdGlvbiAoZmllbGQsIGVycm9ycykgewogICAgdmFyIHIgPSBbJ2ZpZWxkJ107CiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5sZW5ndGgpIHsKICAgICAgICByLnB1c2goJ2Vycm9yJyk7CiAgICB9CiAgICBpZiAoZmllbGQucmVxdWlyZWQpIHsKICAgICAgICByLnB1c2goJ3JlcXVpcmVkJyk7CiAgICB9CiAgICByZXR1cm4gcjsKfTsKCi8qKgogKiBEZXRlcm1pbmVzIHRoZSBkZWZhdWx0IHJlbmRlcmVyIGNsYXNzLCB0byBiZSB1c2VkIGdsb2JhbGx5IGJ5IAogKiBpbnN0YW5jZXMgb2YgZm9ybXMuRm9ybSB0aGF0IGZhaWwgdG8gc3BlY2lmeSBhIHJlbmRlcmVyIGNsYXNzLgogKgogKiBAbmFtZSBkZWZhdWx0UmVuZGVyZXIoKQogKiBAcmV0dXJucyB7RnVuY3Rpb259CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5kZWZhdWx0UmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gZXhwb3J0cy50YWJsZTsKfTsKCi8qKgogKiBUaGUgZGVmYXVsdCB0YWJsZSByZW5kZXJlciBjbGFzcywgcGFzc2VkIHRvIHRoZSB0b0hUTUwgbWV0aG9kIG9mIGEKICogZm9ybS4gUmVuZGVycyBhIGZvcm0gdXNpbmcgYSBzaW5nbGUgdGFibGUsIHdpdGggPHRib2R5PiB0YWdzIHRvCiAqIHJlcHJlc2VudCBuZXN0ZWQgZmllbGQgZ3JvdXBzLiBUaGUgPHRib2R5PnMgYXJlIGxhYmVsbGVkIHdpdGgKICogc3BlY2lmaWMgQ1NTIGNsYXNzZXMsIGluY2x1ZGluZyBkZXB0aCBpbmZvcm1hdGlvbi4gU2VlIHN0eWxlLmNzcwogKiBmb3IgZGV0YWlscyBvbiBob3cgdG8gc3R5bGUgdGhpcyBvdXRwdXQuCiAqCiAqIEBuYW1lIHRhYmxlCiAqIEBjb25zdHJ1Y3RvcgogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMudGFibGUgPSBmdW5jdGlvbiAoKSB7CgogICAgLyoqCiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgcmVuZGVyZXI7IGluaXRpYWxpemVzIG9iamVjdC4gVGhlIHN0cmluZyByZXR1cm5lZAogICAgICogZnJvbSB0aGlzIGZ1bmN0aW9uIGlzIHByZXBlbmRlZCB0byB0aGUgZm9ybSdzIG1hcmt1cC4KICAgICAqCiAgICAgKiBAY29uc3RydWN0b3IKICAgICovCiAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKGVycnMpIHsKICAgICAgICB0aGlzLmRlcHRoID0gMDsKICAgICAgICB2YXIgaHRtbCA9ICc8dGFibGUgY2xhc3M9InJlbmRlci10YWJsZSI+JzsKICAgICAgICBpZiAoZXJycyAmJiBlcnJzLmxlbmd0aCkgewogICAgICAgICAgICBodG1sICs9ICc8dWwgY2xhc3M9ImZvcm0tZXJyb3JzIj4nOwogICAgICAgICAgICBfLmVhY2goZXJycywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxsaT4nICsgKGUubWVzc2FnZSB8fCBlLnRvU3RyaW5nKCkpICsgJzwvbGk+JzsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGh0bWwgKz0gJzwvdWw+JzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGh0bWw7CiAgICB9OwoKICAgIC8qKgogICAgICogQ2FsbGVkIGJ5IHRoZSBmb3JtcyBsYXllciB3aGVuIGl0IGVuY291bnRlcnMgYSBuZXcKICAgICAqIG5lc3RpbmcgY29udGV4dCAoaS5lLiBhIG5ldyBncm91cGluZyBvZiBmaWVsZHMpLiBUaGUKICAgICAqIHBhdGggcGFyYW1ldGVyIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCBkZXNjcmliZXMKICAgICAqIHRoZSBwYXRoIChpbiB0ZXJtcyBvZiBkb2N1bWVudCBrZXlzKSB0byB0aGUgbmV3IGdyb3VwLgogICAgICogV2hlbiBjb25jYXRlbmF0ZWQgdG9nZXRoZXIgd2l0aCBhIGRvdCwgdGhpcyBhcnJheSB5aWVsZHMKICAgICAqIHRoZSBuZXcgcHJlZml4IGZvciBuYW1lZCBIVE1MIGZvcm0gZmllbGRzLgogICAgICoKICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGgKICAgICovCiAgICB0aGlzLmJlZ2luR3JvdXAgPSBmdW5jdGlvbiAocGF0aCkgewogICAgICAgIHRoaXMuZGVwdGggKz0gMTsKICAgICAgICB2YXIgbmFtZSA9IF8ubGFzdChwYXRoKTsKICAgICAgICB2YXIgY3NzX2NsYXNzID0gJ2xldmVsLScgKyB0aGlzLmRlcHRoOwoKICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAnPHRib2R5IGNsYXNzPSJoZWFkICcgKyBoKGNzc19jbGFzcykgKyAnIj4nICsKICAgICAgICAgICAgJzx0cj4nICsKICAgICAgICAgICAgICAgICc8dGggY29sc3Bhbj0iMyI+JyArCiAgICAgICAgICAgICAgICAgICAgaChuYW1lLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zdWJzdHIoMSkucmVwbGFjZSgvXy9nLCAnICcpKSArCiAgICAgICAgICAgICAgICAnPC90aD4nICsKICAgICAgICAgICAgJzwvdHI+JyArCiAgICAgICAgICAgICc8L3Rib2R5PicgKwogICAgICAgICAgICAnPHRib2R5IGNsYXNzPSJncm91cCAnICsgaChjc3NfY2xhc3MpICsgJyI+JwogICAgICAgICk7CiAgICB9OwoKICAgIC8qKgogICAgICogQ2FsbGVkIGJ5IHRoZSBmb3JtcyBsYXllciB3aGVuIGl0IGVuY291bnRlcnMgdGhlIGVuZAogICAgICogb2YgYSBuZXN0aW5nIGNvbnRleHQuIEluIHRoZSBhYnNlbmNlIG9mIGVycm9ycywgdGhpcwogICAgICogZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byBiZSBjYWxsZWQgb25jZSBmb3IgZWFjaCB0aW1lCiAgICAgKiB0aGF0IGJlZ2luR3JvdXAgaXMgY2FsbGVkOyB0aGUgb3JkZXIgd2lsbCBiZSBuZXN0ZWQgYW5kCiAgICAgKiBwcm9wZXJseSBiYWxhbmNlZC4gVGhlIHBhdGggYXJndW1lbnQgaXMgdGhlIHNhbWUgYXMgaXQgd2FzCiAgICAgKiBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgYmVnaW5Hcm91cCBjYWxsOyBzZWUgYmVnaW5Hcm91cC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAgICAgKi8KICAgIHRoaXMuZW5kR3JvdXAgPSBmdW5jdGlvbiAocGF0aCkgewogICAgICAgIHRoaXMuZGVwdGggLT0gMTsKICAgICAgICByZXR1cm4gJzwvdGJvZHk+JzsKICAgIH07CgogICAgLyoqCiAgICAgKiBDYWxsZWQgYnkgdGhlIGZvcm1zIGxheWVyIHdoZW4gaXQgZW5jb3VudGVycyBhbnkgcmVndWxhcgogICAgICogZmllbGQgLS0gaS5lLiBvbmUgdGhhdCBpcyBuZWl0aGVyIGFuIGVtYmVkIG5vciBhbiBlbWJlZExpc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IGZpZWxkCiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSByYXcKICAgICAqIEBwYXJhbSB7QXJyYXl9IGVycm9ycwogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgd2lkZ2V0IG9wdGlvbnMsIHdoaWNoCiAgICAgKiAgICAgICAgICB3aWxsIHVsdGltYXRlbHkgYmUgcHJvdmlkZWQgdG8gZWFjaCB3aWRnZXQncyB0b0hUTUwgbWV0aG9kLgogICAgICovCiAgICB0aGlzLmZpZWxkID0gZnVuY3Rpb24gKGZpZWxkLCBwYXRoLCB2YWx1ZSwgcmF3LCBlcnJvcnMsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgbmFtZSA9IHBhdGguam9pbignLicpOwogICAgICAgIHZhciBpZCA9IChwYXRoLmpvaW4oJ18nKSArICdfZmllbGQnKTsKICAgICAgICB2YXIgY2FwdGlvbiA9IHBhdGguc2xpY2UodGhpcy5kZXB0aCkuam9pbignICcpOwoKICAgICAgICBldmVudHMub25jZSgncmVuZGVyRmluaXNoJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoZmllbGQud2lkZ2V0LmNsaWVudEluaXQpIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGZpZWxkLndpZGdldC5jbGllbnRJbml0KAogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCwgcGF0aCwgdmFsdWUsIHJhdywgZXJyb3JzLCAob3B0aW9ucyB8fCB7fSkKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKGZpZWxkLndpZGdldC50eXBlID09PSAnaGlkZGVuJykgewogICAgICAgICAgICByZXR1cm4gZmllbGQud2lkZ2V0LnRvSFRNTCgKICAgICAgICAgICAgICAgIG5hbWUsIHZhbHVlLCByYXcsIGZpZWxkLCAob3B0aW9ucyB8fCB7fSkKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIHZhciBydiA9ICgKICAgICAgICAgICAgJzx0ciBpZD0iJyArIGlkICsgJyIgY2xhc3M9IicgKwogICAgICAgICAgICAgICAgZXhwb3J0cy5jbGFzc2VzKGZpZWxkLCBlcnJvcnMpLmpvaW4oJyAnKSArICciPicgKwogICAgICAgICAgICAgICAgJzx0aD4nICsKICAgICAgICAgICAgICAgICAgICBleHBvcnRzLmxhYmVsSFRNTChmaWVsZCwgY2FwdGlvbikgKwogICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuZGVzY3JpcHRpb25IVE1MKGZpZWxkKSArCiAgICAgICAgICAgICAgICAnPC90aD4nICsKICAgICAgICAgICAgICAgICc8dGQ+JyArCiAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5lcnJvckhUTUwoZXJyb3JzKSArCiAgICAgICAgICAgICAgICAgICAgZmllbGQud2lkZ2V0LnRvSFRNTCgKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIChvcHRpb25zIHx8IHt9KQogICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuaGludEhUTUwoZmllbGQpICsKICAgICAgICAgICAgICAgICc8L3RkPicgKwogICAgICAgICAgICAnPC90cj4nCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gcnY7CiAgICB9OwoKICAgIC8qKgogICAgICogQ2FsbGVkIGJ5IHRoZSBmb3JtcyBsYXllciB3aGVuIGl0IGlzIGZpbmlzaGVkIHJlbmRlcmluZyBhIGZvcm0uCiAgICAgKiBNYXJrdXAgcmV0dXJuZWQgZnJvbSB0aGlzIGZ1bmN0aW9uIGlzIGFwcGVuZGVkIHRvIHRoZSBmb3JtIG91dHB1dC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmllbGQKICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGgKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZQogICAgICogQHBhcmFtIHtTdHJpbmd9IHJhdwogICAgICogQHBhcmFtIHtBcnJheX0gZXJyb3JzCiAgICAqLwogICAgdGhpcy5lbmQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuICc8L3RhYmxlPic7CiAgICB9OwoKfTsKCi8qKgogKiAgUmVuZGVycyBhIGZvcm0gdXNpbmcgYSBzZXJpZXMgb2YgcHJvcGVybHktbmVzdGVkIDxkaXY+IHRhZ3MuCiAqICBUaGVzZSA8ZGl2PnMgYXJlIGxhYmVsbGVkIHdpdGggc3BlY2lmaWMgQ1NTIGNsYXNzZXMsIHNvbWUgb2Ygd2hpY2gKICogIHByb3ZpZGUgZGVwdGggaW5mb3JtYXRpb24gKHdpdGggdGhlIGFpbSBvZiBzaW1wbGlmeWluZyBDU1MgcnVsZXMpLgogKiAgU2VlIHN0eWxlLmNzcyBmb3IgZGV0YWlscyBvbiBob3cgdG8gc3R5bGUgdGhpcyBvdXRwdXQuCiAqLwpleHBvcnRzLmRpdiA9IGZ1bmN0aW9uICgpIHsKICAgIC8qKgogICAgICogQ29uc3RydWN0b3IgZm9yIHJlbmRlcmVyOyBpbml0aWFsaXplcyBvYmplY3QuIFRoZSBzdHJpbmcgcmV0dXJuZWQKICAgICAqIGZyb20gdGhpcyBmdW5jdGlvbiBpcyBwcmVwZW5kZWQgdG8gdGhlIGZvcm0ncyBtYXJrdXAuCiAgICAgKgogICAgICogQGNvbnN0cnVjdG9yCiAgICAqLwogICAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uIChlcnJzKSB7CiAgICAgICAgdGhpcy5kZXB0aCA9IDA7CiAgICAgICAgdmFyIGh0bWwgPSAnPGRpdiBjbGFzcz0icmVuZGVyLWRpdiI+JzsKICAgICAgICBpZiAoZXJycyAmJiBlcnJzLmxlbmd0aCkgewogICAgICAgICAgICBodG1sICs9ICc8dWwgY2xhc3M9ImVycm9ycyI+JzsKICAgICAgICAgICAgXy5lYWNoKGVycnMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBodG1sICs9ICc8bGk+JyArIChlLm1lc3NhZ2UgfHwgZS50b1N0cmluZygpKSArICc8L2xpPic7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBodG1sICs9ICc8L3VsPic7CiAgICAgICAgfQogICAgICAgIHJldHVybiBodG1sOwogICAgfTsKCiAgICAvKioKICAgICAqIENhbGxlZCBieSB0aGUgZm9ybXMgbGF5ZXIgd2hlbiBpdCBlbmNvdW50ZXJzIGEgbmV3CiAgICAgKiBuZXN0aW5nIGNvbnRleHQgKGkuZS4gYSBuZXcgZ3JvdXBpbmcgb2YgZmllbGRzKS4gVGhlCiAgICAgKiBwYXRoIHBhcmFtZXRlciBpcyBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgZGVzY3JpYmVzCiAgICAgKiB0aGUgcGF0aCAoaW4gdGVybXMgb2YgZG9jdW1lbnQga2V5cykgdG8gdGhlIG5ldyBncm91cC4KICAgICAqIFdoZW4gY29uY2F0ZW5hdGVkIHRvZ2V0aGVyIHdpdGggYSBkb3QsIHRoaXMgYXJyYXkgeWllbGRzCiAgICAgKiB0aGUgbmV3IHByZWZpeCBmb3IgbmFtZWQgSFRNTCBmb3JtIGZpZWxkcy4KICAgICAqCiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAgICAqLwogICAgdGhpcy5iZWdpbkdyb3VwID0gZnVuY3Rpb24gKHBhdGgpIHsKICAgICAgICB0aGlzLmRlcHRoICs9IDE7CiAgICAgICAgdmFyIG5hbWUgPSBfLmxhc3QocGF0aCk7CiAgICAgICAgdmFyIGNzc19jbGFzcyA9ICdsZXZlbC0nICsgdGhpcy5kZXB0aDsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAnPGRpdiBjbGFzcz0iZ3JvdXAgJyArIGgoY3NzX2NsYXNzKSArICciPicgKwogICAgICAgICAgICAnPGRpdiBjbGFzcz0iaGVhZGluZyI+JyArCiAgICAgICAgICAgICAgICBoKG5hbWUuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKwogICAgICAgICAgICAgICAgICAgIG5hbWUuc3Vic3RyKDEpLnJlcGxhY2UoL18vZywgJyAnKSkgKwogICAgICAgICAgICAnPC9kaXY+JwogICAgICAgICk7CiAgICB9OwoKICAgIC8qKgogICAgICogQ2FsbGVkIGJ5IHRoZSBmb3JtcyBsYXllciB3aGVuIGl0IGVuY291bnRlcnMgdGhlIGVuZAogICAgICogb2YgYSBuZXN0aW5nIGNvbnRleHQuIEluIHRoZSBhYnNlbmNlIG9mIGVycm9ycywgdGhpcwogICAgICogZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byBiZSBjYWxsZWQgb25jZSBmb3IgZWFjaCB0aW1lCiAgICAgKiB0aGF0IGJlZ2luR3JvdXAgaXMgY2FsbGVkOyB0aGUgb3JkZXIgd2lsbCBiZSBuZXN0ZWQgYW5kCiAgICAgKiBwcm9wZXJseSBiYWxhbmNlZC4gVGhlIHBhdGggYXJndW1lbnQgaXMgdGhlIHNhbWUgYXMgaXQgd2FzCiAgICAgKiBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgYmVnaW5Hcm91cCBjYWxsOyBzZWUgYmVnaW5Hcm91cC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAgICAqLwogICAgdGhpcy5lbmRHcm91cCA9IGZ1bmN0aW9uIChwYXRoKSB7CiAgICAgICAgdGhpcy5kZXB0aCAtPSAxOwogICAgICAgIHJldHVybiAnPC9kaXY+JzsKICAgIH07CgogICAgLyoqCiAgICAgKiBDYWxsZWQgYnkgdGhlIGZvcm1zIGxheWVyIHdoZW4gaXQgZW5jb3VudGVycyBhbnkgcmVndWxhcgogICAgICogZmllbGQgLS0gaS5lLiBvbmUgdGhhdCBpcyBuZWl0aGVyIGFuIGVtYmVkIG5vciBhbiBlbWJlZExpc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IGZpZWxkCiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSByYXcKICAgICAqIEBwYXJhbSB7QXJyYXl9IGVycm9ycwogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgd2lkZ2V0IG9wdGlvbnMsIHdoaWNoCiAgICAgKiAgICAgICAgICB3aWxsIHVsdGltYXRlbHkgYmUgcHJvdmlkZWQgdG8gZWFjaCB3aWRnZXQncyB0b0hUTUwgbWV0aG9kLgogICAgKi8KICAgIHRoaXMuZmllbGQgPSBmdW5jdGlvbiAoZmllbGQsIHBhdGgsIHZhbHVlLCByYXcsIGVycm9ycywgb3B0aW9ucykgewogICAgICAgIHZhciBuYW1lID0gcGF0aC5qb2luKCcuJyk7CiAgICAgICAgdmFyIGNhcHRpb24gPSBwYXRoLnNsaWNlKHRoaXMuZGVwdGgpLmpvaW4oJyAnKTsKICAgICAgICBpZiAoZmllbGQud2lkZ2V0LnR5cGUgPT09ICdoaWRkZW4nKSB7CiAgICAgICAgICAgIHJldHVybiBmaWVsZC53aWRnZXQudG9IVE1MKAogICAgICAgICAgICAgICAgbmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIChvcHRpb25zIHx8IHt9KQogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAnPGRpdiBjbGFzcz0iJyArCiAgICAgICAgICAgICAgICBleHBvcnRzLmNsYXNzZXMoZmllbGQsIGVycm9ycykuam9pbignICcpICsgJyI+JyArCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJzY2FsYXIiPicgKwogICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImxhYmVsIj4nICsKICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj0iJyArIGgobmFtZSkgKyAnIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5sYWJlbEhUTUwoZmllbGQsIGNhcHRpb24pICsKICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5kZXNjcmlwdGlvbkhUTUwoZmllbGQpICsKICAgICAgICAgICAgICAgICAgICAnPC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJjb250ZW50Ij4nICsKICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iaW5uZXIiPicgKwogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC53aWRnZXQudG9IVE1MKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIChvcHRpb25zIHx8IHt9KQogICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImhpbnQiPicgKwogICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRzLmhpbnRIVE1MKGZpZWxkKSArCiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJlcnJvcnMiPicgKwogICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRzLmVycm9ySFRNTChlcnJvcnMpICsKICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICApOwogICAgfTsKCiAgICAvKioKICAgICAqIENhbGxlZCBieSB0aGUgZm9ybXMgbGF5ZXIgd2hlbiBpdCBpcyBmaW5pc2hlZCByZW5kZXJpbmcgYSBmb3JtLgogICAgICogTWFya3VwIHJldHVybmVkIGZyb20gdGhpcyBmdW5jdGlvbiBpcyBhcHBlbmRlZCB0byB0aGUgZm9ybSBvdXRwdXQuCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkCiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSByYXcKICAgICAqIEBwYXJhbSB7QXJyYXl9IGVycm9ycwogICAgKi8KICAgIHRoaXMuZW5kID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiAnPC9kaXY+JzsKICAgIH07Cn07CgoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL2ZpZWxkcyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL2ZpZWxkcyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogVGhlIGJ1aWxkaW5nIGJsb2NrcyBvZiBUeXBlcyBhbmQgRm9ybXMsIEZpZWxkcyBoZWxwIHRvIHZhbGlkYXRlIGFuZCBhdXRob3JpemUKICogY2hhbmdlcyB0byBkb2N1ZW1udCB2YWx1ZXMuCiAqCiAqIEBtb2R1bGUKICovCgoKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgcGVybWlzc2lvbnMgPSByZXF1aXJlKCcuL3Blcm1pc3Npb25zJyksCiAgICB2YWxpZGF0b3JzID0gcmVxdWlyZSgnLi92YWxpZGF0b3JzJyksCiAgICB3aWRnZXRzID0gcmVxdWlyZSgnLi93aWRnZXRzJyksCiAgICB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKSwKICAgIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fOwoKCi8qKgogKiBGaWVsZCBvYmplY3RzIGFyZSB1c2VkIHdoZW4gY29uc3RydWN0aW5nIGNvbnRlbnQgdHlwZXMgYW5kIGZvcm1zLgogKgogKiAjIyMjIE9wdGlvbnMgIyMjIwogKgogKiAqICoqb21pdF9lbXB0eSoqICAqQm9vbGVhbiogLSB3aGV0aGVyIHRvIG9taXQgdGhlIGZpZWxkIGZyb20gYSBkb2N1bWVudCB3aGVuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmaWVsZCBpcyBlbXB0eQogKiAqICoqcGVybWlzc2lvbnMqKiAqT2JqZWN0KiAgLSBhIHBlcm1pc3Npb25zIGNoZWNrIGZ1bmN0aW9uIG9yIGFuIG9iamVjdAogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluaW5nIHNlcGFyYXRlIGZ1bmN0aW9ucyB0byBydW4gb24gY3JlYXRlLAogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0IGFuZCB1cGRhdGUgb3BlcmF0aW9ucy4KICogKiAqKnZhbGlkYXRvcnMqKiAgKkFycmF5KiAgIC0gYW4gYXJyYXkgb2YgdmFsaWRhdGlvbiBmdW5jdGlvbnMgKGRlZmF1bHQ6IFtdKQogKiAqICoqcmVxdWlyZWQqKiAgICAqQm9vbGVhbiogLSB3aGV0aGVyIHRoZSBmaWVsZCBpcyByZXF1aXJlZCAoZGVmYXVsdDogdHJ1ZSkKICoKICogQGNvbnN0cnVjdG9yCiAqIEBuYW1lIEZpZWxkCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAqIEBhcGkgcHVibGljCiAqLwoKdmFyIEZpZWxkID0gZXhwb3J0cy5GaWVsZCA9IGZ1bmN0aW9uIEZpZWxkKG9wdGlvbnMpIHsKICAgIF8uZXh0ZW5kKHRoaXMsIF8uZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwgewogICAgICAgIHdpZGdldDogd2lkZ2V0cy50ZXh0KCksCiAgICAgICAgb21pdF9lbXB0eTogZmFsc2UsCiAgICAgICAgcGVybWlzc2lvbnM6IHt9LAogICAgICAgIHZhbGlkYXRvcnM6IFtdLAogICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9KSk7CiAgICByZXR1cm4gdGhpczsKfTsKCgovKioKICogUGFyc2VzIGEgcmF3IHZhbHVlIHJldHVybmluZyB0aGUgY29ycmVjdCBKYXZhU2NyaXB0IHR5cGUgZm9yIHRoaXMgZmllbGQuCiAqIFRoaXMgd2lsbCB1c3VhbGx5IGJlIG92ZXJyaWRkZW4gYnkgb3RoZXIgZmllbGQgdHlwZXMuCiAqCiAqIEBuYW1lIEZpZWxkLnBhcnNlKHJhdykKICogQHBhcmFtIHJhdwogKiBAYXBpIHB1YmxpYwogKi8KCkZpZWxkLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChyYXcpIHsKICAgIHJldHVybiByYXc7Cn07CgoKLyoqCiAqIFRlc3QgdmFsdWVzIHRvIHNlZSBpZiBmaWVsZCBpcyBjb25zaWRlcmVkIGVtcHR5LgogKgogKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgdGhlIHJhdyB2YWx1ZSBldmVuIHRob3VnaCBieSBkZWZhdWx0IGl0IG9ubHkKICogY2hlY2tzIHRoZSBwYXJzZWQgdmFsdWUsIHNvIHRoYXQgb3RoZXIgZmllbGQgdHlwZXMgb3ZlcnJpZGRpbmcgdGhpcyBtZXRob2QKICogaGF2ZSB0aGUgcmF3IGRhdGEgYXZhaWxhYmxlLgogKgogKiBAbmFtZSBGaWVsZC5pc0VtcHR5KHZhbHVlLCByYXcpCiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBwYXJzZWQgdmFsdWUgZm9yIHRoZSBmaWVsZAogKiBAcGFyYW0gcmF3IC0gdGhlIHJhdyB2YWx1ZSBmb3IgdGhpcyBmaWVsZAogKiBAcmV0dXJucyB7Qm9vbGVhbn0KICogQGFwaSBwdWJsaWMKICovCgpGaWVsZC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICh2YWx1ZSwgcmF3KSB7CiAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWx1ZSkpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJhdyA9IHZhbHVlOwogICAgfQogICAgcmV0dXJuIChyYXcgPT09ICcnIHx8IHJhdyA9PT0gbnVsbCB8fCByYXcgPT09IHVuZGVmaW5lZCk7Cn07CgovKioKICogUnVuIHRoZSBmaWVsZCdzIHZhbGlkYXRpb24gZnVuY3Rpb25zIGFnYWluc3QgYSB2YWx1ZS4gUmV0dXJucyBhbgogKiBhcnJheSBvZiB2YWxpZGF0aW9uIGVycm9ycywgb3IgYW4gZW1wdHkgYXJyYXkgaWYgdmFsaWQuCiAqCiAqIEBuYW1lIEZpZWxkLnZhbGlkYXRlKGRvYywgdmFsdWUsIHJhdykKICogQHBhcmFtIHtPYmplY3R9IGRvYwogKiBAcGFyYW0gdmFsdWUKICogQHBhcmFtIHJhdwogKiBAcmV0dXJucyB7QXJyYXl9CiAqIEBhcGkgcHVibGljCiAqLwoKRmllbGQucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKGRvYywgdmFsdWUsIHJhdykgewogICAgLy8gZG9uJ3QgdmFsaWRhdGUgZW1wdHkgZmllbGRzLCBidXQgY2hlY2sgaWYgcmVxdWlyZWQKICAgIGlmICh0aGlzLmlzRW1wdHkodmFsdWUsIHJhdykpIHsKICAgICAgICBpZiAodGhpcy5yZXF1aXJlZCkgewogICAgICAgICAgICByZXR1cm4gWyBuZXcgRXJyb3IoJ1JlcXVpcmVkIGZpZWxkJykgXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFtdOwogICAgfQogICAgcmV0dXJuIF8ucmVkdWNlKHRoaXMudmFsaWRhdG9ycywgZnVuY3Rpb24gKGVycnMsIHYpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBjaGVjayB0aGF0IHYgaXMgYWN0dWFsbHkgYSBmdW5jdGlvbiwgc2luY2UgSUUgbGlrZXMgdG8KICAgICAgICAgICAgLy8gaW5zZXJ0IG51bGxzIGhlcmUgZm9yIHNvbWUgcmVhc29uCiAgICAgICAgICAgIGlmICh2KSB7CiAgICAgICAgICAgICAgICBlcnJzID0gZXJycy5jb25jYXQodihkb2MsIHZhbHVlLCByYXcpIHx8IFtdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICBlcnJzLnB1c2goZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBlcnJzOwogICAgfSwgW10pOwp9OwoKLyoqCiAqIENoZWNrIHJlbGV2YW50IGZpZWxkIHBlcm1pc3Npb25zIHRvIHNlZSBpZiB1c2VyIGlzIGF1dGhvcmlzZWQgdG8gbWFrZQogKiBjaGFuZ2VzLiBSZXR1cm5zIGFuIGFycmF5IG9mIHBlcm1pc3Npb25zIGVycm9ycywgb3IgYW4gZW1wdHkgYXJyYXkgaWYgdGhlCiAqIGNoYW5nZXMgYXJlIHBlcm1pc3NpYmxlLgogKgogKiBAbmFtZSBGaWVsZC5hdXRob3JpemUobmV3RG9jLCBvbGREb2MsIG5ld1ZhbCwgb2xkVmFsLCB1c2VyQ3R4KQogKiBAcGFyYW0ge09iamVjdH0gbmV3RG9jCiAqIEBwYXJhbSB7T2JqZWN0fSBvbGREb2MKICogQHBhcmFtIG5ld1ZhbAogKiBAcGFyYW0gb2xkVmFsCiAqIEBwYXJhbSB7T2JqZWN0fSB1c2VyQ3R4CiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpGaWVsZC5wcm90b3R5cGUuYXV0aG9yaXplID0gZnVuY3Rpb24gKG5ld0RvYywgb2xkRG9jLCBuZXdWYWwsIG9sZFZhbCwgdXNlckN0eCkgewogICAgdmFyIHBlcm1zID0gdGhpcy5wZXJtaXNzaW9uczsKICAgIHZhciBlcnJvcnMgPSBbXTsKICAgIGlmIChfLmlzRnVuY3Rpb24ocGVybXMpKSB7CiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCgKICAgICAgICAgICAgdXRpbHMuZ2V0RXJyb3JzKHBlcm1zLCBhcmd1bWVudHMpCiAgICAgICAgKTsKICAgIH0KICAgIC8vIG9uIHVwZGF0ZQogICAgdmFyIGZuOwogICAgLy8gb24gYWRkCiAgICBpZiAobmV3RG9jICYmICFvbGREb2MpIHsKICAgICAgICBmbiA9IHBlcm1zLmFkZDsKICAgIH0KICAgIC8vIG9uIHJlbW92ZQogICAgZWxzZSBpZiAoIW5ld0RvYyB8fCBuZXdEb2MuX2RlbGV0ZWQpIHsKICAgICAgICBmbiA9IHBlcm1zLnJlbW92ZTsKICAgIH0KICAgIC8vIG9uIHVwZGF0ZQogICAgZWxzZSBpZiAobmV3VmFsICE9PSBvbGRWYWwpIHsKICAgICAgICBmbiA9IHBlcm1zLnVwZGF0ZTsKICAgIH0KICAgIGlmIChmbikgewogICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoCiAgICAgICAgICAgIHV0aWxzLmdldEVycm9ycyhmbiwgYXJndW1lbnRzKQogICAgICAgICk7CiAgICB9CiAgICByZXR1cm4gZXJyb3JzOwp9OwoKCi8qKgogKiBFbWJlZGRlZCBvYmplY3RzIHJlcHJlc2VudCBhIFR5cGUgZW1iZWRkZWQgd2l0aGluIGFub3RoZXIgVHlwZSBvciBzZXQgb2YKICogRmllbGRzLiBJdHMgbm90IGEgdHJ1ZSBmaWVsZCwgYnV0IGxpa2UgdGhlIEZpZWxkIGNvbnN0cnVjdG9yIGl0IGFjdHMgYXMgYQogKiBtYXJrZXIgd2hlbiB3YWxraW5nIHRocm91Z2ggdGhlIHN1Yi1vYmplY3RzIHRoYXQgbWFrZSB1cCBhIHNjaGVtYS4KICoKICogRXhwb3NlcyB0aGUgc2FtZSBtZXRob2RzIGFzIEZpZWxkIG9iamVjdHMuCiAqCiAqICMjIyMgT3B0aW9ucyAjIyMjCiAqCiAqICogKip0eXBlKiogICAgICAgICpUeXBlIE9iamVjdCogIC0gUmVxdWlyZWQsIHRoZSBUeXBlIGRlZmluaXRpb24gdG8gZW1iZWQKICogKiAqKm9taXRfZW1wdHkqKiAgKkJvb2xlYW4qIC0gd2hldGhlciB0byBvbWl0IHRoZSBmaWVsZCBmcm9tIGEgZG9jdW1lbnQgd2hlbgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmllbGQgaXMgZW1wdHkKICogKiAqKnBlcm1pc3Npb25zKiogKk9iamVjdCogIC0gYSBwZXJtaXNzaW9ucyBjaGVjayBmdW5jdGlvbiBvciBhbiBvYmplY3QKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmluZyBzZXBhcmF0ZSBmdW5jdGlvbnMgdG8gcnVuIG9uIGNyZWF0ZSwKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdCBhbmQgdXBkYXRlIG9wZXJhdGlvbnMuCiAqICogKip2YWxpZGF0b3JzKiogICpBcnJheSogICAtIGFuIGFycmF5IG9mIHZhbGlkYXRpb24gZnVuY3Rpb25zIChkZWZhdWx0OiBbXSkKICogKiAqKnJlcXVpcmVkKiogICAgKkJvb2xlYW4qIC0gd2hldGhlciB0aGUgZmllbGQgaXMgcmVxdWlyZWQgKGRlZmF1bHQ6IHRydWUpCiAqCiAqIEBuYW1lIEVtYmVkZGVkCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAqIEBjb25zdHJ1Y3RvcgogKiBAYXBpIHB1YmxpYwogKi8KCnZhciBFbWJlZGRlZCA9IGV4cG9ydHMuRW1iZWRkZWQgPSBmdW5jdGlvbiBFbWJlZGRlZChvcHRpb25zKSB7CiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgIHZhciB0eXBlID0gb3B0aW9ucy50eXBlOwogICAgaWYgKCF0eXBlKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0eXBlIHNwZWNpZmllZCcpOwogICAgfQogICAgb3B0aW9ucy5wZXJtaXNzaW9ucyA9IF8uZGVmYXVsdHMoKG9wdGlvbnMucGVybWlzc2lvbnMgfHwge30pLCB7CiAgICAgICAgYWRkOiBwZXJtaXNzaW9ucy5pbmhlcml0KHR5cGUpLAogICAgICAgIHJlbW92ZTogcGVybWlzc2lvbnMuaW5oZXJpdCh0eXBlKSwKICAgICAgICB1cGRhdGU6ICAgcGVybWlzc2lvbnMuaW5oZXJpdCh0eXBlKQogICAgfSk7CiAgICBfLmV4dGVuZCh0aGlzLCBfLmRlZmF1bHRzKG9wdGlvbnMsIHsKICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSkpOwogICAgdGhpcy50eXBlID0gdHlwZTsKfTsKCi8qKgogKiBUZXN0IHZhbHVlcyB0byBzZWUgaWYgZmllbGQgaXMgY29uc2lkZXJlZCBlbXB0eS4KICoKICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIHRoZSByYXcgdmFsdWUgZXZlbiB0aG91Z2ggYnkgZGVmYXVsdCBpdCBvbmx5CiAqIGNoZWNrcyB0aGUgcGFyc2VkIHZhbHVlLCBzbyB0aGF0IG90aGVyIGZpZWxkIHR5cGVzIG92ZXJyaWRkaW5nIHRoaXMgbWV0aG9kCiAqIGhhdmUgdGhlIHJhdyBkYXRhIGF2YWlsYWJsZS4KICoKICogQG5hbWUgRW1iZWRkZWQuaXNFbXB0eSh2YWx1ZSwgcmF3KQogKiBAcGFyYW0gdmFsdWUgLSB0aGUgcGFyc2VkIHZhbHVlIGZvciB0aGUgZmllbGQKICogQHBhcmFtIHJhdyAtIHRoZSByYXcgdmFsdWUgZm9yIHRoaXMgZmllbGQKICogQGFwaSBwdWJsaWMKICovCgpFbWJlZGRlZC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICh2YWx1ZSwgcmF3KSB7CiAgICByZXR1cm4gKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKTsKfTsKCi8qKgogKiBSdW4gdGhlIHR5cGUncyB2YWxpZGF0ZSBmdW5jdGlvbiBhZ2FpbnN0IGEgdmFsdWUuIFJldHVybnMgYW4KICogYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnMsIG9yIGFuIGVtcHR5IGFycmF5IGlmIHZhbGlkLgogKgogKiBAbmFtZSBFbWJlZGRlZC52YWxpZGF0ZShkb2MsIHZhbHVlLCByYXcpCiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MKICogQHBhcmFtIHZhbHVlCiAqIEBwYXJhbSByYXcKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KCkVtYmVkZGVkLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChkb2MsIHZhbHVlLCByYXcpIHsKICAgIC8vIGRvbid0IHZhbGlkYXRlIGVtcHR5IGZpZWxkcywgYnV0IGNoZWNrIGlmIHJlcXVpcmVkCiAgICBpZiAodGhpcy5pc0VtcHR5KHZhbHVlLCByYXcpKSB7CiAgICAgICAgaWYgKHRoaXMucmVxdWlyZWQpIHsKICAgICAgICAgICAgcmV0dXJuIFsgbmV3IEVycm9yKCdSZXF1aXJlZCBmaWVsZCcpIF07CiAgICAgICAgfQogICAgICAgIHJldHVybiBbXTsKICAgIH0KICAgIGlmICghdmFsdWUuX2lkKSB7CiAgICAgICAgcmV0dXJuIFtuZXcgRXJyb3IoJ0VtYmVkZGVkIGRvY3VtZW50IG1pc3NpbmcgX2lkJyldOwogICAgfQogICAgcmV0dXJuIHRoaXMudHlwZS52YWxpZGF0ZSh2YWx1ZSwgcmF3KTsKfTsKCi8qKgogKiBDaGVjayByZWxldmFudCB0eXBlIHBlcm1pc3Npb25zIHRvIHNlZSBpZiB1c2VyIGlzIGF1dGhvcmlzZWQgdG8gbWFrZQogKiBjaGFuZ2VzLiBSZXR1cm5zIGFuIGFycmF5IG9mIHBlcm1pc3Npb25zIGVycm9ycywgb3IgYW4gZW1wdHkgYXJyYXkgaWYgdGhlCiAqIGNoYW5nZXMgYXJlIHBlcm1pc3NpYmxlLgogKgogKiBAbmFtZSBFbWJlZGRlZC5hdXRob3JpemUobmV3RG9jLCBvbGREb2MsIG5ld1ZhbCwgb2xkVmFsLCB1c2VyKQogKiBAcGFyYW0ge09iamVjdH0gbmV3RG9jCiAqIEBwYXJhbSB7T2JqZWN0fSBvbGREb2MKICogQHBhcmFtIG5ld1ZhbAogKiBAcGFyYW0gb2xkVmFsCiAqIEBwYXJhbSB7T2JqZWN0fSB1c2VyCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpFbWJlZGRlZC5wcm90b3R5cGUuYXV0aG9yaXplID0gZnVuY3Rpb24gKG5ld0RvYywgb2xkRG9jLCBuZXdWYWwsIG9sZFZhbCwgdXNlcikgewogICAgaWYgKG5ld1ZhbCAmJiBvbGRWYWwgJiYgbmV3VmFsLl9pZCAhPT0gb2xkVmFsLl9pZCkgewogICAgICAgIG9sZFZhbCA9IHVuZGVmaW5lZDsKICAgIH0KICAgIHJldHVybiB0aGlzLnR5cGUuYXV0aG9yaXplKG5ld1ZhbCB8fCB7X2RlbGV0ZWQ6IHRydWV9LCBvbGRWYWwsIHVzZXIpOwp9OwoKLyoqCiAqIEVtYmVkZGVkTGlzdCBvYmplY3RzIHJlcHJlc2VudCBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgYSBUeXBlIGVtYmVkZGVkIHdpdGhpbgogKiBhbm90aGVyIFR5cGUgb3Igc2V0IG9mIEZpZWxkcy4gSXRzIG5vdCBhIHRydWUgZmllbGQsIGJ1dCBsaWtlIHRoZSBGaWVsZAogKiBjb25zdHJ1Y3RvciBpdCBhY3RzIGFzIGEgbWFya2VyIHdoZW4gd2Fsa2luZyB0aHJvdWdoIHRoZSBzdWItb2JqZWN0cyB0aGF0CiAqIG1ha2UgdXAgYSBzY2hlbWEuCiAqCiAqIEV4cG9zZXMgdGhlIHNhbWUgbWV0aG9kcyBhcyBGaWVsZCBvYmplY3RzLgogKgogKiAjIyMjIE9wdGlvbnMgIyMjIwogKgogKiAqICoqdHlwZSoqICAgICAgICAqVHlwZSBPYmplY3QqICAtIFJlcXVpcmVkLCB0aGUgVHlwZSBkZWZpbml0aW9uIHRvIGVtYmVkCiAqICogKipvbWl0X2VtcHR5KiogICpCb29sZWFuKiAtIHdoZXRoZXIgdG8gb21pdCB0aGUgZmllbGQgZnJvbSBhIGRvY3VtZW50IHdoZW4KICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGZpZWxkIGlzIGVtcHR5CiAqICogKipwZXJtaXNzaW9ucyoqICpPYmplY3QqICAtIGEgcGVybWlzc2lvbnMgY2hlY2sgZnVuY3Rpb24gb3IgYW4gb2JqZWN0CiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5pbmcgc2VwYXJhdGUgZnVuY3Rpb25zIHRvIHJ1biBvbiBjcmVhdGUsCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXQgYW5kIHVwZGF0ZSBvcGVyYXRpb25zLgogKiAqICoqdmFsaWRhdG9ycyoqICAqQXJyYXkqICAgLSBhbiBhcnJheSBvZiB2YWxpZGF0aW9uIGZ1bmN0aW9ucyAoZGVmYXVsdDogW10pCiAqICogKipyZXF1aXJlZCoqICAgICpCb29sZWFuKiAtIHdoZXRoZXIgdGhlIGZpZWxkIGlzIHJlcXVpcmVkIChkZWZhdWx0OiB0cnVlKQogKgogKiBAbmFtZSBFbWJlZGRlZExpc3QKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICogQGNvbnN0cnVjdG9yCiAqIEBhcGkgcHVibGljCiAqLwoKdmFyIEVtYmVkZGVkTGlzdCA9IGV4cG9ydHMuRW1iZWRkZWRMaXN0ID0gZnVuY3Rpb24gRW1iZWRkZWRMaXN0KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGU7CiAgICBpZiAoIXR5cGUpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHR5cGUgc3BlY2lmaWVkJyk7CiAgICB9CiAgICBvcHRpb25zLnBlcm1pc3Npb25zID0gXy5kZWZhdWx0cygob3B0aW9ucy5wZXJtaXNzaW9ucyB8fCB7fSksIHsKICAgICAgICBhZGQ6IHBlcm1pc3Npb25zLmluaGVyaXQodHlwZSksCiAgICAgICAgcmVtb3ZlOiBwZXJtaXNzaW9ucy5pbmhlcml0KHR5cGUpLAogICAgICAgIHVwZGF0ZTogICBwZXJtaXNzaW9ucy5pbmhlcml0KHR5cGUpCiAgICB9KTsKICAgIF8uZXh0ZW5kKHRoaXMsIF8uZGVmYXVsdHMob3B0aW9ucywgewogICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9KSk7CiAgICB0aGlzLnR5cGUgPSB0eXBlOwp9OwoKLyoqCiAqIFRlc3QgdmFsdWVzIHRvIHNlZSBpZiBmaWVsZCBpcyBjb25zaWRlcmVkIGVtcHR5LgogKgogKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgdGhlIHJhdyB2YWx1ZSBldmVuIHRob3VnaCBieSBkZWZhdWx0IGl0IG9ubHkKICogY2hlY2tzIHRoZSBwYXJzZWQgdmFsdWUsIHNvIHRoYXQgb3RoZXIgZmllbGQgdHlwZXMgb3ZlcnJpZGRpbmcgdGhpcyBtZXRob2QKICogaGF2ZSB0aGUgcmF3IGRhdGEgYXZhaWxhYmxlLgogKgogKiBAbmFtZSBFbWJlZGRlZExpc3QuaXNFbXB0eSh2YWx1ZSwgcmF3KQogKiBAcGFyYW0gdmFsdWUgLSB0aGUgcGFyc2VkIHZhbHVlIGZvciB0aGUgZmllbGQKICogQHBhcmFtIHJhdyAtIHRoZSByYXcgdmFsdWUgZm9yIHRoaXMgZmllbGQKICogQGFwaSBwdWJsaWMKICovCgpFbWJlZGRlZExpc3QucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAodmFsdWUsIHJhdykgewogICAgcmV0dXJuICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCk7Cn07CgovKioKICogRGV0ZWN0cyBlbWJlZGRlZCBkb2N1bWVudHMgd2l0aCBtaXNzaW5nIF9pZCBwcm9wZXJ0aWVzIGFuZCByZXR1cm5zIGFuCiAqIGFycmF5IG9mIEVycm9yIG9iamVjdHMgZm9yIGVhY2ggb2NjdXJlbmNlLiBSZXR1cm5zIGFuIGVtcHR5IGFycmF5IGlmCiAqIGFsbCBkb2N1bWVudHMgaGF2ZSBhIHBvcHVsYXRlZCBfaWQgcHJvcGVydHkuCiAqCiAqIEBuYW1lIEVtYmVkZGVkTGlzdC5taXNzaW5nSURzKGxpc3QpCiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KCkVtYmVkZGVkTGlzdC5wcm90b3R5cGUubWlzc2luZ0lEcyA9IGZ1bmN0aW9uIChsaXN0KSB7CiAgICB2YXIgZXJycyA9IFtdOwogICAgXy5lYWNoKGxpc3QsIGZ1bmN0aW9uICh2LCBpKSB7CiAgICAgICAgaWYgKCF2Ll9pZCkgewogICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignRW1iZWRkZWQgZG9jdW1lbnQgbWlzc2luZyBfaWQnKTsKICAgICAgICAgICAgZS5maWVsZCA9IFtpXTsKICAgICAgICAgICAgZXJycy5wdXNoKGUpOwogICAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGVycnM7Cn07CgovKioKICogRGV0ZWN0cyBlbWJlZGRlZCBkb2N1bWVudHMgd2l0aCBkdXBsaWNhdGUgX2lkIHByb3BlcnRpZXMgYW5kIHJldHVybnMgYW4KICogYXJyYXkgb2YgRXJyb3Igb2JqZWN0cyBmb3IgZWFjaCBvY2N1cmVuY2UuIFJldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYKICogYWxsIGRvY3VtZW50cyBoYXZlIGEgdW5pcXVlIF9pZCBwcm9wZXJ0eS4KICoKICogQG5hbWUgRW1iZWRkZWRMaXN0LmR1cGxpY2F0ZUlEcyhsaXN0KQogKiBAcGFyYW0ge0FycmF5fSBsaXN0CiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpFbWJlZGRlZExpc3QucHJvdG90eXBlLmR1cGxpY2F0ZUlEcyA9IGZ1bmN0aW9uIChsaXN0KSB7CiAgICB2YXIgaWRzID0ge307CiAgICB2YXIgZXJycyA9IFtdOwogICAgXy5lYWNoKGxpc3QsIGZ1bmN0aW9uICh2LCBpKSB7CiAgICAgICAgaWYgKHYuX2lkIGluIGlkcykgewogICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignRW1iZWRkZWQgZG9jdW1lbnQgZHVwbGljYXRlcyBhbiBleGlzdGluZyBfaWQnKTsKICAgICAgICAgICAgZS5maWVsZCA9IFtpXTsKICAgICAgICAgICAgZXJycy5wdXNoKGUpOwogICAgICAgIH0KICAgICAgICBpZHNbdi5faWRdID0gdHJ1ZTsKICAgIH0pOwogICAgcmV0dXJuIGVycnM7Cn07CgovKioKICogQ2hlY2tzIGZvciBtaXNzaW5nIG9yIGR1cGxpY2F0ZSBfaWRzIHRoZW4gcnVucyB0aGUgdHlwZSdzIHZhbGlkYXRlIGZ1bmN0aW9uCiAqIGFnYWluc3QgZWFjaCBlbWJlZGRlZCBkb2N1bWVudC4gUmV0dXJucyBhbiBhcnJheSBvZiB2YWxpZGF0aW9uIGVycm9ycywgb3IKICogYW4gZW1wdHkgYXJyYXkgaWYgdmFsaWQuCiAqCiAqIEBuYW1lIEVtYmVkZGVkTGlzdC52YWxpZGF0ZShkb2MsIHZhbHVlLCByYXcpCiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MKICogQHBhcmFtIHZhbHVlCiAqIEBwYXJhbSByYXcKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KCkVtYmVkZGVkTGlzdC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiAoZG9jLCB2YWx1ZSwgcmF3KSB7CiAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTsKCiAgICAvLyBkb24ndCB2YWxpZGF0ZSBlbXB0eSBmaWVsZHMsIGJ1dCBjaGVjayBpZiByZXF1aXJlZAogICAgaWYgKHRoaXMuaXNFbXB0eSh2YWx1ZSwgcmF3KSkgewogICAgICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7CiAgICAgICAgICAgIHJldHVybiBbIG5ldyBFcnJvcignUmVxdWlyZWQgZmllbGQnKSBdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gW107CiAgICB9CgogICAgLy8gY2hlY2sgYWxsIHZhbHVlcyBhcmUgb2JqZWN0cwogICAgdmFyIG5vbl9vYmplY3RzID0gXy5maWx0ZXIodmFsdWUsIGZ1bmN0aW9uICh2KSB7CgogICAgICAgIC8qIFdvcmthcm91bmQgZm9yIGludGVycHJldGVyIGJ1ZzoKICAgICAgICAgICAgU2F2aW5nIGVtYmVkTGlzdCgpIGRhdGEgdGhyb3dzIGFuIGVycm9yIHdoZW4gcnVubmluZyBpbiBhCiAgICAgICAgICAgIENvdWNoREIgbGlua2VkIGFnYWluc3QganMtMS44LjAuIFdlIGVuY291bnRlciBhIHNpdHVhdGlvbiB3aGVyZQogICAgICAgICAgICB0eXBlb2YodikgPT09ICdvYmplY3QnLCBidXQgdGhlICd2IGluc3RhbmNlb2YgT2JqZWN0JyB0ZXN0CiAgICAgICAgICAgIGluY29ycmVjdGx5IHJldHVybnMgZmFsc2UuIFdlIHN1c3BlY3QgYW4gaW50ZXJwcmV0ZXIgYnVnLgogICAgICAgICAgICBQbGVhc2UgcmV2aXNpdCB0aGlzIHVzaW5nIGEgQ291Y2hEQiBsaW5rZWQgYWdhaW5zdCBqcy0xLjguNS4KICAgICAgICAgICAgV2UgZG9uJ3QgY3VycmVudGx5IGhhdmUgdGhlIGluZnJhc3RydWN0dXJlIGZvciBhIHRlc3QgY2FzZS4gKi8KICAgICAgICAKICAgICAgICAvKiBCZWZvcmU6IHJldHVybiAhKHYgaW5zdGFuY2VvZiBPYmplY3QpIHx8IF8uaXNBcnJheSh2KTsgKi8KICAgICAgICByZXR1cm4gKHR5cGVvZih2KSAhPT0gJ29iamVjdCcgfHwgXy5pc0FycmF5KHYpKTsKICAgIH0pOwogICAgaWYgKG5vbl9vYmplY3RzLmxlbmd0aCkgewogICAgICAgIHJldHVybiBfLm1hcChub25fb2JqZWN0cywgZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih2ICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gY2hlY2sgZm9yIG1pc3NpbmcgaWRzCiAgICB2YXIgbWlzc2luZyA9IHRoaXMubWlzc2luZ0lEcyh2YWx1ZSk7CiAgICBpZiAobWlzc2luZy5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gbWlzc2luZzsKICAgIH0KCiAgICAvLyBjaGVjayBmb3IgZHVwbGljYXRlIGlkcwogICAgdmFyIGR1cGxpY2F0ZXMgPSB0aGlzLmR1cGxpY2F0ZUlEcyh2YWx1ZSk7CiAgICBpZiAoZHVwbGljYXRlcy5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gZHVwbGljYXRlczsKICAgIH0KCiAgICAvLyBydW4gdHlwZSB2YWxpZGF0aW9uIGFnYWluc3QgZWFjaCBlbWJlZGRlZCBkb2N1bWVudAogICAgcmV0dXJuIF8ucmVkdWNlKHZhbHVlLCBmdW5jdGlvbiAoZXJycywgdiwgaSkgewogICAgICAgIHZhciByID0gcmF3ID8gcmF3W2ldOiB1bmRlZmluZWQ7CiAgICAgICAgcmV0dXJuIGVycnMuY29uY2F0KAogICAgICAgICAgICBfLm1hcCh0eXBlLnZhbGlkYXRlKHYsIHIpLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICBlcnIuZmllbGQgPSBbaV0uY29uY2F0KGVyci5maWVsZCB8fCBbXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyOwogICAgICAgICAgICB9KQogICAgICAgICk7CiAgICB9LCBbXSk7Cn07CgovKioKICogQ2hlY2sgcmVsZXZhbnQgdHlwZSBwZXJtaXNzaW9ucyB0byBzZWUgaWYgdXNlciBpcyBhdXRob3Jpc2VkIHRvIG1ha2UKICogY2hhbmdlcy4gUmV0dXJucyBhbiBhcnJheSBvZiBwZXJtaXNzaW9ucyBlcnJvcnMsIG9yIGFuIGVtcHR5IGFycmF5IGlmIHRoZQogKiBjaGFuZ2VzIGFyZSBwZXJtaXNzaWJsZS4KICoKICogQG5hbWUgRW1iZWRkZWRMaXN0LmF1dGhvcml6ZShuRG9jLCBvRG9jLCBuVmFsLCBvVmFsLCB1c2VyKQogKiBAcGFyYW0ge09iamVjdH0gbkRvYwogKiBAcGFyYW0ge09iamVjdH0gb0RvYwogKiBAcGFyYW0gblZhbAogKiBAcGFyYW0gb1ZhbAogKiBAcGFyYW0ge09iamVjdH0gdXNlcgogKiBAcmV0dXJucyB7QXJyYXl9CiAqIEBhcGkgcHVibGljCiAqLwoKRW1iZWRkZWRMaXN0LnByb3RvdHlwZS5hdXRob3JpemUgPSBmdW5jdGlvbiAobkRvYywgb0RvYywgblZhbCwgb1ZhbCwgdXNlcikgewogICAgdmFyIHR5cGUgPSB0aGlzLnR5cGU7CiAgICB2YXIgcGVybXMgPSB0aGlzLnBlcm1pc3Npb25zOwoKICAgIG5WYWwgPSBuVmFsIHx8IFtdOwogICAgb1ZhbCA9IG9WYWwgfHwgW107CgogICAgLy8gYSB1bmlxdWUgbGlzdCBvZiBlbWJlZGRlZCBpZHMgZnJvbSBib3RoIHRoZSBvbGQgYW5kIG5ldyBkb2N1bWVudAogICAgdmFyIGlkcyA9IF8udW5pcShfLnBsdWNrKG5WYWwsICdfaWQnKS5jb25jYXQoXy5wbHVjayhvVmFsLCAnX2lkJykpKTsKCiAgICByZXR1cm4gXy5yZWR1Y2UoaWRzLCBmdW5jdGlvbiAoZXJycywgaWQsIGkpIHsKCiAgICAgICAgdmFyIGN1cnJfZXJycyA9IFtdOwogICAgICAgIHZhciBuZCA9IF8uZGV0ZWN0KG5WYWwsIGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICAgIHJldHVybiB2ICYmIHYuX2lkID09PSBpZDsKICAgICAgICB9KTsKICAgICAgICBuZCA9IG5kIHx8IHtfZGVsZXRlZDogdHJ1ZX07CiAgICAgICAgdmFyIG9kID0gXy5kZXRlY3Qob1ZhbCwgZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgcmV0dXJuIHYgJiYgdi5faWQgPT09IGlkOwogICAgICAgIH0pOwogICAgICAgIHZhciBhcmdzID0gW25Eb2MsIG9Eb2MsIG5kLCBvZCwgdXNlcl07CgogICAgICAgIGlmIChfLmlzRnVuY3Rpb24ocGVybXMpKSB7CiAgICAgICAgICAgIGN1cnJfZXJycyA9IHV0aWxzLmdldEVycm9ycyhwZXJtcywgYXJncyk7CiAgICAgICAgfQogICAgICAgIHZhciBmbjsKICAgICAgICAvLyBvbiBhZGQKICAgICAgICBpZiAobmQgJiYgIW9kKSB7CiAgICAgICAgICAgIGZuID0gcGVybXMuYWRkOwogICAgICAgIH0KICAgICAgICAvLyBvbiByZW1vdmUKICAgICAgICBlbHNlIGlmIChuZC5fZGVsZXRlZCkgewogICAgICAgICAgICBmbiA9IHBlcm1zLnJlbW92ZTsKICAgICAgICB9CiAgICAgICAgLy8gb24gdXBkYXRlCiAgICAgICAgZWxzZSBpZiAoSlNPTi5zdHJpbmdpZnkobmQpICE9PSBKU09OLnN0cmluZ2lmeShvZCkpIHsKICAgICAgICAgICAgZm4gPSBwZXJtcy51cGRhdGU7CiAgICAgICAgfQogICAgICAgIGlmIChmbikgewogICAgICAgICAgICBjdXJyX2VycnMgPSBjdXJyX2VycnMuY29uY2F0KHV0aWxzLmdldEVycm9ycyhmbiwgYXJncykpOwogICAgICAgIH0KICAgICAgICBjdXJyX2VycnMgPSBfLm1hcChjdXJyX2VycnMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUuZmllbGQgPSBbaV0uY29uY2F0KGUuZmllbGQgfHwgW10pOwogICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZXJycy5jb25jYXQoY3Vycl9lcnJzKTsKCiAgICB9LCBbXSk7Cn07CgoKLyoqCiAqIFByZXBlbmRzIGEgdmFsaWRhdG9yIHRvIGFuIGFycmF5IG9mIHZhbGlkYXRvciBmdW5jdGlvbnMuCiAqCiAqIEBwYXJhbSB7QXJyYXl9IGFycgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbgogKiBAYXBpIHByaXZhdGUKICovCgp2YXIgcHJlcGVuZFZhbGlkYXRvciA9IGZ1bmN0aW9uIChvcHRpb25zLCBmbikgewogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICBvcHRpb25zLnZhbGlkYXRvcnMgPSBbZm5dLmNvbmNhdChvcHRpb25zLnZhbGlkYXRvcnMgfHwgW10pOwogICAgcmV0dXJuIG9wdGlvbnM7Cn07CgoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgc3RyaW5nIEZpZWxkCiAqCiAqIEBuYW1lIHN0cmluZyhbb3B0aW9uc10pCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5zdHJpbmcgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgcmV0dXJuIG5ldyBGaWVsZChfLmRlZmF1bHRzKChvcHRpb25zIHx8IHt9KSwgewogICAgICAgIHBhcnNlOiBmdW5jdGlvbiAocmF3KSB7CiAgICAgICAgICAgIGlmIChyYXcgPT09IG51bGwgfHwgcmF3ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJycgKyByYXc7CiAgICAgICAgfQogICAgfSkpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGEgbmV3IG51bWJlciBGaWVsZAogKgogKiBAbmFtZSBudW1iZXIoW29wdGlvbnNdKQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMubnVtYmVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBwcmVwZW5kVmFsaWRhdG9yKG9wdGlvbnMsIGZ1bmN0aW9uIChkb2MsIHZhbHVlKSB7CiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIG51bWJlcicpOwogICAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIG5ldyBGaWVsZChfLmRlZmF1bHRzKChvcHRpb25zIHx8IHt9KSwgewogICAgICAgIHBhcnNlOiBmdW5jdGlvbiAocmF3KSB7CiAgICAgICAgICAgIGlmIChyYXcgPT09ICcnIHx8IHJhdyA9PT0gbnVsbCB8fCByYXcgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIE5hTjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gTnVtYmVyKHJhdyk7CiAgICAgICAgfQogICAgfSkpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGEgbmV3IGJvb2xlYW4gRmllbGQKICoKICogQG5hbWUgYm9vbGVhbihbb3B0aW9uc10pCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5ib29sZWFuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIHJldHVybiBuZXcgRmllbGQoXy5kZWZhdWx0cygob3B0aW9ucyB8fCB7fSksIHsKICAgICAgICB3aWRnZXQ6IHdpZGdldHMuY2hlY2tib3goKSwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgcGFyc2U6IEJvb2xlYW4KICAgIH0pKTsKfTsKCgovKioKICogQ3JlYXRlcyBhIFVSTCBGaWVsZAogKgogKiBAbmFtZSB1cmwoW29wdGlvbnNdKQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMudXJsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBwcmVwZW5kVmFsaWRhdG9yKG9wdGlvbnMsIHZhbGlkYXRvcnMudXJsKCkpOwogICAgcmV0dXJuIGV4cG9ydHMuc3RyaW5nKG9wdGlvbnMpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGFuIGVtYWlsIEZpZWxkCiAqCiAqIEBuYW1lIGVtYWlsKFtvcHRpb25zXSkKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmVtYWlsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBwcmVwZW5kVmFsaWRhdG9yKG9wdGlvbnMsIHZhbGlkYXRvcnMuZW1haWwoKSk7CiAgICByZXR1cm4gZXhwb3J0cy5zdHJpbmcob3B0aW9ucyk7Cn07CgoKLyoqCiAqIENyZWF0ZXMgYSBjcmVhdG9yIEZpZWxkCiAqCiAqIEBuYW1lIGNyZWF0b3IoW29wdGlvbnNdKQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuY3JlYXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgIGlmICghb3B0aW9ucy5wZXJtaXNzaW9ucykgewogICAgICAgIG9wdGlvbnMucGVybWlzc2lvbnMgPSB7fTsKICAgIH0KICAgIHZhciBwID0gb3B0aW9ucy5wZXJtaXNzaW9uczsKICAgIGlmIChwLmFkZCkgewogICAgICAgIHAuYWRkID0gcGVybWlzc2lvbnMuYWxsKFsKICAgICAgICAgICAgcGVybWlzc2lvbnMubWF0Y2hVc2VybmFtZSgpLAogICAgICAgICAgICBwLmFkZAogICAgICAgIF0pOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcC5hZGQgPSBwZXJtaXNzaW9ucy5tYXRjaFVzZXJuYW1lKCk7CiAgICB9CiAgICBpZiAocC51cGRhdGUpIHsKICAgICAgICBwLnVwZGF0ZSA9IHBlcm1pc3Npb25zLmFsbChbCiAgICAgICAgICAgIHBlcm1pc3Npb25zLmZpZWxkVW5lZGl0YWJsZSgpLAogICAgICAgICAgICBwLnVwZGF0ZQogICAgICAgIF0pOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcC51cGRhdGUgPSBwZXJtaXNzaW9ucy5maWVsZFVuZWRpdGFibGUoKTsKICAgIH0KICAgIHJldHVybiBleHBvcnRzLnN0cmluZyhfLmRlZmF1bHRzKG9wdGlvbnMsIHsKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgd2lkZ2V0OiB3aWRnZXRzLmNyZWF0b3IoKSwKICAgICAgICBkZWZhdWx0X3ZhbHVlOiBmdW5jdGlvbiAocmVxKSB7CiAgICAgICAgICAgIHJldHVybiAocmVxLnVzZXJDdHggJiYgcmVxLnVzZXJDdHgubmFtZSkgfHwgJyc7CiAgICAgICAgfQogICAgfSkpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGEgY3JlYXRlZFRpbWUgdGltZXN0YW1wIEZpZWxkCiAqCiAqIEBuYW1lIGNyZWF0ZWRUaW1lKFtvcHRpb25zXSkKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmNyZWF0ZWRUaW1lID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgaWYgKCFvcHRpb25zLnBlcm1pc3Npb25zKSB7CiAgICAgICAgb3B0aW9ucy5wZXJtaXNzaW9ucyA9IHt9OwogICAgfQogICAgdmFyIHAgPSBvcHRpb25zLnBlcm1pc3Npb25zOwogICAgaWYgKHAudXBkYXRlKSB7CiAgICAgICAgcC51cGRhdGUgPSBwZXJtaXNzaW9ucy5hbGwoWwogICAgICAgICAgICBwZXJtaXNzaW9ucy5maWVsZFVuZWRpdGFibGUoKSwKICAgICAgICAgICAgcC51cGRhdGUKICAgICAgICBdKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHAudXBkYXRlID0gcGVybWlzc2lvbnMuZmllbGRVbmVkaXRhYmxlKCk7CiAgICB9CiAgICByZXR1cm4gZXhwb3J0cy5udW1iZXIoXy5kZWZhdWx0cyhvcHRpb25zLCB7CiAgICAgICAgd2lkZ2V0OiB3aWRnZXRzLmNvbXB1dGVkKCksCiAgICAgICAgZGVmYXVsdF92YWx1ZTogZnVuY3Rpb24gKHJlcSkgewogICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgICAgfQogICAgfSkpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGEgY2hvaWNlIEZpZWxkCiAqCiAqIFJlcXVpcmVkIG9wdGlvbjogdmFsdWVzIC0gYW4gYXJyYXkgb2YgcG9zc2libGUgY2hvaWNlcywgZWFjaCBhbiBhcnJheQogKiB3aXRoIHRoZSBmaXJzdCBpdGVtIGFzIHRoZSB2YWx1ZSBhbmQgdGhlIHNlY29uZCBhcyBpdHMgbGFiZWwuCiAqCiAqIEBuYW1lIGNob2ljZShbb3B0aW9uc10pCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5jaG9pY2UgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnZhbHVlcykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdmFsdWVzIGRlZmluZWQnKTsKICAgIH0KICAgIG9wdGlvbnMgPSBwcmVwZW5kVmFsaWRhdG9yKG9wdGlvbnMsIGZ1bmN0aW9uIChkb2MsIHZhbHVlKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLnZhbHVlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAodmFsdWUgPT09IG9wdGlvbnMudmFsdWVzW2ldWzBdKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNob2ljZScpOwogICAgfSk7CiAgICAvLyB1c2UgdmFsdWUgYXMgbGFiZWwgaWYgbm8gbGFiZWwgZGVmaW5lZAogICAgb3B0aW9ucy52YWx1ZXMgPSBfLm1hcChvcHRpb25zLnZhbHVlcywgZnVuY3Rpb24gKHYpIHsKICAgICAgICByZXR1cm4gXy5pc0FycmF5KHYpID8gdjogW3YsIHZdOwogICAgfSk7CiAgICByZXR1cm4gbmV3IEZpZWxkKF8uZGVmYXVsdHMob3B0aW9ucywgewogICAgICAgIHdpZGdldDogd2lkZ2V0cy5zZWxlY3Qoe3ZhbHVlczogb3B0aW9ucy52YWx1ZXN9KQogICAgfSkpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGEgbnVtYmVyIGNob2ljZSBGaWVsZAogKgogKiBAbmFtZSBudW1iZXJDaG9pY2UoW29wdGlvbnNdKQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMubnVtYmVyQ2hvaWNlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgcHJlcGVuZFZhbGlkYXRvcihvcHRpb25zLCBmdW5jdGlvbiAoZG9jLCB2YWx1ZSkgewogICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSBudW1iZXInKTsKICAgICAgICB9CiAgICB9KTsKICAgIHJldHVybiBleHBvcnRzLmNob2ljZShfLmRlZmF1bHRzKG9wdGlvbnMsIHsKICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHJhdykgewogICAgICAgICAgICBpZiAocmF3ID09PSBudWxsIHx8IHJhdyA9PT0gJycpIHsKICAgICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gTnVtYmVyKHJhdyk7CiAgICAgICAgfQogICAgfSkpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGFuIEVtYmVkZGVkIEZpZWxkCiAqCiAqIFJlcXVpcmVkIG9wdGlvbjogdHlwZSAtIHRoZSBUeXBlIGRlZmluaXRpb24gdG8gZW1iZWQKICoKICogQG5hbWUgZW1iZWQoW29wdGlvbnNdKQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZW1iZWQgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgcmV0dXJuIG5ldyBFbWJlZGRlZChfLmRlZmF1bHRzKChvcHRpb25zIHx8IHt9KSwgewogICAgICAgIHdpZGdldDogd2lkZ2V0cy5lbWJlZExpc3QoewogICAgICAgICAgICBzaW5nbGV0b246IHRydWUsCiAgICAgICAgICAgIHdpZGdldDogd2lkZ2V0cy5kZWZhdWx0RW1iZWRkZWQoKQogICAgICAgIH0pCiAgICB9KSk7Cn07CgoKLyoqCiAqIENyZWF0ZXMgYW4gRW1iZWRkZWRMaXN0IEZpZWxkCiAqCiAqIFJlcXVpcmVkIG9wdGlvbjogdHlwZSAtIHRoZSBUeXBlIGRlZmluaXRpb24gdG8gZW1iZWQKICoKICogQG5hbWUgZW1iZWRMaXN0KFtvcHRpb25zXSkKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmVtYmVkTGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICByZXR1cm4gbmV3IEVtYmVkZGVkTGlzdChfLmRlZmF1bHRzKChvcHRpb25zIHx8IHt9KSwgewogICAgICAgIHdpZGdldDogd2lkZ2V0cy5lbWJlZExpc3QoewogICAgICAgICAgICBzaW5nbGV0b246IGZhbHNlLAogICAgICAgICAgICB3aWRnZXQ6IHdpZGdldHMuZGVmYXVsdEVtYmVkZGVkKCkKICAgICAgICB9KQogICAgfSkpOwp9OwoKCi8qKgogKiBDcmVhdGVzIGEgYXJyYXkgRmllbGQuIFRoZSBkZWZhdWx0IHBhcnNlIGZ1bmN0aW9uIGV4cGVjdHMgYSBzaW5nbGUgcm93IG9mCiAqIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXMuCiAqCiAqIFRvIGFjY2VwdCBhbiBhcnJheSBvZiB2YWx1ZXMgb3RoZXIgdGhhbiBzdHJpbmdzLCBhZGQgYSBmdW5jdGlvbiB0byBvcHRpb25zCiAqIGNhbGxlZCBwYXJzZUVhY2ggd2hpY2ggYWNjZXB0cyB0aGUgc3RyaW5nIHZhbHVlIGZvciBlYWNoIGl0ZW0gYW5kIHBlcmZvcm1zCiAqIHRoZSB0cmFuc2Zvcm1hdGlvbi4KICoKICogQG5hbWUgYXJyYXkoW29wdGlvbnNdKQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuYXJyYXkgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICBvcHRpb25zLmhpbnQgPSBvcHRpb25zLmhpbnQgfHwgIlZhbHVlcyBzaG91bGQgYmUgY29tbWEgc2VwYXJhdGVkIjsKICAgIHByZXBlbmRWYWxpZGF0b3Iob3B0aW9ucywgZnVuY3Rpb24gKGRvYywgdmFsdWUpIHsKICAgICAgICBpZiAoIV8uaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYW4gYXJyYXknKTsKICAgICAgICB9CiAgICB9KTsKICAgIHJldHVybiBleHBvcnRzLnN0cmluZyhfLmRlZmF1bHRzKG9wdGlvbnMsIHsKICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHJhdykgewogICAgICAgICAgICB2YXIgcmVzdWx0ID0gdXRpbHMucGFyc2VDU1YocmF3IHx8ICcnKVswXSB8fCBbXTsKICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFyc2VFYWNoKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBfLm1hcChyZXN1bHQsIG9wdGlvbnMucGFyc2VFYWNoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0pKTsKfTsKCi8qKgogKiBDcmVhdGVzIGEgbnVtYmVyIGFycmF5IEZpZWxkLCBzYW1lIGFzIHRoZSBhcnJheSBmaWVsZCBvbmx5IGVhY2ggdmFsdWUgaXMKICogcGFyc2VkIGFzIGEgbnVtYmVyIGluc3RlYWQgb2YgYSBzdHJpbmcuCiAqCiAqIEBuYW1lIG51bWJlckFycmF5KFtvcHRpb25zXSkKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLm51bWJlckFycmF5ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgb3B0aW9ucy5wYXJzZUVhY2ggPSBvcHRpb25zLnBhcnNlRWFjaCB8fCBmdW5jdGlvbiAodikgewogICAgICAgIHJldHVybiBOdW1iZXIodik7CiAgICB9OwogICAgcHJlcGVuZFZhbGlkYXRvcihvcHRpb25zLCBmdW5jdGlvbiAoZG9jLCB2YWx1ZSkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICBpZiAoaXNOYU4odmFsdWVbaV0pKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIG51bWJlcicpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gZXhwb3J0cy5hcnJheShvcHRpb25zKTsKfTsKCgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vc2FuaXRpemUgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby9zYW5pdGl6ZSJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogSW5wdXQgc2FuaXRpemF0aW9uLCBlc2NhcGluZywgYW5kIGNvbnN0cnVjdGlvbiBmdW5jdGlvbnMKICogY292ZXJpbmcgc2VjdXJpdHktc2Vuc2l0aXZlIGFyZWFzLgogKgogKiBAbW9kdWxlCiAqLwoKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgXyA9IHJlcXVpcmUoJy4vdW5kZXJzY29yZScpLl87CgoKLyoqCiAqIEVuY29kZXMgcmVxdWlyZWQgY2hhcmFjdGVycyBhcyBIVE1MIGVudGl0aWVzIHNvIGEgc3RyaW5nCiAqIGNhbiBiZSBpbmNsdWRlZCBpbiBhIHBhZ2UuIFRoaXMgZnVuY3Rpb24gbXVzdCBiZSB1c2VkIHRvCiAqIGF2b2lkIENyb3NzLXNpdGUgU2NyaXB0aW5nIGF0dGFja3MuCiAqCiAqIEBuYW1lIGVzY2FwZUh0bWwocykKICogQHBhcmFtIHtTdHJpbmd9IHMKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmVzY2FwZUh0bWwgPSBleHBvcnRzLmggPSBmdW5jdGlvbiAocykKewogICAgcyA9ICgnJyArIHMpOyAvKiBDb2VyY2UgdG8gc3RyaW5nICovCiAgICBzID0gcy5yZXBsYWNlKC8mL2csICcmYW1wOycpOwogICAgcyA9IHMucmVwbGFjZSgvPC9nLCAnJmx0OycpOwogICAgcyA9IHMucmVwbGFjZSgvPi9nLCAnJmd0OycpOwogICAgcyA9IHMucmVwbGFjZSgvIi9nLCAnJnF1b3Q7Jyk7CiAgICBzID0gcy5yZXBsYWNlKC8nL2csICcmIzM5OycpOwogICAgcmV0dXJuIHM7Cn07CgoKLyoqCiAqIEVuY29kZXMgc2VsZWN0ZWQgY2hhcmFjdGVycyBpbiBhIHN0cmluZywgc28gdGhhdCB0aGUgc3RyaW5nCiAqIGNhbiBiZSBzYWZlbHkgdXNlZCB3aXRoaW4gYSBKYXZhc2NyaXB0IHN0cmluZyBjb25zdGFudC4gVGhpcwogKiBmdW5jdGlvbiBtdXN0IGJlIHVzZWQgdG8gYXZvaWQgY3Jvc3Mtc2l0ZSBzY3JpcHRpbmcgYXR0YWNrcwogKiAob3IsIGluIHNvbWUgY2FzZXMsIGFyYml0cmFyeSBzZXJ2ZXItc2lkZSBjb2RlIGV4ZWN1dGlvbikuCiAqCiAqIEBuYW1lIGVzY2FwZUphdmFzY3JpcHRTdHJpbmcocykKICogQHBhcmFtIHtTdHJpbmd9IHMKICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmVzY2FwZUphdmFzY3JpcHRTdHJpbmcgPSBleHBvcnRzLmpzID0gZnVuY3Rpb24gKHMpCnsKICAgIHMgPSAoJycgKyBzKTsgLyogQ29lcmNlIHRvIHN0cmluZyAqLwogICAgcyA9IHMucmVwbGFjZSgvJy9nLCAiXFwnIik7CiAgICBzID0gcy5yZXBsYWNlKC8nL2csICJcXCciKTsKICAgIHMgPSBzLnJlcGxhY2UoLycvZywgIlxcJyIpOwogICAgcyA9IHMucmVwbGFjZSgvIi9nLCAnXFwiJyk7CiAgICByZXR1cm4gczsKfTsKCgovKioKICogRW5jb2RlcyBzZWxlY3RlZCBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nLCBzbyB0aGF0IHRoZSBzdHJpbmcKICogY2FuIGJlIHNhZmVseSB1c2VkIHdpdGhpbiBhbiBYTUwgY2hhcmFjdGVyIGRhdGEgc2VjdGlvbi4KICogVGhpcyBmdW5jdGlvbiBtdXN0IGJlIHVzZWQgdG8gYXZvaWQgY3Jvc3Mtc2l0ZSBzY3JpcHRpbmcgYXR0YWNrcy4KICoKICogQG5hbWUgZXNjYXBlSmF2YXNjcmlwdFN0cmluZyhzKQogKiBAcGFyYW0ge1N0cmluZ30gcwogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZXNjYXBlWG1sQ2hhcmFjdGVyRGF0YSA9IGV4cG9ydHMuY2RhdGEgPSBmdW5jdGlvbiAocykKewogICAgcyA9ICgnJyArIHMpOyAvKiBDb2VyY2UgdG8gc3RyaW5nICovCiAgICBzID0gcy5yZXBsYWNlKC9cXVxdPi9nLCAnJyk7CiAgICByZXR1cm4gczsKfTsKCgovKioKICogVGFrZXMgYW55IG51bWJlciBvZiBhcmd1bWVudHMsIGFuZCBjb21iaW5lcyB0aGVtIHRvZ2V0aGVyCiAqIHRvIHNhZmVseSBmb3JtIGEgc3RyaW5nIHRoYXQncyBzdWl0YWJsZSBmb3IgdXNlIGFzIGEgRE9NCiAqIGVsZW1lbnQgaWRlbnRpZmllci4KICoKICogQG5hbWUgZ2VuZXJhdGVEb21JZGVudGlmaWVyKHMpCiAqIEBwYXJhbSB7U3RyaW5nfSBzCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5nZW5lcmF0ZURvbUlkZW50aWZpZXIgPSBleHBvcnRzLmlkID0gZnVuY3Rpb24gKC8qIC4uLiAqLykgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIHJ2ID0gWyAnaWQnIF07CiAgICB2YXIgZXNjID0gZnVuY3Rpb24gKHgpIHsKICAgICAgICByZXR1cm4gKCcnICsgeCkucmVwbGFjZSgvW15BLVphLXowLTlfXSsvLCAnXycpOwogICAgfTsKCiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQgJiYgYXJnICE9PSBudWxsKSB7CiAgICAgICAgICAgIGlmIChfLmlzQXJyYXkoYXJnKSkgewogICAgICAgICAgICAgICAgLyogQXZvaWQgcmVjdXJzaW9uOyBsaW1pdCB0byBvbmUgbGV2ZWwgZGVlcCAqLwogICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbmogPSBhcmcubGVuZ3RoOyBqIDwgbGVuajsgKytqKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ1tqXSAhPT0gdW5kZWZpbmVkICYmIGFyZ1tqXSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICBydi5wdXNoKGVzYyhhcmdbal0pKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBydi5wdXNoKGVzYyhhcmcpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBydi5qb2luKCdfJyk7Cn07CgoKLyoqCiAqIFRha2VzIGFueSBudW1iZXIgb2YgYXJndW1lbnRzLCBhbmQgY29tYmluZXMgdGhlbSB0b2dldGhlcgogKiB0byBzYWZlbHkgZm9ybSBhIHN0cmluZyB0aGF0J3Mgc3VpdGFibGUgZm9yIHVzZSBpbiBhIERPTQogKiBlbGVtZW50J3MgbmFtZSBhdHRyaWJ1dGUuCiAqCiAqIEBuYW1lIGdlbmVyYXRlRG9tTmFtZShzKQogKiBAcGFyYW0ge1N0cmluZ30gcwogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZ2VuZXJhdGVEb21OYW1lID0gZXhwb3J0cy5uYW1lID0gZnVuY3Rpb24gKC8qIC4uLiAqLykgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIHJ2ID0gW107CiAgICB2YXIgZXNjID0gZnVuY3Rpb24gKHgpIHsKICAgICAgICByZXR1cm4gKCcnICsgeCkucmVwbGFjZSgvW1wnXCJdKy8sICdfJyk7CiAgICB9OwoKICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2ldOwogICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCAmJiBhcmcgIT09IG51bGwpIHsKICAgICAgICAgICAgaWYgKF8uaXNBcnJheShhcmcpKSB7CiAgICAgICAgICAgICAgICAvKiBBdm9pZCByZWN1cnNpb247IGxpbWl0IHRvIG9uZSBsZXZlbCBkZWVwICovCiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuaiA9IGFyZy5sZW5ndGg7IGogPCBsZW5qOyArK2opIHsKICAgICAgICAgICAgICAgICAgICBpZiAoYXJnW2pdICE9PSB1bmRlZmluZWQgJiYgYXJnW2pdICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJ2LnB1c2goZXNjKGFyZ1tqXSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJ2LnB1c2goZXNjKGFyZykpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJ2LmpvaW4oJy4nKTsKfTsKCgoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL3Nlc3Npb24gKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby9zZXNzaW9uIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qKgogKiBGdW5jdGlvbnMgcmVsYXRlZCB0byB0aGUgbWFuYWdlbWVudCBvZiB1c2VyIHNlc3Npb25zIGFuZCBhY2NvdW50IGluZm9ybWF0aW9uLgogKgogKiBAbW9kdWxlCiAqLwoKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgZGIgPSByZXF1aXJlKCcuL2RiJyksCiAgICBzaGExID0gcmVxdWlyZSgnLi9zaGExJyksCiAgICBjb29raWVzID0gcmVxdWlyZSgnLi9jb29raWVzJyksCiAgICBldmVudHMgPSByZXF1aXJlKCcuL2V2ZW50cycpLAogICAgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7CgoKLyoqCiAqIENyZWF0ZXMgYSBmYWtlIHJlcXVlc3QgdG8gL19zZXNzaW9uIHRvIHBhc3MgdG8gc2Vzc2lvbkNoYW5nZSwgdXNlZnVsCiAqIHdoZW4gdXNpbmcgZnVuY3Rpb25zIHN1Y2ggYXMgdGVtcGxhdGVzLnJlbmRlcgogKgogKiBAbmFtZSBmYWtlUmVxdWVzdCh1c2VyQ3R4LCBjYWxsYmFjaykKICogQHBhcmFtIHtPYmplY3R9IHVzZXJDdHgKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmZha2VSZXF1ZXN0ID0gZnVuY3Rpb24gKHVzZXJDdHgsIGNhbGxiYWNrKSB7CiAgICBkYi5uZXdVVUlEKDEwMCwgZnVuY3Rpb24gKGVyciwgdXVpZCkgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIGNhbGxiYWNrKG51bGwsIHsKICAgICAgICAgICAgdXNlckN0eDogdXNlckN0eCwKICAgICAgICAgICAgdXVpZDogdXVpZCwKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcXVlcnk6IHt9LAogICAgICAgICAgICBoZWFkZXJzOiB7fSwKICAgICAgICAgICAgcGF0aDogWydfc2Vzc2lvbiddLAogICAgICAgICAgICBjbGllbnQ6IHRydWUsCiAgICAgICAgICAgIGluaXRpYWxfaGl0OiB1dGlscy5pbml0aWFsX2hpdCwKICAgICAgICAgICAgY29va2llOiBjb29raWVzLnJlYWRCcm93c2VyQ29va2llcygpCiAgICAgICAgfSk7CiAgICB9KTsKfTsKCi8qKgogKiBDYWxscyBzZXNzaW9uQ2hhbmdlIGlmIGV4cG9ydGVkIGZyb20gdGhlIGN1cnJlbnRseSBsb2FkZWQgYXBwLgogKgogKiBAbmFtZSBzZXNzaW9uQ2hhbmdlKHVzZXJDdHgsIGNhbGxiYWNrKQogKiBAcGFyYW0ge09iamVjdH0gdXNlckN0eAogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuc2Vzc2lvbkNoYW5nZSA9IGZ1bmN0aW9uICh1c2VyQ3R4LCBjYWxsYmFjaykgewogICAgdmFyIHJlcSA9IGV4cG9ydHMuZmFrZVJlcXVlc3QodXNlckN0eCwgZnVuY3Rpb24gKGVyciwgcmVxKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93IGVycjsKICAgICAgICB9CiAgICAgICAgZXZlbnRzLmVtaXQoJ3Nlc3Npb25DaGFuZ2UnLCB1c2VyQ3R4LCByZXEpOwogICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0KICAgIH0pOwp9OwoKLyoqCiAqIExvZ3Mgb3V0IHRoZSBjdXJyZW50IHVzZXIuCiAqCiAqIEBuYW1lIGxvZ291dChjYWxsYmFjaykKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmxvZ291dCA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgaWYgKCF1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignbG9nb3V0IGNhbm5vdCBiZSBjYWxsZWQgc2VydmVyLXNpZGUnKTsKICAgIH0KICAgIGRiLnJlcXVlc3QoewogICAgICAgIHR5cGU6ICJERUxFVEUiLAogICAgICAgIHVybDogIi9fc2Vzc2lvbiIsIC8vIGRvbid0IG5lZWQgYmFzZVVSTCwgL19zZXNzaW9uIGFsd2F5cyBhdmFpbGFibGUKICAgICAgICB1c2VybmFtZTogIl8iLAogICAgICAgIHBhc3N3b3JkIDogIl8iCiAgICB9LAogICAgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgIGlmIChyZXNwICYmIHJlc3Aub2spIHsKICAgICAgICAgICAgdXRpbHMudXNlckN0eCA9IHtuYW1lOiBudWxsLCByb2xlczogW119OwogICAgICAgICAgICB1dGlscy5zZXNzaW9uID0ge3VzZXJDdHg6IHV0aWxzLnVzZXJDdHh9OwogICAgICAgICAgICBleHBvcnRzLnNlc3Npb25DaGFuZ2UodXRpbHMudXNlckN0eCk7CiAgICAgICAgfQogICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3ApOwogICAgICAgIH0KICAgIH0pOwp9OwoKLyoqCiAqIEF0dGVtcHQgdG8gbG9naW4gdXNpbmcgdGhlIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBwcm92aWRlZC4KICoKICogQG5hbWUgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkLCBjYWxsYmFjaykKICogQHBhcmFtIHtTdHJpbmd9IHVzZXJuYW1lCiAqIEBwYXJhbSB7U3RyaW5nfSBwYXNzd29yZAogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkLCBjYWxsYmFjaykgewogICAgaWYgKCF1dGlscy5pc0Jyb3dzZXIoKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignbG9naW4gY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgZGIucmVxdWVzdCh7CiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIHVybDogIi9fc2Vzc2lvbiIsCiAgICAgICAgZGF0YToge25hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmR9CiAgICB9LAogICAgZnVuY3Rpb24gKGVyciwgcmVzcCkgewogICAgICAgIGlmIChyZXNwICYmIHJlc3Aub2spIHsKICAgICAgICAgICAgLy8gVE9ETzogZm9yIHNvbWUgcmVhc29uIHJlc3AubmFtZSBpcyBzZXQgdG8gbnVsbCBpbiB0aGUgcmVzcG9uc2UKICAgICAgICAgICAgLy8gZXZlbiB0aG91Z2ggdGhlIHJvbGVzIGFyZSBjb3JyZWN0IGZvciB0aGUgdXNlciEgTG9vayBpbnRvIHRoaXMKICAgICAgICAgICAgLy8gYW5kIHNlZSBpZiBpdHMgYSBidWcgaW4gY291Y2hkYiwgZm9yIG5vdywganVzdCB1c2luZyB0aGUgdXNlcm5hbWUKICAgICAgICAgICAgLy8gZ2l2ZW4gdG8gdGhlIGxvZ2luIGZ1bmN0aW9uIGluc3RlYWQsIHNpbmNlIHdlIGtub3cgdGhlIGxvZ2luCiAgICAgICAgICAgIC8vIHJlcXVlc3Qgd2FzIGFjY2VwdGVkLgogICAgICAgICAgICAvL3V0aWxzLnVzZXJDdHggPSB7bmFtZTogcmVzcC5uYW1lLCByb2xlczogcmVzcC5yb2xlc307CiAgICAgICAgICAgIHV0aWxzLnVzZXJDdHggPSB7bmFtZTogdXNlcm5hbWUsIHJvbGVzOiByZXNwLnJvbGVzfTsKICAgICAgICAgICAgdXRpbHMuc2Vzc2lvbiA9IHt1c2VyQ3R4OiB1dGlscy51c2VyQ3R4fTsKICAgICAgICAgICAgZXhwb3J0cy5zZXNzaW9uQ2hhbmdlKHV0aWxzLnVzZXJDdHgpOwogICAgICAgIH0KICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwKTsKICAgICAgICB9CiAgICB9KTsKfTsKCgovKioKICogUmV0dXJucyB0aGUgY3VycmVudCB1c2VyJ3Mgc2Vzc2lvbiBpbmZvcm1hdGlvbi4KICoKICogQG5hbWUgaW5mbyhjYWxsYmFjaykKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmluZm8gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgIGlmICghdXRpbHMuaXNCcm93c2VyKCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luZm8gY2Fubm90IGJlIGNhbGxlZCBzZXJ2ZXItc2lkZScpOwogICAgfQogICAgZGIucmVxdWVzdCh7CiAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgdXJsOiAiL19zZXNzaW9uIgogICAgfSwKICAgIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHsKICAgICAgICB2YXIgb2xkVXNlckN0eCA9IHV0aWxzLnVzZXJDdHg7CiAgICAgICAgdXRpbHMuc2Vzc2lvbiA9IHJlc3A7CiAgICAgICAgdXRpbHMudXNlckN0eCA9IChyZXNwICYmIHJlc3AudXNlckN0eCkgfHwge25hbWU6IG51bGwsIHJvbGVzOiBbXX07CiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgY2hlY2sgZm9yIGRpZmZlcmVuY2VzIGluIG1vcmUgdGhhbiBqdXN0IG5hbWU/CiAgICAgICAgaWYgKCFvbGRVc2VyQ3R4IHx8IG9sZFVzZXJDdHgubmFtZSAhPT0gdXRpbHMudXNlckN0eC5uYW1lKSB7CiAgICAgICAgICAgIGV4cG9ydHMuc2Vzc2lvbkNoYW5nZSh1dGlscy51c2VyQ3R4KTsKICAgICAgICB9CiAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcCk7CiAgICAgICAgfQogICAgfSk7Cn07CgovKioKICogUmV0dXJucyB0aGUgYXV0aGVudGljYXRpb24gZGF0YWJhc2UgZm9yIHRoZSBjdXJyZW50IHVzZXIncyBzZXNzaW9uLgogKgogKiBAbmFtZSB1c2VyRGIoY2FsbGJhY2spCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy51c2VyRGIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgIGlmICh1dGlscy5zZXNzaW9uICYmIHV0aWxzLnNlc3Npb24uYXV0aGVudGljYXRpb25fZGIpIHsKICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdXRpbHMuc2Vzc2lvbi5hdXRoZW50aWNhdGlvbl9kYik7CiAgICB9CiAgICBleHBvcnRzLmluZm8oZnVuY3Rpb24gKGVyciwgc2Vzc2lvbikgewogICAgICAgIGNhbGxiYWNrKGVyciwgc2Vzc2lvbiA/IHNlc3Npb24uaW5mby5hdXRoZW50aWNhdGlvbl9kYjogbnVsbCk7CiAgICB9KTsKfTsKCi8qKgogKiBDcmVhdGVzIGEgbmV3IHVzZXIgZG9jdW1lbnQgd2l0aCBnaXZlbiB1c2VybmFtZSBhbmQgcGFzc3dvcmQuCiAqCiAqIEBuYW1lIHNpZ251cCh1c2VybmFtZSwgcGFzc3dvcmQsIGNhbGxiYWNrKQogKiBAcGFyYW0ge1N0cmluZ30gdXNlcm5hbWUKICogQHBhcmFtIHtTdHJpbmd9IHBhc3N3b3JkCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5zaWdudXAgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkLCBjYWxsYmFjaykgewogICAgdmFyIGRvYyA9IHt9OwogICAgZG9jLl9pZCA9ICdvcmcuY291Y2hkYi51c2VyOicgKyB1c2VybmFtZTsKICAgIGRvYy5uYW1lID0gdXNlcm5hbWU7CiAgICBkb2MudHlwZSA9ICd1c2VyJzsKICAgIGRvYy5yb2xlcyA9IFtdOwoKICAgIGRiLm5ld1VVSUQoMTAwLCBmdW5jdGlvbiAoZXJyLCB1dWlkKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTsKICAgICAgICB9CiAgICAgICAgZG9jLnNhbHQgPSB1dWlkOwogICAgICAgIGRvYy5wYXNzd29yZF9zaGEgPSBzaGExLmhleChwYXNzd29yZCArIGRvYy5zYWx0KTsKICAgICAgICBleHBvcnRzLnVzZXJEYihmdW5jdGlvbiAoZXJyLCB1c2VyZGIpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHVybCA9ICcvJyArIHVzZXJkYiArICcvJyArIGRvYy5faWQ7CiAgICAgICAgICAgIHZhciByZXEgPSB7CiAgICAgICAgICAgICAgICB0eXBlOiAnUFVUJywKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZG9jKSwKICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSwKICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGIucmVxdWVzdChyZXEsIGNhbGxiYWNrKTsKICAgICAgICB9KTsKICAgIH0pOwp9OwoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL3NoYTEgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby9zaGExIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qKg0KICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0xLCBhcyBkZWZpbmVkDQogKiBpbiBGSVBTIFBVQiAxODAtMS4gVGhpcyBtb2R1bGUgaXMgdXNlZCB0byBoYXNoIHVzZXIgcGFzc3dvcmRzIGluIGEgd2F5IHRoYXQncw0KICogY29tcGF0aWJsZSB3aXRoIENvdWNoREIuDQogKg0KICogVGhpcyBtb2R1bGUgaXMgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZQ0KICogQlNEIExpY2Vuc2UuIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLg0KICoNCiAqIEBtb2R1bGUNCiAqLw0KDQovKg0KICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0xLCBhcyBkZWZpbmVkDQogKiBpbiBGSVBTIFBVQiAxODAtMQ0KICogVmVyc2lvbiAyLjFhIENvcHlyaWdodCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDAyLg0KICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldA0KICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlDQogKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgZGV0YWlscy4NCiAqLw0KDQovKg0KICogQ29uZmlndXJhYmxlIHZhcmlhYmxlcy4gWW91IG1heSBuZWVkIHRvIHR3ZWFrIHRoZXNlIHRvIGJlIGNvbXBhdGlibGUgd2l0aA0KICogdGhlIHNlcnZlci1zaWRlLCBidXQgdGhlIGRlZmF1bHRzIHdvcmsgaW4gbW9zdCBjYXNlcy4NCiAqLw0KdmFyIGhleGNhc2UgPSAwOyAgLyogaGV4IG91dHB1dCBmb3JtYXQuIDAgLSBsb3dlcmNhc2U7IDEgLSB1cHBlcmNhc2UgICAgICAgICovDQp2YXIgYjY0cGFkICA9ICI9IjsgLyogYmFzZS02NCBwYWQgY2hhcmFjdGVyLiAiPSIgZm9yIHN0cmljdCBSRkMgY29tcGxpYW5jZSAgICovDQp2YXIgY2hyc3ogICA9IDg7ICAvKiBiaXRzIHBlciBpbnB1dCBjaGFyYWN0ZXIuIDggLSBBU0NJSTsgMTYgLSBVbmljb2RlICAgICAgKi8NCg0KLyoNCiAqIFRoZXNlIGFyZSB0aGUgZnVuY3Rpb25zIHlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gY2FsbA0KICogVGhleSB0YWtlIHN0cmluZyBhcmd1bWVudHMgYW5kIHJldHVybiBlaXRoZXIgaGV4IG9yIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmdzDQogKi8NCmZ1bmN0aW9uIGhleF9zaGExKHMpe3JldHVybiBiaW5iMmhleChjb3JlX3NoYTEoc3RyMmJpbmIocykscy5sZW5ndGggKiBjaHJzeikpO30NCmZ1bmN0aW9uIGI2NF9zaGExKHMpe3JldHVybiBiaW5iMmI2NChjb3JlX3NoYTEoc3RyMmJpbmIocykscy5sZW5ndGggKiBjaHJzeikpO30NCmZ1bmN0aW9uIHN0cl9zaGExKHMpe3JldHVybiBiaW5iMnN0cihjb3JlX3NoYTEoc3RyMmJpbmIocykscy5sZW5ndGggKiBjaHJzeikpO30NCmZ1bmN0aW9uIGhleF9obWFjX3NoYTEoa2V5LCBkYXRhKXsgcmV0dXJuIGJpbmIyaGV4KGNvcmVfaG1hY19zaGExKGtleSwgZGF0YSkpO30NCmZ1bmN0aW9uIGI2NF9obWFjX3NoYTEoa2V5LCBkYXRhKXsgcmV0dXJuIGJpbmIyYjY0KGNvcmVfaG1hY19zaGExKGtleSwgZGF0YSkpO30NCmZ1bmN0aW9uIHN0cl9obWFjX3NoYTEoa2V5LCBkYXRhKXsgcmV0dXJuIGJpbmIyc3RyKGNvcmVfaG1hY19zaGExKGtleSwgZGF0YSkpO30NCg0KLyoNCiAqIFBlcmZvcm0gYSBzaW1wbGUgc2VsZi10ZXN0IHRvIHNlZSBpZiB0aGUgVk0gaXMgd29ya2luZw0KICovDQpmdW5jdGlvbiBzaGExX3ZtX3Rlc3QoKQ0Kew0KICByZXR1cm4gaGV4X3NoYTEoImFiYyIpID09ICJhOTk5M2UzNjQ3MDY4MTZhYmEzZTI1NzE3ODUwYzI2YzljZDBkODlkIjsNCn0NCg0KLyoNCiAqIENhbGN1bGF0ZSB0aGUgU0hBLTEgb2YgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aA0KICovDQpmdW5jdGlvbiBjb3JlX3NoYTEoeCwgbGVuKQ0Kew0KICAvKiBhcHBlbmQgcGFkZGluZyAqLw0KICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8ICgyNCAtIGxlbiAlIDMyKTsNCiAgeFsoKGxlbiArIDY0ID4+IDkpIDw8IDQpICsgMTVdID0gbGVuOw0KDQogIHZhciB3ID0gQXJyYXkoODApOw0KICB2YXIgYSA9ICAxNzMyNTg0MTkzOw0KICB2YXIgYiA9IC0yNzE3MzM4Nzk7DQogIHZhciBjID0gLTE3MzI1ODQxOTQ7DQogIHZhciBkID0gIDI3MTczMzg3ODsNCiAgdmFyIGUgPSAtMTAwOTU4OTc3NjsNCg0KICBmb3IodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkgKz0gMTYpDQogIHsNCiAgICB2YXIgb2xkYSA9IGE7DQogICAgdmFyIG9sZGIgPSBiOw0KICAgIHZhciBvbGRjID0gYzsNCiAgICB2YXIgb2xkZCA9IGQ7DQogICAgdmFyIG9sZGUgPSBlOw0KDQogICAgZm9yKHZhciBqID0gMDsgaiA8IDgwOyBqKyspDQogICAgew0KICAgICAgaWYoaiA8IDE2KSB3W2pdID0geFtpICsgal07DQogICAgICBlbHNlIHdbal0gPSByb2wod1tqLTNdIF4gd1tqLThdIF4gd1tqLTE0XSBeIHdbai0xNl0sIDEpOw0KICAgICAgdmFyIHQgPSBzYWZlX2FkZChzYWZlX2FkZChyb2woYSwgNSksIHNoYTFfZnQoaiwgYiwgYywgZCkpLA0KICAgICAgICAgICAgICAgICAgICAgICBzYWZlX2FkZChzYWZlX2FkZChlLCB3W2pdKSwgc2hhMV9rdChqKSkpOw0KICAgICAgZSA9IGQ7DQogICAgICBkID0gYzsNCiAgICAgIGMgPSByb2woYiwgMzApOw0KICAgICAgYiA9IGE7DQogICAgICBhID0gdDsNCiAgICB9DQoNCiAgICBhID0gc2FmZV9hZGQoYSwgb2xkYSk7DQogICAgYiA9IHNhZmVfYWRkKGIsIG9sZGIpOw0KICAgIGMgPSBzYWZlX2FkZChjLCBvbGRjKTsNCiAgICBkID0gc2FmZV9hZGQoZCwgb2xkZCk7DQogICAgZSA9IHNhZmVfYWRkKGUsIG9sZGUpOw0KICB9DQogIHJldHVybiBBcnJheShhLCBiLCBjLCBkLCBlKTsNCg0KfQ0KDQovKg0KICogUGVyZm9ybSB0aGUgYXBwcm9wcmlhdGUgdHJpcGxldCBjb21iaW5hdGlvbiBmdW5jdGlvbiBmb3IgdGhlIGN1cnJlbnQNCiAqIGl0ZXJhdGlvbg0KICovDQpmdW5jdGlvbiBzaGExX2Z0KHQsIGIsIGMsIGQpDQp7DQogIGlmKHQgPCAyMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpOw0KICBpZih0IDwgNDApIHJldHVybiBiIF4gYyBeIGQ7DQogIGlmKHQgPCA2MCkgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKTsNCiAgcmV0dXJuIGIgXiBjIF4gZDsNCn0NCg0KLyoNCiAqIERldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgYWRkaXRpdmUgY29uc3RhbnQgZm9yIHRoZSBjdXJyZW50IGl0ZXJhdGlvbg0KICovDQpmdW5jdGlvbiBzaGExX2t0KHQpDQp7DQogIHJldHVybiAodCA8IDIwKSA/ICAxNTE4NTAwMjQ5IDogKHQgPCA0MCkgPyAgMTg1OTc3NTM5MyA6DQogICAgICAgICAodCA8IDYwKSA/IC0xODk0MDA3NTg4IDogLTg5OTQ5NzUxNDsNCn0NCg0KLyoNCiAqIENhbGN1bGF0ZSB0aGUgSE1BQy1TSEExIG9mIGEga2V5IGFuZCBzb21lIGRhdGENCiAqLw0KZnVuY3Rpb24gY29yZV9obWFjX3NoYTEoa2V5LCBkYXRhKQ0Kew0KICB2YXIgYmtleSA9IHN0cjJiaW5iKGtleSk7DQogIGlmKGJrZXkubGVuZ3RoID4gMTYpIGJrZXkgPSBjb3JlX3NoYTEoYmtleSwga2V5Lmxlbmd0aCAqIGNocnN6KTsNCg0KICB2YXIgaXBhZCA9IEFycmF5KDE2KSwgb3BhZCA9IEFycmF5KDE2KTsNCiAgZm9yKHZhciBpID0gMDsgaSA8IDE2OyBpKyspDQogIHsNCiAgICBpcGFkW2ldID0gYmtleVtpXSBeIDB4MzYzNjM2MzY7DQogICAgb3BhZFtpXSA9IGJrZXlbaV0gXiAweDVDNUM1QzVDOw0KICB9DQoNCiAgdmFyIGhhc2ggPSBjb3JlX3NoYTEoaXBhZC5jb25jYXQoc3RyMmJpbmIoZGF0YSkpLCA1MTIgKyBkYXRhLmxlbmd0aCAqIGNocnN6KTsNCiAgcmV0dXJuIGNvcmVfc2hhMShvcGFkLmNvbmNhdChoYXNoKSwgNTEyICsgMTYwKTsNCn0NCg0KLyoNCiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHkNCiAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuDQogKi8NCmZ1bmN0aW9uIHNhZmVfYWRkKHgsIHkpDQp7DQogIHZhciBsc3cgPSAoeCAmIDB4RkZGRikgKyAoeSAmIDB4RkZGRik7DQogIHZhciBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTsNCiAgcmV0dXJuIChtc3cgPDwgMTYpIHwgKGxzdyAmIDB4RkZGRik7DQp9DQoNCi8qDQogKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuDQogKi8NCmZ1bmN0aW9uIHJvbChudW0sIGNudCkNCnsNCiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpOw0KfQ0KDQovKg0KICogQ29udmVydCBhbiA4LWJpdCBvciAxNi1iaXQgc3RyaW5nIHRvIGFuIGFycmF5IG9mIGJpZy1lbmRpYW4gd29yZHMNCiAqIEluIDgtYml0IGZ1bmN0aW9uLCBjaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaS1ieXRlIHNpbGVudGx5IGlnbm9yZWQuDQogKi8NCmZ1bmN0aW9uIHN0cjJiaW5iKHN0cikNCnsNCiAgdmFyIGJpbiA9IEFycmF5KCk7DQogIHZhciBtYXNrID0gKDEgPDwgY2hyc3opIC0gMTsNCiAgZm9yKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGggKiBjaHJzejsgaSArPSBjaHJzeikNCiAgICBiaW5baT4+NV0gfD0gKHN0ci5jaGFyQ29kZUF0KGkgLyBjaHJzeikgJiBtYXNrKSA8PCAoMzIgLSBjaHJzeiAtIGklMzIpOw0KICByZXR1cm4gYmluOw0KfQ0KDQovKg0KICogQ29udmVydCBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzIHRvIGEgc3RyaW5nDQogKi8NCmZ1bmN0aW9uIGJpbmIyc3RyKGJpbikNCnsNCiAgdmFyIHN0ciA9ICIiOw0KICB2YXIgbWFzayA9ICgxIDw8IGNocnN6KSAtIDE7DQogIGZvcih2YXIgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoICogMzI7IGkgKz0gY2hyc3opDQogICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGJpbltpPj41XSA+Pj4gKDMyIC0gY2hyc3ogLSBpJTMyKSkgJiBtYXNrKTsNCiAgcmV0dXJuIHN0cjsNCn0NCg0KLyoNCiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcyB0byBhIGhleCBzdHJpbmcuDQogKi8NCmZ1bmN0aW9uIGJpbmIyaGV4KGJpbmFycmF5KQ0Kew0KICB2YXIgaGV4X3RhYiA9IGhleGNhc2UgPyAiMDEyMzQ1Njc4OUFCQ0RFRiIgOiAiMDEyMzQ1Njc4OWFiY2RlZiI7DQogIHZhciBzdHIgPSAiIjsNCiAgZm9yKHZhciBpID0gMDsgaSA8IGJpbmFycmF5Lmxlbmd0aCAqIDQ7IGkrKykNCiAgew0KICAgIHN0ciArPSBoZXhfdGFiLmNoYXJBdCgoYmluYXJyYXlbaT4+Ml0gPj4gKCgzIC0gaSU0KSo4KzQpKSAmIDB4RikgKw0KICAgICAgICAgICBoZXhfdGFiLmNoYXJBdCgoYmluYXJyYXlbaT4+Ml0gPj4gKCgzIC0gaSU0KSo4ICApKSAmIDB4Rik7DQogIH0NCiAgcmV0dXJuIHN0cjsNCn0NCg0KLyoNCiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcyB0byBhIGJhc2UtNjQgc3RyaW5nDQogKi8NCmZ1bmN0aW9uIGJpbmIyYjY0KGJpbmFycmF5KQ0Kew0KICB2YXIgdGFiID0gIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8iOw0KICB2YXIgc3RyID0gIiI7DQogIGZvcih2YXIgaSA9IDA7IGkgPCBiaW5hcnJheS5sZW5ndGggKiA0OyBpICs9IDMpDQogIHsNCiAgICB2YXIgdHJpcGxldCA9ICgoKGJpbmFycmF5W2kgICA+PiAyXSA+PiA4ICogKDMgLSAgaSAgICU0KSkgJiAweEZGKSA8PCAxNikNCiAgICAgICAgICAgICAgICB8ICgoKGJpbmFycmF5W2krMSA+PiAyXSA+PiA4ICogKDMgLSAoaSsxKSU0KSkgJiAweEZGKSA8PCA4ICkNCiAgICAgICAgICAgICAgICB8ICAoKGJpbmFycmF5W2krMiA+PiAyXSA+PiA4ICogKDMgLSAoaSsyKSU0KSkgJiAweEZGKTsNCiAgICBmb3IodmFyIGogPSAwOyBqIDwgNDsgaisrKQ0KICAgIHsNCiAgICAgIGlmKGkgKiA4ICsgaiAqIDYgPiBiaW5hcnJheS5sZW5ndGggKiAzMikgc3RyICs9IGI2NHBhZDsNCiAgICAgIGVsc2Ugc3RyICs9IHRhYi5jaGFyQXQoKHRyaXBsZXQgPj4gNiooMy1qKSkgJiAweDNGKTsNCiAgICB9DQogIH0NCiAgcmV0dXJuIHN0cjsNCn0NCg0KDQovKioNCiAqIEhhc2hlcyBhIHN0cmluZyB1c2luZyBTSEExIGFuZCByZXR1cm5zIGEgaGV4IHJlcHJlc2VudGF0aW9uIG9mIGl0Lg0KICoNCiAqIEBuYW1lIGhleChzKQ0KICogQHBhcmFtIHtTdHJpbmd9IHMNCiAqIEByZXR1cm5zIHtTdHJpbmd9DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuaGV4ID0gaGV4X3NoYTE7DQoNCi8qKg0KICogSGFzaGVzIGEgc3RyaW5nIHVzaW5nIFNIQTEgYW5kIHJldHVybnMgYSBiYXNlNjQgcmVwcmVzZW50YXRpb24gb2YgaXQuDQogKg0KICogQG5hbWUgYmFzZTY0KHMpDQogKiBAcGFyYW0ge1N0cmluZ30gcw0KICogQHJldHVybnMge1N0cmluZ30NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZXhwb3J0cy5iYXNlNjQgPSBiNjRfc2hhMTsNCg0KLyoqDQogKiBIYXNoZXMgYSBzdHJpbmcgdXNpbmcgU0hBMSBhbmQgcmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBpdC4NCiAqDQogKiBAbmFtZSBzdHIocykNCiAqIEBwYXJhbSB7U3RyaW5nfSBzDQogKiBAcmV0dXJucyB7U3RyaW5nfQ0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLnN0ciA9IHN0cl9zaGExOw0KDQovKioNCiAqIENhbGN1bGF0ZXMgdGhlIEhNQUMtU0hBMSBvZiBhIGtleSBhbmQgc29tZSBkYXRhLCByZXR1cm5pbmcgYSBoZXgNCiAqIHJlcHJlc2VudGF0aW9uIG9mIGl0Lg0KICoNCiAqIEBuYW1lIGhleF9obWFjKGtleSwgZGF0YSkNCiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkNCiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhDQogKiBAcmV0dXJucyB7U3RyaW5nfQ0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLmhleF9obWFjID0gaGV4X2htYWNfc2hhMTsNCg0KLyoqDQogKiBDYWxjdWxhdGVzIHRoZSBITUFDLVNIQTEgb2YgYSBrZXkgYW5kIHNvbWUgZGF0YSwgcmV0dXJuaW5nIGEgYmFzZTY0DQogKiByZXByZXNlbnRhdGlvbiBvZiBpdC4NCiAqDQogKiBAbmFtZSBiYXNlNjRfaG1hYyhrZXksIGRhdGEpDQogKiBAcGFyYW0ge1N0cmluZ30ga2V5DQogKiBAcGFyYW0ge1N0cmluZ30gZGF0YQ0KICogQHJldHVybnMge1N0cmluZ30NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZXhwb3J0cy5iYXNlNjRfaG1hYyA9IGI2NF9obWFjX3NoYTE7DQoNCi8qKg0KICogQ2FsY3VsYXRlcyB0aGUgSE1BQy1TSEExIG9mIGEga2V5IGFuZCBzb21lIGRhdGEsIHJldHVybmluZyBhIHN0cmluZw0KICogcmVwcmVzZW50YXRpb24gb2YgaXQuDQogKg0KICogQG5hbWUgc3RyX2htYWMoa2V5LCBkYXRhKQ0KICogQHBhcmFtIHtTdHJpbmd9IGtleQ0KICogQHBhcmFtIHtTdHJpbmd9IGRhdGENCiAqIEByZXR1cm5zIHtTdHJpbmd9DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuc3RyX2htYWMgPSBzdHJfaG1hY19zaGExOw0KCgp9KX07CgovKioqKioqKioqKiBrYW5zby90eXBlcyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3R5cGVzIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qKgogKiBEb2N1bWVudCB0eXBlcyBjYW4gYmUgdXNlZCB0byBlYXNlIHRoZSB2YWxpZGF0aW9uIG9mIHVwZGF0ZXMgYW5kIGNoZWNrCiAqIHBlcm1pc3Npb25zIHdoZW4gY3JlYXRpbmcsIGVkaXRpbmcgb3IgZGVsZXRpbmcgZG9jdW1lbnRzLgogKgogKiBAbW9kdWxlCiAqLwoKCi8qKgogKiBNb2R1bGUgZGVwZW5kZW5jaWVzCiAqLwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpLAogICAga2Fuc29fdXRpbHMgPSByZXF1aXJlKCdrYW5zby91dGlscycpLAogICAgZGIgPSByZXF1aXJlKCcuL2RiJyksCiAgICBmaWVsZHMgPSByZXF1aXJlKCcuL2ZpZWxkcycpLAogICAgZmllbGRzZXQgPSByZXF1aXJlKCcuL2ZpZWxkc2V0JyksCiAgICB3aWRnZXRzID0gcmVxdWlyZSgnLi93aWRnZXRzJyksCiAgICBwZXJtaXNzaW9ucyA9IHJlcXVpcmUoJy4vcGVybWlzc2lvbnMnKSwKICAgIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fOwoKCi8qKgogKiBDcmVhdGVzIGEgbmV3IFR5cGUgb2JqZWN0CiAqCiAqICMjIyMgT3B0aW9ucyAjIyMjCiAqCiAqICogKipmaWVsZHMqKiAgICAgICAqT2JqZWN0KiAtIEZpZWxkIG9iamVjdHMgdG8gdXNlIGFzIHRoZSBUeXBlcydzIHNjaGVtYQogKiAqICoqcGVybWlzc2lvbnMqKiAgKk9iamVjdCogLSBhIHBlcm1pc3Npb25zIGNoZWNrIGZ1bmN0aW9uIG9yIGFuIG9iamVjdAogKiAgICAgICAgICAgICAgICAgICAgY29udGFpbmluZyBzZXBhcmF0ZSBmdW5jdGlvbnMgdG8gcnVuIG9uIGFkZCwgcmVtb3ZlCiAqICAgICAgICAgICAgICAgICAgICBhbmQgdXBkYXRlIG9wZXJhdGlvbnMuCiAqICogKipkaXNwbGF5X25hbWUqKiAqRnVuY3Rpb258U3RyaW5nfEFycmF5KiAtIG5hbWUgdG8gYmUgdXNlZCB3aGVuIGRpc3BsYXlpbmcKICogICAgICAgICAgICAgICAgICAgIHRoZSBkb2N1bWVudCBpbiB0aGUgYWRtaW4gdG9vbC4gQSBzdHJpbmcgb3IgYXJyYXkKICogICAgICAgICAgICAgICAgICAgIHdpbGwgYmVjb21lIHRoZSBwcm9wZXJ0eSB0byBkaXNwbGF5LiBBIGZ1bmN0aW9uCiAqICAgICAgICAgICAgICAgICAgICBzaG91bGQgdGFrZSB0aGUgZG9jdW1lbnQgYXMgYSBvYmplY3QgYW5kIHJldHVybgogKiAgICAgICAgICAgICAgICAgICAgdGhlIGRpc3BsYXkgbmFtZS4KICoKICogQG5hbWUgVHlwZShuYW1lLCBvcHRpb25zKQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAY29uc3RydWN0b3IKICogQGFwaSBwdWJsaWMKICovCgp2YXIgVHlwZSA9IGV4cG9ydHMuVHlwZSA9IGZ1bmN0aW9uIFR5cGUobmFtZSwgb3B0aW9ucykgewogICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSB0aGUgdHlwZSBuYW1lJyk7CiAgICB9CiAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogICAgdmFyIGYgPSB7fTsKICAgIGYuX2lkID0gZmllbGRzLnN0cmluZyh7CiAgICAgICAgb21pdF9lbXB0eTogdHJ1ZSwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgd2lkZ2V0OiB3aWRnZXRzLmhpZGRlbigpLAogICAgICAgIHBlcm1pc3Npb25zOiB7CiAgICAgICAgICAgIHVwZGF0ZTogcGVybWlzc2lvbnMuZmllbGRVbmVkaXRhYmxlKCkKICAgICAgICB9LAogICAgICAgIGRlZmF1bHRfdmFsdWU6IGZ1bmN0aW9uIChyZXEpIHsKICAgICAgICAgICAgcmV0dXJuIHJlcS51dWlkOwogICAgICAgIH0KICAgIH0pOwogICAgZi5fcmV2ID0gZmllbGRzLnN0cmluZyh7CiAgICAgICAgb21pdF9lbXB0eTogdHJ1ZSwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgd2lkZ2V0OiB3aWRnZXRzLmhpZGRlbigpCiAgICB9KTsKICAgIGYuX2RlbGV0ZWQgPSBmaWVsZHMuYm9vbGVhbih7CiAgICAgICAgb21pdF9lbXB0eTogdHJ1ZSwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgd2lkZ2V0OiB3aWRnZXRzLmhpZGRlbigpCiAgICB9KTsKICAgIGYudHlwZSA9IGZpZWxkcy5zdHJpbmcoewogICAgICAgIGRlZmF1bHRfdmFsdWU6IG5hbWUsCiAgICAgICAgd2lkZ2V0OiB3aWRnZXRzLmhpZGRlbigpLAogICAgICAgIHZhbGlkYXRvcnM6IFsKICAgICAgICAgICAgZnVuY3Rpb24gKGRvYywgdmFsLCByYXcpIHsKICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgdmFsdWUgZm9yIHR5cGUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICBdCiAgICB9KTsKICAgIGZvciAodmFyIGsgaW4gb3B0aW9ucy5maWVsZHMpIHsKICAgICAgICBpZiAob3B0aW9ucy5maWVsZHMuaGFzT3duUHJvcGVydHkoaykpIHsKICAgICAgICAgICAgZltrXSA9IG9wdGlvbnMuZmllbGRzW2tdOwogICAgICAgIH0KICAgIH0KCiAgICBvcHRpb25zLmZpZWxkcyA9IGY7CiAgICBfLmV4dGVuZCh0aGlzLCBfLmRlZmF1bHRzKG9wdGlvbnMsIHsKICAgICAgICBwZXJtaXNzaW9uczogW10KICAgIH0pKTsKCiAgICBpZiAob3B0aW9ucy5kaXNwbGF5X25hbWUpIHsKICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGlzcGxheV9uYW1lICE9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIHRoaXMuZGlzcGxheV9uYW1lID0gZnVuY3Rpb24gKGRvYykgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmRpc3BsYXlfbmFtZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRpc3BsYXlfbmFtZSA9IFtvcHRpb25zLmRpc3BsYXlfbmFtZV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4ga2Fuc29fdXRpbHMuZ2V0UHJvcGVydHlQYXRoKGRvYywgb3B0aW9ucy5kaXNwbGF5X25hbWUpOwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH0KfTsKCi8qKgogKiBSdW4gZmllbGQgdmFsaWRhdG9ycyBhZ2FpbnN0IGRvY3VtZW50IGFuZCBjaGVjayBmb3IgbWlzc2luZyByZXF1aXJlZAogKiBmaWVsZHMgb3IgZXh0cmEgZmllbGRzIHdoZW4gdGhlIFR5cGVzJ3MgYWxsb3dfZXh0cmFfZmllbGRzIHByb3BlcnR5IGlzCiAqIHNldCB0byBmYWxzZS4KICoKICogQG5hbWUgVHlwZS52YWxpZGF0ZShkb2MsIHJhd0RvYykKICogQHBhcmFtIHtPYmplY3R9IGRvYwogKiBAcGFyYW0ge09iamVjdH0gcmF3RG9jCiAqIEByZXR1cm5zIHtBcnJheX0KICogQGFwaSBwdWJsaWMKICovCgpUeXBlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChkb2MsIHJhd0RvYykgewogICAgcmF3RG9jID0gcmF3RG9jIHx8IGRvYzsKICAgIHJldHVybiBmaWVsZHNldC52YWxpZGF0ZSgKICAgICAgICB0aGlzLmZpZWxkcywKICAgICAgICBkb2MsCiAgICAgICAgZG9jLAogICAgICAgIHJhd0RvYywKICAgICAgICBbXSwKICAgICAgICB0aGlzLmFsbG93X2V4dHJhX2ZpZWxkcwogICAgKTsKfTsKCgovKioKICogUnVuIGZpZWxkIHBlcm1pc3Npb25zIGNoZWNrcyBhZ2FpbnN0IHVzZXJDdHggYW5kIGRvY3VtZW50LgogKgogKiBAbmFtZSBUeXBlLmF1dGhvcml6ZShuRG9jLCBvRG9jLCB1c2VyKQogKiBAcGFyYW0ge09iamVjdH0gbkRvYyAtIG5ldyBkb2N1bWVudAogKiBAcGFyYW0ge09iamVjdH0gb0RvYyAtIG9sZCBkb2N1bWVudAogKiBAcGFyYW0ge09iamVjdH0gdXNlckN0eCAtIHVzZXIgY29udGV4dCBvYmplY3QKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KClR5cGUucHJvdG90eXBlLmF1dGhvcml6ZSA9IGZ1bmN0aW9uIChuRG9jLCBvRG9jLCB1c2VyKSB7CiAgICB2YXIgZXJycyA9IHRoaXMuYXV0aG9yaXplVHlwZUxldmVsKG5Eb2MsIG9Eb2MsIHVzZXIpOwogICAgcmV0dXJuIGVycnMuY29uY2F0KGZpZWxkc2V0LmF1dGhGaWVsZFNldCgKICAgICAgICB0aGlzLmZpZWxkcywgbkRvYywgb0RvYywgbkRvYywgb0RvYywgdXNlciwgW10sIHRoaXMuYWxsb3dfZXh0cmFfZmllbGRzCiAgICApKTsKfTsKCi8qKgogKiBSdW5zIHRvcCB0eXBlLWxldmVsIHBlcm1pc3Npb25zIGNoZWNrcyBvbmx5LgogKgogKiBAbmFtZSBUeXBlLmF1dGhvcml6ZVR5cGVMZXZlbChuRG9jLCBvRG9jLCB1c2VyKQogKiBAcGFyYW0ge09iamVjdH0gbkRvYyAtIG5ldyBkb2N1bWVudAogKiBAcGFyYW0ge09iamVjdH0gb0RvYyAtIG9sZCBkb2N1bWVudAogKiBAcGFyYW0ge09iamVjdH0gdXNlckN0eCAtIHVzZXIgY29udGV4dCBvYmplY3QKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KClR5cGUucHJvdG90eXBlLmF1dGhvcml6ZVR5cGVMZXZlbCA9IGZ1bmN0aW9uIChuRG9jLCBvRG9jLCB1c2VyKSB7CiAgICB2YXIgcGVybXMgPSB0aGlzLnBlcm1pc3Npb25zOwogICAgdmFyIGVycnMgPSBbXTsKICAgIGlmIChfLmlzRnVuY3Rpb24ocGVybXMpKSB7CiAgICAgICAgZXJycyA9IGVycnMuY29uY2F0KAogICAgICAgICAgICB1dGlscy5nZXRFcnJvcnMocGVybXMsIFtuRG9jLCBvRG9jLCBudWxsLCBudWxsLCB1c2VyXSkKICAgICAgICApOwogICAgfQogICAgLy8gb24gdXBkYXRlCiAgICB2YXIgZm4gPSBwZXJtcy51cGRhdGU7CiAgICAvLyBvbiBhZGQKICAgIGlmIChuRG9jICYmICFvRG9jKSB7CiAgICAgICAgZm4gPSBwZXJtcy5hZGQ7CiAgICB9CiAgICAvLyBvbiByZW1vdmUKICAgIGVsc2UgaWYgKCFuRG9jIHx8IG5Eb2MuX2RlbGV0ZWQpIHsKICAgICAgICBmbiA9IHBlcm1zLnJlbW92ZTsKICAgIH0KICAgIGlmIChmbikgewogICAgICAgIGVycnMgPSBlcnJzLmNvbmNhdCgKICAgICAgICAgICAgdXRpbHMuZ2V0RXJyb3JzKGZuLCBbbkRvYywgb0RvYywgbnVsbCwgbnVsbCwgdXNlcl0pCiAgICAgICAgKTsKICAgIH0KICAgIHJldHVybiBlcnJzOwp9OwoKLyoqCiAqIENyZWF0ZSdzIGEgbmV3IG9iamVjdCBmb3IgdGhpcyBUeXBlLiBQcmUtZmlsbGluZyBhbnkgZGVmYXVsdCB2YWx1ZXMgYW5kCiAqIHByb3ZpZGluZyBhIG5ldyBfaWQgdmFsdWUuIFRoaXMgaXMgYSBjb252ZW5pZW50IGZ1bmN0aW9uIHRvIHVzZSB3aGVuIGNyZWF0aW5nCiAqIGEgdHlwZSB0byBlbWJlZCB3aXRoaW4gYW5vdGhlci4KICoKICogQG5hbWUgVHlwZS5jcmVhdGUodXNlckN0eCwgY2FsbGJhY2spCiAqIEBwYXJhbSB7T2JqZWN0fSB1c2VyQ3R4CiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrCiAqIEBhcGkgcHVibGljCiAqLwoKVHlwZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKHVzZXJDdHgsIGNhbGxiYWNrKSB7CiAgICB2YXIgZG9jID0gZmllbGRzZXQuY3JlYXRlRGVmYXVsdHModGhpcy5maWVsZHMsIHt1c2VyQ3R4OiB1c2VyQ3R4fSk7CiAgICBkYi5uZXdVVUlEKDEwMCwgZnVuY3Rpb24gKGVyciwgdXVpZCkgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIGRvYy5faWQgPSB1dWlkOwogICAgICAgIGNhbGxiYWNrKG51bGwsIGRvYyk7CiAgICB9KTsKfTsKCi8qKgogKiBDYWxscyB2YWxpZGF0aW9uIGFuZCBwZXJtaXNzaW9ucyBmdW5jdGlvbnMgcmVsZXZhbnQgdG8gYSBkb2N1bWVudCB1cGRhdGUuCiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBmcm9tIHlvdXIgYXBwJ3MgZXhwb3J0ZWQgdmFsaWRhdGVfZG9jX3VwZGF0ZSBmdW5jdGlvbgogKiBpZiB5b3Ugd2lzaCB0byB1c2Uga2Fuc28gVHlwZXMgaW4geW91IHByb2plY3QuCiAqCiAqIFRocm93cyBvbiBlcnJvci4KICoKICogQG5hbWUgdmFsaWRhdGVfZG9jX3VwZGF0ZSh0eXBlcywgbmV3RG9jLCBvbGREb2MsIHVzZXJDdHgpCiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlcwogKiBAcGFyYW0ge09iamVjdH0gbmV3RG9jCiAqIEBwYXJhbSB7T2JqZWN0fSBvbGREb2MKICogQHBhcmFtIHtPYmplY3R9IHVzZXJDdHgKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnZhbGlkYXRlX2RvY191cGRhdGUgPSBmdW5jdGlvbiAodHlwZXMsIG5ld0RvYywgb2xkRG9jLCB1c2VyQ3R4KSB7CiAgICB2YXIgdHlwZSA9IChvbGREb2MgJiYgb2xkRG9jLnR5cGUpIHx8IG5ld0RvYy50eXBlOwogICAgaWYgKHR5cGUgJiYgdHlwZXNbdHlwZV0pIHsKICAgICAgICB2YXIgdCA9IHR5cGVzW3R5cGVdOwogICAgICAgIGlmICghbmV3RG9jLl9kZWxldGVkKSB7CiAgICAgICAgICAgIHZhciB2YWxpZGF0aW9uX2Vycm9ycyA9IHQudmFsaWRhdGUobmV3RG9jKTsKICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25fZXJyb3JzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdmFyIGVyciA9IHZhbGlkYXRpb25fZXJyb3JzWzBdOwogICAgICAgICAgICAgICAgdmFyIG1zZyA9IGVyci5tZXNzYWdlIHx8IGVyci50b1N0cmluZygpOwogICAgICAgICAgICAgICAgaWYgKGVyci5maWVsZCAmJiBlcnIuZmllbGQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgbXNnID0gZXJyLmZpZWxkLmpvaW4oJy4nKSArICc6ICcgKyBtc2c7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aHJvdyB7Zm9yYmlkZGVuOiBtc2d9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBwZXJtaXNzaW9uc19lcnJvcnMgPSB0LmF1dGhvcml6ZShuZXdEb2MsIG9sZERvYywgdXNlckN0eCk7CiAgICAgICAgaWYgKHBlcm1pc3Npb25zX2Vycm9ycy5sZW5ndGgpIHsKICAgICAgICAgICAgdmFyIGVycjIgPSBwZXJtaXNzaW9uc19lcnJvcnNbMF07CiAgICAgICAgICAgIHZhciBtc2cyID0gZXJyMi5tZXNzYWdlIHx8IGVycjIudG9TdHJpbmcoKTsKICAgICAgICAgICAgaWYgKGVycjIuZmllbGQgJiYgZXJyMi5maWVsZC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIG1zZzIgPSBlcnIyLmZpZWxkLmpvaW4oJy4nKSArICc6ICcgKyBtc2cyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93IHt1bmF1dGhvcml6ZWQ6IG1zZzJ9OwogICAgICAgIH0KICAgICAgICBpZiAodC52YWxpZGF0ZV9kb2NfdXBkYXRlKSB7CiAgICAgICAgICAgIHQudmFsaWRhdGVfZG9jX3VwZGF0ZShuZXdEb2MsIG9sZERvYywgdXNlckN0eCk7CiAgICAgICAgfQogICAgfQp9OwoKLyoqCiAqIFRoaXMgdHlwZSB3cmFwcyBhIHJlZmVyZW5jZSB0byBhIGRvY3VtZW50LiBUaGUgX2lkIGF0dHJpYnV0ZSBpcwogKiBhdXRvLWdlbmVyYXRlZCBhcyB1c3VhbDsgdGhlIGlkIG9mIHRoZSBkb2N1bWVudCBiZWluZyByZWZlcnJlZCB0bwogKiBpcyBzdG9yZWQgaW4gdGhlICdyZWYnIGF0dHJpYnV0ZS4gSW4gbGlzdHMsIHRoaXMgaGFzIHRoZSBlZmZlY3Qgb2YKICogYWxsb3dpbmcgbXVsdGlwbGUgcmVmZXJlbmNlcyB0byBhIHNpbmdsZSBkb2N1bWVudC4KICovCgpleHBvcnRzLnJlZmVyZW5jZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICBpZiAoIShvcHRpb25zLnR5cGUgaW5zdGFuY2VvZiBUeXBlKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgJ3JlZmVyZW5jZTogVGhlIGB0eXBlYCBvcHRpb24gd2FzIG5vdCBzcGVjaWZpZWQsJyArCiAgICAgICAgICAgICAgICAnb3IgaXMgbm90IGFuIGluc3RhbmNlIG9mIHRoZSBgVHlwZWAgY2xhc3MuJwogICAgICAgICk7CiAgICB9CiAgICB2YXIgdHlwZSA9IG5ldyBUeXBlKCdyZWZlcmVuY2UnLCB7CiAgICAgICAgZmllbGRzOiB7CiAgICAgICAgICAgIHJlZjogZmllbGRzLnN0cmluZyh7CiAgICAgICAgICAgICAgICBvbWl0X2VtcHR5OiB0cnVlLAogICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICEhb3B0aW9ucy5yZXF1aXJlZCwKICAgICAgICAgICAgICAgIHdpZGdldDogd2lkZ2V0cy5oaWRkZW4oKSwKICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiB7fSwKICAgICAgICAgICAgICAgIGRlZmF1bHRfdmFsdWU6IGZ1bmN0aW9uIChyZXEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgIH0KICAgIH0pOwogICAgdHlwZS50eXBlID0gb3B0aW9ucy50eXBlOwogICAgcmV0dXJuIHR5cGU7Cn07CgovKioKICogVGhpcyB0eXBlIHdyYXBzIGEgcmVmZXJlbmNlIHRvIGEgZG9jdW1lbnQuIFRoZSBfaWQgYXR0cmlidXRlIGlzCiAqIG1hZGUgd3JpdGVhYmxlLCBhbmQgaXMgdXNlZCB0byBzdG9yZSB0aGUgaWQgb2YgdGhlIGRvY3VtZW50IGJlaW5nCiAqIHJlZmVycmVkIHRvLiBJbiBsaXN0cywgaGFzIHRoZSBlZmZlY3Qgb2YgY29uc3RyYWluaW5nIGVhY2ggcmVmZXJlbmNlCiAqIHRvIGFwcGVhciBubyBtb3JlIHRoYW4gb25jZS4KICovCgpleHBvcnRzLnVuaXF1ZVJlZmVyZW5jZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICBpZiAoIShvcHRpb25zLnR5cGUgaW5zdGFuY2VvZiBUeXBlKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgJ3VuaXF1ZVJlZmVyZW5jZTogVGhlIGB0eXBlYCBvcHRpb24gd2FzIG5vdCBzcGVjaWZpZWQsJyArCiAgICAgICAgICAgICAgICAnb3IgaXMgbm90IGFuIGluc3RhbmNlIG9mIHRoZSBgVHlwZWAgY2xhc3MuJwogICAgICAgICk7CiAgICB9CiAgICB2YXIgdHlwZSA9IG5ldyBUeXBlKCd1bmlxdWVfcmVmZXJlbmNlJywgewogICAgICAgIGZpZWxkczoge30KICAgIH0pOwogICAgdHlwZS5maWVsZHMuX2lkID0gZmllbGRzLnN0cmluZyh7CiAgICAgICAgb21pdF9lbXB0eTogdHJ1ZSwKICAgICAgICByZXF1aXJlZDogISFvcHRpb25zLnJlcXVpcmVkLAogICAgICAgIHdpZGdldDogd2lkZ2V0cy5oaWRkZW4oKSwKICAgICAgICBwZXJtaXNzaW9uczoge30sCiAgICAgICAgZGVmYXVsdF92YWx1ZTogZnVuY3Rpb24gKHJlcSkgewogICAgICAgICAgICByZXR1cm4gcmVxLnV1aWQ7CiAgICAgICAgfQogICAgfSk7CiAgICB0eXBlLnR5cGUgPSBvcHRpb25zLnR5cGU7CiAgICByZXR1cm4gdHlwZTsKfTsKCgp9KX07CgovKioqKioqKioqKiBrYW5zby91bmRlcnNjb3JlICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsia2Fuc28vdW5kZXJzY29yZSJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogVXNlZCBieSBLYW5zbyBpbnRlcm5hbGx5LCB0aGUgZXhjZWxsZW50IFVuZGVyc2NvcmUuanMgbGlicmFyeSBpcyBhbHNvCiAqIGluY2x1ZGVkIGluIHRoZSBzdGFuZGFyZCBzZXQgb2YgQ29tbW9uSlMgbW9kdWxlcyBwdXNoZWQgd2l0aCB5b3VyIGFwcC4KICoKICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlIFVuZGVyc2NvcmUuanMgQVBJLCBzZWUgdGhlIHdlYnNpdGU6CiAqIGh0dHA6Ly9kb2N1bWVudGNsb3VkLmdpdGh1Yi5jb20vdW5kZXJzY29yZS8KICoKICogQG1vZHVsZQogKi8KCgovLyAgICAgVW5kZXJzY29yZS5qcyAxLjEuNQovLyAgICAgKGMpIDIwMTEgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIEluYy4KLy8gICAgIFVuZGVyc2NvcmUgaXMgZnJlZWx5IGRpc3RyaWJ1dGFibGUgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgovLyAgICAgUG9ydGlvbnMgb2YgVW5kZXJzY29yZSBhcmUgaW5zcGlyZWQgb3IgYm9ycm93ZWQgZnJvbSBQcm90b3R5cGUsCi8vICAgICBPbGl2ZXIgU3RlZWxlJ3MgRnVuY3Rpb25hbCwgYW5kIEpvaG4gUmVzaWcncyBNaWNyby1UZW1wbGF0aW5nLgovLyAgICAgRm9yIGFsbCBkZXRhaWxzIGFuZCBkb2N1bWVudGF0aW9uOgovLyAgICAgaHR0cDovL2RvY3VtZW50Y2xvdWQuZ2l0aHViLmNvbS91bmRlcnNjb3JlCgooZnVuY3Rpb24oKSB7CgogIC8vIEJhc2VsaW5lIHNldHVwCiAgLy8gLS0tLS0tLS0tLS0tLS0KCiAgLy8gRXN0YWJsaXNoIHRoZSByb290IG9iamVjdCwgYHdpbmRvd2AgaW4gdGhlIGJyb3dzZXIsIG9yIGBnbG9iYWxgIG9uIHRoZSBzZXJ2ZXIuCiAgdmFyIHJvb3QgPSB0aGlzOwoKICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYF9gIHZhcmlhYmxlLgogIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87CgogIC8vIEVzdGFibGlzaCB0aGUgb2JqZWN0IHRoYXQgZ2V0cyByZXR1cm5lZCB0byBicmVhayBvdXQgb2YgYSBsb29wIGl0ZXJhdGlvbi4KICB2YXIgYnJlYWtlciA9IHt9OwoKICAvLyBTYXZlIGJ5dGVzIGluIHRoZSBtaW5pZmllZCAoYnV0IG5vdCBnemlwcGVkKSB2ZXJzaW9uOgogIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTsKCiAgLy8gQ3JlYXRlIHF1aWNrIHJlZmVyZW5jZSB2YXJpYWJsZXMgZm9yIHNwZWVkIGFjY2VzcyB0byBjb3JlIHByb3RvdHlwZXMuCiAgdmFyIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLAogICAgICB1bnNoaWZ0ICAgICAgICAgID0gQXJyYXlQcm90by51bnNoaWZ0LAogICAgICB0b1N0cmluZyAgICAgICAgID0gT2JqUHJvdG8udG9TdHJpbmcsCiAgICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTsKCiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlCiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuCiAgdmFyCiAgICBuYXRpdmVGb3JFYWNoICAgICAgPSBBcnJheVByb3RvLmZvckVhY2gsCiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCwKICAgIG5hdGl2ZVJlZHVjZSAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlLAogICAgbmF0aXZlUmVkdWNlUmlnaHQgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodCwKICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLAogICAgbmF0aXZlRXZlcnkgICAgICAgID0gQXJyYXlQcm90by5ldmVyeSwKICAgIG5hdGl2ZVNvbWUgICAgICAgICA9IEFycmF5UHJvdG8uc29tZSwKICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZiwKICAgIG5hdGl2ZUxhc3RJbmRleE9mICA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2YsCiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LAogICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsCiAgICBuYXRpdmVCaW5kICAgICAgICAgPSBGdW5jUHJvdG8uYmluZDsKCiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuCiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHsgcmV0dXJuIG5ldyB3cmFwcGVyKG9iaik7IH07CgogIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqQ29tbW9uSlMqKiwgd2l0aCBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eQogIC8vIGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgbm90IGluIENvbW1vbkpTLCBhZGQgYF9gIHRvIHRoZQogIC8vIGdsb2JhbCBvYmplY3QuCiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IF87CiAgICBfLl8gPSBfOwogIH0gZWxzZSB7CiAgICByb290Ll8gPSBfOwogIH0KCiAgLy8gQ3VycmVudCB2ZXJzaW9uLgogIF8uVkVSU0lPTiA9ICcxLjEuNSc7CgogIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuCiAgLy8gSGFuZGxlcyBvYmplY3RzIGltcGxlbWVudGluZyBgZm9yRWFjaGAsIGFycmF5cywgYW5kIHJhdyBvYmplY3RzLgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmb3JFYWNoYCBpZiBhdmFpbGFibGUuCiAgdmFyIGVhY2ggPSBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybjsKICAgIGlmIChuYXRpdmVGb3JFYWNoICYmIG9iai5mb3JFYWNoID09PSBuYXRpdmVGb3JFYWNoKSB7CiAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIH0gZWxzZSBpZiAoXy5pc051bWJlcihvYmoubGVuZ3RoKSkgewogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07CgogIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0b3IgdG8gZWFjaCBlbGVtZW50LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBtYXBgIGlmIGF2YWlsYWJsZS4KICBfLm1hcCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgaWYgKG5hdGl2ZU1hcCAmJiBvYmoubWFwID09PSBuYXRpdmVNYXApIHJldHVybiBvYmoubWFwKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgcmVzdWx0c1tyZXN1bHRzLmxlbmd0aF0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCwKICAvLyBvciBgZm9sZGxgLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgcmVkdWNlYCBpZiBhdmFpbGFibGUuCiAgXy5yZWR1Y2UgPSBfLmZvbGRsID0gXy5pbmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7CiAgICB2YXIgaW5pdGlhbCA9IG1lbW8gIT09IHZvaWQgMDsKICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107CiAgICBpZiAobmF0aXZlUmVkdWNlICYmIG9iai5yZWR1Y2UgPT09IG5hdGl2ZVJlZHVjZSkgewogICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgICByZXR1cm4gaW5pdGlhbCA/IG9iai5yZWR1Y2UoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZShpdGVyYXRvcik7CiAgICB9CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmICghaW5pdGlhbCAmJiBpbmRleCA9PT0gMCkgewogICAgICAgIG1lbW8gPSB2YWx1ZTsKICAgICAgICBpbml0aWFsID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBtZW1vID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBtZW1vLCB2YWx1ZSwgaW5kZXgsIGxpc3QpOwogICAgICB9CiAgICB9KTsKICAgIGlmICghaW5pdGlhbCkgdGhyb3cgbmV3IFR5cGVFcnJvcigiUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZSIpOwogICAgcmV0dXJuIG1lbW87CiAgfTsKCiAgLy8gVGhlIHJpZ2h0LWFzc29jaWF0aXZlIHZlcnNpb24gb2YgcmVkdWNlLCBhbHNvIGtub3duIGFzIGBmb2xkcmAuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuCiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7CiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdOwogICAgaWYgKG5hdGl2ZVJlZHVjZVJpZ2h0ICYmIG9iai5yZWR1Y2VSaWdodCA9PT0gbmF0aXZlUmVkdWNlUmlnaHQpIHsKICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgICAgcmV0dXJuIG1lbW8gIT09IHZvaWQgMCA/IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvciwgbWVtbykgOiBvYmoucmVkdWNlUmlnaHQoaXRlcmF0b3IpOwogICAgfQogICAgdmFyIHJldmVyc2VkID0gKF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLnRvQXJyYXkob2JqKSkucmV2ZXJzZSgpOwogICAgcmV0dXJuIF8ucmVkdWNlKHJldmVyc2VkLCBpdGVyYXRvciwgbWVtbywgY29udGV4dCk7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLgogIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgdmFyIHJlc3VsdDsKICAgIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7CiAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmaWx0ZXJgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLgogIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0czsKICAgIGlmIChuYXRpdmVGaWx0ZXIgJiYgb2JqLmZpbHRlciA9PT0gbmF0aXZlRmlsdGVyKSByZXR1cm4gb2JqLmZpbHRlcihpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gdmFsdWU7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuCiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0czsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaWYgKCFpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gdmFsdWU7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBldmVyeWAgaWYgYXZhaWxhYmxlLgogIC8vIEFsaWFzZWQgYXMgYGFsbGAuCiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaXRlcmF0b3IgPSBpdGVyYXRvciB8fCBfLmlkZW50aXR5OwogICAgdmFyIHJlc3VsdCA9IHRydWU7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7CiAgICBpZiAobmF0aXZlRXZlcnkgJiYgb2JqLmV2ZXJ5ID09PSBuYXRpdmVFdmVyeSkgcmV0dXJuIG9iai5ldmVyeShpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmICghKHJlc3VsdCA9IHJlc3VsdCAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgc29tZWAgaWYgYXZhaWxhYmxlLgogIC8vIEFsaWFzZWQgYXMgYGFueWAuCiAgdmFyIGFueSA9IF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaXRlcmF0b3IgPSBpdGVyYXRvciB8fCBfLmlkZW50aXR5OwogICAgdmFyIHJlc3VsdCA9IGZhbHNlOwogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0OwogICAgaWYgKG5hdGl2ZVNvbWUgJiYgb2JqLnNvbWUgPT09IG5hdGl2ZVNvbWUpIHJldHVybiBvYmouc29tZShpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChyZXN1bHQgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJldHVybiBicmVha2VyOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIERldGVybWluZSBpZiBhIGdpdmVuIHZhbHVlIGlzIGluY2x1ZGVkIGluIHRoZSBhcnJheSBvciBvYmplY3QgdXNpbmcgYD09PWAuCiAgLy8gQWxpYXNlZCBhcyBgY29udGFpbnNgLgogIF8uaW5jbHVkZSA9IF8uY29udGFpbnMgPSBmdW5jdGlvbihvYmosIHRhcmdldCkgewogICAgdmFyIGZvdW5kID0gZmFsc2U7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBmb3VuZDsKICAgIGlmIChuYXRpdmVJbmRleE9mICYmIG9iai5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gb2JqLmluZGV4T2YodGFyZ2V0KSAhPSAtMTsKICAgIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGlmIChmb3VuZCA9IHZhbHVlID09PSB0YXJnZXQpIHJldHVybiB0cnVlOwogICAgfSk7CiAgICByZXR1cm4gZm91bmQ7CiAgfTsKCiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uCiAgXy5pbnZva2UgPSBmdW5jdGlvbihvYmosIG1ldGhvZCkgewogICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gKG1ldGhvZCA/IHZhbHVlW21ldGhvZF0gOiB2YWx1ZSkuYXBwbHkodmFsdWUsIGFyZ3MpOwogICAgfSk7CiAgfTsKCiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS4KICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHsKICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuIHZhbHVlW2tleV07IH0pOwogIH07CgogIC8vIFJldHVybiB0aGUgbWF4aW11bSBlbGVtZW50IG9yIChlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS4KICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikpIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBvYmopOwogICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IC1JbmZpbml0eX07CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7CiAgICAgIGNvbXB1dGVkID49IHJlc3VsdC5jb21wdXRlZCAmJiAocmVzdWx0ID0ge3ZhbHVlIDogdmFsdWUsIGNvbXB1dGVkIDogY29tcHV0ZWR9KTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdC52YWx1ZTsKICB9OwoKICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuCiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopKSByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgb2JqKTsKICAgIHZhciByZXN1bHQgPSB7Y29tcHV0ZWQgOiBJbmZpbml0eX07CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7CiAgICAgIGNvbXB1dGVkIDwgcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0LnZhbHVlOwogIH07CgogIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRvci4KICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdmFsdWUgOiB2YWx1ZSwKICAgICAgICBjcml0ZXJpYSA6IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KQogICAgICB9OwogICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWEsIGIgPSByaWdodC5jcml0ZXJpYTsKICAgICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwOwogICAgfSksICd2YWx1ZScpOwogIH07CgogIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCBhdCB3aGF0IGluZGV4IGFuIG9iamVjdCBzaG91bGQKICAvLyBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLgogIF8uc29ydGVkSW5kZXggPSBmdW5jdGlvbihhcnJheSwgb2JqLCBpdGVyYXRvcikgewogICAgaXRlcmF0b3IgPSBpdGVyYXRvciB8fCBfLmlkZW50aXR5OwogICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGg7CiAgICB3aGlsZSAobG93IDwgaGlnaCkgewogICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+IDE7CiAgICAgIGl0ZXJhdG9yKGFycmF5W21pZF0pIDwgaXRlcmF0b3Iob2JqKSA/IGxvdyA9IG1pZCArIDEgOiBoaWdoID0gbWlkOwogICAgfQogICAgcmV0dXJuIGxvdzsKICB9OwoKICAvLyBTYWZlbHkgY29udmVydCBhbnl0aGluZyBpdGVyYWJsZSBpbnRvIGEgcmVhbCwgbGl2ZSBhcnJheS4KICBfLnRvQXJyYXkgPSBmdW5jdGlvbihpdGVyYWJsZSkgewogICAgaWYgKCFpdGVyYWJsZSkgICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgaWYgKGl0ZXJhYmxlLnRvQXJyYXkpICAgICAgICAgcmV0dXJuIGl0ZXJhYmxlLnRvQXJyYXkoKTsKICAgIGlmIChfLmlzQXJyYXkoaXRlcmFibGUpKSAgICAgIHJldHVybiBpdGVyYWJsZTsKICAgIGlmIChfLmlzQXJndW1lbnRzKGl0ZXJhYmxlKSkgIHJldHVybiBzbGljZS5jYWxsKGl0ZXJhYmxlKTsKICAgIHJldHVybiBfLnZhbHVlcyhpdGVyYWJsZSk7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LgogIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIF8udG9BcnJheShvYmopLmxlbmd0aDsKICB9OwoKICAvLyBBcnJheSBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOCiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAuIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsKICAvLyB3aXRoIGBfLm1hcGAuCiAgXy5maXJzdCA9IF8uaGVhZCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewogICAgcmV0dXJuIChuICE9IG51bGwpICYmICFndWFyZCA/IHNsaWNlLmNhbGwoYXJyYXksIDAsIG4pIDogYXJyYXlbMF07CiAgfTsKCiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYC4KICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKmluZGV4Kiogd2lsbCByZXR1cm4KICAvLyB0aGUgcmVzdCBvZiB0aGUgdmFsdWVzIGluIHRoZSBhcnJheSBmcm9tIHRoYXQgaW5kZXggb253YXJkLiBUaGUgKipndWFyZCoqCiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLgogIF8ucmVzdCA9IF8udGFpbCA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCwgZ3VhcmQpIHsKICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAoaW5kZXggPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogaW5kZXgpOwogIH07CgogIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LgogIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07CiAgfTsKCiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LgogIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICEhdmFsdWU7IH0pOwogIH07CgogIC8vIFJldHVybiBhIGNvbXBsZXRlbHkgZmxhdHRlbmVkIHZlcnNpb24gb2YgYW4gYXJyYXkuCiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHJldHVybiBfLnJlZHVjZShhcnJheSwgZnVuY3Rpb24obWVtbywgdmFsdWUpIHsKICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHJldHVybiBtZW1vLmNvbmNhdChfLmZsYXR0ZW4odmFsdWUpKTsKICAgICAgbWVtb1ttZW1vLmxlbmd0aF0gPSB2YWx1ZTsKICAgICAgcmV0dXJuIG1lbW87CiAgICB9LCBbXSk7CiAgfTsKCiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuCiAgXy53aXRob3V0ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHZhciB2YWx1ZXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICFfLmluY2x1ZGUodmFsdWVzLCB2YWx1ZSk7IH0pOwogIH07CgogIC8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5CiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLgogIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuCiAgXy51bmlxID0gXy51bmlxdWUgPSBmdW5jdGlvbihhcnJheSwgaXNTb3J0ZWQpIHsKICAgIHJldHVybiBfLnJlZHVjZShhcnJheSwgZnVuY3Rpb24obWVtbywgZWwsIGkpIHsKICAgICAgaWYgKDAgPT0gaSB8fCAoaXNTb3J0ZWQgPT09IHRydWUgPyBfLmxhc3QobWVtbykgIT0gZWwgOiAhXy5pbmNsdWRlKG1lbW8sIGVsKSkpIG1lbW9bbWVtby5sZW5ndGhdID0gZWw7CiAgICAgIHJldHVybiBtZW1vOwogICAgfSwgW10pOwogIH07CgogIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGUKICAvLyBwYXNzZWQtaW4gYXJyYXlzLgogIF8uaW50ZXJzZWN0ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHZhciByZXN0ID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgcmV0dXJuIF8uZmlsdGVyKF8udW5pcShhcnJheSksIGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgcmV0dXJuIF8uZXZlcnkocmVzdCwgZnVuY3Rpb24ob3RoZXIpIHsKICAgICAgICByZXR1cm4gXy5pbmRleE9mKG90aGVyLCBpdGVtKSA+PSAwOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmUKICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci4KICBfLnppcCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICB2YXIgbGVuZ3RoID0gXy5tYXgoXy5wbHVjayhhcmdzLCAnbGVuZ3RoJykpOwogICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHJlc3VsdHNbaV0gPSBfLnBsdWNrKGFyZ3MsICIiICsgaSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9OwoKICAvLyBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBseSB1cyB3aXRoIGluZGV4T2YgKEknbSBsb29raW5nIGF0IHlvdSwgKipNU0lFKiopLAogIC8vIHdlIG5lZWQgdGhpcyBmdW5jdGlvbi4gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhbgogIC8vIGl0ZW0gaW4gYW4gYXJyYXksIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGluZGV4T2ZgIGlmIGF2YWlsYWJsZS4KICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWAKICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLgogIF8uaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBpc1NvcnRlZCkgewogICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTsKICAgIHZhciBpLCBsOwogICAgaWYgKGlzU29ydGVkKSB7CiAgICAgIGkgPSBfLnNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTsKICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xOwogICAgfQogICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgYXJyYXkuaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZikgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSk7CiAgICBmb3IgKGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHJldHVybiBpOwogICAgcmV0dXJuIC0xOwogIH07CgoKICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbGFzdEluZGV4T2ZgIGlmIGF2YWlsYWJsZS4KICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0pIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7CiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSByZXR1cm4gYXJyYXkubGFzdEluZGV4T2YoaXRlbSk7CiAgICB2YXIgaSA9IGFycmF5Lmxlbmd0aDsKICAgIHdoaWxlIChpLS0pIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7CiAgICByZXR1cm4gLTE7CiAgfTsKCiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZgogIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlCiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS4KICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDEpIHsKICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7CiAgICAgIHN0YXJ0ID0gMDsKICAgIH0KICAgIHN0ZXAgPSBhcmd1bWVudHNbMl0gfHwgMTsKCiAgICB2YXIgbGVuID0gTWF0aC5tYXgoTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCksIDApOwogICAgdmFyIGlkeCA9IDA7CiAgICB2YXIgcmFuZ2UgPSBuZXcgQXJyYXkobGVuKTsKCiAgICB3aGlsZShpZHggPCBsZW4pIHsKICAgICAgcmFuZ2VbaWR4KytdID0gc3RhcnQ7CiAgICAgIHN0YXJ0ICs9IHN0ZXA7CiAgICB9CgogICAgcmV0dXJuIHJhbmdlOwogIH07CgogIC8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsCiAgLy8gb3B0aW9uYWxseSkuIEJpbmRpbmcgd2l0aCBhcmd1bWVudHMgaXMgYWxzbyBrbm93biBhcyBgY3VycnlgLgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZiBhdmFpbGFibGUuCiAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgb2JqKSB7CiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBmdW5jLmJpbmQuYXBwbHkoZnVuYywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZnVuYy5hcHBseShvYmosIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwogICAgfTsKICB9OwoKICAvLyBCaW5kIGFsbCBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQKICAvLyBhbGwgY2FsbGJhY2tzIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC4KICBfLmJpbmRBbGwgPSBmdW5jdGlvbihvYmopIHsKICAgIHZhciBmdW5jcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgIGlmIChmdW5jcy5sZW5ndGggPT0gMCkgZnVuY3MgPSBfLmZ1bmN0aW9ucyhvYmopOwogICAgZWFjaChmdW5jcywgZnVuY3Rpb24oZikgeyBvYmpbZl0gPSBfLmJpbmQob2JqW2ZdLCBvYmopOyB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy4KICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHsKICAgIHZhciBtZW1vID0ge307CiAgICBoYXNoZXIgPSBoYXNoZXIgfHwgXy5pZGVudGl0eTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGtleSA9IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChtZW1vLCBrZXkpID8gbWVtb1trZXldIDogKG1lbW9ba2V5XSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICB9OwogIH07CgogIC8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHMKICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuCiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmMuYXBwbHkoZnVuYywgYXJncyk7IH0sIHdhaXQpOwogIH07CgogIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcwogIC8vIGNsZWFyZWQuCiAgXy5kZWZlciA9IGZ1bmN0aW9uKGZ1bmMpIHsKICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7CiAgfTsKCiAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBpbXBsZW1lbnQgYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuCiAgdmFyIGxpbWl0ID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgZGVib3VuY2UpIHsKICAgIHZhciB0aW1lb3V0OwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHZhciB0aHJvdHRsZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICB9OwogICAgICBpZiAoZGVib3VuY2UpIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgaWYgKGRlYm91bmNlIHx8ICF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dCh0aHJvdHRsZXIsIHdhaXQpOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2UKICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4KICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCkgewogICAgcmV0dXJuIGxpbWl0KGZ1bmMsIHdhaXQsIGZhbHNlKTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90CiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvcgogIC8vIE4gbWlsbGlzZWNvbmRzLgogIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CiAgICByZXR1cm4gbGltaXQoZnVuYywgd2FpdCwgdHJ1ZSk7CiAgfTsKCiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93CiAgLy8gb2Z0ZW4geW91IGNhbGwgaXQuIFVzZWZ1bCBmb3IgbGF6eSBpbml0aWFsaXphdGlvbi4KICBfLm9uY2UgPSBmdW5jdGlvbihmdW5jKSB7CiAgICB2YXIgcmFuID0gZmFsc2UsIG1lbW87CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vOwogICAgICByYW4gPSB0cnVlOwogICAgICByZXR1cm4gbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfTsKCiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsCiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZAogIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uCiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgYXJncyA9IFtmdW5jXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoCiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy4KICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBmdW5jcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIGZvciAodmFyIGk9ZnVuY3MubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgYXJncyA9IFtmdW5jc1tpXS5hcHBseSh0aGlzLCBhcmdzKV07CiAgICAgIH0KICAgICAgcmV0dXJuIGFyZ3NbMF07CiAgICB9OwogIH07CgogIC8vIE9iamVjdCBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tCgogIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2AKICBfLmtleXMgPSBuYXRpdmVLZXlzIHx8IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKG9iaiAhPT0gT2JqZWN0KG9iaikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgb2JqZWN0Jyk7CiAgICB2YXIga2V5cyA9IFtdOwogICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBrZXlzW2tleXMubGVuZ3RoXSA9IGtleTsKICAgIHJldHVybiBrZXlzOwogIH07CgogIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy4KICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7CiAgfTsKCiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LgogIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgCiAgXy5mdW5jdGlvbnMgPSBfLm1ldGhvZHMgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLmZpbHRlcihfLmtleXMob2JqKSwgZnVuY3Rpb24oa2V5KXsgcmV0dXJuIF8uaXNGdW5jdGlvbihvYmpba2V5XSk7IH0pLnNvcnQoKTsKICB9OwoKICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS4KICBfLmV4dGVuZCA9IGZ1bmN0aW9uKG9iaikgewogICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdOwogICAgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuCiAgXy5kZWZhdWx0cyA9IGZ1bmN0aW9uKG9iaikgewogICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkgaWYgKG9ialtwcm9wXSA9PSBudWxsKSBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07CiAgICB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LgogIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7CiAgfTsKCiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLgogIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gInRhcCBpbnRvIiBhIG1ldGhvZCBjaGFpbiwgaW4KICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi4KICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHsKICAgIGludGVyY2VwdG9yKG9iaik7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLgogIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgIC8vIENoZWNrIG9iamVjdCBpZGVudGl0eS4KICAgIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTsKICAgIC8vIERpZmZlcmVudCB0eXBlcz8KICAgIHZhciBhdHlwZSA9IHR5cGVvZihhKSwgYnR5cGUgPSB0eXBlb2YoYik7CiAgICBpZiAoYXR5cGUgIT0gYnR5cGUpIHJldHVybiBmYWxzZTsKICAgIC8vIEJhc2ljIGVxdWFsaXR5IHRlc3QgKHdhdGNoIG91dCBmb3IgY29lcmNpb25zKS4KICAgIGlmIChhID09IGIpIHJldHVybiB0cnVlOwogICAgLy8gT25lIGlzIGZhbHN5IGFuZCB0aGUgb3RoZXIgdHJ1dGh5LgogICAgaWYgKCghYSAmJiBiKSB8fCAoYSAmJiAhYikpIHJldHVybiBmYWxzZTsKICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLgogICAgaWYgKGEuX2NoYWluKSBhID0gYS5fd3JhcHBlZDsKICAgIGlmIChiLl9jaGFpbikgYiA9IGIuX3dyYXBwZWQ7CiAgICAvLyBPbmUgb2YgdGhlbSBpbXBsZW1lbnRzIGFuIGlzRXF1YWwoKT8KICAgIGlmIChhLmlzRXF1YWwpIHJldHVybiBhLmlzRXF1YWwoYik7CiAgICAvLyBDaGVjayBkYXRlcycgaW50ZWdlciB2YWx1ZXMuCiAgICBpZiAoXy5pc0RhdGUoYSkgJiYgXy5pc0RhdGUoYikpIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCk7CiAgICAvLyBCb3RoIGFyZSBOYU4/CiAgICBpZiAoXy5pc05hTihhKSAmJiBfLmlzTmFOKGIpKSByZXR1cm4gZmFsc2U7CiAgICAvLyBDb21wYXJlIHJlZ3VsYXIgZXhwcmVzc2lvbnMuCiAgICBpZiAoXy5pc1JlZ0V4cChhKSAmJiBfLmlzUmVnRXhwKGIpKQogICAgICByZXR1cm4gYS5zb3VyY2UgICAgID09PSBiLnNvdXJjZSAmJgogICAgICAgICAgICAgYS5nbG9iYWwgICAgID09PSBiLmdsb2JhbCAmJgogICAgICAgICAgICAgYS5pZ25vcmVDYXNlID09PSBiLmlnbm9yZUNhc2UgJiYKICAgICAgICAgICAgIGEubXVsdGlsaW5lICA9PT0gYi5tdWx0aWxpbmU7CiAgICAvLyBJZiBhIGlzIG5vdCBhbiBvYmplY3QgYnkgdGhpcyBwb2ludCwgd2UgY2FuJ3QgaGFuZGxlIGl0LgogICAgaWYgKGF0eXBlICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlOwogICAgLy8gQ2hlY2sgZm9yIGRpZmZlcmVudCBhcnJheSBsZW5ndGhzIGJlZm9yZSBjb21wYXJpbmcgY29udGVudHMuCiAgICBpZiAoYS5sZW5ndGggJiYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkpIHJldHVybiBmYWxzZTsKICAgIC8vIE5vdGhpbmcgZWxzZSB3b3JrZWQsIGRlZXAgY29tcGFyZSB0aGUgY29udGVudHMuCiAgICB2YXIgYUtleXMgPSBfLmtleXMoYSksIGJLZXlzID0gXy5rZXlzKGIpOwogICAgLy8gRGlmZmVyZW50IG9iamVjdCBzaXplcz8KICAgIGlmIChhS2V5cy5sZW5ndGggIT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7CiAgICAvLyBSZWN1cnNpdmUgY29tcGFyaXNvbiBvZiBjb250ZW50cy4KICAgIGZvciAodmFyIGtleSBpbiBhKSBpZiAoIShrZXkgaW4gYikgfHwgIV8uaXNFcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gYXJyYXkgb3Igb2JqZWN0IGVtcHR5PwogIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKF8uaXNBcnJheShvYmopIHx8IF8uaXNTdHJpbmcob2JqKSkgcmV0dXJuIG9iai5sZW5ndGggPT09IDA7CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD8KICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT0gMSk7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT8KICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheQogIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gYXJndW1lbnRzIG9iamVjdD8KICBfLmlzQXJndW1lbnRzID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCAnY2FsbGVlJykpOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBmdW5jdGlvbj8KICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiAhIShvYmogJiYgb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jYWxsICYmIG9iai5hcHBseSk7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIHN0cmluZz8KICBfLmlzU3RyaW5nID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqID09PSAnJyB8fCAob2JqICYmIG9iai5jaGFyQ29kZUF0ICYmIG9iai5zdWJzdHIpKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgbnVtYmVyPwogIF8uaXNOdW1iZXIgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiAhIShvYmogPT09IDAgfHwgKG9iaiAmJiBvYmoudG9FeHBvbmVudGlhbCAmJiBvYmoudG9GaXhlZCkpOwogIH07CgogIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD8gYE5hTmAgaGFwcGVucyB0byBiZSB0aGUgb25seSB2YWx1ZSBpbiBKYXZhU2NyaXB0CiAgLy8gdGhhdCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYuCiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiAhPT0gb2JqOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuPwogIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2U7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGRhdGU/CiAgXy5pc0RhdGUgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiAhIShvYmogJiYgb2JqLmdldFRpbWV6b25lT2Zmc2V0ICYmIG9iai5zZXRVVENGdWxsWWVhcik7CiAgfTsKCiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGEgcmVndWxhciBleHByZXNzaW9uPwogIF8uaXNSZWdFeHAgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiAhIShvYmogJiYgb2JqLnRlc3QgJiYgb2JqLmV4ZWMgJiYgKG9iai5pZ25vcmVDYXNlIHx8IG9iai5pZ25vcmVDYXNlID09PSBmYWxzZSkpOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD8KICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gbnVsbDsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD8KICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7CiAgfTsKCiAgLy8gVXRpbGl0eSBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBSdW4gVW5kZXJzY29yZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzCiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LgogIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkgewogICAgcm9vdC5fID0gcHJldmlvdXNVbmRlcnNjb3JlOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdG9ycy4KICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZTsKICB9OwoKICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy4KICBfLnRpbWVzID0gZnVuY3Rpb24gKG4sIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBpKTsKICB9OwoKICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QsIGVuc3VyaW5nIHRoYXQKICAvLyB0aGV5J3JlIGNvcnJlY3RseSBhZGRlZCB0byB0aGUgT09QIHdyYXBwZXIgYXMgd2VsbC4KICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7CiAgICBlYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpewogICAgICBhZGRUb1dyYXBwZXIobmFtZSwgX1tuYW1lXSA9IG9ialtuYW1lXSk7CiAgICB9KTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLgogIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuCiAgdmFyIGlkQ291bnRlciA9IDA7CiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIGlkID0gaWRDb3VudGVyKys7CiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDsKICB9OwoKICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGUKICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuCiAgXy50ZW1wbGF0ZVNldHRpbmdzID0gewogICAgZXZhbHVhdGUgICAgOiAvPCUoW1xzXFNdKz8pJT4vZywKICAgIGludGVycG9sYXRlIDogLzwlPShbXHNcU10rPyklPi9nCiAgfTsKCiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi4KICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsCiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuCiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHN0ciwgZGF0YSkgewogICAgdmFyIGMgID0gXy50ZW1wbGF0ZVNldHRpbmdzOwogICAgdmFyIHRtcGwgPSAndmFyIF9fcD1bXSxwcmludD1mdW5jdGlvbigpe19fcC5wdXNoLmFwcGx5KF9fcCxhcmd1bWVudHMpO307JyArCiAgICAgICd3aXRoKG9ianx8e30pe19fcC5wdXNoKFwnJyArCiAgICAgIHN0ci5yZXBsYWNlKC9cXC9nLCAnXFxcXCcpCiAgICAgICAgIC5yZXBsYWNlKC8nL2csICJcXCciKQogICAgICAgICAucmVwbGFjZShjLmludGVycG9sYXRlLCBmdW5jdGlvbihtYXRjaCwgY29kZSkgewogICAgICAgICAgIHJldHVybiAiJywiICsgY29kZS5yZXBsYWNlKC9cXCcvZywgIiciKSArICIsJyI7CiAgICAgICAgIH0pCiAgICAgICAgIC5yZXBsYWNlKGMuZXZhbHVhdGUgfHwgbnVsbCwgZnVuY3Rpb24obWF0Y2gsIGNvZGUpIHsKICAgICAgICAgICByZXR1cm4gIicpOyIgKyBjb2RlLnJlcGxhY2UoL1xcJy9nLCAiJyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXHJcblx0XS9nLCAnICcpICsgIl9fcC5wdXNoKCciOwogICAgICAgICB9KQogICAgICAgICAucmVwbGFjZSgvXHIvZywgJ1xccicpCiAgICAgICAgIC5yZXBsYWNlKC9cbi9nLCAnXFxuJykKICAgICAgICAgLnJlcGxhY2UoL1x0L2csICdcXHQnKQogICAgICAgICArICInKTt9cmV0dXJuIF9fcC5qb2luKCcnKTsiOwogICAgdmFyIGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ29iaicsIHRtcGwpOwogICAgcmV0dXJuIGRhdGEgPyBmdW5jKGRhdGEpIDogZnVuYzsKICB9OwoKICAvLyBUaGUgT09QIFdyYXBwZXIKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgLy8gSWYgVW5kZXJzY29yZSBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgaXQgcmV0dXJucyBhIHdyYXBwZWQgb2JqZWN0IHRoYXQKICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZQogIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuCiAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbihvYmopIHsgdGhpcy5fd3JhcHBlZCA9IG9iajsgfTsKCiAgLy8gRXhwb3NlIGB3cmFwcGVyLnByb3RvdHlwZWAgYXMgYF8ucHJvdG90eXBlYAogIF8ucHJvdG90eXBlID0gd3JhcHBlci5wcm90b3R5cGU7CgogIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy4KICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24ob2JqLCBjaGFpbikgewogICAgcmV0dXJuIGNoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7CiAgfTsKCiAgLy8gQSBtZXRob2QgdG8gZWFzaWx5IGFkZCBmdW5jdGlvbnMgdG8gdGhlIE9PUCB3cmFwcGVyLgogIHZhciBhZGRUb1dyYXBwZXIgPSBmdW5jdGlvbihuYW1lLCBmdW5jKSB7CiAgICB3cmFwcGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgdW5zaGlmdC5jYWxsKGFyZ3MsIHRoaXMuX3dyYXBwZWQpOwogICAgICByZXR1cm4gcmVzdWx0KGZ1bmMuYXBwbHkoXywgYXJncyksIHRoaXMuX2NoYWluKTsKICAgIH07CiAgfTsKCiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LgogIF8ubWl4aW4oXyk7CgogIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuCiAgZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7CiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTsKICAgIHdyYXBwZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpOwogICAgICByZXR1cm4gcmVzdWx0KHRoaXMuX3dyYXBwZWQsIHRoaXMuX2NoYWluKTsKICAgIH07CiAgfSk7CgogIC8vIEFkZCBhbGwgYWNjZXNzb3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLgogIGVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7CiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTsKICAgIHdyYXBwZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiByZXN1bHQobWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cyksIHRoaXMuX2NoYWluKTsKICAgIH07CiAgfSk7CgogIC8vIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC4KICB3cmFwcGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKCkgewogICAgdGhpcy5fY2hhaW4gPSB0cnVlOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuCiAgd3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLl93cmFwcGVkOwogIH07Cgp9KSgpOwoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL3VybCAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3VybCJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKioKICogVVJMIGZ1bmN0aW9ucyBwb3J0ZWQgZnJvbSBub2RlLmpzIHRvIHdvcmsgaW4gQ291Y2hEQiBhbmQgdGhlIGJyb3dzZXIuCiAqIFRoaXMgbW9kdWxlIGlzIHVzZWQgaW50ZXJuYWxseSBieSBLYW5zbywgYWx0aG91Z2ggeW91IGNhbiB1c2UgaXQgaW4geW91cgogKiBhcHBzIHRvbyBpZiB5b3UgZmluZCB0aGUgZnVuY3Rpb25zIHVzZWZ1bC4KICoKICogQG1vZHVsZQogKi8KCi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCi8qKgogKiBGcm9tIG5vZGUuanMgdjAuMi42CiAqLwoKdmFyIHBhdGggPSByZXF1aXJlKCdrYW5zby9wYXRoJyksCiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ2thbnNvL3F1ZXJ5c3RyaW5nJyksCiAgICBfID0gcmVxdWlyZSgna2Fuc28vdW5kZXJzY29yZScpLl87CgoKLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmUgY29tcGlsZWQgb25jZSBvbiB0aGUKLy8gZmlyc3QgbW9kdWxlIGxvYWQuCnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05XSs6KS8sCiAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0rJC8sCiAgICBub25Ib3N0Q2hhcnMgPSBbIi8iLCAiPyIsICI7IiwgIiMiXSwKICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7CiAgICAgICAgImZpbGUiOiB0cnVlLAogICAgICAgICJmaWxlOiI6IHRydWUKICAgIH0sCiAgICBzbGFzaGVkUHJvdG9jb2wgPSB7CiAgICAgICAgImh0dHAiOiB0cnVlLAogICAgICAgICJodHRwcyI6IHRydWUsCiAgICAgICAgImZ0cCI6IHRydWUsCiAgICAgICAgImdvcGhlciI6IHRydWUsCiAgICAgICAgImZpbGUiOiB0cnVlLAogICAgICAgICJodHRwOiI6IHRydWUsCiAgICAgICAgImh0dHBzOiI6IHRydWUsCiAgICAgICAgImZ0cDoiOiB0cnVlLAogICAgICAgICJnb3BoZXI6IjogdHJ1ZSwKICAgICAgICAiZmlsZToiOiB0cnVlCiAgICB9OwoKCmZ1bmN0aW9uIHBhcnNlSG9zdChob3N0KSB7CiAgICB2YXIgb3V0ID0ge307CiAgICB2YXIgYXQgPSBob3N0LmluZGV4T2YoIkAiKTsKICAgIGlmIChhdCAhPT0gLTEpIHsKICAgICAgICBvdXQuYXV0aCA9IGhvc3Quc3Vic3RyKDAsIGF0KTsKICAgICAgICBob3N0ID0gaG9zdC5zdWJzdHIoYXQgKyAxKTsgLy8gZHJvcCB0aGUgQAogICAgfQogICAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpOwogICAgaWYgKHBvcnQpIHsKICAgICAgICBwb3J0ID0gcG9ydFswXTsKICAgICAgICBvdXQucG9ydCA9IHBvcnQuc3Vic3RyKDEpOwogICAgICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTsKICAgIH0KICAgIGlmIChob3N0KSB7CiAgICAgICAgb3V0Lmhvc3RuYW1lID0gaG9zdDsKICAgIH0KICAgIHJldHVybiBvdXQ7Cn0KCi8qKgogKiBUYWtlIGEgVVJMIHN0cmluZywgYW5kIHJldHVybiBhbiBvYmplY3QuIFBhc3MgdHJ1ZSBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50CiAqIHRvIGFsc28gcGFyc2UgdGhlIHF1ZXJ5IHN0cmluZyB1c2luZyB0aGUgcXVlcnlzdHJpbmcgbW9kdWxlLgogKgogKiBAbmFtZSBwYXJzZSh1cmwsIFtwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdF0pCiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwKICogQHBhcmFtIHtCb29sZWFufSBwYXJzZVF1ZXJ5U3RyaW5nCiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2xhc2hlc0Rlbm90ZUhvc3QKICogQHJldHVybnMgT2JqZWN0CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uICh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7CiAgICBpZiAodXJsICYmIHR5cGVvZih1cmwpID09PSAib2JqZWN0IiAmJiB1cmwuaHJlZikgewogICAgICAgIHJldHVybiB1cmw7CiAgICB9CgogICAgdmFyIG91dCA9IHsgaHJlZiA6IHVybCB9LAogICAgICAgIHJlc3QgPSB1cmw7CgogICAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7CiAgICBpZiAocHJvdG8pIHsKICAgICAgICBwcm90byA9IHByb3RvWzBdOwogICAgICAgIG91dC5wcm90b2NvbCA9IHByb3RvOwogICAgICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpOwogICAgfQoKICAgIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0CiAgICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsCiAgICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzCiAgICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy4KICAgIHZhciBzbGFzaGVzOwogICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnXlxcL1xcL1teQFxcL10rQFteQFxcL10rJyk7CiAgICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaChyZSkpIHsKICAgICAgICBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICIvLyI7CiAgICAgICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHsKICAgICAgICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpOwogICAgICAgICAgICBvdXQuc2xhc2hlcyA9IHRydWU7CiAgICAgICAgfQogICAgfQogICAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJiAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkgewogICAgICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS4KICAgICAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LgogICAgICAgIC8vIGRvbid0IGVuZm9yY2UgZnVsbCBSRkMgY29ycmVjdG5lc3MsIGp1c3QgYmUgdW5zdHVwaWQgYWJvdXQgaXQuCiAgICAgICAgdmFyIGZpcnN0Tm9uSG9zdCA9IC0xOwogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9uSG9zdENoYXJzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICB2YXIgaW5kZXggPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTsKICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSAmJiAoZmlyc3ROb25Ib3N0IDwgMCB8fCBpbmRleCA8IGZpcnN0Tm9uSG9zdCkpIHsKICAgICAgICAgICAgICAgIGZpcnN0Tm9uSG9zdCA9IGluZGV4OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChmaXJzdE5vbkhvc3QgIT09IC0xKSB7CiAgICAgICAgICAgIG91dC5ob3N0ID0gcmVzdC5zdWJzdHIoMCwgZmlyc3ROb25Ib3N0KTsKICAgICAgICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKGZpcnN0Tm9uSG9zdCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3V0Lmhvc3QgPSByZXN0OwogICAgICAgICAgICByZXN0ID0gIiI7CiAgICAgICAgfQoKICAgICAgICAvLyBwdWxsIG91dCB0aGUgYXV0aCBhbmQgcG9ydC4KICAgICAgICB2YXIgcCA9IHBhcnNlSG9zdChvdXQuaG9zdCk7CiAgICAgICAgdmFyIGtleXMgPSBfLmtleXMocCk7CiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGwyID0ga2V5cy5sZW5ndGg7IGogPCBsMjsgaisrKSB7CiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2pdOwogICAgICAgICAgICBvdXRba2V5XSA9IHBba2V5XTsKICAgICAgICB9CiAgICAgICAgLy8gd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSwgc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC4KICAgICAgICBvdXQuaG9zdG5hbWUgPSBvdXQuaG9zdG5hbWUgfHwgIiI7CiAgICB9CgogICAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuCiAgICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LgogICAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoIiMiKTsKICAgIGlmIChoYXNoICE9PSAtMSkgewogICAgICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy4KICAgICAgICBvdXQuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpOwogICAgICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpOwogICAgfQogICAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCI/Iik7CiAgICBpZiAocW0gIT09IC0xKSB7CiAgICAgICAgb3V0LnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTsKICAgICAgICBvdXQucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpOwogICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7CiAgICAgICAgICAgIG91dC5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKG91dC5xdWVyeSk7CiAgICAgICAgfQogICAgICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTsKICAgIH0KICAgIGlmIChyZXN0KSB7CiAgICAgICAgb3V0LnBhdGhuYW1lID0gcmVzdDsKICAgIH0KCiAgICByZXR1cm4gb3V0Owp9OwoKLyoqCiAqIFRha2UgYSBwYXJzZWQgVVJMIG9iamVjdCwgYW5kIHJldHVybiBhIGZvcm1hdHRlZCBVUkwgc3RyaW5nLgogKgogKiBAbmFtZSBmb3JtYXQob2JqKQogKiBAcGFyYW0ge09iamVjdH0gb2JqCiAqIEBhcGkgcHVibGljCiAqLwoKLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZwpleHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uIChvYmopIHsKICAgIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuCiAgICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuCiAgICBpZiAodHlwZW9mKG9iaikgPT09ICJzdHJpbmciKSB7CiAgICAgICAgb2JqID0gZXhwb3J0cy5wYXJzZShvYmopOwogICAgfQoKICAgIHZhciBwcm90b2NvbCA9IG9iai5wcm90b2NvbCB8fCAiIiwKICAgICAgICBob3N0ID0gKG9iai5ob3N0ICE9PSB1bmRlZmluZWQpID8gb2JqLmhvc3QKICAgICAgICAgICAgOiBvYmouaG9zdG5hbWUgIT09IHVuZGVmaW5lZCA/ICgob2JqLmF1dGggPyBvYmouYXV0aCArICJAIiA6ICIiKSArIG9iai5ob3N0bmFtZSArIChvYmoucG9ydCA/ICI6IiArIG9iai5wb3J0IDogIiIpKQogICAgICAgICAgICA6IGZhbHNlLAogICAgICAgIHBhdGhuYW1lID0gb2JqLnBhdGhuYW1lIHx8ICIiLAogICAgICAgIHNlYXJjaCA9IG9iai5zZWFyY2ggfHwgKAogICAgICAgICAgICAgICAgb2JqLnF1ZXJ5ICYmICgiPyIgKyAodHlwZW9mKG9iai5xdWVyeSkgPT09ICJvYmplY3QiID8gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KG9iai5xdWVyeSkgOiBTdHJpbmcob2JqLnF1ZXJ5KSkpCiAgICAgICAgICAgICAgICApIHx8ICIiLAogICAgICAgIGhhc2ggPSBvYmouaGFzaCB8fCAiIjsKCiAgICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gIjoiKSB7CiAgICAgICAgcHJvdG9jb2wgKz0gIjoiOwogICAgfQoKICAgIC8vIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLgogICAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC4KICAgIGlmIChvYmouc2xhc2hlcyB8fCAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7CiAgICAgICAgaG9zdCA9ICIvLyIgKyAoaG9zdCB8fCAiIik7CiAgICAgICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gIi8iKSB7CiAgICAgICAgICAgIHBhdGhuYW1lID0gIi8iICsgcGF0aG5hbWU7CiAgICAgICAgfQogICAgfQogICAgZWxzZSBpZiAoIWhvc3QpIHsKICAgICAgICBob3N0ID0gIiI7CiAgICB9CgogICAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICIjIikgewogICAgICAgIGhhc2ggPSAiIyIgKyBoYXNoOwogICAgfQogICAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAiPyIpIHsKICAgICAgICBzZWFyY2ggPSAiPyIgKyBzZWFyY2g7CiAgICB9CgogICAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDsKfTsKCi8qKgogKiBUYWtlIGEgYmFzZSBVUkwsIGFuZCBhIGhyZWYgVVJMLCBhbmQgcmVzb2x2ZSB0aGVtIGFzIGEgYnJvd3NlciB3b3VsZCBmb3IKICogYW4gYW5jaG9yIHRhZy4KICoKICogQG5hbWUgcmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKQogKiBAcGFyYW0ge1N0cmluZ30gc291cmNlCiAqIEBwYXJhbSB7U3RyaW5nfSByZWxhdGl2ZQogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHJlbGF0aXZlKSB7CiAgICByZXR1cm4gZXhwb3J0cy5mb3JtYXQoZXhwb3J0cy5yZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpKTsKfTsKCmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uIChzb3VyY2UsIHJlbGF0aXZlKSB7CiAgICBpZiAoIXNvdXJjZSkgewogICAgICAgIHJldHVybiByZWxhdGl2ZTsKICAgIH0KICAgIHZhciByZWxQYXRoOwoKICAgIHNvdXJjZSA9IGV4cG9ydHMucGFyc2UoZXhwb3J0cy5mb3JtYXQoc291cmNlKSwgZmFsc2UsIHRydWUpOwogICAgcmVsYXRpdmUgPSBleHBvcnRzLnBhcnNlKGV4cG9ydHMuZm9ybWF0KHJlbGF0aXZlKSwgZmFsc2UsIHRydWUpOwoKICAgIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LgogICAgc291cmNlLmhhc2ggPSByZWxhdGl2ZS5oYXNoOwoKICAgIGlmIChyZWxhdGl2ZS5ocmVmID09PSAiIikgewogICAgICAgIHJldHVybiBzb3VyY2U7CiAgICB9CgogICAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuCiAgICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHsKICAgICAgICByZWxhdGl2ZS5wcm90b2NvbCA9IHNvdXJjZS5wcm90b2NvbDsKICAgICAgICByZXR1cm4gcmVsYXRpdmU7CiAgICB9CgogICAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSBzb3VyY2UucHJvdG9jb2wpIHsKICAgICAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5ncwogICAgICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LCBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aAogICAgICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC4KICAgICAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLCBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy4KICAgICAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuCgogICAgICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkgewogICAgICAgICAgICByZXR1cm4gcmVsYXRpdmU7CiAgICAgICAgfQoKICAgICAgICBzb3VyY2UucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDsKICAgICAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7CiAgICAgICAgICAgIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgIiIpLnNwbGl0KCIvIik7CiAgICAgICAgICAgIHdoaWxlIChyZWxQYXRoLmxlbmd0aCAmJiAhKHJlbGF0aXZlLmhvc3QgPSByZWxQYXRoLnNoaWZ0KCkpKSB7fQogICAgICAgICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHsKICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgPSAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVsUGF0aFswXSAhPT0gIiIpIHsKICAgICAgICAgICAgICAgIHJlbFBhdGgudW5zaGlmdCgiIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgewogICAgICAgICAgICAgICAgcmVsUGF0aC51bnNoaWZ0KCIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZWxhdGl2ZS5wYXRobmFtZSA9IHJlbFBhdGguam9pbigiLyIpOwogICAgICAgIH0KICAgICAgICBzb3VyY2UucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTsKICAgICAgICBzb3VyY2Uuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoOwogICAgICAgIHNvdXJjZS5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5OwogICAgICAgIHNvdXJjZS5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAiIjsKICAgICAgICBkZWxldGUgc291cmNlLmF1dGg7CiAgICAgICAgZGVsZXRlIHNvdXJjZS5ob3N0bmFtZTsKICAgICAgICBzb3VyY2UucG9ydCA9IHJlbGF0aXZlLnBvcnQ7CiAgICAgICAgcmV0dXJuIHNvdXJjZTsKICAgIH0KCiAgICB2YXIgaXNTb3VyY2VBYnMgPSAoc291cmNlLnBhdGhuYW1lICYmIHNvdXJjZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICIvIiksCiAgICAgICAgaXNSZWxBYnMgPSAocmVsYXRpdmUuaG9zdCAhPT0gdW5kZWZpbmVkIHx8IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gIi8iKSwKICAgICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8IChzb3VyY2UuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLAogICAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLAogICAgICAgIHNyY1BhdGggPSBzb3VyY2UucGF0aG5hbWUgJiYgc291cmNlLnBhdGhuYW1lLnNwbGl0KCIvIikgfHwgW10sCiAgICAgICAgcHN5Y2hvdGljID0gc291cmNlLnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbc291cmNlLnByb3RvY29sXSAmJiBzb3VyY2UuaG9zdCAhPT0gdW5kZWZpbmVkOwogICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCIvIikgfHwgW107CgogICAgLy8gaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZSBsaW5rcyBsaWtlIC4uLy4uIHNob3VsZCBiZSBhYmxlCiAgICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuCiAgICAvLyBzb3VyY2UucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LgogICAgLy8gTGF0ZXIgb24sIHB1dCB0aGUgZmlyc3QgcGF0aCBwYXJ0IGludG8gdGhlIGhvc3QgZmllbGQuCiAgICBpZiAocHN5Y2hvdGljKSB7CgogICAgICAgIGRlbGV0ZSBzb3VyY2UuaG9zdG5hbWU7CiAgICAgICAgZGVsZXRlIHNvdXJjZS5hdXRoOwogICAgICAgIGRlbGV0ZSBzb3VyY2UucG9ydDsKICAgICAgICBpZiAoc291cmNlLmhvc3QpIHsKICAgICAgICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICIiKSB7CiAgICAgICAgICAgICAgICBzcmNQYXRoWzBdID0gc291cmNlLmhvc3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzcmNQYXRoLnVuc2hpZnQoc291cmNlLmhvc3QpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGRlbGV0ZSBzb3VyY2UuaG9zdDsKCiAgICAgICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7CiAgICAgICAgICAgIGRlbGV0ZSByZWxhdGl2ZS5ob3N0bmFtZTsKICAgICAgICAgICAgZGVsZXRlIHJlbGF0aXZlLmF1dGg7CiAgICAgICAgICAgIGRlbGV0ZSByZWxhdGl2ZS5wb3J0OwogICAgICAgICAgICBpZiAocmVsYXRpdmUuaG9zdCkgewogICAgICAgICAgICAgICAgaWYgKHJlbFBhdGhbMF0gPT09ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGVsZXRlIHJlbGF0aXZlLmhvc3Q7CiAgICAgICAgfQogICAgICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAiIiB8fCBzcmNQYXRoWzBdID09PSAiIik7CiAgICB9CgogICAgaWYgKGlzUmVsQWJzKSB7CiAgICAgICAgLy8gaXQncyBhYnNvbHV0ZS4KICAgICAgICBzb3VyY2UuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICIiKSA/IHJlbGF0aXZlLmhvc3QgOiBzb3VyY2UuaG9zdDsKICAgICAgICBzb3VyY2Uuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoOwogICAgICAgIHNvdXJjZS5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5OwogICAgICAgIHNyY1BhdGggPSByZWxQYXRoOwogICAgICAgIC8vIGZhbGwgdGhyb3VnaCB0byB0aGUgZG90LWhhbmRsaW5nIGJlbG93LgogICAgfQogICAgZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHsKICAgICAgICAvLyBpdCdzIHJlbGF0aXZlCiAgICAgICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuCiAgICAgICAgaWYgKCFzcmNQYXRoKSB7CiAgICAgICAgICAgIHNyY1BhdGggPSBbXTsKICAgICAgICB9CiAgICAgICAgc3JjUGF0aC5wb3AoKTsKICAgICAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7CiAgICAgICAgc291cmNlLnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDsKICAgICAgICBzb3VyY2UucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTsKICAgIH0KICAgIGVsc2UgaWYgKCJzZWFyY2giIGluIHJlbGF0aXZlKSB7CiAgICAgICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLgogICAgICAgIC8vIGxpa2UgaHJlZj0iP2ZvbyIuCiAgICAgICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zCiAgICAgICAgaWYgKHBzeWNob3RpYykgewogICAgICAgICAgICBzb3VyY2UuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTsKICAgICAgICB9CiAgICAgICAgc291cmNlLnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDsKICAgICAgICBzb3VyY2UucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTsKICAgICAgICByZXR1cm4gc291cmNlOwogICAgfQogICAgaWYgKCFzcmNQYXRoLmxlbmd0aCkgewogICAgICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS4KICAgICAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLgogICAgICAgIGRlbGV0ZSBzb3VyY2UucGF0aG5hbWU7CiAgICAgICAgcmV0dXJuIHNvdXJjZTsKICAgIH0KCiAgICAvLyByZXNvbHZlIGRvdHMuCiAgICAvLyBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC4KICAgIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LCB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLgogICAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTsKICAgIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gKChzb3VyY2UuaG9zdCB8fCByZWxhdGl2ZS5ob3N0KSAmJiAobGFzdCA9PT0gIi4iIHx8IGxhc3QgPT09ICIuLiIpIHx8IGxhc3QgPT09ICIiKTsKCiAgICAvLyBGaWd1cmUgb3V0IGlmIHRoaXMgaGFzIHRvIGVuZCB1cCBhcyBhbiBhYnNvbHV0ZSB1cmwsIG9yIHNob3VsZCBjb250aW51ZSB0byBiZSByZWxhdGl2ZS4KICAgIHNyY1BhdGggPSBwYXRoLm5vcm1hbGl6ZUFycmF5KHNyY1BhdGgsIHRydWUpOwogICAgaWYgKHNyY1BhdGgubGVuZ3RoID09PSAxICYmIHNyY1BhdGhbMF0gPT09ICIuIikgewogICAgICAgIHNyY1BhdGggPSBbXTsKICAgIH0KICAgIGlmIChtdXN0RW5kQWJzIHx8IHJlbW92ZUFsbERvdHMpIHsKICAgICAgICAvLyBhbGwgZG90cyBtdXN0IGdvLgogICAgICAgIHZhciBkaXJzID0gW107CiAgICAgICAgc3JjUGF0aC5mb3JFYWNoKGZ1bmN0aW9uIChkaXIsIGkpIHsKICAgICAgICAgICAgaWYgKGRpciA9PT0gIi4uIikgewogICAgICAgICAgICAgICAgZGlycy5wb3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChkaXIgIT09ICIuIikgewogICAgICAgICAgICAgICAgZGlycy5wdXNoKGRpcik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKG11c3RFbmRBYnMgJiYgZGlyc1swXSAhPT0gIiIpIHsKICAgICAgICAgICAgZGlycy51bnNoaWZ0KCIiKTsKICAgICAgICB9CiAgICAgICAgc3JjUGF0aCA9IGRpcnM7CiAgICB9CiAgICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5sZW5ndGggPCAyIHx8IHNyY1BhdGguc2xpY2UoLTEpWzBdICE9PSAiIikpIHsKICAgICAgICBzcmNQYXRoLnB1c2goIiIpOwogICAgfQoKICAgIC8vIHB1dCB0aGUgaG9zdCBiYWNrCiAgICBpZiAocHN5Y2hvdGljKSB7CiAgICAgICAgc291cmNlLmhvc3QgPSBzcmNQYXRoWzBdID09PSAiIiA/ICIiIDogc3JjUGF0aC5zaGlmdCgpOwogICAgfQoKICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IChzb3VyY2UuaG9zdCAmJiBzcmNQYXRoLmxlbmd0aCk7CgogICAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gIiIpIHsKICAgICAgICBzcmNQYXRoLnVuc2hpZnQoIiIpOwogICAgfQoKICAgIHNvdXJjZS5wYXRobmFtZSA9IHNyY1BhdGguam9pbigiLyIpOwoKICAgIHJldHVybiBzb3VyY2U7Cn07CgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vdXRpbHMgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby91dGlscyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgovKmdsb2JhbCB3aW5kb3c6IGZhbHNlLCBfX2thbnNvanNfY3VycmVudF9yZXF1ZXN0OiB0cnVlKi8KCgovKioKICogR2VuZXJhbCB1dGlsaXR5IGZ1bmN0aW9ucyB1c2VkIGJ5IEthbnNvLiBTb21lIGZ1bmN0aW9ucyB3ZXJlIG1vdmVkIGhlcmUgZnJvbQogKiBvdGhlciBtb2R1bGVzIChzdWNoIGFzIGNvcmUpLCB0byBhdm9pZCBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgYnVnIGluIENvdWNoREIuCiAqCiAqIFRoaXMgbW9kdWxlIGFsc28gc3RvcmVzIHNvbWUgdXNlZnVsIHByb3BlcnRpZXMgc3VjaCBhcyAnaXNCcm93c2VyJywgd2hpY2ggaXMKICogdHJ1ZSBpZiB0aGUgY29kZSBpcyBydW5uaW5nIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudCwgYW5kICdpbml0aWFsX2hpdCcgd2hpY2gKICogaXMgc2V0IHRvIHRydWUgd2hlbiBhIHBhZ2UgaXMgZmlyc3QgcmVxdWVzdGVkIGZyb20gQ291Y2hEQiAoYW5kIHNldCB0byBmYWxzZQogKiBmb3Igc3Vic2VxdWVudCByZXF1ZXN0cykuCiAqCiAqIEBtb2R1bGUKICovCgovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciBzZXR0aW5ncyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MnKSwgLy8gc2V0dGluZ3MgbW9kdWxlIGlzIGF1dG8tZ2VuZXJhdGVkCiAgICBldmVudHMgPSByZXF1aXJlKCcuL2V2ZW50cycpLAogICAgXyA9IHJlcXVpcmUoJy4vdW5kZXJzY29yZScpLl87CgoKLyoqCiAqIFNvbWUgZnVuY3Rpb25zIGNhbGN1bGF0ZSByZXN1bHRzIGRpZmZlcmVudGx5IGRlcGVuZGluZyBvbiB0aGUgZXhlY3V0aW9uCiAqIGVudmlyb25tZW50LiBUaGUgaXNCcm93c2VyIHZhbHVlIGlzIHVzZWQgdG8gc2V0IHRoZSBjb3JyZWN0IGVudmlyb25tZW50CiAqIGZvciB0aGVzZSBmdW5jdGlvbnMsIGFuZCBpcyBvbmx5IGV4cG9ydGVkIHRvIG1ha2UgdW5pdCB0ZXN0aW5nIGVhc2llci4KICovCgpleHBvcnRzLmlzQnJvd3NlciA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAodHlwZW9mKHdpbmRvdykgIT09ICd1bmRlZmluZWQnKTsKfTsKCi8qKgogKiBLZWVwcyB0cmFjayBvZiB0aGUgbGFzdCAqdHJpZ2dlcmVkKiByZXF1ZXN0LiBUaGlzIGlzIHRvIGF2b2lkIGEgcmFjZQogKiBjb25kaXRpb24gd2hlcmUgdHdvIGxpbmsgY2xpY2tzIGluIHF1aWNrIHN1Y2Nlc3Npb24gY2FuIGNhdXNlIHRoZSByZW5kZXJlZAogKiBwYWdlIHRvIG5vdCBtYXRjaCB0aGUgY3VycmVudCBVUkwuIElmIHRoZSBmaXJzdCBsaW5rJ3MgZG9jdW1lbnQgb3IgdmlldyB0YWtlcwogKiBsb25nZXIgdG8gcmV0dXJuIHRoYW4gdGhlIHNlY29uZCwgdGhlIFVSTCB3YXMgdXBkYXRlZCBmb3IgdGhlIHNlY29uZCBsaW5rCiAqIGNsaWNrIGJ1dCB0aGUgcGFnZSBmb3IgdGhlIGZpcnN0IGxpbmsgd2lsbCByZW5kZXIgbGFzdCwgb3ZlcndyaXRpbmcgdGhlCiAqIGNvcnJlY3QgcGFnZS4gTm93LCBjYWxsYmFja3MgZm9yIGZldGNoaW5nIGRvY3VtZW50cyBhbmQgdmlld3MgY2hlY2sgYWdhaW5zdAogKiB0aGlzIHZhbHVlIHRvIHNlZSBpZiB0aGV5IHNob3VsZCBjb250aW51ZSByZW5kZXJpbmcgdGhlIHJlc3VsdCBvciBub3QuCiAqLwoKZXhwb3J0cy5jdXJyZW50UmVxdWVzdCA9IGZ1bmN0aW9uICh2KSB7CiAgICBpZiAodikgewogICAgICAgIF9fa2Fuc29qc19jdXJyZW50X3JlcXVlc3QgPSB2OwogICAgfSBlbHNlIGlmICh0eXBlb2YoX19rYW5zb2pzX2N1cnJlbnRfcmVxdWVzdCkgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgX19rYW5zb2pzX2N1cnJlbnRfcmVxdWVzdCA9IG51bGw7CiAgICB9CiAgICByZXR1cm4gX19rYW5zb2pzX2N1cnJlbnRfcmVxdWVzdDsKfTsKCi8vIG1ha2Ugc3VyZSBjdXJyZW50UmVxdWVzdCgpIGFsd2F5cyBwcm92aWRlZCB0aGUgbGF0ZXN0IHNlc3Npb24gaW5mb3JtYXRpb24KZXZlbnRzLm9uKCdzZXNzaW9uQ2hhbmdlJywgZnVuY3Rpb24gKHVzZXJDdHgsIHJlcSkgewogICAgdmFyIGN1cnJfcmVxID0gZXhwb3J0cy5jdXJyZW50UmVxdWVzdCgpOwogICAgaWYgKGN1cnJfcmVxKSB7CiAgICAgICAgY3Vycl9yZXEudXNlckN0eCA9IHVzZXJDdHg7CiAgICAgICAgZXhwb3J0cy5jdXJyZW50UmVxdWVzdChjdXJyX3JlcSk7CiAgICB9Cn0pOwoKLyoqCiAqIFRoaXMgaXMgYmVjYXVzZSB0aGUgZmlyc3QgcGFnZSBoaXQgYWxzbyB0cmlnZ2VycyBrYW5zbyB0byBoYW5kbGUgdGhlIHVybAogKiBjbGllbnQtc2lkZS4gS25vd2luZyBpdCBpcyB0aGUgZmlyc3QgcGFnZSBiZWluZyBsb2FkZWQgbWVhbnMgd2UgY2FuIHN0b3AKICogdGhlIHBhZ2VUcmFja2VyIGNvZGUgZnJvbSBzdWJtaXR0aW5nIHRoZSBVUkwgdHdpY2UuIEV4cG9ydGVkIGJlY2F1c2UgdGhpcwogKiBtaWdodCBiZSB1c2VmdWwgaW5mb3JtYXRpb24gdG8gb3RoZXIgbW9kdWxlcywgaXQgc2hvdWxkIG5vdCBiZSBtb2RpZmllZAogKiBieSB0aGVtLgogKi8KCi8vIFRPRE86IHRoaXMgd2FzIG1vdmVkIHRvIHRoaXMgbW9kdWxlIGZyb20gY29yZS5qcyB0byBhdm9pZCBhIGNpcmN1bGFyCi8vIGRlcGVuZGVuY3kgYmV0d2VlbiBjb3JlLmpzIGFuZCBzZXNzaW9uLmpzCgpleHBvcnRzLmluaXRpYWxfaGl0ID0gdHJ1ZTsKCi8qKgogKiBVc2VkIHRvIHN0b3JlIHVzZXJDdHgsIHBlcmlvZGljYWxseSB1cGRhdGVkIGxpa2Ugb24gc2Vzc2lvbi5sb2dpbiBhbmQKICogc2Vzc2lvbi5sb2dvdXQuCiAqLwoKLy8gVE9ETzogYWRkZWQgdG8gdXRpbHMgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSBidWcgaW4gY291Y2hkYgoKZXhwb3J0cy51c2VyQ3R4ID0gbnVsbDsKCi8qKgogKiBDYWNoZXMgZXh0ZW5kZWQgc2Vzc2lvbiBpbmZvIChsaWtlIHRoZSBjdXJyZW50IGF1dGhlbnRpY2F0aW9uIGRiKSBhZnRlcgogKiBhIGNhbGwgdG8gc2Vzc2lvbi5pbmZvCiAqLwpleHBvcnRzLnNlc3Npb24gPSBudWxsOwoKLyoqCiAqIFRoaXMgaXMgdXNlZCB0byBtYWtlIHVuaXQgdGVzdGluZyBpbiB0aGUgYnJvd3NlciBlYXNpZXIuCiAqIEJlY2F1c2UgaXQgY2FuIGJlIG92ZXJyaWRkZW4gd2l0aG91dCBhY3R1YWxseSBjaGFuZ2luZyB0aGUgd2luZG93J3MgbG9jYXRpb24uCiAqIChhbmQgbmF2aWdhdGluZyBhd2F5IGZyb20gdGhlIHRlc3Qgc3VpdGUpCiAqLwoKZXhwb3J0cy5nZXRXaW5kb3dMb2NhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB3aW5kb3cubG9jYXRpb247Cn07CgovKioKICogUmV0dXJucyB0aGUgcGF0aCB0byBwcmVmaXggdG8gYW55IFVSTHMuIFdoZW4gcnVubmluZyBiZWhpbmQgYQogKiB2aXJ0dWFsIGhvc3QsIHRoZXJlIGlzIG5vdGhpbmcgdG8gcHJlZml4IFVSTHMgd2l0aC4gV2hlbiBhY2Nlc3NpbmcgdGhlCiAqIGFwcCBkaXJlY3RseSwgVVJMcyBuZWVkIHRvIGJlIHByZWZpeGVkIHdpdGggL2RiL19kZXNpZ24vYXBwbmFtZS9fcmV3cml0ZS4KICoKICogVGhlIHJlcXVlc3Qgb2JqZWN0IGFyZ3VtZW50IGlzIG9ubHkgcmVxdWlyZWQgd2hlbiBydW4gc2VydmVyLXNpZGUsIGJ1dCBpdHMKICogYSBnb29kIGlkZWEgdG8gaW5jbHVkZSBpdCB3aGVuZXZlciB5b3UgY2FsbCBnZXRCYXNlVVJMLgogKgogKiBAbmFtZSBnZXRCYXNlVVJMKHJlcSkKICogQHBhcmFtIHtPYmplY3R9IHJlcQogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCi8vIFRPRE86IHRoaXMgd2FzIG1vdmVkIHRvIHRoaXMgbW9kdWxlIGZyb20gY29yZS5qcyB0byBhdm9pZCBhIGNpcmN1bGFyCi8vIGRlcGVuZGVuY3kgYmV0d2VlbiBjb3JlLmpzIGFuZCBkYi5qcyAuLi5vbmNlIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBpbgovLyBjb3VjaGRiJ3MgY29tbW9uanMgaW1wbGVtZW50YXRpb24gYXJlIGZpeGVkIGl0IGNhbiBiZSBtb3ZlZCBiYWNrIGludG8KLy8gY29yZS5qcy4gRm9yIG5vdywgdGhpcyBpcyBhbHNvIGV4cG9ydGVkIGZyb20gY29yZS5qcyBhbmQgc2hvdWxkCi8vIGJlIGFjY2Vzc2VkIGZyb20gdGhlcmUuCgpleHBvcnRzLmdldEJhc2VVUkwgPSBmdW5jdGlvbiAoLypvcHRpb25hbCovcmVxKSB7CiAgICBpZiAoIXJlcSkgewogICAgICAgIHJlcSA9IGV4cG9ydHMuY3VycmVudFJlcXVlc3QoKTsKICAgIH0KICAgIGlmICgnYmFzZVVSTCcgaW4gc2V0dGluZ3MpIHsKICAgICAgICByZXR1cm4gc2V0dGluZ3MuYmFzZVVSTDsKICAgIH0KICAgIGlmIChleHBvcnRzLmlzQnJvd3NlcigpKSB7CiAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnKC4qXFwvX3Jld3JpdGUpLiokJyk7CiAgICAgICAgdmFyIG1hdGNoID0gcmUuZXhlYyhleHBvcnRzLmdldFdpbmRvd0xvY2F0aW9uKCkucGF0aG5hbWUpOwogICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICByZXR1cm4gbWF0Y2hbMV07CiAgICAgICAgfQogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIGlmIChyZXEuaGVhZGVyc1sneC1jb3VjaGRiLXZob3N0LXBhdGgnXSkgewogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIHJldHVybiAnLycgKyByZXEucGF0aC5zbGljZSgwLCAzKS5qb2luKCcvJykgKyAnL19yZXdyaXRlJzsKfTsKCi8qKgogKiBBIG5hbWVkIGVtcHR5IGZ1bmN0aW9uLiBVc2UgdGhpcyB3aGVuIHlvdSB3aXNoIHRvIHRha2UKICogbm8gYWN0aW9uIGZvciBhIGNhbGxiYWNrIG9yIHN0cmluZy1nZW5lcmF0aW5nICBmdW5jdGlvbi4KICovCgpleHBvcnRzLmVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiAoKQp7CiAgICByZXR1cm4gJyc7Cn07CgovKioKICogQSBuYW1lZCBuby1vcGZ1bmN0aW9uLiBVc2UgdGhpcyB3aGVuIHlvdSBuZWVkIHRvIHN1cHBseQogKiBhIG1hcC90cmFuc2Zvcm0gZnVuY3Rpb24sIGJ1dCBkbyBub3Qgd2lzaCB0byBtb2RpZnkgYW55dGhpbmcKICovCgpleHBvcnRzLmlkZW50aXR5ID0gZnVuY3Rpb24gKHgpCnsKICAgIHJldHVybiB4Owp9OwoKLyoqCiAqIFRyYXZlcnNlcyBhbiBvYmplY3QgYW5kIGl0cyBzdWItb2JqZWN0cyB1c2luZyBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy4KICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIG1hdGNoZWQgcGF0aCwgb3IgdW5kZWZpbmVkIGlmIHRoZSBwcm9wZXJ0eSBkb2VzIG5vdAogKiBleGlzdC4KICoKICogSWYgYSBzdHJpbmcgaWYgdXNlZCBmb3IgdGhlIHBhdGgsIGl0IGlzIGFzc3VtZWQgdG8gYmUgYSBwYXRoIHdpdGggYSBzaW5nbGUKICoga2V5ICh0aGUgZ2l2ZW4gc3RyaW5nKS4KICoKICogPHByZT4KICogZ2V0UHJvcGVydHlQYXRoKHthOiB7YjogJ2Zvbyd9fSwgWydhJywnYiddKSAtPiAnZm9vJwogKiBnZXRQcm9wZXJ0eVBhdGgoe2E6IHtiOiAnZm9vJ319LCAnYScpIC0+IHtiOiAnZm9vJ30KICogPC9wcmU+CiAqCiAqIEBuYW1lIGdldFByb3BlcnR5UGF0aChvYmosIHBhdGgpCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoKICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IHBhdGgKICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmdldFByb3BlcnR5UGF0aCA9IGZ1bmN0aW9uIChvYmosIHBhdGgpIHsKICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7CiAgICAgICAgcGF0aCA9IFtwYXRoXTsKICAgIH0KICAgIGlmICghcGF0aC5sZW5ndGggfHwgIW9iaikgewogICAgICAgIHJldHVybiBvYmo7CiAgICB9CiAgICByZXR1cm4gZXhwb3J0cy5nZXRQcm9wZXJ0eVBhdGgob2JqW3BhdGhbMF1dLCBwYXRoLnNsaWNlKDEpKTsKfTsKCi8qKgogKiBUcmF2ZXJzZXMgYW4gb2JqZWN0IGFuZCBpdHMgc3ViLW9iamVjdHMgdXNpbmcgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuCiAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBtYXRjaGVkIHByb3BlcnR5LgogKgogKiBJZiBhIHN0cmluZyBpZiB1c2VkIGZvciB0aGUgcGF0aCwgaXQgaXMgYXNzdW1lZCB0byBiZSBhIHBhdGggd2l0aCBhIHNpbmdsZQogKiBrZXkgKHRoZSBnaXZlbiBzdHJpbmcpLgogKgogKiA8cHJlPgogKiBzZXRQcm9wZXJ0eVBhdGgoe30sIFsnYScsJ2InXSwgJ2ZvbycpIC0+IHthOiB7YjogJ2Zvbyd9fQogKiBzZXRQcm9wZXJ0eVBhdGgoe30sICdhJywgJ2ZvbycpIC0+IHthOiAnZm9vJ30KICogPC9wcmU+CiAqCiAqIEBuYW1lIHNldFByb3BlcnR5UGF0aChvYmosIHBhdGgsIHZhbCkKICogQHBhcmFtIHtPYmplY3R9IG9iagogKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gcGF0aAogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuc2V0UHJvcGVydHlQYXRoID0gZnVuY3Rpb24gKG9iaiwgcGF0aCwgdmFsKSB7CiAgICBpZiAoIV8uaXNBcnJheShwYXRoKSkgewogICAgICAgIHBhdGggPSBbcGF0aF07CiAgICB9CiAgICBpZiAoIXBhdGgubGVuZ3RoKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBwcm9wZXJ0eSBwYXRoIGdpdmVuJyk7CiAgICB9CiAgICBpZiAocGF0aC5sZW5ndGggPT09IDEpIHsKICAgICAgICBvYmpbcGF0aFswXV0gPSB2YWw7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIG5leHQgPSBwYXRoWzBdOwogICAgcGF0aCA9IHBhdGguc2xpY2UoMSk7CiAgICBpZiAob2JqW25leHRdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBvYmpbbmV4dF0gPSB7fTsKICAgIH0KICAgIGVsc2UgaWYgKHR5cGVvZiBvYmpbbmV4dF0gIT09ICdvYmplY3QnICYmIHBhdGgubGVuZ3RoKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm9wZXJ0eSBwYXRoIGNvbmZsaWN0cyB3aXRoIGV4aXN0aW5nIHZhbHVlJyk7CiAgICB9CiAgICBleHBvcnRzLnNldFByb3BlcnR5UGF0aChvYmpbbmV4dF0sIHBhdGgsIHZhbCk7Cn07CgovKioKICogQ2FsbCBmdW5jdGlvbiB3aXRoIGFyZ3VtZW50cywgY2F0Y2ggYW55IGVycm9ycyBhbmQgYWRkIHRvIGFuIGFycmF5LAogKiByZXR1cm5pbmcgdGhlIG1vZGlmaWVkIGFycmF5LgogKgogKiBAcGFyYW0ge0FycmF5fSBhcnIKICogQHBhcmFtIHtGdW5jdGlvbn0gZm4KICogQHBhcmFtIHtBcnJheX0gYXJncwogKiBAcmV0dXJucyB7QXJyYXl9CiAqIEBhcGkgcHJpdmF0ZQogKi8KCmV4cG9ydHMuZ2V0RXJyb3JzID0gZnVuY3Rpb24gKGZuLCBhcmdzKSB7CiAgICB2YXIgYXJyID0gW107CiAgICB0cnkgewogICAgICAgIGFyciA9IGFyci5jb25jYXQoZm4uYXBwbHkodGhpcywgYXJncykgfHwgW10pOwogICAgfQogICAgY2F0Y2ggKGUpIHsKICAgICAgICBhcnIucHVzaChlKTsKICAgIH0KICAgIHJldHVybiBhcnI7Cn07CgovKioKICogRW5jb2RlcyByZXF1aXJlZCBjaGFyYWN0ZXJzIGFzIEhUTUwgZW50aXRpZXMgc28gYSBzdHJpbmcgY2FuIGJlIGluY2x1ZGVkCiAqIGluIGEgcGFnZS4KICoKICogQG5hbWUgZXNjYXBlSFRNTChzKQogKiBAcGFyYW0ge1N0cmluZ30gcwogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZXNjYXBlSFRNTCA9IGZ1bmN0aW9uIChzKSB7CiAgICBzID0gJycgKyBzOyAvKiBDb2VyY2UgdG8gc3RyaW5nICovCiAgICBzID0gcy5yZXBsYWNlKC8mL2csICcmYW1wOycpOwogICAgcyA9IHMucmVwbGFjZSgvPC9nLCAnJmx0OycpOwogICAgcyA9IHMucmVwbGFjZSgvPi9nLCAnJmd0OycpOwogICAgcyA9IHMucmVwbGFjZSgvIi9nLCAnJnF1b3Q7Jyk7CiAgICBzID0gcy5yZXBsYWNlKC8nL2csICcmIzM5OycpOwogICAgcmV0dXJuIHM7Cn07CgovKioKICogUGFyc2UgQ1NWIHN0cmluZ3MgaW50byBhbiBhcnJheSBvZiByb3dzLCBlYWNoIHJvdyBhbiBhcnJheSBvZiB2YWx1ZXMuCiAqIFVzZWQgYnkgdGhlIGFycmF5IGZpZWxkJ3MgZGVmYXVsdCBDU1Ygd2lkZ2V0LgogKgogKiBAbmFtZSBwYXJzZUNTVihjc3ZTdHJpbmcpCiAqIEBwYXJhbSB7U3RyaW5nfSBjc3ZTdHJpbmcKICogQHJldHVybnMge0FycmF5fQogKiBAYXBpIHB1YmxpYwogKi8KCi8vIFBhcnNpbmcgY29tbWEtc2VwYXJhdGVkIHZhbHVlcyAoQ1NWKSBpbiBKYXZhU2NyaXB0IGJ5IE0uIEEuIFNSSURIQVIKLy8gaHR0cDovL3lhd2diLmJsb2dzcG90LmNvbS8yMDA5LzAzL3BhcnNpbmctY29tbWEtc2VwYXJhdGVkLXZhbHVlcy1pbi5odG1sCmV4cG9ydHMucGFyc2VDU1YgPSBmdW5jdGlvbiAoY3N2U3RyaW5nKSB7CiAgICB2YXIgZmllbGRFbmRNYXJrZXIgID0gLyhbLFwwMTVcMDEyXSAqKS9nOwogICAgdmFyIHFGaWVsZEVuZE1hcmtlciA9IC8oIiIpKiIoWyxcMDE1XDAxMl0gKikvZzsKICAgIHZhciBzdGFydEluZGV4ID0gMDsKICAgIHZhciByZWNvcmRzID0gW10sIGN1cnJlbnRSZWNvcmQgPSBbXTsKICAgIGRvIHsKICAgICAgICB2YXIgY2ggPSBjc3ZTdHJpbmcuY2hhckF0KHN0YXJ0SW5kZXgpOwogICAgICAgIHZhciBlbmRNYXJrZXJSRSA9IChjaCA9PT0gJyInKSA/IHFGaWVsZEVuZE1hcmtlciA6IGZpZWxkRW5kTWFya2VyOwogICAgICAgIGVuZE1hcmtlclJFLmxhc3RJbmRleCA9IHN0YXJ0SW5kZXg7CiAgICAgICAgdmFyIG1hdGNoQXJyYXkgPSBlbmRNYXJrZXJSRS5leGVjKGNzdlN0cmluZyk7CiAgICAgICAgaWYgKCFtYXRjaEFycmF5IHx8ICFtYXRjaEFycmF5Lmxlbmd0aCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdmFyIGVuZEluZGV4ID0gZW5kTWFya2VyUkUubGFzdEluZGV4OwogICAgICAgIGVuZEluZGV4IC09IG1hdGNoQXJyYXlbbWF0Y2hBcnJheS5sZW5ndGggLSAxXS5sZW5ndGg7CiAgICAgICAgdmFyIG1hdGNoID0gY3N2U3RyaW5nLnN1YnN0cmluZyhzdGFydEluZGV4LCBlbmRJbmRleCk7CiAgICAgICAgaWYgKG1hdGNoLmNoYXJBdCgwKSA9PT0gJyInKSB7CiAgICAgICAgICAgIG1hdGNoID0gbWF0Y2guc3Vic3RyaW5nKDEsIG1hdGNoLmxlbmd0aCAtIDEpLnJlcGxhY2UoLyIiL2csICciJyk7CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRSZWNvcmQucHVzaChtYXRjaCk7CiAgICAgICAgdmFyIG1hcmtlciA9IG1hdGNoQXJyYXlbMF07CiAgICAgICAgaWYgKG1hcmtlci5pbmRleE9mKCcsJykgPCAwKSB7CiAgICAgICAgICAgIHJlY29yZHMucHVzaChjdXJyZW50UmVjb3JkKTsKICAgICAgICAgICAgY3VycmVudFJlY29yZCA9IFtdOwogICAgICAgIH0KICAgICAgICBzdGFydEluZGV4ID0gZW5kTWFya2VyUkUubGFzdEluZGV4OwogICAgfSB3aGlsZSAodHJ1ZSk7CiAgICBpZiAoc3RhcnRJbmRleCA8IGNzdlN0cmluZy5sZW5ndGgpIHsKICAgICAgICB2YXIgcmVtYWluaW5nID0gY3N2U3RyaW5nLnN1YnN0cmluZyhzdGFydEluZGV4KS50cmltKCk7CiAgICAgICAgaWYgKHJlbWFpbmluZykgewogICAgICAgICAgICBjdXJyZW50UmVjb3JkLnB1c2gocmVtYWluaW5nKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAoY3VycmVudFJlY29yZC5sZW5ndGggPiAwKSB7CiAgICAgICAgcmVjb3Jkcy5wdXNoKGN1cnJlbnRSZWNvcmQpOwogICAgfQogICAgcmV0dXJuIHJlY29yZHM7Cn07CgovKioKICogQ3JlYXRlcyBDb3VjaERCIHJlc3BvbnNlIG9iamVjdCBmb3IgcmV0dXJuaW5nIGZyb20gYSBzaG93LCBsaXN0IG9yIHVwZGF0ZQogKiBmdW5jdGlvbiwgd2hpY2ggcmVkaXJlY3RzIHRvIHRoZSBnaXZlbiBhcHAgdXJsIChhdXRvbWF0aWNhbGx5IHByZXBlbmRpbmcgdGhlCiAqIGJhc2VVUkwpCiAqCiAqIEBuYW1lIHJlZGlyZWN0KHJlcSwgdXJsKQogKiBAcGFyYW0ge09iamVjdH0gcmVxCiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwKICogQHJldHVybnMge09iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnJlZGlyZWN0ID0gZnVuY3Rpb24gKC8qb3B0aW9uYWwqL3JlcSwgdXJsKSB7CiAgICBpZiAoIXVybCkgewogICAgICAgIC8qIEFyaXR5ID0gMTogdXJsIG9ubHkgKi8KICAgICAgICB1cmwgPSByZXE7CiAgICAgICAgcmVxID0gZXhwb3J0cy5jdXJyZW50UmVxdWVzdCgpOwogICAgfQogICAgdmFyIGJhc2VVUkwgPSBleHBvcnRzLmdldEJhc2VVUkwocmVxKTsKICAgIHJldHVybiB7Y29kZTogMzAyLCBoZWFkZXJzOiB7J0xvY2F0aW9uJzogYmFzZVVSTCArIHVybH19Owp9OwoKLyoqCiAqIFRlc3RzIGlmIHBhdGggYiBpcyBlcXVhbCB0byBvciBhIHN1Yi1wYXRoIG9mIGEuCiAqCiAqIEBuYW1lIGlzU3ViUGF0aChhLCBiKQogKiBAcGFyYW0ge0FycmF5fSBhCiAqIEBwYXJhbSB7QXJyYXl9IGIKICogQHJldHVybnMge0Jvb2xlYW59CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5pc1N1YlBhdGggPSBmdW5jdGlvbiAoYSwgYikgewogICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn07CgovKioKICogUmV0dXJuIGEgdGl0bGUtY2FzZSB2ZXJzaW9uIG9mIHRoZSBzdXBwbGllZCBzdHJpbmcuCiAqIEBuYW1lIHRpdGxlaXplKHN0cikKICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIHRyYW5zZm9ybS4KICogQHJldHVybnMge1N0cmluZ30KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnRpdGxlaXplID0gZnVuY3Rpb24gKHN0cikgewogICAgcmV0dXJuIChzdHIgfHwgJycpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKD86XnxccyspXHcvZywgZnVuY3Rpb24gKG0pIHsKICAgICAgICByZXR1cm4gbS50b1VwcGVyQ2FzZSgpOwogICAgfSk7Cn07CgovKioKICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZXMge2Nsb3N1cmV9IGluIHRoZSBjb250ZXh0IG9mIHtjb250ZXh0fS4KICogVXNlIHRoaXMgZnVuY3Rpb24gaWYgeW91J2QgbGlrZSB0byBwcmVzZXJ2ZSB0aGUgY3VycmVudCBjb250ZXh0CiAqIGFjcm9zcyBjYWxsYmFja3MsIGV2ZW50IGhhbmRsZXJzLCBhbmQgb3RoZXIgY2FzZXMgd2hlcmUgdGhlIHZhbHVlIG9mCiAqIHt0aGlzfSBpcyBzZXQgZm9yIHlvdS4KICoKICogQG5hbWUgYmluZENvbnRleHQoY29udGV4dCwgY2xvc3VyZSkKICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gdXNlIHdoZW4gZXhlY3V0aW5nIGNsb3N1cmUuCiAqICAgICAgICAgIFVzdWFsbHksIHlvdSB3aWxsIHNwZWNpZnkgdGhlIGN1cnJlbnQgdmFsdWUgb2YgJ3RoaXMnLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjbG9zdXJlIFRoZSBmdW5jdGlvbiB0byB0byBiaW5kIHRvIHtjb250ZXh0fS4KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmJpbmRDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQsIGNsb3N1cmUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNsb3N1cmUuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTsKICAgIH07Cn07CgoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL3ZhbGlkYXRvcnMgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJrYW5zby92YWxpZGF0b3JzIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCi8qKgogKiBWYWxpZGF0aW9uIGZ1bmN0aW9ucyB1c2VkIHRvIHZhbGlkYXRlIEZpZWxkIGNvbnRlbnRzLgogKgogKiBAbW9kdWxlCiAqLwoKdmFyIF8gPSByZXF1aXJlKCcuL3VuZGVyc2NvcmUnKS5fOwoKCi8qKgogKiBUZXN0cyB0aGF0IHRoZSBmaWVsZCdzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiAnbWluJy4KICoKICogQG5hbWUgbWluKG1pbikKICogQHBhcmFtIHtOdW1iZXJ9IG1pbgogKiBAcmV0dXJucyB7RnVuY3Rpb259CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5taW4gPSBmdW5jdGlvbiAobWluKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGRvYywgdmFsdWUpIHsKICAgICAgICBpZiAodmFsdWUgPCBtaW4pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAgICAgJ1BsZWFzZSBlbnRlciBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAnICsgbWluCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfTsKfTsKCi8qKgogKiBUZXN0cyB0aGF0IHRoZSBmaWVsZCdzIHZhbHVlIGlzIGxlc3MgdGhhbiAnbWF4JwogKgogKiBAbmFtZSBtYXgobWF4KQogKiBAcGFyYW0ge051bWJlcn0gbWF4CiAqIEByZXR1cm5zIHtGdW5jdGlvbn0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLm1heCA9IGZ1bmN0aW9uIChtYXgpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZG9jLCB2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZSA+IG1heCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAnUGxlYXNlIGVudGVyIGEgdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICcgKyBtYXgKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9Owp9OwoKLyoqCiAqIFRlc3RzIHRoYXQgdGhlIGZpZWxkJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuICdtaW4nIEFORCBsZXNzIHRoYW4gJ21heCcKICoKICogQG5hbWUgcmFuZ2UobWluLCBtYXgpCiAqIEBwYXJhbSB7TnVtYmVyfSBtaW4KICogQHBhcmFtIHtOdW1iZXJ9IG1heAogKiBAcmV0dXJucyB7RnVuY3Rpb259CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5yYW5nZSA9IGZ1bmN0aW9uIChtaW4sIG1heCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChkb2MsIHZhbHVlKSB7CiAgICAgICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgICdQbGVhc2UgZW50ZXIgYSB2YWx1ZSBiZXR3ZWVuICcgKyBtaW4gKyAnIGFuZCAnICsgbWF4CiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfTsKfTsKCi8qKgogKiBUZXN0cyB0aGF0IHRoZSBmaWVsZCdzIHZhbHVlIGxlbmd0aCBpcyBncmVhdGVyIHRoYW4gJ3ZhbCcKICoKICogQG5hbWUgbWlubGVuZ3RoKHZhbCkKICogQHBhcmFtIHtOdW1iZXJ9IHZhbAogKiBAcmV0dXJucyB7RnVuY3Rpb259CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5taW5sZW5ndGggPSBmdW5jdGlvbiAodmFsKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGRvYywgdmFsdWUpIHsKICAgICAgICBpZiAodmFsdWUubGVuZ3RoIDwgdmFsKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGVudGVyIGF0IGxlYXN0ICcgKyB2YWwgKyAnIGNoYXJhY3RlcnMnKTsKICAgICAgICB9CiAgICB9Owp9OwoKLyoqCiAqIFRlc3RzIHRoYXQgdGhlIGZpZWxkJ3MgdmFsdWUgbGVuZ3RoIGlzIGxlc3MgdGhhbiAndmFsJwogKgogKiBAbmFtZSBtYXhsZW5ndGgodmFsKQogKiBAcGFyYW0ge051bWJlcn0gdmFsCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLm1heGxlbmd0aCA9IGZ1bmN0aW9uICh2YWwpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZG9jLCB2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiB2YWwpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgZW50ZXIgbm8gbW9yZSB0aGFuICcgKyB2YWwgKyAnIGNoYXJhY3RlcnMnKTsKICAgICAgICB9CiAgICB9Owp9OwoKLyoqCiAqIFRlc3RzIHRoYXQgdGhlIGZpZWxkJ3MgdmFsdWUgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiAnbWluJyBBTkQgbGVzcyB0aGFuICdtYXgnCiAqCiAqIEBuYW1lIHJhbmdlbGVuZ3RoKG1pbiwgbWF4KQogKiBAcGFyYW0ge051bWJlcn0gbWluCiAqIEBwYXJhbSB7TnVtYmVyfSBtYXgKICogQHJldHVybnMge0Z1bmN0aW9ufQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMucmFuZ2VsZW5ndGggPSBmdW5jdGlvbiAobWluLCBtYXgpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZG9jLCB2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPCBtaW4gfHwgdmFsdWUubGVuZ3RoID4gbWF4KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgICdQbGVhc2UgZW50ZXIgYSB2YWx1ZSBiZXR3ZWVuICcgKyBtaW4gKyAnIGFuZCAnICsgbWF4ICsKICAgICAgICAgICAgICAgICcgY2hhcmFjdGVycyBsb25nJwogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH07Cn07CgovKioKICogVGVzdHMgZmllbGQncyB2YWx1ZSBhZ2FpbnN0IGEgcmVndWxhciBleHByZXNzaW9uCiAqCiAqIEBuYW1lIHJlZ2V4cChyZSwgbWVzc2FnZSkKICogQHBhcmFtIHtSZWdFeHB9IHJlIC0gY2FuIGJlIGEgc3RyaW5nIG9yIFJlZ0V4cCBvYmplY3QKICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgLSAob3B0aW9uYWwpIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgdG8gdGhyb3cKICogQHJldHVybnMge0Z1bmN0aW9ufQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMucmVnZXhwID0gZnVuY3Rpb24gKHJlLCBtZXNzYWdlKSB7CiAgICByZSA9ICh0eXBlb2YgcmUgPT09ICdzdHJpbmcnKSA/IG5ldyBSZWdFeHAocmUpOiByZTsKICAgIHJldHVybiBmdW5jdGlvbiAoZG9jLCB2YWx1ZSkgewogICAgICAgIGlmICghcmUudGVzdCh2YWx1ZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgJ0ludmFsaWQgZm9ybWF0Jyk7CiAgICAgICAgfQogICAgfTsKfTsKCi8qKgogKiBUZXN0cyB0aGF0IGZpZWxkJ3MgdmFsdWUgaXMgYSB2YWxpZCBlbWFpbCBhZGRyZXNzIHVzaW5nIGEgcmVndWxhciBleHByZXNzaW9uLgogKgogKiBAbmFtZSBlbWFpbCgpCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmVtYWlsID0gZnVuY3Rpb24gKCkgewogICAgLy8gcmVndWxhciBleHByZXNzaW9uIGJ5IFNjb3R0IEdvbnphbGV6OgogICAgLy8gaHR0cDovL3Byb2plY3RzLnNjb3R0c3BsYXlncm91bmQuY29tL2VtYWlsX2FkZHJlc3NfdmFsaWRhdGlvbi8KICAgIHJldHVybiBleHBvcnRzLnJlZ2V4cChuZXcgUmVnRXhwKCJeKCgoW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKyhcXC4oW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKykqKXwoKFxceDIyKSgoKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KChbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3Zl18XFx4MjF8W1xceDIzLVxceDViXXxbXFx4NWQtXFx4N2VdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoXFxcXChbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpKSooKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KFxceDIyKSkpQCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8kIiwgImkiKSwgJ1BsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnKTsKfTsKCi8qKgogKiBUZXN0cyB0aGF0IGZpZWxkJ3MgdmFsdWUgaXMgYSB2YWxpZCBVUkwgdXNpbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uCiAqCiAqIEBuYW1lIHVybCgpCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnVybCA9IGZ1bmN0aW9uICgpIHsKICAgIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbiBieSBTY290dCBHb256YWxlejoKICAgIC8vIGh0dHA6Ly9wcm9qZWN0cy5zY290dHNwbGF5Z3JvdW5kLmNvbS9pcmkvCiAgICByZXR1cm4gZXhwb3J0cy5yZWdleHAobmV3IFJlZ0V4cCgiXihodHRwcz98ZnRwKTpcXC9cXC8oKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oXFwjKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQiLCAiaSIpLCAnUGxlYXNlIGVudGVyIGEgdmFsaWQgVVJMJyk7Cn07CgovKioKICogRGV0ZWN0cyBlbWJlZGRlZCBkb2N1bWVudHMgd2l0aCBtaXNzaW5nIF9pZCBwcm9wZXJ0aWVzIGFuZCByZXR1cm5zIGFuCiAqIGFycmF5IG9mIEVycm9yIG9iamVjdHMgZm9yIGVhY2ggb2NjdXJlbmNlLiBSZXR1cm5zIGFuIGVtcHR5IGFycmF5IGlmCiAqIGFsbCBkb2N1bWVudHMgaGF2ZSBhIHBvcHVsYXRlZCBfaWQgcHJvcGVydHkuCiAqCiAqIFVzZWQgYnkgdGhlIEVtYmVkZGVkTGlzdCBmaWVsZCB0eXBlLgogKgogKiBAbmFtZSBtaXNzaW5nSURzKCkKICogQHBhcmFtIHtPYmplY3R9IGRvYwogKiBAcGFyYW0ge0FycmF5fSB2YWx1ZQogKiBAcmV0dXJucyB7QXJyYXl9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5taXNzaW5nSURzID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChkb2MsIHZhbHVlKSB7CiAgICAgICAgdmFyIGVycnMgPSBbXTsKICAgICAgICBfLmVhY2godmFsdWUsIGZ1bmN0aW9uICh2LCBpKSB7CiAgICAgICAgICAgIGlmICghdi5faWQpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdFbWJlZGRlZCBkb2N1bWVudCBtaXNzaW5nIF9pZCcpOwogICAgICAgICAgICAgICAgZS5maWVsZCA9IFtpXTsKICAgICAgICAgICAgICAgIGVycnMucHVzaChlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBlcnJzOwogICAgfTsKfTsKCgoKfSl9OwoKLyoqKioqKioqKioga2Fuc28vd2lkZ2V0cyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImthbnNvL3dpZGdldHMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKLypnbG9iYWwgJDogZmFsc2UsIGthbnNvOiB0cnVlKi8KCi8qKgogKiBXaWRnZXRzIGRlZmluZSB0aGUgd2F5IGEgRmllbGQgb2JqZWN0IGlzIGRpc3BsYXllZCB3aGVuIHJlbmRlcmVkIGFzIHBhcnQgb2YgYQogKiBGb3JtLiBDaGFuZ2luZyBhIEZpZWxkJ3Mgd2lkZ2V0IHdpbGwgYmUgcmVmbGVjdGVkIGluIHRoZSBhZG1pbiBhcHAuCiAqCiAqIEBtb2R1bGUKICovCgovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciBkYiA9IHJlcXVpcmUoJy4vZGInKSwKICAgIGZvcm1zID0gcmVxdWlyZSgnLi9mb3JtcycpLAogICAgYWN0aW9ucyA9IHJlcXVpcmUoJy4vYWN0aW9ucycpLAogICAgcmVuZGVyID0gcmVxdWlyZSgnLi9yZW5kZXInKSwKICAgIHNhbml0aXplID0gcmVxdWlyZSgnLi9zYW5pdGl6ZScpLAogICAgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyksCiAgICBldmVudHMgPSByZXF1aXJlKCcuL2V2ZW50cycpLAogICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCcuL3F1ZXJ5c3RyaW5nJyksCiAgICBfID0gcmVxdWlyZSgnLi91bmRlcnNjb3JlJykuXzsKCnZhciBoID0gc2FuaXRpemUuZXNjYXBlSHRtbDsKCgovKioKICogV2lkZ2V0IGNvbnN0cnVjdG9yLCBjcmVhdGVzIGEgbmV3IFdpZGdldCBvYmplY3QuCiAqCiAqIEBuYW1lIFdpZGdldCh0eXBlLCBbb3B0aW9uc10pCiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAqIEBjb25zdHJ1Y3RvcgogKiBAcmV0dXJucyB7V2lkZ2V0IE9iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgp2YXIgV2lkZ2V0ID0gZXhwb3J0cy5XaWRnZXQgPSBmdW5jdGlvbiBXaWRnZXQodHlwZSwgb3B0aW9ucykgewogICAgb3B0aW9ucyA9IChvcHRpb25zIHx8IHt9KTsKICAgIHRoaXMuY2xhc3NlcyA9IChvcHRpb25zLmNsYXNzZXMgfHwgW10pOwogICAgdGhpcy5pZCA9IG9wdGlvbnMuaWQ7CiAgICB0aGlzLnR5cGUgPSB0eXBlOwp9OwoKLyoqCiAqIEdlbmVyYXRlcyBhbiBpZCBzdHJpbmcgZm9yIGEgd2lkZ2V0LgogKgogKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIGZpZWxkIG5hbWUgb24gdGhlIEhUTUwgZm9ybQogKiBAcGFyYW0ge1N0cmluZ30gZXh0ZW5zaW9uIC0gb3B0aW9uYWw7IGEgc3RyaW5nIHRvIGJlIGFkZGVkCiAqICAgICAgICAgICAgICAgICAgdG8gdGhlIGdlbmVyYXRlZCBpZGVudGlmaWVyLiBVc2UgdGhpcyB3aGVuIHlvdQogKiAgICAgICAgICAgICAgICAgIHdhbnQgdG8gbWFrZSBhbiBpZGVudGlmaWVyIHRoYXQgaXMgcmVsYXRlZCB0bwogKiAgICAgICAgICAgICAgICAgIGFuIGV4aXN0aW5nIGlkZW50aWZpZXIsIGJ1dCBpcyBzdGlsbCB1bmlxdWUuCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqLwoKV2lkZ2V0LnByb3RvdHlwZS5faWQgPSBmdW5jdGlvbiAobmFtZSAvKiAsIC4uLiAqLykgewogICAgcmV0dXJuIHNhbml0aXplLmdlbmVyYXRlRG9tSWRlbnRpZmllci5hcHBseSgKICAgICAgICB0aGlzLCBbIHRoaXMuaWQgfHwgbmFtZSBdLmNvbmNhdCgKICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKQogICAgICAgICkKICAgICk7Cn07CgovKioKICogR2VuZXJhdGVzIGEgbmFtZSBzdHJpbmcgZm9yIGEgd2lkZ2V0LgogKgogKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIGZpZWxkIG5hbWUgb24gdGhlIEhUTUwgZm9ybQogKiBAcGFyYW0ge1N0cmluZ30gZXh0ZW5zaW9uIC0gb3B0aW9uYWw7IGEgc3RyaW5nIHRvIGJlIGFkZGVkCiAqICAgICAgICAgICAgICAgICAgdG8gdGhlIGdlbmVyYXRlZCBpZGVudGlmaWVyLiBVc2UgdGhpcyB3aGVuIHlvdQogKiAgICAgICAgICAgICAgICAgIHdhbnQgdG8gbWFrZSBhbiBpZGVudGlmaWVyIHRoYXQgaXMgcmVsYXRlZCB0bwogKiAgICAgICAgICAgICAgICAgIGFuIGV4aXN0aW5nIGlkZW50aWZpZXIsIGJ1dCBpcyBzdGlsbCB1bmlxdWUuCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqLwoKV2lkZ2V0LnByb3RvdHlwZS5fbmFtZSA9IGZ1bmN0aW9uIChuYW1lIC8qICwgLi4uICovKSB7CiAgICByZXR1cm4gc2FuaXRpemUuZ2VuZXJhdGVEb21OYW1lLmFwcGx5KAogICAgICAgIHRoaXMsIFsgbmFtZSBdLmNvbmNhdCgKICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKQogICAgICAgICkKICAgICk7Cn07CgovKioKICogQ29udmVydHMgYW4gaW5wdXQgZWxlbWVudCdzIHZhbHVlIGF0dHJpYnV0ZSB0byBhIHZhbGlkCiAqIGluLW1lbW9yeSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgZnJhZ21lbnQuCiAqIFRoaXMgZnVuY3Rpb24gdHJpZXMgdG8gaW50ZXJwcmV0IHRoZSBzdHJpbmcgYXMgSlNPTiBpZiBpdCdzCiAqIGFwcHJvcHJpYXRlOyBvdGhlcndpc2UgdGhlIHN0cmluZyBpcyBsZWZ0IGFsb25lLgogKgogKiBAbmFtZSBfcGFyc2VfdmFsdWUoc3RyLCB0eXBlX25hbWUpCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB2YWx1ZSB0byBwYXJzZQogKiBAcGFyYW0ge1N0cmluZ30gdHlwZV9uYW1lIFRoZSB0eXBlIG9mIGZpZWxkIHRoYXQgdGhlIGlucHV0IGNvbnRyb2wKICogICAgICAgICAgYmVsb25ncyB0by4gVGhpcyB2YWx1ZSBtYXkgaW5mbHVlbmNlIGhvdyBzdHIgaXMgcGFyc2VkLgogKiBAcmV0dXJucyB7T2JqZWN0fQogKi8KCldpZGdldC5wcm90b3R5cGUuX3BhcnNlX3ZhbHVlID0gZnVuY3Rpb24gKHN0ciwgdHlwZV9uYW1lKQp7CiAgICAvKiBUT0RPOgogICAgICAgIFRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYWN0dWFsbHkgY2hlY2sgdHlwZV9uYW1lLiAqLwoKICAgIHZhciBydiA9IG51bGw7CgogICAgdHJ5IHsKICAgICAgICBydiA9IEpTT04ucGFyc2Uoc3RyKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBydiA9IHN0cjsKICAgIH0KCiAgICByZXR1cm4gcnY7Cn07CgovKioKICogQ29udmVydHMgYW4gaW4tbWVtb3J5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkb2N1bWVudCBvcgogKiBkb2N1bWVudCBmcmFnbWVudCBpbiB0byBhbiBlbmNvZGVkIHN0cmluZy4gSWYgdGhlIHZhbHVlCiAqIHBhc3NlZCBpcyBhbHJlYWR5IGVuY29kZWQsIHRoaXMgZnVuY3Rpb24gZG9lcyBub3RoaW5nLgogKgogKiBAbmFtZSBfc3RyaW5naWZ5X3ZhbHVlKHN0ciwgdHlwZV9uYW1lKQogKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIGVuY29kZS4KICogQHBhcmFtIHtTdHJpbmd9IHR5cGVfbmFtZSBUaGUgdHlwZSBvZiBmaWVsZCB0aGF0IHRoZSBpbnB1dCBjb250cm9sCiAqICAgICAgICAgIGJlbG9uZ3MgdG8uIFRoaXMgdmFsdWUgbWF5IGluZmx1ZW5jZSBob3cgdmFsdWUgaXMgZW5jb2RlZC4KICogQHJldHVybnMge09iamVjdH0KICovCgpXaWRnZXQucHJvdG90eXBlLl9zdHJpbmdpZnlfdmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIHR5cGVfbmFtZSkKewogICAgLyogVE9ETzoKICAgICAgICBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGFjdHVhbGx5IGNoZWNrIHR5cGVfbmFtZS4gKi8KCiAgICB2YXIgcnYgPSBudWxsOwoKICAgIHRyeSB7CiAgICAgICAgcnYgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcnYgPSB2YWx1ZTsKICAgIH0KCiAgICByZXR1cm4gcnY7Cn07CgovKioKICogQ29udmVydHMgYSB3aWRnZXQgdG8gSFRNTCB1c2luZyB0aGUgcHJvdmlkZWQgbmFtZSBhbmQgcGFyc2VkIGFuZCByYXcgdmFsdWVzCiAqCiAqIEBuYW1lIFdpZGdldC50b0hUTUwobmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIG9wdGlvbnMpCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAqIEBwYXJhbSB2YWx1ZQogKiBAcGFyYW0gcmF3CiAqIEBwYXJhbSBmaWVsZAogKiBAcGFyYW0gb3B0aW9ucwogKiBAcmV0dXJucyB7U3RyaW5nfQogKiBAYXBpIHB1YmxpYwogKi8KCldpZGdldC5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCByYXcsIGZpZWxkLCBvcHRpb25zKSB7CiAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHsKICAgICAgICByYXcgPSAodmFsdWUgPT09IHVuZGVmaW5lZCkgPyAnJzogJycgKyB2YWx1ZTsKICAgIH0KICAgIGlmIChyYXcgPT09IG51bGwgfHwgcmF3ID09PSB1bmRlZmluZWQpIHsKICAgICAgICByYXcgPSAnJzsKICAgIH0KICAgIHZhciBodG1sID0gJzxpbnB1dCc7CiAgICBodG1sICs9ICh0aGlzLnR5cGUgPyAnIHR5cGU9IicgKyBoKHRoaXMudHlwZSkgKyAnIic6ICcnKTsKICAgIGh0bWwgKz0gJyB2YWx1ZT0iJyArIGgocmF3KSArICciJzsKICAgIGh0bWwgKz0gJyBuYW1lPSInICsgdGhpcy5fbmFtZShuYW1lLCBvcHRpb25zLm9mZnNldCkgKyAnIiBpZD0iJzsKICAgIGh0bWwgKz0gdGhpcy5faWQobmFtZSwgb3B0aW9ucy5vZmZzZXQsIG9wdGlvbnMucGF0aF9leHRyYSkgKyAnIic7CiAgICByZXR1cm4gaHRtbCArICcgLz4nOwp9OwoKLyoqCiAqIEluaXRpYWxpemVzIGEgd2lkZ2V0IG9uIHRoZSBjbGllbnQtc2lkZSBvbmx5LCB1c2luZyB0aGUgYnJvd3NlcidzCiAqIHNjcmlwdCBpbnRlcnByZXRlci4gVGhpcyBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIGJlIGNhbGxlZAogKiBhZnRlciB0b0hUTUwsIGFuZCBhbnkgRE9NIGVsZW1lbnRzIGNyZWF0ZWQgYnkgdG9IVE1MIGFyZQogKiBndWFyYW50ZWVkIHRvIGJlIGFjY2Vzc2libGUKICoKICogQG5hbWUgV2lkZ2V0LmNsaWVudEluaXQocGF0aCwgdmFsdWUsIHJhdywgZmllbGQsIG9wdGlvbnMpCiAqIEBwYXJhbSB7QXJyYXl9IHBhdGgKICogQHBhcmFtIHZhbHVlCiAqIEBwYXJhbSByYXcKICogQHBhcmFtIGZpZWxkCiAqIEBwYXJhbSBvcHRpb25zCiAqIEByZXR1cm5zIHtCb29sZWFufQogKiBAYXBpIHB1YmxpYwogKi8KCldpZGdldC5wcm90b3R5cGUuY2xpZW50SW5pdCA9IGZ1bmN0aW9uIChwYXRoLCB2YWx1ZSwgcmF3LCBmaWVsZCwgb3B0aW9ucykgewogICAgcmV0dXJuIHRydWU7Cn07CgovKioKICogQ2FsbGVkIGJ5IEthbnNvIHdoZW4gaXQgYmVjb21lcyBuZWNlc3NhcnkgdG8gcmVuYW1lIHRoaXMgd2lkZ2V0CiAqIGluc3RhbmNlLiBUaGUgd2lkZ2V0IHNob3VsZCByZXNwb25kIGJ5IHVwZGF0aW5nIHRoZSBpZCBhbmQgbmFtZQogKiBhdHRyaWJ1dGVzLgogKgogKiBAbmFtZSBXaWRnZXQudXBkYXRlTmFtZShwYXRoKQogKiBAcGFyYW0ge1N0cmluZ30gZWx0IEFuIGVsZW1lbnQgdGhhdCBjb250YWlucyBvbmUgb3IKICogICAgICAgICAgbW9yZSBpbnN0YW5jZXMgb2YgdGhlIHdpZGdldCByZWZlcmVuY2VkIGJ5IGB0aGlzJy4KICogQHBhcmFtIHtTdHJpbmd9IHBhdGggVGhlIHdpZGdldCdzIG5ldyBwYXRoOyBjb21iaW5lIHRoaXMgdXNpbmcKICogICAgICAgICAgdGhlIF9uYW1lIG9yIF9pZCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIHVzYWJsZSBzdHJpbmcuCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgbmV3IHNldCBvZiB0b0hUTUwvY2xpZW50SW5pdCBvcHRpb25zLgogKiAgICAgICAgICBUaGlzIG1heSBvciBtYXkgbm90IGluZmx1ZW5jZSB0aGUgd2lkZ2V0J3MgbmFtZS4KICogQGFwaSBwdWJsaWMKICovCgpXaWRnZXQucHJvdG90eXBlLnVwZGF0ZU5hbWUgPSBmdW5jdGlvbiAoZWx0LCBwYXRoLCBvcHRpb25zKSB7CiAgICB2YXIgZSA9ICQoJ2lucHV0W3R5cGU9aGlkZGVuXScsIGVsdCk7CiAgICBlLmF0dHIoJ2lkJywgdGhpcy5faWQocGF0aCwgb3B0aW9ucy5vZmZzZXQsIG9wdGlvbnMucGF0aF9leHRyYSkpOwogICAgZS5hdHRyKCduYW1lJywgdGhpcy5fbmFtZShwYXRoLCBvcHRpb25zLm9mZnNldCwgb3B0aW9ucy5wYXRoX2V4dHJhKSk7Cn07CgovKioKICogQ2FsbGVkIGJ5IEthbnNvIHdoZW4gaXQgYmVjb21lcyBuZWNlc3NhcnkgdG8gcmVuYW1lIHRoaXMgd2lkZ2V0CiAqIGluc3RhbmNlLiBUaGUgd2lkZ2V0IHNob3VsZCByZXNwb25kIGJ5IHVwZGF0aW5nIHRoZSB2YWx1ZSBhdHRyaWJ1dGUuCiAqCiAqIEBuYW1lIFdpZGdldC51cGRhdGVWYWx1ZShlbHQsIHBhdGgsIHZhbHVlLCBvcHRpb25zKQogKiBAcGFyYW0ge1N0cmluZ30gZWx0IEFuIGVsZW1lbnQgdGhhdCBjb250YWlucyBvbmUgb3IKICogICAgICAgICAgbW9yZSBpbnN0YW5jZXMgb2YgdGhlIHdpZGdldCByZWZlcmVuY2VkIGJ5IGB0aGlzJy4KICogQHBhcmFtIHtTdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gdGhlIHdpZGdldC4KICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBuZXcgdmFsdWUgZm9yIHRoZSB3aWRnZXQsIHVuZW5jb2RlZC4KICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gdXAtdG8tZGF0ZSBzZXQgb2YgdG9IVE1ML2NsaWVudEluaXQgb3B0aW9ucy4KICogQGFwaSBwdWJsaWMKICovCgpXaWRnZXQucHJvdG90eXBlLnVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKGVsdCwgcGF0aCwgdmFsdWUsIG9wdGlvbnMpIHsKICAgIGVsdCA9ICQoZWx0KS5jbG9zZXN0Q2hpbGQoJ2lucHV0W3R5cGU9aGlkZGVuXScpOwogICAgZWx0LnZhbCh0aGlzLl9zdHJpbmdpZnlfdmFsdWUodmFsdWUpKTsKfTsKCi8qKgogKiBDYWxsZWQgYnkgS2Fuc28gd2hlbiBpdCBiZWNvbWVzIG5lY2Vzc2FyeSB0byBpbnRlcnJvZ2F0ZSB0aGlzCiAqIHdpZGdldCB0byBkZXRlcm1pbmUgaXRzIHZhbHVlLiBUaGUgd2lkZ2V0IHNob3VsZCByZXNwb25kIGJ5CiAqIHJldHVybmluZyBhbiB1bmVuY29kZWQgdmFsdWUgKHR5cGljYWxseSBhcyBhbiBvYmplY3QpLgogKgogKiBAbmFtZSBXaWRnZXQuZ2V0VmFsdWUoZWx0LCBwYXRoLCBvcHRpb25zKQogKiBAcGFyYW0ge1N0cmluZ30gZWx0IEFuIGVsZW1lbnQgdGhhdCBjb250YWlucyBvbmUgb3IKICogICAgICAgICAgbW9yZSBpbnN0YW5jZXMgb2YgdGhlIHdpZGdldCByZWZlcmVuY2VkIGJ5IGB0aGlzJy4KICogQHBhcmFtIHtTdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gdGhlIHdpZGdldC4KICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gdXAtdG8tZGF0ZSBzZXQgb2YgdG9IVE1ML2NsaWVudEluaXQgb3B0aW9ucy4KICogQGFwaSBwdWJsaWMKICovCgpXaWRnZXQucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGVsdCwgcGF0aCwgb3B0aW9ucykgewogICAgcmV0dXJuIHRoaXMuX3BhcnNlX3ZhbHVlKAogICAgICAgICQoZWx0KS5jbG9zZXN0Q2hpbGQoJ2lucHV0W3R5cGU9aGlkZGVuXScpLnZhbCgpCiAgICApOwp9OwoKLyoqCiAqIENhbGxlZCBieSBLYW5zbyB3aGVuIGl0IGJlY29tZXMgbmVjZXNzYXJ5IHRvIHZhbGlkYXRlIHRoZQogKiBjb250ZW50cyBvZiB0aGlzIHdpZGdldCAtLSBpLmUuIHRvIGVuc3VyZSBpdCdzIGluIGEgY29uc2lzdGVudAogKiBzdGF0ZSBiZWZvcmUgdXNpbmcgaXRzIHZhbHVlIG9yIHByb2NlZWRpbmcuIE1vc3Qgd2lkZ2V0cyB3aWxsCiAqIG5vdCBpbXBsZW1lbnQgdGhpcyBtZXRob2Q7IGl0cyBwcmltYXJ5IHVzZSBpcyBjb21wbGV4IHdpZGdldHMKICogdGhhdCBob3N0IHZhbGlkYXRpb24tZW5hYmxlZCBmb3JtcyBhbmQvb3IgdHlwZXMuIFJldHVybnMgdHJ1ZQogKiBpZiB0aGUgY29udGVudHMgaXMgY29uc2lzdGVudCBhbmQgdmFsaWQ7IGZhbHNlIG90aGVyd2lzZS4KICoKICogQG5hbWUgV2lkZ2V0LnZhbGlkYXRlKGVsdCwgcGF0aCwgb3B0aW9ucykKICogQHBhcmFtIHtTdHJpbmd9IGVsdCBBbiBlbGVtZW50IHRoYXQgY29udGFpbnMgb25lIG9yCiAqICAgICAgICAgIG1vcmUgaW5zdGFuY2VzIG9mIHRoZSB3aWRnZXQgcmVmZXJlbmNlZCBieSBgdGhpcycuCiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSB3aWRnZXQuCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIHVwLXRvLWRhdGUgc2V0IG9mIHRvSFRNTC9jbGllbnRJbml0IG9wdGlvbnMuCiAqIEBhcGkgcHVibGljCiAqLwoKV2lkZ2V0LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChlbHQsIHBhdGgsIG9wdGlvbnMpIHsKICAgIHJldHVybiB0cnVlOwp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgdGV4dCBpbnB1dCB3aWRnZXQuCiAqCiAqIEBuYW1lIHRleHQoW29wdGlvbnNdKQogKiBAcGFyYW0gb3B0aW9ucwogKiBAcmV0dXJucyB7V2lkZ2V0IE9iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnRleHQgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgcmV0dXJuIG5ldyBXaWRnZXQoJ3RleHQnLCBvcHRpb25zKTsKfTsKCi8qKgogKiBDcmVhdGVzIGEgbmV3IHBhc3N3b3JkIGlucHV0IHdpZGdldC4KICoKICogQG5hbWUgcGFzc3dvcmQoW29wdGlvbnNdKQogKiBAcGFyYW0gb3B0aW9ucwogKiBAcmV0dXJucyB7V2lkZ2V0IE9iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLnBhc3N3b3JkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIHJldHVybiBuZXcgV2lkZ2V0KCdwYXNzd29yZCcsIG9wdGlvbnMpOwp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgaGlkZGVuIGlucHV0IHdpZGdldC4KICoKICogQG5hbWUgaGlkZGVuKFtvcHRpb25zXSkKICogQHBhcmFtIG9wdGlvbnMKICogQHJldHVybnMge1dpZGdldCBPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5oaWRkZW4gPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgcmV0dXJuIG5ldyBXaWRnZXQoJ2hpZGRlbicsIG9wdGlvbnMpOwp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgdGV4dGFyZWEgd2lkZ2V0LgogKgogKiBAbmFtZSB0ZXh0YXJlYShbb3B0aW9uc10pCiAqIEBwYXJhbSBvcHRpb25zCiAqIEByZXR1cm5zIHtXaWRnZXQgT2JqZWN0fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMudGV4dGFyZWEgPSBmdW5jdGlvbiAoX29wdGlvbnMpIHsKICAgIHZhciB3ID0gbmV3IFdpZGdldCgndGV4dGFyZWEnLCBfb3B0aW9ucyB8fCB7fSk7CiAgICB3Lm9wdGlvbnMgPSBfb3B0aW9uczsKICAgIHcudG9IVE1MID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCByYXcsIGZpZWxkLCBvcHRpb25zKSB7CiAgICAgICAgaWYgKHJhdyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJhdyA9ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/ICcnOiAnJyArIHZhbHVlOwogICAgICAgIH0KICAgICAgICBpZiAocmF3ID09PSBudWxsIHx8IHJhdyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJhdyA9ICcnOwogICAgICAgIH0KICAgICAgICB2YXIgaHRtbCA9ICc8dGV4dGFyZWEnOwogICAgICAgIGh0bWwgKz0gJyBuYW1lPSInICsgdGhpcy5fbmFtZShuYW1lLCBvcHRpb25zLm9mZnNldCkgKyAnIiBpZD0iJzsKICAgICAgICBodG1sICs9IHRoaXMuX2lkKG5hbWUsIG9wdGlvbnMub2Zmc2V0LCBvcHRpb25zLnBhdGhfZXh0cmEpICsgJyInOwoKICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhhc093blByb3BlcnR5KCdjb2xzJykpIHsKICAgICAgICAgICAgaHRtbCArPSAnIGNvbHM9IicgKyBoKHRoaXMub3B0aW9ucy5jb2xzKSArICciJzsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncm93cycpKSB7CiAgICAgICAgICAgIGh0bWwgKz0gJyByb3dzPSInICsgaCh0aGlzLm9wdGlvbnMucm93cykgKyAnIic7CiAgICAgICAgfQogICAgICAgIGh0bWwgKz0gJz4nICsgaChyYXcpOwogICAgICAgIGh0bWwgKz0gJzwvdGV4dGFyZWE+JzsKICAgICAgICByZXR1cm4gaHRtbDsKICAgIH07CiAgICByZXR1cm4gdzsKfTsKCi8qKgogKiBDcmVhdGVzIGEgbmV3IGNoZWNrYm94IHdpZGdldC4KICoKICogQG5hbWUgY2hlY2tib3goW29wdGlvbnNdKQogKiBAcGFyYW0gb3B0aW9ucwogKiBAcmV0dXJucyB7V2lkZ2V0IE9iamVjdH0KICogQGFwaSBwdWJsaWMKICovCgpleHBvcnRzLmNoZWNrYm94ID0gZnVuY3Rpb24gKF9vcHRpb25zKSB7CiAgICB2YXIgdyA9IG5ldyBXaWRnZXQoJ2NoZWNrYm94JywgX29wdGlvbnMgfHwge30pOwogICAgdy50b0hUTUwgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgaHRtbCA9ICc8aW5wdXQgdHlwZT0iY2hlY2tib3giJzsKICAgICAgICBodG1sICs9ICcgbmFtZT0iJyArIHRoaXMuX25hbWUobmFtZSwgb3B0aW9ucy5vZmZzZXQpICsgJyIgaWQ9Iic7CiAgICAgICAgaHRtbCArPSB0aGlzLl9pZChuYW1lLCBvcHRpb25zLm9mZnNldCwgb3B0aW9ucy5wYXRoX2V4dHJhKSArICciJzsKICAgICAgICBodG1sICs9ICh2YWx1ZSA/ICcgY2hlY2tlZD0iY2hlY2tlZCInOiAnJyk7CiAgICAgICAgcmV0dXJuIChodG1sICsgJyAvPicpOwogICAgfTsKICAgIHJldHVybiB3Owp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgc2VsZWN0IHdpZGdldC4KICoKICogQG5hbWUgc2VsZWN0KFtvcHRpb25zXSkKICogQHBhcmFtIG9wdGlvbnMKICogQHJldHVybnMge1dpZGdldCBPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5zZWxlY3QgPSBmdW5jdGlvbiAoX29wdGlvbnMpIHsKICAgIHZhciB3ID0gbmV3IFdpZGdldCgnc2VsZWN0JywgX29wdGlvbnMgfHwge30pOwogICAgdy52YWx1ZXMgPSBfb3B0aW9ucy52YWx1ZXM7CiAgICB3LnRvSFRNTCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgcmF3LCBmaWVsZCwgb3B0aW9ucykgewogICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHZhbHVlID0gJyc7CiAgICAgICAgfQoKICAgICAgICB2YXIgaHRtbCA9ICc8c2VsZWN0JzsKICAgICAgICBodG1sICs9ICcgbmFtZT0iJyArIHRoaXMuX25hbWUobmFtZSwgb3B0aW9ucy5vZmZzZXQpICsgJyIgaWQ9Iic7CiAgICAgICAgaHRtbCArPSB0aGlzLl9pZChuYW1lLCBvcHRpb25zLm9mZnNldCwgb3B0aW9ucy5wYXRoX2V4dHJhKSArICciPic7CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIG9wdCA9IHRoaXMudmFsdWVzW2ldOwogICAgICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPSInICsgaChvcHRbMF0pICsgJyInOwogICAgICAgICAgICBpZiAob3B0WzBdID09PSB2YWx1ZSkgewogICAgICAgICAgICAgICAgaHRtbCArPSAnIHNlbGVjdGVkPSJzZWxlY3RlZCInOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGh0bWwgKz0gJz4nOwogICAgICAgICAgICBodG1sICs9IGgob3B0WzFdKTsKICAgICAgICAgICAgaHRtbCArPSAnPC9vcHRpb24+JzsKICAgICAgICB9CiAgICAgICAgaHRtbCArPSAnPC9zZWxlY3Q+JzsKICAgICAgICByZXR1cm4gaHRtbDsKICAgIH07CiAgICByZXR1cm4gdzsKfTsKCi8qKgogKiBDcmVhdGVzIGEgbmV3IGNvbXB1dGVkIHdpZGdldC4gQ29tcHV0ZWQgd2lkZ2V0cyBkaXNwbGF5IGEgc3RyaW5nLCBidXQgYXJlCiAqIHVuZWRpdGFibGUsIHdvcmtpbmcgYXMgYSBoaWRkZW4gZmllbGQgYmVoaW5kIHRoZSBzY2VuZXMuCiAqCiAqIEBuYW1lIGNvbXB1dGVkKFtvcHRpb25zXSkKICogQHBhcmFtIG9wdGlvbnMKICogQHJldHVybnMge1dpZGdldCBPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChfb3B0aW9ucykgewogICAgdmFyIHcgPSBuZXcgV2lkZ2V0KCdjb21wdXRlZCcsIF9vcHRpb25zKTsKICAgIHcudG9IVE1MID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCByYXcsIGZpZWxkLCBvcHRpb25zKSB7CiAgICAgICAgaWYgKHJhdyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJhdyA9ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/ICcnOiAnJyArIHZhbHVlOwogICAgICAgIH0KICAgICAgICBpZiAocmF3ID09PSBudWxsIHx8IHJhdyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJhdyA9ICcnOwogICAgICAgIH0KICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2IGlkPSInOwogICAgICAgIGh0bWwgKz0gdGhpcy5faWQobmFtZSwgb3B0aW9ucy5vZmZzZXQsIG9wdGlvbnMucGF0aF9leHRyYSkgKyAnIj4nOwogICAgICAgIGh0bWwgKz0gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSInICsgaChyYXcpICsgJyInOwogICAgICAgIGh0bWwgKz0gJyBuYW1lPSInICsgdGhpcy5fbmFtZShuYW1lLCBvcHRpb25zLm9mZnNldCkgKyAnIiAvPic7CiAgICAgICAgaHRtbCArPSAnPHNwYW4+JyArIGgocmF3KSArICc8L3NwYW4+JzsKICAgICAgICBodG1sICs9ICc8L2Rpdj4nOwogICAgICAgIHJldHVybiBodG1sOwogICAgfTsKICAgIHJldHVybiB3Owp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgY29tcHV0ZWQgaW5wdXQgd2lkZ2V0IHdoaWNoIHNldHMgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZCB0bwogKiB0aGUgY3VycmVudCB1c2VyIG9uIG5ldyBkb2N1bWVudHMsIHJlc3BvbmRpbmcgdG8gc2Vzc2lvbkNoYW5nZSBldmVudHMKICoKICogQG5hbWUgY3JlYXRvcihbb3B0aW9uc10pCiAqIEBwYXJhbSBvcHRpb25zCiAqIEByZXR1cm5zIHtXaWRnZXQgT2JqZWN0fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuY3JlYXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICB2YXIgdyA9IGV4cG9ydHMuY29tcHV0ZWQob3B0aW9ucyk7CiAgICB2YXIgX3RvSFRNTCA9IHcudG9IVE1MOwogICAgdmFyIGVsX25hbWU7IC8vIHN0b3JlIGlucHV0IG5hbWUgcHJvdmlkZWQgYnkgcmVuZGVyZXIKICAgIHZhciBlbDsgLy8gc3RvcmUgcmVmZXJlbmNlIHRvIGVsZW1lbnQgc28gd2UgY2FuIGRldGVjdCB3aGVuIGl0cyBiZWVuIHJlbW92ZWQKCiAgICB3LnRvSFRNTCA9IGZ1bmN0aW9uIChuYW1lLyosIC4uLiovKSB7CiAgICAgICAgZWxfbmFtZSA9IG5hbWU7CiAgICAgICAgcmV0dXJuIF90b0hUTUwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgICB3LmNsaWVudEluaXQgPSBmdW5jdGlvbiAoZmllbGQsIHBhdGgsIHZhbHVlLCByYXcsIGVycm9ycywgb3B0aW9ucykgewogICAgICAgIGlmIChvcHRpb25zLm9wZXJhdGlvbiA9PT0gJ2FkZCcpIHsKCiAgICAgICAgICAgIHZhciBpZCA9IHcuX2lkKGVsX25hbWUsIG9wdGlvbnMub2Zmc2V0LCBvcHRpb25zLnBhdGhfZXh0cmEpOwoKICAgICAgICAgICAgLy8gc3RvcmUgcmVmZXJlbmNlIHRvIGNvbnRhaW5lciBlbGVtZW50CiAgICAgICAgICAgIGVsID0gJCgnIycgKyBpZClbMF07CgogICAgICAgICAgICB2YXIgdXBkYXRlX3ZhbCA9IGZ1bmN0aW9uICh1c2VyQ3R4LCByZXEpIHsKICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKCcjJyArIGlkKVswXTsKICAgICAgICAgICAgICAgIGlmIChlbCAhPT0gY29udGFpbmVyKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCBoYXMgYmVlbiByZW1vdmVkCiAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnJlbW92ZUxpc3RlbmVyKCdzZXNzaW9uQ2hhbmdlJywgdXBkYXRlX3ZhbCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lcikgewogICAgICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udGFpbmVyKS52YWwodXNlckN0eC5uYW1lIHx8ICcnKTsKICAgICAgICAgICAgICAgICAgICAkKCdzcGFuJywgY29udGFpbmVyKS50ZXh0KHVzZXJDdHgubmFtZSB8fCAnJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBwYWdlIChvciB3YXMgbmV2ZXIgdGhlcmU/KQogICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZW1vdmVMaXN0ZW5lcignc2Vzc2lvbkNoYW5nZScsIHVwZGF0ZV92YWwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBldmVudHMub24oJ3Nlc3Npb25DaGFuZ2UnLCB1cGRhdGVfdmFsKTsKICAgICAgICB9CiAgICB9OwogICAgcmV0dXJuIHc7Cn07CgoKCi8qKgogKiBDcmVhdGVzIGEgbmV3IGZpZWxkIGZvciBzdG9yaW5nL2Rpc3BsYXlpbmcgYW4gZW1iZWRkZWQgb2JqZWN0LgogKiBUaGlzIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZW1iZWQgYW5kIGVtYmVkTGlzdCBmaWVsZCB0eXBlcwogKiB0aGF0IGRvbid0IHNwZWNpZnkgYSB3aWRnZXQuCiAqCiAqIEBuYW1lIGVtYmVkZGVkKFtvcHRpb25zXSkKICogQHBhcmFtIG9wdGlvbnMKICogQHJldHVybnMge1dpZGdldCBPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5lbWJlZExpc3QgPSBmdW5jdGlvbiAoX29wdGlvbnMpIHsKICAgIHZhciB3ID0gbmV3IFdpZGdldCgnZW1iZWRMaXN0JywgX29wdGlvbnMpOwoKICAgIHcuc29ydGFibGUgPSBfb3B0aW9ucy5zb3J0YWJsZTsKICAgIHcuc2luZ2xldG9uID0gX29wdGlvbnMuc2luZ2xldG9uOwogICAgdy53aWRnZXQgPSAoX29wdGlvbnMud2lkZ2V0IHx8IGV4cG9ydHMuZGVmYXVsdEVtYmVkZGVkKCkpOwogICAgdy5hY3Rpb25zID0gYWN0aW9ucy5wYXJzZShfb3B0aW9ucy5hY3Rpb25zIHx8IHt9KTsKCiAgICB3LnRvSFRNTCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgcmF3LCBmaWVsZCwgb3B0aW9ucykgewoKICAgICAgICB0aGlzLmNhY2hlSW5pdCgpOwogICAgICAgIHZhbHVlID0gdGhpcy5ub3JtYWxpemVWYWx1ZSh2YWx1ZSk7CgogICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDsKICAgICAgICB0aGlzLnJlbmRlcl9vcHRpb25zID0gKG9wdGlvbnMgfHwge30pOwoKICAgICAgICB2YXIgaWQgPSB0aGlzLl9pZCgKICAgICAgICAgICAgbmFtZSwgJ2xpc3QnLCB0aGlzLnJlbmRlcl9vcHRpb25zLm9mZnNldCwKICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyX29wdGlvbnMucGF0aF9leHRyYQogICAgICAgICk7CiAgICAgICAgdmFyIGh0bWwgPSAoCiAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJlbWJlZGxpc3QiIHJlbD0iJyArCiAgICAgICAgICAgICAgICBoKHRoaXMuZmllbGQudHlwZS5uYW1lKSArICciIGlkPSInICsgaChpZCkgKyAnIj4nCiAgICAgICAgKTsKCiAgICAgICAgdmFsdWUgPSAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSA/IHZhbHVlIDogW10pOwogICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9Iml0ZW1zIiByZWw9IicgKyBoKG5hbWUpICsgJyI+JzsKCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5odG1sRm9yTGlzdEl0ZW0oewogICAgICAgICAgICAgICAgb2Zmc2V0OiAodGhpcy5zaW5nbGV0b24gPyBudWxsIDogaSksCiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlW2ldLAogICAgICAgICAgICAgICAgcmF3OiByYXcKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGh0bWwgKz0gKAogICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImFjdGlvbnMiPicgKwogICAgICAgICAgICAgICAgICAgIHRoaXMuaHRtbEZvckFkZEJ1dHRvbigpICsKICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICApOwogICAgICAgIHJldHVybiBodG1sOwogICAgfTsKCiAgICB3LmNsaWVudEluaXQgPSBmdW5jdGlvbiAoZmllbGQsIHBhdGgsIHZhbHVlLCByYXcsIGVycm9ycywgb3B0aW9ucykgewoKICAgICAgICB0aGlzLmNhY2hlSW5pdCgpOwogICAgICAgIHZhbHVlID0gdGhpcy5ub3JtYWxpemVWYWx1ZSh2YWx1ZSk7CgogICAgICAgIHRoaXMucGF0aCA9IHBhdGg7CiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkOwogICAgICAgIHRoaXMucmVuZGVyX29wdGlvbnMgPSAob3B0aW9ucyB8fCB7fSk7CgogICAgICAgIHZhciBpdGVtX2VsdHMgPSAoCiAgICAgICAgICAgIHRoaXMuZGlzY292ZXJMaXN0SXRlbXNFbGVtZW50KCkuY2hpbGRyZW4oJy5pdGVtJykKICAgICAgICApOwoKICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaXRlbV9lbHRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50c0Zvckxpc3RJdGVtKGl0ZW1fZWx0c1tpXSk7CgogICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKHRoaXMud2lkZ2V0LmNsaWVudEluaXQpKSB7CiAgICAgICAgICAgICAgICB0aGlzLndpZGdldC5jbGllbnRJbml0KAogICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQsIHRoaXMucGF0aCwgdmFsdWVbaV0sIHZhbHVlW2ldLCBbXSwgewogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6ICh0aGlzLnNpbmdsZXRvbiA/IG51bGwgOiBpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRoaXMucmVudW1iZXJMaXN0KCk7CiAgICAgICAgdGhpcy5iaW5kRXZlbnRzRm9yTGlzdCgpOwogICAgfTsKCiAgICAvKiogcHJpdmF0ZTogKiovCgogICAgdy5jYWNoZUluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5kaXNjb3Zlckxpc3RFbGVtZW50ID0gXy5tZW1vaXplKHRoaXMuX2Rpc2NvdmVyTGlzdEVsZW1lbnQpOwogICAgICAgIHRoaXMuZGlzY292ZXJMaXN0TmFtZSA9IF8ubWVtb2l6ZSh0aGlzLl9kaXNjb3Zlckxpc3ROYW1lKTsKICAgICAgICB0aGlzLmRpc2NvdmVyTGlzdFR5cGUgPSBfLm1lbW9pemUodGhpcy5fZGlzY292ZXJMaXN0VHlwZSk7CiAgICAgICAgdGhpcy5kaXNjb3Zlckxpc3RJdGVtc0VsZW1lbnQgPSBfLm1lbW9pemUodGhpcy5fZGlzY292ZXJMaXN0SXRlbXNFbGVtZW50KTsKICAgIH07CgogICAgdy5ub3JtYWxpemVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIGlmICh0aGlzLnNpbmdsZXRvbikgewogICAgICAgICAgICBpZiAodmFsdWUgJiYgIV8uaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gWyB2YWx1ZSBdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH07CgogICAgdy5fZGlzY292ZXJMaXN0RWxlbWVudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gJCgnIycgKyB0aGlzLl9pZCgKICAgICAgICAgICAgdGhpcy5wYXRoLCAnbGlzdCcsIHRoaXMucmVuZGVyX29wdGlvbnMub2Zmc2V0LAogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJfb3B0aW9ucy5wYXRoX2V4dHJhCiAgICAgICAgKSk7CiAgICB9OwoKICAgIHcuX2Rpc2NvdmVyTGlzdE5hbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGxpc3RfZWx0ID0gdGhpcy5kaXNjb3Zlckxpc3RFbGVtZW50KCk7CiAgICAgICAgdmFyIGFjdGlvbnNfZWx0ID0gJChsaXN0X2VsdCkuY2xvc2VzdENoaWxkKCcuYWN0aW9ucycpOwogICAgICAgIHJldHVybiBhY3Rpb25zX2VsdC5hdHRyKCdyZWwnKTsKICAgIH07CiAgICAKICAgIHcuX2Rpc2NvdmVyTGlzdFR5cGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGxpc3RfZWx0ID0gdGhpcy5kaXNjb3Zlckxpc3RFbGVtZW50KCk7CiAgICAgICAgcmV0dXJuIGxpc3RfZWx0LmF0dHIoJ3JlbCcpOwogICAgfTsKCiAgICB3Ll9kaXNjb3Zlckxpc3RJdGVtc0VsZW1lbnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGxpc3RfZWx0ID0gdGhpcy5kaXNjb3Zlckxpc3RFbGVtZW50KCk7CiAgICAgICAgcmV0dXJuIGxpc3RfZWx0LmNsb3Nlc3RDaGlsZCgnLml0ZW1zJyk7CiAgICB9OwoKICAgIHcuZGlzY292ZXJMaXN0SXRlbXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgdGhpcy5kaXNjb3Zlckxpc3RJdGVtc0VsZW1lbnQoKS5jaGlsZHJlbignLml0ZW0nKQogICAgICAgICk7CiAgICB9OwoKICAgIHcuY291bnRMaXN0SXRlbXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGlzY292ZXJMaXN0SXRlbXMoKS5sZW5ndGg7CiAgICB9OwoKICAgIHcuYmluZEV2ZW50c0Zvckxpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGxpc3RfZWx0ID0gdGhpcy5kaXNjb3Zlckxpc3RFbGVtZW50KCk7CiAgICAgICAgdmFyIGFkZF9lbHQgPSAkKGxpc3RfZWx0KS5jbG9zZXN0Q2hpbGQoJy5hY3Rpb25zIC5hZGQnKTsKCiAgICAgICAgYWRkX2VsdC5iaW5kKCdjbGljaycsIHV0aWxzLmJpbmRDb250ZXh0KHRoaXMsIGZ1bmN0aW9uIChldikgewogICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVBZGRCdXR0b25DbGljayhldik7CiAgICAgICAgfSkpOwogICAgfTsKCiAgICB3LmJpbmRFdmVudHNGb3JMaXN0SXRlbSA9IGZ1bmN0aW9uIChpdGVtX2VsdCkgewogICAgICAgIGl0ZW1fZWx0ID0gJChpdGVtX2VsdCk7CiAgICAgICAgdmFyIGVkaXRfZWx0ID0gaXRlbV9lbHQuY2xvc2VzdENoaWxkKCcuYWN0aW9ucyAuZWRpdCcpOwogICAgICAgIHZhciBkZWxldGVfZWx0ID0gaXRlbV9lbHQuY2xvc2VzdENoaWxkKCcuYWN0aW9ucyAuZGVsZXRlJyk7CgogICAgICAgIGVkaXRfZWx0LmJpbmQoJ2NsaWNrJywgdXRpbHMuYmluZENvbnRleHQodGhpcywgZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVkaXRCdXR0b25DbGljayhldik7CiAgICAgICAgfSkpOwoKICAgICAgICBkZWxldGVfZWx0LmJpbmQoJ2NsaWNrJywgdXRpbHMuYmluZENvbnRleHQodGhpcywgZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrKGV2KTsKICAgICAgICB9KSk7CgogICAgICAgIGlmICh0aGlzLnNvcnRhYmxlKSB7CiAgICAgICAgICAgIHZhciB1cF9lbHQgPSBpdGVtX2VsdC5jbG9zZXN0Q2hpbGQoJy5hY3Rpb25zIC51cCcpOwogICAgICAgICAgICB2YXIgZG93bl9lbHQgPSBpdGVtX2VsdC5jbG9zZXN0Q2hpbGQoJy5hY3Rpb25zIC5kb3duJyk7CgogICAgICAgICAgICB1cF9lbHQuYmluZCgnY2xpY2snLCB1dGlscy5iaW5kQ29udGV4dCh0aGlzLCBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVVwQnV0dG9uQ2xpY2soZXYpOwogICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBkb3duX2VsdC5iaW5kKCdjbGljaycsIHV0aWxzLmJpbmRDb250ZXh0KHRoaXMsIGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlRG93bkJ1dHRvbkNsaWNrKGV2KTsKICAgICAgICAgICAgfSkpOwogICAgICAgIH0KICAgIH07CgogICAgdy5yZW51bWJlckxpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGl0ZW1fZWx0cyA9CiAgICAgICAgICAgIHRoaXMuZGlzY292ZXJMaXN0SXRlbXNFbGVtZW50KCkuY2hpbGRyZW4oJy5pdGVtJyk7CgogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpdGVtX2VsdHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgdmFyIGl0ZW0gPSAkKGl0ZW1fZWx0c1tpXSk7CiAgICAgICAgICAgIHRoaXMucmVudW1iZXJMaXN0SXRlbShpdGVtLCBpKTsKICAgICAgICAgICAgdGhpcy51cGRhdGVMaXN0SXRlbUFjdGlvbnMoaXRlbSwgaSwgbGVuKTsKCiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUxpc3RBY3Rpb25zKGxlbik7CiAgICB9OwoKICAgIHcucmVudW1iZXJMaXN0SXRlbSA9IGZ1bmN0aW9uIChlbHQsIG9mZnNldCkgewogICAgICAgIHZhciB3aWRnZXRfb3B0aW9ucyA9IHsKICAgICAgICAgICAgb2Zmc2V0OiAodGhpcy5zaW5nbGV0b24gPyBudWxsIDogb2Zmc2V0KQogICAgICAgIH07CiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLndpZGdldC51cGRhdGVOYW1lKSkgewogICAgICAgICAgICB0aGlzLndpZGdldC51cGRhdGVOYW1lKGVsdCwgdGhpcy5wYXRoLCB3aWRnZXRfb3B0aW9ucyk7CiAgICAgICAgfQogICAgfTsKCiAgICB3LnVwZGF0ZUxpc3RBY3Rpb25zID0gZnVuY3Rpb24gKG9mZnNldCkgewogICAgICAgIHZhciBsaXN0X2VsdCA9IHRoaXMuZGlzY292ZXJMaXN0RWxlbWVudCgpOwogICAgICAgIHZhciBhZGRfZWx0ID0gbGlzdF9lbHQuY2xvc2VzdENoaWxkKCcuYWN0aW9ucyAuYWRkJyk7CgogICAgICAgIGlmICh0aGlzLnNpbmdsZXRvbiAmJiBvZmZzZXQgPiAwKSB7CiAgICAgICAgICAgIGFkZF9lbHQuaGlkZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFkZF9lbHQuc2hvdygpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgfTsKCiAgICB3LnVwZGF0ZUxpc3RJdGVtQWN0aW9ucyA9IGZ1bmN0aW9uIChpdGVtX2VsdCwgb2Zmc2V0LCBjb3VudCkgewogICAgICAgIGlmICh0aGlzLnNvcnRhYmxlKSB7CiAgICAgICAgICAgIHZhciBhdHRyID0gJ2Rpc2FibGVkJzsKICAgICAgICAgICAgdmFyIHVwX2VsdCA9IGl0ZW1fZWx0LmNsb3Nlc3RDaGlsZCgnLmFjdGlvbnMgLnVwJyk7CiAgICAgICAgICAgIHZhciBkb3duX2VsdCA9IGl0ZW1fZWx0LmNsb3Nlc3RDaGlsZCgnLmFjdGlvbnMgLmRvd24nKTsKCiAgICAgICAgICAgIGlmIChvZmZzZXQgPD0gMCkgewogICAgICAgICAgICAgICAgdXBfZWx0LmF0dHIoYXR0ciwgYXR0cik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB1cF9lbHQucmVtb3ZlQXR0cihhdHRyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob2Zmc2V0ICsgMSA+PSBjb3VudCkgewogICAgICAgICAgICAgICAgZG93bl9lbHQuYXR0cihhdHRyLCBhdHRyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRvd25fZWx0LnJlbW92ZUF0dHIoYXR0cik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgIHcubW92ZUV4aXN0aW5nSXRlbSA9IGZ1bmN0aW9uIChhZnRlcl9lbHQsIGl0ZW1fZWx0KSB7CiAgICAgICAgaWYgKGFmdGVyX2VsdCkgewogICAgICAgICAgICAkKGFmdGVyX2VsdCkuYWZ0ZXIoaXRlbV9lbHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBpdGVtc19lbHQgPSB0aGlzLmRpc2NvdmVyTGlzdEl0ZW1zRWxlbWVudCgpOwogICAgICAgICAgICBpdGVtc19lbHQuYXBwZW5kKGl0ZW1fZWx0KTsKICAgICAgICB9CiAgICAgICAgdGhpcy5yZW51bWJlckxpc3QoKTsKICAgICAgICB0aGlzLmJpbmRFdmVudHNGb3JMaXN0SXRlbShpdGVtX2VsdCk7CiAgICB9OwoKICAgIHcuZGVsZXRlRXhpc3RpbmdJdGVtID0gZnVuY3Rpb24gKGl0ZW1fZWx0KSB7CiAgICAgICAgJChpdGVtX2VsdCkucmVtb3ZlKCk7CiAgICAgICAgdGhpcy5yZW51bWJlckxpc3QoKTsKICAgIH07CgogICAgdy5pbnNlcnROZXdJdGVtQXRFbmQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICB2YXIgbGlzdF9lbHQgPSB0aGlzLmRpc2NvdmVyTGlzdEVsZW1lbnQoKTsKCiAgICAgICAgdmFyIGl0ZW1fZWx0cyA9CiAgICAgICAgICAgIHRoaXMuZGlzY292ZXJMaXN0SXRlbXNFbGVtZW50KCkuY2hpbGRyZW4oJy5pdGVtJyk7CgogICAgICAgIHZhciBsYXN0X2VsdCA9IGl0ZW1fZWx0cy5sYXN0KCk7CgogICAgICAgIHJldHVybiB0aGlzLmluc2VydE5ld0l0ZW0oCiAgICAgICAgICAgICh0aGlzLnNpbmdsZXRvbiA/IG51bGwgOiBpdGVtX2VsdHMubGVuZ3RoKSwKICAgICAgICAgICAgICAgIGxhc3RfZWx0WzBdLCBjYWxsYmFjawogICAgICAgICk7CiAgICB9OwoKICAgIHcuaW5zZXJ0TmV3SXRlbSA9IGZ1bmN0aW9uIChvZmZzZXQsIGFmdGVyX2VsdCwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgbGlzdF9lbHQgPSB0aGlzLmRpc2NvdmVyTGlzdEVsZW1lbnQoKTsKICAgICAgICB2YXIgbGlzdF90eXBlID0gdGhpcy5kaXNjb3Zlckxpc3RUeXBlKCk7CgogICAgICAgIGRiLm5ld1VVSUQoMTAwLCB1dGlscy5iaW5kQ29udGV4dCh0aGlzLCBmdW5jdGlvbiAoZXJyLCB1dWlkKSB7CiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHsgdHlwZTogbGlzdF90eXBlLCBfaWQ6IHV1aWQgfTsKCiAgICAgICAgICAgIHZhciBpdGVtX2VsdCA9ICQodGhpcy5odG1sRm9yTGlzdEl0ZW0oewogICAgICAgICAgICAgICAgbmFtZTogdGhpcy5fbmFtZSh0aGlzLnBhdGgpLAogICAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsCiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgICAgICByYXc6IHZhbHVlCiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIHRoaXMubW92ZUV4aXN0aW5nSXRlbShhZnRlcl9lbHQsIGl0ZW1fZWx0KTsKCiAgICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24odGhpcy53aWRnZXQuY2xpZW50SW5pdCkpIHsKICAgICAgICAgICAgICAgIHRoaXMud2lkZ2V0LmNsaWVudEluaXQoCiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZCwgdGhpcy5wYXRoLCB2YWx1ZSwgbnVsbCwgW10sIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAodGhpcy5zaW5nbGV0b24gPyBudWxsIDogb2Zmc2V0KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgY2FsbGJhY2soaXRlbV9lbHRbMF0pOwogICAgICAgICAgICB9CiAgICAgICAgfSkpOwogICAgfTsKCiAgICB3LnNldExpc3RJdGVtVmFsdWUgPSBmdW5jdGlvbiAoZWx0LCB2YWx1ZSwgb2Zmc2V0KSB7CiAgICAgICAgaWYgKHRoaXMud2lkZ2V0LnVwZGF0ZVZhbHVlKSB7CiAgICAgICAgICAgIHRoaXMud2lkZ2V0LnVwZGF0ZVZhbHVlKAogICAgICAgICAgICAgICAgZWx0LCB0aGlzLnBhdGgsIHZhbHVlLCB7IG9mZnNldDogb2Zmc2V0IH0KICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9OwoKICAgIHcuaHRtbEZvckxpc3RJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICB2YXIgaHRtbCA9ICgKICAgICAgICAgICAgJzxkaXYgY2xhc3M9Iml0ZW0iPicgKwogICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImFjdGlvbnMiPicgKwogICAgICAgICAgICAgICAgICAgICh0aGlzLnNvcnRhYmxlID8KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5odG1sRm9yRG93bkJ1dHRvbigpIDogJycpICsKICAgICAgICAgICAgICAgICAgICAodGhpcy5zb3J0YWJsZSA/CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaHRtbEZvclVwQnV0dG9uKCkgOiAnJykgKwogICAgICAgICAgICAgICAgICAgIHRoaXMuaHRtbEZvckVkaXRCdXR0b24oKSArCiAgICAgICAgICAgICAgICAgICAgdGhpcy5odG1sRm9yRGVsZXRlQnV0dG9uKCkgKwogICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgdGhpcy53aWRnZXQudG9IVE1MKAogICAgICAgICAgICAgICAgICAgIGl0ZW0ubmFtZSwgaXRlbS52YWx1ZSwgaXRlbS5yYXcsIHRoaXMuZmllbGQsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgb2Zmc2V0OiBpdGVtLm9mZnNldCB9CiAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICApOwogICAgICAgIHJldHVybiBodG1sOwogICAgfTsKCiAgICB3Lmh0bWxGb3JBZGRCdXR0b24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgJzxpbnB1dCB0eXBlPSJidXR0b24iIGNsYXNzPSJhZGQgYWN0aW9uIiB2YWx1ZT0iQWRkIiAvPicKICAgICAgICApOwogICAgfTsKCiAgICB3Lmh0bWxGb3JFZGl0QnV0dG9uID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiAoCiAgICAgICAgICAgICc8aW5wdXQgdHlwZT0iYnV0dG9uIiBjbGFzcz0iZWRpdCBhY3Rpb24iIHZhbHVlPSJFZGl0IiAvPicKICAgICAgICApOwogICAgfTsKCiAgICB3Lmh0bWxGb3JEZWxldGVCdXR0b24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgJzxpbnB1dCB0eXBlPSJidXR0b24iIGNsYXNzPSJkZWxldGUgYWN0aW9uIiB2YWx1ZT0iRGVsZXRlIiAvPicKICAgICAgICApOwogICAgfTsKCiAgICB3Lmh0bWxGb3JVcEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAnPGlucHV0IHR5cGU9ImJ1dHRvbiIgY2xhc3M9InVwIGFjdGlvbiIgdmFsdWU9IiZ1YXJyOyIgLz4nCiAgICAgICAgKTsKICAgIH07CgogICAgdy5odG1sRm9yRG93bkJ1dHRvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAnPGlucHV0IHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImRvd24gYWN0aW9uIiB2YWx1ZT0iJmRhcnI7IiAvPicKICAgICAgICApOwogICAgfTsKCiAgICB3LmRpc3BhdGNoRXZlbnRUb0FjdGlvbiA9IGZ1bmN0aW9uICh0YXJnZXRfZWx0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uX25hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lKHRoaXMucGF0aCk7CiAgICAgICAgdmFyIHR5cGVfbmFtZSA9IHRoaXMuZGlzY292ZXJMaXN0VHlwZSgpOwogICAgICAgIHZhciBpdGVtX2VsdCA9ICQodGFyZ2V0X2VsdCkuY2xvc2VzdCgnLml0ZW0nKTsKICAgICAgICB2YXIgb2Zmc2V0ID0gaXRlbV9lbHQucHJldkFsbCgnLml0ZW0nKS5sZW5ndGg7CiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy53aWRnZXQuZ2V0VmFsdWUoCiAgICAgICAgICAgIGl0ZW1fZWx0LCB0aGlzLnBhdGgsIHRoaXMucmVuZGVyX29wdGlvbnMKICAgICAgICApOwoKICAgICAgICB2YXIgd2lkZ2V0X29wdGlvbnMgPSB7CiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LAogICAgICAgICAgICBwYXRoX2V4dHJhOiAodGhpcy5yZW5kZXJfb3B0aW9ucy5wYXRoX2V4dHJhIHx8IFtdKQogICAgICAgIH07CgogICAgICAgIC8qIEFjdGlvbiBoYW5kbGVyIHdpbGwgdHJhbnNmZXIgY29udHJvbCBoZXJlIHdoZW4gZmluaXNoZWQgKi8KICAgICAgICB2YXIgY2IgPSB1dGlscy5iaW5kQ29udGV4dCh0aGlzLCBmdW5jdGlvbiAoc3VjY2Vzc2Z1bCwgbmV3X3ZhbHVlKSB7CiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgKICAgICAgICAgICAgICAgICAgICB0aGlzLCB0YXJnZXRfZWx0LCBvZmZzZXQsIHN1Y2Nlc3NmdWwsIG5ld192YWx1ZQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB2YXIgYWN0aW9uX2hhbmRsZXIgPSAoCiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25fbmFtZV0gfHwKICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFjdGlvbkZvcihhY3Rpb25fbmFtZSkKICAgICAgICApOwoKICAgICAgICBpZiAoYWN0aW9uX2hhbmRsZXIpIHsKICAgICAgICAgICAgYWN0aW9uX2hhbmRsZXIoCiAgICAgICAgICAgICAgICBhY3Rpb25fbmFtZSwgdHlwZV9uYW1lLCB0aGlzLmZpZWxkLCB0aGlzLnBhdGgsCiAgICAgICAgICAgICAgICAgICAgdmFsdWUsIG51bGwsIFtdLCB3aWRnZXRfb3B0aW9ucywgY2IKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9OwoKICAgIHcuaGFuZGxlVXBCdXR0b25DbGljayA9IGZ1bmN0aW9uIChldikgewogICAgICAgIHZhciBpdGVtX2VsdCA9ICQoZXYudGFyZ2V0KS5jbG9zZXN0KCcuaXRlbScpOwogICAgICAgIGl0ZW1fZWx0Lmluc2VydEJlZm9yZShpdGVtX2VsdC5wcmV2KCcuaXRlbScpKTsKICAgICAgICB0aGlzLnJlbnVtYmVyTGlzdCgpOwogICAgfTsKCiAgICB3LmhhbmRsZURvd25CdXR0b25DbGljayA9IGZ1bmN0aW9uIChldikgewogICAgICAgIHZhciBpdGVtX2VsdCA9ICQoZXYudGFyZ2V0KS5jbG9zZXN0KCcuaXRlbScpOwogICAgICAgIGl0ZW1fZWx0Lmluc2VydEFmdGVyKGl0ZW1fZWx0Lm5leHQoJy5pdGVtJykpOwogICAgICAgIHRoaXMucmVudW1iZXJMaXN0KCk7CiAgICB9OwoKICAgIHcuaGFuZGxlQWRkQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHsKICAgICAgICB2YXIgY2FsbGJhY2sgPSB1dGlscy5iaW5kQ29udGV4dCgKICAgICAgICAgICAgdGhpcywgdGhpcy5oYW5kbGVBZGRDb21wbGV0aW9uCiAgICAgICAgKTsKICAgICAgICB0aGlzLmluc2VydE5ld0l0ZW1BdEVuZCgKICAgICAgICAgICAgdXRpbHMuYmluZENvbnRleHQodGhpcywgZnVuY3Rpb24gKGl0ZW1fZWx0KSB7CiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnRUb0FjdGlvbihpdGVtX2VsdCwgJ2FkZCcsIGNhbGxiYWNrKTsKICAgICAgICAgICAgfSkKICAgICAgICApOwogICAgfTsKCiAgICB3LmhhbmRsZUVkaXRCdXR0b25DbGljayA9IGZ1bmN0aW9uIChldikgewogICAgICAgIHZhciBjYWxsYmFjayA9IHV0aWxzLmJpbmRDb250ZXh0KAogICAgICAgICAgICB0aGlzLCB0aGlzLmhhbmRsZUVkaXRDb21wbGV0aW9uCiAgICAgICAgKTsKICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnRUb0FjdGlvbihldi50YXJnZXQsICdlZGl0JywgY2FsbGJhY2spOwogICAgfTsKCiAgICB3LmhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgdmFyIGNhbGxiYWNrID0gdXRpbHMuYmluZENvbnRleHQoCiAgICAgICAgICAgIHRoaXMsIHRoaXMuaGFuZGxlRGVsZXRlQ29tcGxldGlvbgogICAgICAgICk7CiAgICAgICAgdmFyIGl0ZW1fZWx0ID0gJChldi50YXJnZXQpLmNsb3Nlc3QoJy5pdGVtJywgdGhpcyk7CiAgICAgICAgdGhpcy5kZWxldGVFeGlzdGluZ0l0ZW0oaXRlbV9lbHQpOwogICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudFRvQWN0aW9uKGV2LCAnZGVsZXRlJyk7CiAgICB9OwoKICAgIHcuaGFuZGxlQWRkQ29tcGxldGlvbiA9IGZ1bmN0aW9uICh0YXJnZXRfZWx0LCBvZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfc3VjY2Vzc2Z1bCwgbmV3X3ZhbHVlKSB7CiAgICAgICAgdmFyIGl0ZW1fZWx0ID0gJCh0YXJnZXRfZWx0KS5jbG9zZXN0KCcuaXRlbScsIHRoaXMpOwoKICAgICAgICBpZiAoaXNfc3VjY2Vzc2Z1bCkgewogICAgICAgICAgICB0aGlzLnNldExpc3RJdGVtVmFsdWUoCiAgICAgICAgICAgICAgICBpdGVtX2VsdCwgbmV3X3ZhbHVlLCBvZmZzZXQKICAgICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmRlbGV0ZUV4aXN0aW5nSXRlbShpdGVtX2VsdCk7CiAgICAgICAgfQogICAgfTsKCiAgICB3LmhhbmRsZUVkaXRDb21wbGV0aW9uID0gZnVuY3Rpb24gKHRhcmdldF9lbHQsIG9mZnNldCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfc3VjY2Vzc2Z1bCwgbmV3X3ZhbHVlKSB7CiAgICAgICAgaWYgKGlzX3N1Y2Nlc3NmdWwpIHsKICAgICAgICAgICAgdmFyIGl0ZW1fZWx0ID0gJCh0YXJnZXRfZWx0KS5jbG9zZXN0KCcuaXRlbScsIHRoaXMpOwogICAgICAgICAgICB0aGlzLnNldExpc3RJdGVtVmFsdWUoCiAgICAgICAgICAgICAgICBpdGVtX2VsdCwgbmV3X3ZhbHVlLCBvZmZzZXQKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9OwoKICAgIHcuaGFuZGxlRGVsZXRlQ29tcGxldGlvbiA9IGZ1bmN0aW9uICh0YXJnZXRfZWx0LCBvZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfc3VjY2Vzc2Z1bCwgbmV3X3ZhbHVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgfTsKCiAgICB3LmRlZmF1bHRBY3Rpb25Gb3IgPSBmdW5jdGlvbiAoYWN0aW9uX25hbWUpIHsKICAgICAgICBzd2l0Y2ggKGFjdGlvbl9uYW1lKSB7CiAgICAgICAgY2FzZSAnYWRkJzoKICAgICAgICBjYXNlICdlZGl0JzoKICAgICAgICAgICAgcmV0dXJuIHV0aWxzLmJpbmRDb250ZXh0KHRoaXMsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBhY3Rpb25fb3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICB3aWRnZXQ6IGV4cG9ydHMuZW1iZWRGb3JtKHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdGhpcy5maWVsZC50eXBlCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgYWN0aW9ucy5tb2RhbERpYWxvZy5hcHBseSgKICAgICAgICAgICAgICAgICAgICB0aGlzLCBbIGFjdGlvbl9vcHRpb25zIF0uY29uY2F0KGFyZ3MpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgLyogYnJlYWsgKi8KICAgICAgICBjYXNlICdkZWxldGUnOgogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwoKICAgIHJldHVybiB3Owp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgZmllbGQgZm9yIHN0b3JpbmcvZGlzcGxheWluZyBhbiBlbWJlZGRlZCBvYmplY3QuCiAqIFRoaXMgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byBlbWJlZCBhbmQgZW1iZWRMaXN0IGZpZWxkIHR5cGVzCiAqIHRoYXQgZG9uJ3Qgc3BlY2lmeSBhIHdpZGdldC4KICoKICogQG5hbWUgZGVmYXVsdEVtYmVkZGVkKFtvcHRpb25zXSkKICogQHBhcmFtIG9wdGlvbnMKICogQHJldHVybnMge1dpZGdldCBPYmplY3R9CiAqIEBhcGkgcHVibGljCiAqLwoKZXhwb3J0cy5kZWZhdWx0RW1iZWRkZWQgPSBmdW5jdGlvbiAoX29wdGlvbnMpIHsKICAgIHZhciB3ID0gbmV3IFdpZGdldCgnZGVmYXVsdEVtYmVkZGVkJywgX29wdGlvbnMpOwogICAgdy50b0hUTUwgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgZGlzcGxheV9uYW1lID0gKHZhbHVlID8gdmFsdWUuX2lkOiAnJyk7CiAgICAgICAgdmFyIGZ2YWwgPSAodmFsdWUgPyB0aGlzLl9zdHJpbmdpZnlfdmFsdWUodmFsdWUpIDogJycpOwoKICAgICAgICBpZiAoZmllbGQgJiYgZmllbGQudHlwZS5kaXNwbGF5X25hbWUgJiYgdmFsdWUpIHsKICAgICAgICAgICAgZGlzcGxheV9uYW1lID0gZmllbGQudHlwZS5kaXNwbGF5X25hbWUodmFsdWUpOwogICAgICAgIH0KICAgICAgICB2YXIgaHRtbCA9ICgKICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImVtYmVkZGVkIGVtYmVkIj4nICsKICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iJyArIGgoZnZhbCkgKyAnIiBuYW1lPSInICsKICAgICAgICAgICAgICAgICAgICBoKHRoaXMuX25hbWUobmFtZSwgb3B0aW9ucy5vZmZzZXQpKSArICciIC8+JyArCiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9InZhbHVlIj4nICsgaChkaXNwbGF5X25hbWUpICsgJzwvc3Bhbj4nICsKICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICApOwogICAgICAgIHJldHVybiBodG1sOwogICAgfTsKICAgIHJldHVybiB3Owp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gZW1iZWRkZWQgKmZvcm0qIGZvciB0aGUgc3BlY2lmaWVkIHR5cGUuCiAqIFRoaXMgaXMgdGhlIGJhc2lzIGZvciB0aGUgcHJlc2VudGF0aW9uIG9mIGNvbXBsZXggZGF0YSB0eXBlcyBpbiBLYW5zbywKICogYW5kIGlzIHVzZWQgd2l0aGluIGFuIGVtYmVkTGlzdCB0byBhZGQgYW5kL29yIGVkaXQgaXRlbXMuCiAqCiAqIEBuYW1lIGVtYmVkRm9ybShbb3B0aW9uc10pCiAqIEBwYXJhbSBvcHRpb25zCiAqIEByZXR1cm5zIHtXaWRnZXQgT2JqZWN0fQogKiBAYXBpIHB1YmxpYwogKi8KCmV4cG9ydHMuZW1iZWRGb3JtID0gZnVuY3Rpb24gKF9vcHRpb25zKSB7CiAgICB2YXIgdyA9IG5ldyBXaWRnZXQoJ2VtYmVkRm9ybScsIF9vcHRpb25zKTsKCiAgICB3LmVtYmVkZGVkX3R5cGUgPSBfb3B0aW9ucy50eXBlOwogICAgdy5mb3JtID0gbmV3IGZvcm1zLkZvcm0ody5lbWJlZGRlZF90eXBlKTsKCiAgICB3LnRvSFRNTCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgcmF3LCBmaWVsZCwgb3B0aW9ucykgewoKICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7CiAgICAgICAgdGhpcy5mb3JtLnZhbHVlcyA9IHZhbHVlOwogICAgICAgIHRoaXMucmVuZGVyX29wdGlvbnMgPSAob3B0aW9ucyB8fCB7fSk7CgogICAgICAgIHZhciBpZCA9IHRoaXMuX2lkKAogICAgICAgICAgICBuYW1lLCAnZm9ybScsIHRoaXMucmVuZGVyX29wdGlvbnMub2Zmc2V0LAogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJfb3B0aW9ucy5wYXRoX2V4dHJhCiAgICAgICAgKTsKICAgICAgICB2YXIgaHRtbCA9ICgKICAgICAgICAgICAgJzxkaXYgaWQ9IicgKyBpZCArICciIGNsYXNzPSJlbWJlZGRlZCBmb3JtIj4nICsKICAgICAgICAgICAgICAgICc8Zm9ybT4nICsKICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm0udG9IVE1MKAogICAgICAgICAgICAgICAgICAgICAgICBudWxsLCByZW5kZXIuZGVmYXVsdFJlbmRlcmVyKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcl9vcHRpb25zLCB0cnVlIC8qIGNyZWF0ZSBkZWZhdWx0cyAqLwogICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgJzwvZm9ybT4nICsKICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICApOwogICAgICAgIHJldHVybiBodG1sOwogICAgfTsKCiAgICB3LmdldFZhbHVlID0gZnVuY3Rpb24gKGVsdCwgcGF0aCwgb3B0aW9ucykgewogICAgICAgIHZhciBjb250YWluZXJfZWx0ID0gdGhpcy5fZGlzY292ZXJDb250YWluZXJFbGVtZW50KHBhdGgpOwogICAgICAgIHZhciBmb3JtX2VsdCA9IGNvbnRhaW5lcl9lbHQuY2xvc2VzdENoaWxkKCdmb3JtJyk7CiAgICAgICAgdmFyIHJ2ID0gcXVlcnlzdHJpbmcucGFyc2UoCiAgICAgICAgICAgIGZvcm1fZWx0LnNlcmlhbGl6ZSgpLnJlcGxhY2UoL1wrL2csICclMjAnKQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIHJ2OwogICAgfTsKCiAgICB3LnZhbGlkYXRlID0gZnVuY3Rpb24gKGVsdCwgcGF0aCwgb3B0aW9ucykgewogICAgICAgIHRoaXMuZm9ybS52YWxpZGF0ZSh7CiAgICAgICAgICAgIGZvcm06IHRoaXMuZ2V0VmFsdWUoZWx0LCBwYXRoLCBvcHRpb25zKSwKICAgICAgICAgICAgdXNlckN0eDogKHV0aWxzLnVzZXJDdHggfHwgdXRpbHMuY3VycmVudFJlcXVlc3QoKS51c2VyQ3R4KQogICAgICAgIH0pOwogICAgICAgIHJldHVybiB0aGlzLmZvcm0uZXJyb3JzOwogICAgfTsKCiAgICAvKiogcHJpdmF0ZTogKiovCgogICAgdy5fZGlzY292ZXJDb250YWluZXJFbGVtZW50ID0gZnVuY3Rpb24gKHBhdGgpIHsKICAgICAgICB2YXIgaWQgPSB0aGlzLl9pZCgKICAgICAgICAgICAgcGF0aCwgJ2Zvcm0nLCB0aGlzLnJlbmRlcl9vcHRpb25zLm9mZnNldCwKICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyX29wdGlvbnMucGF0aF9leHRyYQogICAgICAgICk7CiAgICAgICAgcmV0dXJuICQoJyMnICsgaWQpOwogICAgfTsKCiAgICByZXR1cm4gdzsKfTsKCi8qKgogKiBDcmVhdGVzIGEgbmV3IGRvY3VtZW50IHNlbGVjdG9yIHdpZGdldC4gVGhpcyB3aWRnZXQgYWxsb3dzIHRoZQogKiB1c2VyIHRvIHNlbGVjdCBhIGRvY3VtZW50IGZyb20gYSBDb3VjaERCIHZpZXcgKHNwZWNpZmllZCBpbiBvcHRpb25zKS4KICogVGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGlzIHdpZGdldCBhcmUgZXhwbGFpbmVkIGJyaWVmbHkgYmVsb3c6CiAqCiAqIDx0YWJsZSBjbGFzcz0ib3B0aW9ucyI+CiAqICAgPHRyPgogKiAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+dmlld05hbWU8L3RkPgogKiAgICAgIDx0ZCBjbGFzcz0idHlwZSI+U3RyaW5nPC90ZD4KICogICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICogICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIENvdWNoREIgdmlldyB0aGF0IHlvdSdkIGxpa2UgdG8gc2VsZWN0CiAqICAgICAgICAgIGRvY3VtZW50cyBmcm9tLiBJZiB0aGlzIG9wdGlvbiBpcyBub3Qgc3BlY2lmaWVkLCBpdCB3aWxsCiAqICAgICAgICAgIGxvb2sgZm9yIGEgdmlldyB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhpcyB3aWRnZXQncyBmaWVsZC4KICogICAgICA8L3RkPgogKiAgIDwvdHI+CiAqICAgPHRyPgogKiAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+ZGI8L3RkPgogKiAgICAgIDx0ZCBjbGFzcz0idHlwZSI+U3RyaW5nPC90ZD4KICogICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICogICAgICAgICAgVGhlIENvdWNoREIgZGF0YWJhc2UgY29udGFpbmluZyB0aGUgdmlldyBmb3IgdGhpcyB3aWRnZXQuIElmCiAqICAgICAgICAgIHRoaXMgb3B0aW9uIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBjdXJyZW50IGRhdGFiYXNlIHdpbGwgYmUgdXNlZC4KICogICAgICA8L3RkPgogKiAgIDwvdHI+CiAqICAgPHRyPgogKiAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+dXNlSlNPTjwvdGQ+CiAqICAgICAgPHRkIGNsYXNzPSJ0eXBlIj5TdHJpbmc8L3RkPgogKiAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24iPgogKiAgICAgICAgICBTZXQgdGhpcyBvcHRpb24gdG8gZmFsc2UgaWYgdGhpcyB3aWRnZXQgc2hvdWxkIHlpZWxkIGEgc3RyaW5nCiAqICAgICAgICAgIGNvbnRhaW5pbmcgYSBzaW5nbGUgZG9jdW1lbnQgaWQuIFNldCB0aGlzIG9wdGlvbiB0byB0cnVlICh0aGUKICogICAgICAgICAgZGVmYXVsdCkgdG8geWllbGQgYSBKU09OIHN0cmluZy4KICogICAgICA8L3RkPgogKiAgIDwvdHI+CiAqICAgPHRyPgogKiAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+c3RvcmVFbnRpcmVEb2N1bWVudDwvdGQ+CiAqICAgICAgPHRkIGNsYXNzPSJ0eXBlIj5TdHJpbmc8L3RkPgogKiAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24iPgogKiAgICAgICAgICBTZXQgdGhpcyBvcHRpb24gdG8gZmFsc2UgaWYgdGhpcyB3aWRnZXQgc2hvdWxkIHlpZWxkICpvbmx5KgogKiAgICAgICAgICBhIGRvY3VtZW50IGlkZW50aWZpZXIsIGVmZmVjdGl2ZWx5IHN0b3JpbmcgYSByZWZlcmVuY2UgdG8gYQogKiAgICAgICAgICBkb2N1bWVudC4gU2V0IHRoaXMgb3B0aW9uIHRvIHRydWUgKHRoZSBkZWZhdWx0KSB0byBpbmNsdWRlCiAqICAgICAgICAgIGFsbCBmaWVsZHMgZnJvbSB0aGUgc2VsZWN0ZWQgZG9jdW1lbnQuIElmIHVzZUpTT04gaXMgZmFsc2UsCiAqICAgICAgICAgIHRoZW4gdGhpcyBvcHRpb24gaXMgaWdub3JlZCBhbmQgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIGZhbHNlLgogKiAgICAgIDwvdGQ+CiAqICAgPC90cj4KICogPC90YWJsZT4KICoKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSBvcHRpb25zCiAqLwoKZXhwb3J0cy5kb2N1bWVudFNlbGVjdG9yID0gZnVuY3Rpb24gKF9vcHRpb25zKSB7CiAgICB2YXIgdyA9IG5ldyBXaWRnZXQoJ2RvY3VtZW50U2VsZWN0b3InLCBfb3B0aW9ucyk7CgogICAgdy5vcHRpb25zID0gXy5kZWZhdWx0cyhfb3B0aW9ucyB8fCB7fSwgewogICAgICAgIHVzZUpTT046IHRydWUsCiAgICAgICAgc3RvcmVFbnRpcmVEb2N1bWVudDogdHJ1ZQogICAgfSk7CgogICAgdy50b0hUTUwgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHJhdywgZmllbGQsIG9wdGlvbnMpIHsKICAgICAgICB0aGlzLmNhY2hlSW5pdCgpOwogICAgICAgIHZhciBodG1sX25hbWUgPSB0aGlzLl9uYW1lKAogICAgICAgICAgICBuYW1lLCBvcHRpb25zLm9mZnNldAogICAgICAgICk7CiAgICAgICAgdmFyIGNvbnRhaW5lcl9pZCA9IHRoaXMuX2lkKAogICAgICAgICAgICBuYW1lLCAnc2VsZWN0b3InLCBvcHRpb25zLm9mZnNldCwgb3B0aW9ucy5wYXRoX2V4dHJhCiAgICAgICAgKTsKICAgICAgICB2YXIgaGlkZGVuX2lkID0gdGhpcy5faWQoCiAgICAgICAgICAgIG5hbWUsIG9wdGlvbnMub2Zmc2V0LCBvcHRpb25zLnBhdGhfZXh0cmEKICAgICAgICApOwogICAgICAgIHZhciBzZWxlY3RfaWQgPSB0aGlzLl9pZCgKICAgICAgICAgICAgbmFtZSwgJ3NlbGVjdCcsIG9wdGlvbnMub2Zmc2V0LCBvcHRpb25zLnBhdGhfZXh0cmEKICAgICAgICApOwogICAgICAgIHZhciBpbnB1dF9odG1sID0gKAogICAgICAgICAgICAnPGlucHV0IGNsYXNzPSJiYWNraW5nIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSIiJyArCiAgICAgICAgICAgICAgICAnaWQ9IicgKyBoaWRkZW5faWQgKyAnIiBuYW1lPSInICsgaHRtbF9uYW1lICsgJyIgLz4nCiAgICAgICAgKTsKICAgICAgICB2YXIgc2VsZWN0X2h0bWwgPSAoCiAgICAgICAgICAgICc8c2VsZWN0IGNsYXNzPSJzZWxlY3RvciIgaWQ9IicgKyBzZWxlY3RfaWQgKyAnIj48L3NlbGVjdD4nCiAgICAgICAgKTsKICAgICAgICB2YXIgaHRtbCA9ICgKICAgICAgICAgICAgJzxkaXYgaWQ9IicgKyBjb250YWluZXJfaWQgKyAnIiBjbGFzcz0ic2VsZWN0b3Igd2lkZ2V0Ij4nICsKICAgICAgICAgICAgICAgIGlucHV0X2h0bWwgKyBzZWxlY3RfaHRtbCArCiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ic3Bpbm5lciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4nICsKICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICApOwoKICAgICAgICByZXR1cm4gaHRtbDsKICAgIH07CgogICAgdy51cGRhdGVOYW1lID0gZnVuY3Rpb24gKGVsdCwgcGF0aCwgb3B0aW9ucykgewogICAgICAgIHRoaXMuY2FjaGVJbml0KCk7CiAgICAgICAgdmFyIGhpZGRlbl9lbHQgPSB0aGlzLmRpc2NvdmVyQmFja2luZ0VsZW1lbnQoZWx0KTsKICAgICAgICB2YXIgc2VsZWN0X2VsdCA9IHRoaXMuZGlzY292ZXJTZWxlY3Rpb25FbGVtZW50KGVsdCk7CgogICAgICAgIHNlbGVjdF9lbHQuYXR0cignaWQnLCB0aGlzLl9pZCgKICAgICAgICAgICAgcGF0aCwgJ3NlbGVjdCcsIG9wdGlvbnMub2Zmc2V0LCBvcHRpb25zLnBhdGhfZXh0cmEKICAgICAgICApKTsKICAgICAgICBoaWRkZW5fZWx0LmF0dHIoJ2lkJywgdGhpcy5faWQoCiAgICAgICAgICAgIHBhdGgsIG9wdGlvbnMub2Zmc2V0LCBvcHRpb25zLnBhdGhfZXh0cmEKICAgICAgICApKTsKICAgICAgICBoaWRkZW5fZWx0LmF0dHIoJ25hbWUnLCB0aGlzLl9uYW1lKAogICAgICAgICAgICBwYXRoLCBvcHRpb25zLm9mZnNldAogICAgICAgICkpOwogICAgfTsKCiAgICB3LnVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKGVsdCwgcGF0aCwgdmFsdWUsIG9wdGlvbnMpIHsKICAgICAgICBlbHQgPSAkKGVsdCk7CiAgICAgICAgdmFsdWUgPSB0aGlzLl9zdHJpbmdpZnlfdmFsdWUodmFsdWUpOwoKICAgICAgICB2YXIgaGlkZGVuX2VsdCA9IHRoaXMuZGlzY292ZXJCYWNraW5nRWxlbWVudChlbHQpOwogICAgICAgIHZhciBzZWxlY3RfZWx0ID0gdGhpcy5kaXNjb3ZlclNlbGVjdGlvbkVsZW1lbnQoZWx0KTsKCiAgICAgICAgaGlkZGVuX2VsdC52YWwodmFsdWUpOwogICAgICAgIHNlbGVjdF9lbHQudmFsKHZhbHVlKTsKICAgIH07CgogICAgdy5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChlbHQsIHBhdGgsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgaGlkZGVuX2VsdCA9IHRoaXMuZGlzY292ZXJCYWNraW5nRWxlbWVudChlbHQpOwogICAgICAgIHJldHVybiB0aGlzLl9wYXJzZV92YWx1ZShoaWRkZW5fZWx0LmF0dHIoJ3ZhbHVlJykpOwogICAgfTsKCiAgICB3LmNsaWVudEluaXQgPSBmdW5jdGlvbiAoZmllbGQsIHBhdGgsIHZhbHVlLCByYXcsIGVycm9ycywgb3B0aW9ucykgewogICAgICAgIHZhciBpZCA9IHRoaXMuX2lkKAogICAgICAgICAgICBwYXRoLCAnc2VsZWN0b3InLCBvcHRpb25zLm9mZnNldCwgb3B0aW9ucy5wYXRoX2V4dHJhCiAgICAgICAgKTsKICAgICAgICB2YXIgY29udGFpbmVyX2VsdCA9ICQoJyMnICsgaWQpOwogICAgICAgIHZhciB3aWRnZXRfb3B0aW9ucyA9ICh0aGlzLm9wdGlvbnMgfHwge30pOwogICAgICAgIHZhciBzcGlubmVyX2VsdCA9IGNvbnRhaW5lcl9lbHQuY2xvc2VzdENoaWxkKCcuc3Bpbm5lcicpOwogICAgICAgIHZhciBzZWxlY3RfZWx0ID0gdGhpcy5kaXNjb3ZlclNlbGVjdGlvbkVsZW1lbnQoY29udGFpbmVyX2VsdCk7CiAgICAgICAgdmFyIGhpZGRlbl9lbHQgPSB0aGlzLmRpc2NvdmVyQmFja2luZ0VsZW1lbnQoY29udGFpbmVyX2VsdCk7CgogICAgICAgIC8qIFN0YXJ0IHByb2dyZXNzICovCiAgICAgICAgc3Bpbm5lcl9lbHQuc2hvdygpOwoKICAgICAgICAvKiBDb3B5IGRhdGEgdG8gYmFja2luZyBlbGVtZW50ICovCiAgICAgICAgc2VsZWN0X2VsdC5iaW5kKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGhpZGRlbl9lbHQudmFsKHNlbGVjdF9lbHQudmFsKCkpOwogICAgICAgIH0pOwoKICAgICAgICB0aGlzLnBvcHVsYXRlU2VsZWN0RWxlbWVudCgKICAgICAgICAgICAgc2VsZWN0X2VsdCwgZmllbGQsIHBhdGgsIHZhbHVlLCB3aWRnZXRfb3B0aW9ucywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgc3Bpbm5lcl9lbHQuaGlkZSgpOwogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH07CgogICAgLyoqIHByaXZhdGU6ICoqLwoKICAgIHcucG9wdWxhdGVTZWxlY3RFbGVtZW50ID0gZnVuY3Rpb24gKGVsdCwgZmllbGQsIHBhdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwsIG9wdGlvbnMsIGNhbGxiYWNrKSB7CgogICAgICAgIGRiLmdldFZpZXcoCiAgICAgICAgICAgIG9wdGlvbnMudmlld05hbWUsCiAgICAgICAgICAgIHsgaW5jbHVkZV9kb2NzOiBvcHRpb25zLnN0b3JlRW50aXJlRG9jdW1lbnQgfSwKICAgICAgICAgICAgeyBkYjogb3B0aW9ucy5kYiB9LAogICAgICAgICAgICB1dGlscy5iaW5kQ29udGV4dCh0aGlzLCBmdW5jdGlvbiAoZXJyLCBydikgewogICAgICAgICAgICAgICAgLyogRXJyb3IgaGFuZGxpbmcgKi8KICAgICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gcmVxdWVzdCBjb250ZW50IGZyb20gdmlldyBgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnZpZXdOYW1lICsgJ2AnCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qIE9wdGlvbiBlbGVtZW50IGZvciAnbm8gc2VsZWN0aW9uJyAqLwogICAgICAgICAgICAgICAgdmFyIG5pbF9vcHRpb24gPSAkKCc8b3B0aW9uIC8+Jyk7CiAgICAgICAgICAgICAgICBpZiAoIXZhbCkgewogICAgICAgICAgICAgICAgICAgIG5pbF9vcHRpb24uYXR0cignc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsdC5hcHBlbmQobmlsX29wdGlvbik7CgogICAgICAgICAgICAgICAgLyogQWxsIG90aGVyIG9wdGlvbiBlbGVtZW50cyAqLwogICAgICAgICAgICAgICAgXy5lYWNoKHJ2LnJvd3MgfHwgW10sIHV0aWxzLmJpbmRDb250ZXh0KHRoaXMsIGZ1bmN0aW9uIChyKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbl9lbHQgPSAkKCc8b3B0aW9uIC8+Jyk7CgogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzT3B0aW9uU2VsZWN0ZWQociwgdmFsLCBvcHRpb25zKSkgewogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25fZWx0LmF0dHIoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25WYWx1ZSgKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQsIHIsIHZhbCwgb3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuYmluZENvbnRleHQodGhpcywgZnVuY3Rpb24gKGVyciwgdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBnZW5lcmF0ZSBpZGVudGlmaWVyIGZvcicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBmaWVsZCBgJyArIHRoaXMuX25hbWUocGF0aCkgKyAnYCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uX2VsdC52YWwodik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25fZWx0LnRleHQoci52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHQuYXBwZW5kKG9wdGlvbl9lbHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWx0LnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgfSkKICAgICAgICApOwogICAgfTsKCiAgICB3LmlzT3B0aW9uU2VsZWN0ZWQgPSBmdW5jdGlvbiAocm93LCB2YWx1ZSwgb3B0aW9ucykgewogICAgICAgIGlmIChvcHRpb25zLnVzZUpTT04pIHsKICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RvcmVFbnRpcmVEb2N1bWVudCB8fCBvcHRpb25zLnVuaXF1ZSkgewogICAgICAgICAgICAgICAgcmV0dXJuICgodmFsdWUgfHwge30pLl9pZCA9PT0gcm93LmlkKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAoKHZhbHVlIHx8IHt9KS5yZWYgPT09IHJvdy5pZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gKHZhbHVlID09PSByb3cuaWQpOwogICAgICAgIH0KICAgIH07CgogICAgdy5nZW5lcmF0ZU9wdGlvblZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCByb3csIHZhbHVlLCBvcHRpb25zLCBjYWxsYmFjaykgewogICAgICAgIGlmIChvcHRpb25zLnVzZUpTT04pIHsKICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RvcmVFbnRpcmVEb2N1bWVudCkgewoKICAgICAgICAgICAgICAgIC8qIEVtYmVkIGFjdHVhbCBkb2N1bWVudDoKICAgICAgICAgICAgICAgICAgICBEdXBsaWNhdGVzIGFyZSBhdXRvbWF0aWNhbGx5IGRpc2FsbG93ZWQuICovCgogICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UsIEpTT04uc3RyaW5naWZ5KHJvdy5kb2MpKTsKCiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy51bmlxdWUpIHsKCiAgICAgICAgICAgICAgICAvKiBSZWZlcmVuY2UsIGR1cGxpY2F0ZXMgZGlzYWxsb3dlZDoKICAgICAgICAgICAgICAgICAgICBTdG9yZSBpZCBpbnNpZGUgb2YgX2lkIGF0dHJpYnV0ZS4gKi8KCiAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSwgSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgIF9pZDogcm93LmlkLAogICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpZWxkLnR5cGUubmFtZQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAvKiBSZWZlcmVuY2UsIGR1cGxpY2F0ZXMgYWxsb3dlZDoKICAgICAgICAgICAgICAgICAgICBTdG9yZSBpZCBpbnNpZGUgb2YgdGhlIHJlZiBhdHRyaWJ1dGUsIGFuZCBnZW5lcmF0ZQogICAgICAgICAgICAgICAgICAgIGEgbmV3IFVVSUQgZm9yIHRoZSBfaWQgYXR0cmlidXRlIGlmIGl0J3MgbmVjZXNzYXJ5LiAqLwoKICAgICAgICAgICAgICAgIHZhciByZXR1cm5fdmFsdWUgPSBmdW5jdGlvbiAodXVpZCkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlLCBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgIF9pZDogdXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiByb3cuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpZWxkLnR5cGUubmFtZQogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIGZvcndhcmRfZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLl9pZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybl92YWx1ZSh2YWx1ZS5faWQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkYi5uZXdVVUlEKDEwMCwgZnVuY3Rpb24gKGVyciwgdXVpZCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkX2Vycm9yKGVycik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5fdmFsdWUodXVpZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAvKiBOb3QgdXNpbmcgSlNPTjoKICAgICAgICAgICAgICAgIFRoZSB0eXBlIGlzIGEgc2NhbGFyOyBqdXN0IHVzZSB0aGUgX2lkLiAqLwoKICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UsIHJvdy5pZCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CgogICAgdy5jYWNoZUluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5kaXNjb3ZlckJhY2tpbmdFbGVtZW50ID0gdGhpcy5fZGlzY292ZXJCYWNraW5nRWxlbWVudDsKICAgICAgICB0aGlzLmRpc2NvdmVyU2VsZWN0aW9uRWxlbWVudCA9IHRoaXMuX2Rpc2NvdmVyU2VsZWN0aW9uRWxlbWVudDsKICAgIH07CgogICAgdy5fZGlzY292ZXJCYWNraW5nRWxlbWVudCA9IGZ1bmN0aW9uIChjb250YWluZXJfZWx0KSB7CiAgICAgICAgcmV0dXJuICQoY29udGFpbmVyX2VsdCkuY2xvc2VzdENoaWxkKCdpbnB1dFt0eXBlPWhpZGRlbl0uYmFja2luZycpOwogICAgfTsKCiAgICB3Ll9kaXNjb3ZlclNlbGVjdGlvbkVsZW1lbnQgPSBmdW5jdGlvbiAoY29udGFpbmVyX2VsdCkgewogICAgICAgIHJldHVybiAkKGNvbnRhaW5lcl9lbHQpLmNsb3Nlc3RDaGlsZCgnc2VsZWN0LnNlbGVjdG9yJyk7CiAgICB9OwoKICAgIHJldHVybiB3Owp9OwoKLyogCiAqIGNsb3Nlc3RDaGlsZCBmb3IgalF1ZXJ5CiAqIENvcHlyaWdodCAyMDExLCBUb2JpYXMgTGluZGlnCiAqIAogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBhbmQgR1BMIGxpY2Vuc2VzOgogKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ncGwtbGljZW5zZS5waHAKICogCiAqLwoKaWYgKHV0aWxzLmlzQnJvd3NlcigpKSB7CiAgICAoZnVuY3Rpb24gKCQpIHsKICAgICAgICAkLmZuLmNsb3Nlc3RDaGlsZCA9IGZ1bmN0aW9uIChzZWxlY3RvcikgewogICAgICAgICAgICAvKiBCcmVhZHRoLWZpcnN0IHNlYXJjaCBmb3IgdGhlIGZpcnN0IG1hdGNoZWQgbm9kZSAqLwogICAgICAgICAgICBpZiAoc2VsZWN0b3IgJiYgc2VsZWN0b3IgIT09ICcnKSB7CiAgICAgICAgICAgICAgICB2YXIgcXVldWUgPSBbXTsKICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2godGhpcyk7CiAgICAgICAgICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gcXVldWUuc2hpZnQoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKCk7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSAkKGNoaWxkcmVuW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmlzKHNlbGVjdG9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goY2hpbGQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJCgpOyAvKiBOb3RoaW5nIGZvdW5kICovCiAgICAgICAgfTsKICAgIH0oJCkpOwp9CgoKCn0pfTsKCi8qKioqKioqKioqIGthbnNvL3NldHRpbmdzICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsia2Fuc28vc2V0dGluZ3MiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKbW9kdWxlLmV4cG9ydHMgPSB7Im5hbWUiOiJucmFtYSIsImxvYWQiOiJsaWIvYXBwIiwibW9kdWxlcyI6ImxpYiIsInRlbXBsYXRlcyI6InRlbXBsYXRlcyIsImF0dGFjaG1lbnRzIjpbInN0YXRpYyIsInhkbSIsImJrbXJrbHQiXSwiYmFzZV90ZW1wbGF0ZSI6ImJhc2UuaHRtbCJ9OwoKfSl9OwoKCmthbnNvLmluaXQoKTs="
        }
    },
    "kanso": {
        "templates": "var dust_module = {exports: {}};\n(function (module, exports) {\nvar dust = {};\n\n(function(dust) {\n\ndust.cache = {};\n\ndust.register = function(name, tmpl) {\n  if (!name) return;\n  dust.cache[name] = tmpl;\n};\n\ndust.render = function(name, context, callback) {\n  var chunk = new Stub(callback).head;\n  dust.load(name, chunk, Context.wrap(context)).end();\n};\n\ndust.stream = function(name, context) {\n  var stream = new Stream();\n  dust.nextTick(function() {\n    dust.load(name, stream.head, Context.wrap(context)).end();\n  });\n  return stream;\n};\n\ndust.renderSource = function(source, context, callback) {\n  return dust.compileFn(source)(context, callback);\n};\n\ndust.compileFn = function(source, name) {\n  var tmpl = dust.loadSource(dust.compile(source, name));\n  return function(context, callback) {\n    var master = callback ? new Stub(callback) : new Stream();\n    dust.nextTick(function() {\n      tmpl(master.head, Context.wrap(context)).end();\n    });\n    return master;\n  }\n};\n\ndust.load = function(name, chunk, context) {\n  var tmpl = dust.cache[name];\n  if (tmpl) {\n    return tmpl(chunk, context);\n  } else {\n    if (dust.onLoad) {\n      return chunk.map(function(chunk) {\n        dust.onLoad(name, function(err, src) {\n          if (err) return chunk.setError(err);\n          if (!dust.cache[name]) dust.loadSource(dust.compile(src, name));\n          dust.cache[name](chunk, context).end();\n        });\n      });\n    }\n    return chunk.setError(new Error(\"Template Not Found: \" + name));\n  }\n};\n\ndust.loadSource = function(source, path) {\n  return eval(source);\n};\n\nif (Array.isArray) {\n  dust.isArray = Array.isArray;\n} else {\n  dust.isArray = function(arr) {\n    return Object.prototype.toString.call(arr) == \"[object Array]\";\n  };\n}\n\ndust.nextTick = function(callback) {\n  setTimeout(callback, 0);\n}\n\ndust.isEmpty = function(value) {\n  if (dust.isArray(value) && !value.length) return true;\n  if (value === 0) return false;\n  return (!value);\n};\n\ndust.filter = function(string, auto, filters) {\n  if (filters) {\n    for (var i=0, len=filters.length; i<len; i++) {\n      var name = filters[i];\n      if (name === \"s\") {\n        auto = null;\n      } else {\n        string = dust.filters[name](string);\n      }\n    }\n  }\n  if (auto) {\n    string = dust.filters[auto](string);\n  }\n  return string;\n};\n\ndust.filters = {\n  h: function(value) { return dust.escapeHtml(value); },\n  j: function(value) { return dust.escapeJs(value); },\n  u: encodeURI,\n  uc: encodeURIComponent\n}\n\nfunction Context(stack, global, blocks) {\n  this.stack  = stack;\n  this.global = global;\n  this.blocks = blocks;\n}\n\ndust.makeBase = function(global) {\n  return new Context(new Stack(), global);\n}\n\nContext.wrap = function(context) {\n  if (context instanceof Context) {\n    return context;\n  }\n  return new Context(new Stack(context));\n}\n\nContext.prototype.get = function(key) {\n  var ctx = this.stack, value;\n\n  while(ctx) {\n    if (ctx.isObject) {\n      value = ctx.head[key];\n      if (!(value === undefined)) {\n        return value;\n      }\n    }\n    ctx = ctx.tail;\n  }\n  return this.global ? this.global[key] : undefined;\n};\n\nContext.prototype.getPath = function(cur, down) {\n  var ctx = this.stack,\n      len = down.length;\n\n  if (cur && len === 0) return ctx.head;\n  if (!ctx.isObject) return undefined;\n  ctx = ctx.head;\n  var i = 0;\n  while(ctx && i < len) {\n    ctx = ctx[down[i]];\n    i++;\n  }\n  return ctx;\n};\n\nContext.prototype.push = function(head, idx, len) {\n  return new Context(new Stack(head, this.stack, idx, len), this.global, this.blocks);\n};\n\nContext.prototype.rebase = function(head) {\n  return new Context(new Stack(head), this.global, this.blocks);\n};\n\nContext.prototype.current = function() {\n  return this.stack.head;\n};\n\nContext.prototype.getBlock = function(key) {\n  var blocks = this.blocks;\n\n  if (!blocks) return;\n  var len = blocks.length, fn;\n  while (len--) {\n    fn = blocks[len][key];\n    if (fn) return fn;\n  }\n}\n\nContext.prototype.shiftBlocks = function(locals) {\n  var blocks = this.blocks;\n\n  if (locals) {\n    if (!blocks) {\n      newBlocks = [locals];\n    } else {\n      newBlocks = blocks.concat([locals]);\n    }\n    return new Context(this.stack, this.global, newBlocks);\n  }\n  return this;\n}\n\nfunction Stack(head, tail, idx, len) {\n  this.tail = tail;\n  this.isObject = !dust.isArray(head) && head && typeof head === \"object\";\n  this.head = head;\n  this.index = idx;\n  this.of = len;\n}\n\nfunction Stub(callback) {\n  this.head = new Chunk(this);\n  this.callback = callback;\n  this.out = '';\n}\n\nStub.prototype.flush = function() {\n  var chunk = this.head;\n\n  while (chunk) {\n    if (chunk.flushable) {\n      this.out += chunk.data;\n    } else if (chunk.error) {\n      this.callback(chunk.error);\n      this.flush = function() {};\n      return;\n    } else {\n      return;\n    }\n    chunk = chunk.next;\n    this.head = chunk;\n  }\n  this.callback(null, this.out);\n}\n\nfunction Stream() {\n  this.head = new Chunk(this);\n}\n\nStream.prototype.flush = function() {\n  var chunk = this.head;\n\n  while(chunk) {\n    if (chunk.flushable) {\n      this.emit('data', chunk.data);\n    } else if (chunk.error) {\n      this.emit('error', chunk.error);\n      this.flush = function() {};\n      return;\n    } else {\n      return;\n    }\n    chunk = chunk.next;\n    this.head = chunk;\n  }\n  this.emit('end');\n}\n\nStream.prototype.emit = function(type, data) {\n  var events = this.events;\n\n  if (events && events[type]) {\n    events[type](data);\n  }\n}\n\nStream.prototype.on = function(type, callback) {\n  if (!this.events) {\n    this.events = {};\n  }\n  this.events[type] = callback;\n  return this;\n}\n\nfunction Chunk(root, next, taps) {\n  this.root = root;\n  this.next = next;\n  this.data = '';\n  this.flushable = false;\n  this.taps = taps;\n}\n\nChunk.prototype.write = function(data) {\n  var taps  = this.taps;\n\n  if (taps) {\n    data = taps.go(data);\n  }\n  this.data += data;\n  return this;\n}\n\nChunk.prototype.end = function(data) {\n  if (data) {\n    this.write(data);\n  }\n  this.flushable = true;\n  this.root.flush();\n  return this;\n}\n\nChunk.prototype.map = function(callback) {\n  var cursor = new Chunk(this.root, this.next, this.taps),\n      branch = new Chunk(this.root, cursor, this.taps);\n\n  this.next = branch;\n  this.flushable = true;\n  callback(branch);\n  return cursor;\n}\n\nChunk.prototype.tap = function(tap) {\n  var taps = this.taps;\n\n  if (taps) {\n    this.taps = taps.push(tap);\n  } else {\n    this.taps = new Tap(tap);\n  }\n  return this;\n}\n\nChunk.prototype.untap = function() {\n  this.taps = this.taps.tail;\n  return this;\n}\n\nChunk.prototype.render = function(body, context) {\n  return body(this, context);\n}\n\nChunk.prototype.reference = function(elem, context, auto, filters) {\n  if (typeof elem === \"function\") {\n    elem = elem(this, context, null, {auto: auto, filters: filters});\n    if (elem instanceof Chunk) {\n      return elem;\n    }\n  }\n  if (!dust.isEmpty(elem)) {\n    return this.write(dust.filter(elem, auto, filters));\n  } else {\n    return this;\n  }\n};\n\nChunk.prototype.section = function(elem, context, bodies, params) {\n  if (typeof elem === \"function\") {\n    elem = elem(this, context, bodies, params);\n    if (elem instanceof Chunk) {\n      return elem;\n    }\n  }\n\n  var body = bodies.block,\n      skip = bodies['else'];\n\n  if (params) {\n    context = context.push(params);\n  }\n\n  if (dust.isArray(elem)) {\n    if (body) {\n      var len = elem.length, chunk = this;\n      for (var i=0; i<len; i++) {\n        chunk = body(chunk, context.push(elem[i], i, len));\n      }\n      return chunk;\n    }\n  } else if (elem === true) {\n    if (body) return body(this, context);\n  } else if (elem || elem === 0) {\n    if (body) return body(this, context.push(elem));\n  } else if (skip) {\n    return skip(this, context);\n  }\n  return this;\n};\n\nChunk.prototype.exists = function(elem, context, bodies) {\n  var body = bodies.block,\n      skip = bodies['else'];\n\n  if (!dust.isEmpty(elem)) {\n    if (body) return body(this, context);\n  } else if (skip) {\n    return skip(this, context);\n  }\n  return this;\n}\n\nChunk.prototype.notexists = function(elem, context, bodies) {\n  var body = bodies.block,\n      skip = bodies['else'];\n\n  if (dust.isEmpty(elem)) {\n    if (body) return body(this, context);\n  } else if (skip) {\n    return skip(this, context);\n  }\n  return this;\n}\n\nChunk.prototype.block = function(elem, context, bodies) {\n  var body = bodies.block;\n\n  if (elem) {\n    body = elem;\n  }\n\n  if (body) {\n    return body(this, context);\n  }\n  return this;\n};\n\nChunk.prototype.partial = function(elem, context) {\n  if (typeof elem === \"function\") {\n    return this.capture(elem, context, function(name, chunk) {\n      dust.load(name, chunk, context).end();\n    });\n  }\n  return dust.load(elem, this, context);\n};\n\nChunk.prototype.helper = function(name, context, bodies, params) {\n  return dust.helpers[name](this, context, bodies, params);\n};\n\nChunk.prototype.capture = function(body, context, callback) {\n  return this.map(function(chunk) {\n    var stub = new Stub(function(err, out) {\n      if (err) {\n        chunk.setError(err);\n      } else {\n        callback(out, chunk);\n      }\n    });\n    body(stub.head, context).end();\n  });\n};\n\nChunk.prototype.setError = function(err) {\n  this.error = err;\n  this.root.flush();\n  return this;\n};\n\ndust.helpers = {\n  sep: function(chunk, context, bodies) {\n    if (context.stack.index === context.stack.of - 1) {\n      return chunk;\n    }\n    return bodies.block(chunk, context);\n  },\n\n  idx: function(chunk, context, bodies) {\n    return bodies.block(chunk, context.push(context.stack.index));\n  }\n}\n\nfunction Tap(head, tail) {\n  this.head = head;\n  this.tail = tail;\n}\n\nTap.prototype.push = function(tap) {\n  return new Tap(tap, this);\n};\n\nTap.prototype.go = function(value) {\n  var tap = this;\n\n  while(tap) {\n    value = tap.head(value);\n    tap = tap.tail;\n  }\n  return value;\n};\n\nvar HCHARS = new RegExp(/[&<>\\\"]/),\n    AMP    = /&/g,\n    LT     = /</g,\n    GT     = />/g,\n    QUOT   = /\\\"/g;\n\ndust.escapeHtml = function(s) {\n  if (typeof s === \"string\") {\n    if (!HCHARS.test(s)) {\n      return s;\n    }\n    return s.replace(AMP,'&amp;').replace(LT,'&lt;').replace(GT,'&gt;').replace(QUOT,'&quot;');\n  }\n  return s;\n};\n\nvar BS = /\\\\/g,\n    CR = /\\r/g,\n    LS = /\\u2028/g,\n    PS = /\\u2029/g,\n    NL = /\\n/g,\n    LF = /\\f/g,\n    SQ = /'/g,\n    DQ = /\"/g,\n    TB = /\\t/g;\n\ndust.escapeJs = function(s) {\n  if (typeof s === \"string\") {\n    return s\n      .replace(BS, '\\\\\\\\')\n      .replace(DQ, '\\\\\"')\n      .replace(SQ, \"\\\\'\")\n      .replace(CR, '\\\\r')\n      .replace(LS, '\\\\u2028')\n      .replace(PS, '\\\\u2029')\n      .replace(NL, '\\\\n')\n      .replace(LF, '\\\\f')\n      .replace(TB, \"\\\\t\");\n  }\n  return s;\n};\n\n})(dust);\n\nif (typeof exports !== \"undefined\") {\n  if (typeof process !== \"undefined\") {\n      require('./server')(dust);\n  }\n  module.exports = dust;\n}\n(function(){dust.register(\"404.html\",body_0);function body_0(chk,ctx){return chk.write(\"<h1>404 - Not Found</h1>\").write(\"\\n\");}return body_0;})();(function(){dust.register(\"all_users.html\",body_0);function body_0(chk,ctx){return chk.write(\"<h1>note-o-rama users</h1>\").write(\"\\n\").write(\"\\n\").write(\"<ul class=\\\"users\\\">\").write(\"\\n  \").section(ctx.get(\"users\"),ctx,{\"block\":body_1},null).write(\"\\n\").write(\"</ul>\").write(\"\\n\");}function body_1(chk,ctx){return chk.write(\"\\n    \").write(\"<li class=\\\"user-line\\\">\").write(\"\\n        \").write(\"<h2 class=\\\"user-line\\\"><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.get(\"user_id\"),ctx,\"h\",[\"uc\"]).write(\"\\\" class=\\\"user_id\\\">\").reference(ctx.get(\"user_id\"),ctx,\"h\").write(\"</a></h2>\").write(\"\\n        \").write(\"<div class='updated-line'>\").write(\"\\n            \").write(\"Updated <abbr class=\\\"updated_time _timeago\\\" title=\\\"\").reference(ctx.get(\"updated_time\"),ctx,\"h\").write(\"\\\">\").reference(ctx.get(\"updated_time\"),ctx,\"h\").write(\"</abbr>.\").write(\"\\n        \").write(\"</div>\").write(\"\\n    \").write(\"</li>\").write(\"\\n    \");}return body_0;})();(function(){dust.register(\"authors.html\",body_0);var blocks={what:body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.partial(\"user_header.html\",ctx).write(\"\\n\").write(\"\\n\").write(\"<div class=\\\"navigation\\\">\").write(\"\\n    \").write(\"--\").write(\"\\n    \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_5},null).write(\"\\n    \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_8},null).write(\"\\n\").write(\"</div>\").write(\"\\n\").write(\"\\n\").write(\"\\n\").section(ctx.get(\"authors\"),ctx,{\"block\":body_11},null).write(\"\\n\").notexists(ctx.get(\"authors\"),ctx,{\"block\":body_16},null).write(\"\\n\");}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.exists(ctx.get(\"query_author\"),ctx,{\"else\":body_2,\"block\":body_4},null);}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.exists(ctx.get(\"query_user\"),ctx,{\"block\":body_3},null).write(\"authors\");}function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.reference(ctx.getPath(false,[\"authors\",\"length\"]),ctx,\"h\").write(\" \");}function body_4(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"sources\");}function body_5(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.get(\"query_user\"),ctx,{\"block\":body_6},null).write(\"\\n    \");}function body_6(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"see \").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/sources\\\">\").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\"'s sources</a> or\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/tags\\\">tags</a>\").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_7},null).write(\"\\n        \");}function body_7(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"; <br />-- \");}function body_8(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").write(\"go to \").write(\"\\n        \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_9},null).write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/sources\\\">\").exists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_10},null).write(\"sources</a> or\").write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/tags\\\">tags</a>\").write(\"\\n    \");}function body_9(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/authors\\\">your authors</a>,\").write(\"\\n        \");}function body_10(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"your \");}function body_11(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n    \").write(\"<h1>\").write(\"\\n        \").reference(ctx.get(\"author_name\"),ctx,\"h\").write(\"\\n    \").write(\"</h1>\").write(\"\\n\").write(\"\\n    \").write(\"<ul class=\\\"sources\\\">\").write(\"\\n        \").section(ctx.get(\"sources\"),ctx,{\"block\":body_12},null).write(\"\\n    \").write(\"</ul>\").write(\"\\n\");}function body_12(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"<li class=\\\"source\\\">\").write(\"\\n                \").write(\"<div class=\\\"title-line\\\">\").write(\"\\n                    \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.get(\"user_id\"),ctx,\"h\",[\"uc\"]).write(\"/sources/\").reference(ctx.get(\"page_id\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.get(\"TITLE\"),ctx,\"h\").reference(ctx.get(\"page_title\"),ctx,\"h\").notexists(ctx.get(\"TITLE\"),ctx,{\"block\":body_13},null).write(\"</a>\").write(\"\\n                    \").write(\"\\n                    \").exists(ctx.get(\"YEAR\"),ctx,{\"block\":body_15},null).write(\"\\n                    \").write(\"\\n                    \").write(\"\\n                \").write(\"</div>\").write(\"\\n                \").write(\"<div class=\\\"citation\\\">\").partial(\"bibliographic_details.html\",ctx).write(\"</div>\").write(\"\\n            \").write(\"</li>\").write(\"\\n        \");}function body_13(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.notexists(ctx.get(\"page_title\"),ctx,{\"block\":body_14},null);}function body_14(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"untitled\");}function body_15(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"(<span class=\\\"year\\\">\").reference(ctx.get(\"YEAR\"),ctx,\"h\").write(\"</span>)\");}function body_16(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n    \").notexists(ctx.get(\"query_author\"),ctx,{\"block\":body_17},null).write(\"\\n\");}function body_17(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.get(\"query_user\"),ctx,{\"block\":body_18},null).write(\"\\n    \");}function body_18(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"<p>\").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_19,\"block\":body_20},null).write(\" no sources with authors yet.</a>\").write(\"\\n        \");}function body_19(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.reference(ctx.get(\"query_user\"),ctx,\"h\").write(\" has\");}function body_20(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"You have\");}return body_0;})();(function(){dust.register(\"base.html\",body_0);function body_0(chk,ctx){return chk.write(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"> \").write(\"\\n\").write(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\"> \").write(\"\\n  \").write(\"<head> \").write(\"\\n    \").write(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" /> \").write(\"\\n    \").write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/style.css\\\" />\").write(\"\\n    \").write(\"<title>\").reference(ctx.get(\"title\"),ctx,\"h\").write(\"</title> \").write(\"\\n  \").write(\"</head> \").write(\"\\n  \").write(\"<body>\").write(\"\\n    \").write(\"\\n    \").write(\"<!-- session management -->\").write(\"\\n    \").write(\"<div id=\\\"session-container\\\">\").write(\"\\n      \").write(\"<div id=\\\"nrama_logo\\\"><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"\\\">Note-o-rama</a></div>\").write(\"\\n      \").partial(\"session.html\",ctx).write(\"\\n    \").write(\"</div>\").write(\"\\n\").write(\"\\n    \").write(\"<div id=\\\"content\\\">\").write(\"\\n      \").reference(ctx.get(\"content\"),ctx,\"h\",[\"s\"]).write(\"\\n    \").write(\"</div>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/jquery-1.5.2.min.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/jquery-ui.min.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/json2.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/jquery.simplemodal-1.4.1.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/jquery.autogrow-textarea.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/jquery.sortlist.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/jquery.timeago.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/js/jquery.jqcloud.min.js\\\"></script>\").write(\"\\n    \").write(\"<script src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/kanso.js\\\"></script>\").write(\"\\n    \").write(\"\\n  \").write(\"</body>\").write(\"\\n\").write(\"</html>\").write(\"\\n\");}return body_0;})();(function(){dust.register(\"bibliographic_details.html\",body_0);function body_0(chk,ctx){return chk.write(\"<div class=\\\"bibliographic-details\\\">\").write(\"\\n    \").exists(ctx.get(\"AUTHOR\"),ctx,{\"block\":body_1},null).write(\"\\n    \").exists(ctx.get(\"JOURNAL\"),ctx,{\"block\":body_5},null).write(\"\\n    \").exists(ctx.get(\"BOOKTITLE\"),ctx,{\"block\":body_7},null).write(\"\\n    \").exists(ctx.get(\"url\"),ctx,{\"block\":body_10},null).write(\"\\n    \").exists(ctx.get(\"updated_time\"),ctx,{\"block\":body_11},null).write(\"\\n\").write(\"</div>\");}function body_1(chk,ctx){return chk.write(\"\\n        \").write(\"<div class=\\\"authors\\\">\").write(\"\\n            \").section(ctx.get(\"AUTHOR\"),ctx,{\"block\":body_2},null).write(\".\").write(\"\\n        \").write(\"</div>\").write(\"\\n    \");}function body_2(chk,ctx){return chk.write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/authors/\").reference(ctx.getPath(true,[]),ctx,\"h\",[\"uc\"]).write(\"\\\"\").write(\"\\n                        \").write(\"class=\\\"author author_\").helper(\"idx\",ctx,{\"block\":body_3},null).write(\"\\\"\").write(\"\\n                    \").write(\">\").reference(ctx.getPath(true,[]),ctx,\"h\").write(\"</a>\").helper(\"sep\",ctx,{\"block\":body_4},null);}function body_3(chk,ctx){return chk.reference(ctx.getPath(true,[]),ctx,\"h\");}function body_4(chk,ctx){return chk.write(\" and \");}function body_5(chk,ctx){return chk.write(\"\\n        \").write(\"<div>\").write(\"\\n            \").write(\"<span class=\\\"journal\\\">\").reference(ctx.get(\"JOURNAL\"),ctx,\"h\").write(\"</span>\").write(\"\\n            \").reference(ctx.get(\"VOLUME\"),ctx,\"h\").write(\"(\").reference(ctx.get(\"NUMBER\"),ctx,\"h\").write(\").\").write(\"\\n            \").exists(ctx.get(\"PAGES\"),ctx,{\"block\":body_6},null).write(\"\\n        \").write(\"</div>\").write(\"\\n    \");}function body_6(chk,ctx){return chk.write(\"\\n                \").write(\"pp. <span class=\\\"PAGES\\\">\").reference(ctx.get(\"PAGES\"),ctx,\"h\").write(\"</span>.\").write(\"\\n            \");}function body_7(chk,ctx){return chk.write(\"\\n        \").write(\"<div>\").write(\"\\n            \").write(\"In <span class=\\\"booktitle\\\">\").reference(ctx.get(\"BOOKTITLE\"),ctx,\"h\").write(\"</span>\").write(\"\\n            \").exists(ctx.get(\"EDITOR\"),ctx,{\"block\":body_8},null).write(\"\\n            \").write(\"<span class=\\\"publisher\\\">\").reference(ctx.get(\"PUBLISHER\"),ctx,\"h\").write(\"</span>:\").write(\"\\n            \").write(\"<span class=\\\"address\\\">\").reference(ctx.get(\"ADDRESS\"),ctx,\"h\").write(\"</span>.\").write(\"\\n            \").exists(ctx.get(\"PAGES\"),ctx,{\"block\":body_9},null).write(\"\\n        \").write(\"</div>\").write(\"\\n    \");}function body_8(chk,ctx){return chk.write(\"\\n                \").write(\"(eds.) <span class=\\\"editor\\\">\").reference(ctx.get(\"EDITOR\"),ctx,\"h\").write(\"</span>.\").write(\"\\n            \");}function body_9(chk,ctx){return chk.write(\"\\n                \").write(\"pp. <span class=\\\"PAGES\\\">\").reference(ctx.get(\"PAGES\"),ctx,\"h\").write(\"</span>.\").write(\"\\n            \");}function body_10(chk,ctx){return chk.write(\"\\n        \").write(\"<div>\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"url\"),ctx,\"h\").write(\"\\\" target=\\\"_blank\\\" class=\\\"title\\\">\").reference(ctx.get(\"url\"),ctx,\"h\").write(\"</a>\").write(\"\\n        \").write(\"</div>\").write(\"\\n    \");}function body_11(chk,ctx){return chk.write(\"\\n        \").write(\"<div>\").write(\"\\n            \").write(\"Updated <abbr class=\\\"_timeago\\\" title=\\\"\").reference(ctx.get(\"updated_time\"),ctx,\"h\").write(\"\\\">\").reference(ctx.get(\"updated_time\"),ctx,\"h\").write(\"</abbr>.\").write(\"\\n        \").write(\"</div>\").write(\"\\n    \");}return body_0;})();(function(){dust.register(\"bibliographic_details_compact.html\",body_0);function body_0(chk,ctx){return chk.write(\"<div class=\\\"bibliographic-details compact\\\">\").write(\"\\n    \").write(\"<div>\").write(\"\\n        \").write(\"&mdash;\").write(\"\\n        \").exists(ctx.get(\"AUTHOR\"),ctx,{\"block\":body_1},null).write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/sources/\").reference(ctx.get(\"page_id\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").write(\"\\n            \").reference(ctx.get(\"TITLE\"),ctx,\"h\").notexists(ctx.get(\"TITLE\"),ctx,{\"block\":body_6},null).write(\"\\n        \").write(\"</a>\").write(\"\\n    \").write(\"</div>\").write(\"\\n    \").write(\"<div>\").write(\"\\n        \").exists(ctx.get(\"JOURNAL\"),ctx,{\"block\":body_8},null).write(\"\\n        \").exists(ctx.get(\"BOOKTITLE\"),ctx,{\"block\":body_10},null).write(\"\\n    \").write(\"</div>\").write(\"\\n    \").write(\"<div>\").write(\"\\n        \").exists(ctx.get(\"url\"),ctx,{\"block\":body_13},null).write(\"\\n    \").write(\"</div>\").write(\"\\n    \").exists(ctx.get(\"updated_time\"),ctx,{\"block\":body_14},null).write(\"\\n\").write(\"</div>\");}function body_1(chk,ctx){return chk.write(\"\\n            \").write(\"<span class=\\\"authors\\\">\").write(\"\\n                \").section(ctx.get(\"AUTHOR\"),ctx,{\"block\":body_2},null).write(\".\").write(\"\\n            \").write(\"</span>\").write(\"\\n            \").exists(ctx.get(\"YEAR\"),ctx,{\"block\":body_5},null).write(\"\\n        \");}function body_2(chk,ctx){return chk.write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/authors/\").reference(ctx.getPath(true,[]),ctx,\"h\",[\"uc\"]).write(\"\\\"\").write(\"\\n                            \").write(\"class=\\\"author author_\").helper(\"idx\",ctx,{\"block\":body_3},null).write(\"\\\"\").write(\"\\n                        \").write(\">\").reference(ctx.getPath(true,[]),ctx,\"h\").write(\"</a>\").helper(\"sep\",ctx,{\"block\":body_4},null);}function body_3(chk,ctx){return chk.reference(ctx.getPath(true,[]),ctx,\"h\");}function body_4(chk,ctx){return chk.write(\" and \");}function body_5(chk,ctx){return chk.write(\"(<span class=\\\"year\\\">\").reference(ctx.get(\"YEAR\"),ctx,\"h\").write(\"</span>)\");}function body_6(chk,ctx){return chk.reference(ctx.get(\"page_title\"),ctx,\"h\").notexists(ctx.get(\"page_title\"),ctx,{\"block\":body_7},null);}function body_7(chk,ctx){return chk.write(\"untitled\");}function body_8(chk,ctx){return chk.write(\"\\n            \").write(\"<span>\").write(\"\\n                \").write(\"<span class=\\\"journal\\\">\").reference(ctx.get(\"JOURNAL\"),ctx,\"h\").write(\"</span>\").write(\"\\n                \").reference(ctx.get(\"VOLUME\"),ctx,\"h\").write(\"(\").reference(ctx.get(\"NUMBER\"),ctx,\"h\").write(\").\").write(\"\\n                \").exists(ctx.get(\"PAGES\"),ctx,{\"block\":body_9},null).write(\"\\n            \").write(\"</span>\").write(\"\\n        \");}function body_9(chk,ctx){return chk.write(\"\\n                    \").write(\"pp. <span class=\\\"PAGES\\\">\").reference(ctx.get(\"PAGES\"),ctx,\"h\").write(\"</span>.\").write(\"\\n                \");}function body_10(chk,ctx){return chk.write(\"\\n            \").write(\"<span>\").write(\"\\n                \").write(\"In <span class=\\\"booktitle\\\">\").reference(ctx.get(\"BOOKTITLE\"),ctx,\"h\").write(\"</span>\").write(\"\\n                \").exists(ctx.get(\"EDITOR\"),ctx,{\"block\":body_11},null).write(\"\\n                \").write(\"<span class=\\\"publisher\\\">\").reference(ctx.get(\"PUBLISHER\"),ctx,\"h\").write(\"</span>:\").write(\"\\n                \").write(\"<span class=\\\"address\\\">\").reference(ctx.get(\"ADDRESS\"),ctx,\"h\").write(\"</span>.\").write(\"\\n                \").exists(ctx.get(\"PAGES\"),ctx,{\"block\":body_12},null).write(\"\\n            \").write(\"</span>\").write(\"\\n        \");}function body_11(chk,ctx){return chk.write(\"\\n                    \").write(\"(eds.) <span class=\\\"editor\\\">\").reference(ctx.get(\"EDITOR\"),ctx,\"h\").write(\"</span>.\").write(\"\\n                \");}function body_12(chk,ctx){return chk.write(\"\\n                    \").write(\"pp. <span class=\\\"PAGES\\\">\").reference(ctx.get(\"PAGES\"),ctx,\"h\").write(\"</span>.\").write(\"\\n                \");}function body_13(chk,ctx){return chk.write(\"\\n            \").write(\"<span>\").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"url\"),ctx,\"h\").write(\"\\\" target=\\\"_blank\\\" class=\\\"title\\\">\").reference(ctx.get(\"url\"),ctx,\"h\").write(\"</a>\").write(\"\\n            \").write(\"</span>\").write(\"\\n        \");}function body_14(chk,ctx){return chk.write(\"\\n        \").write(\"<div>\").write(\"\\n            \").write(\"Updated <abbr class=\\\"_timeago\\\" title=\\\"\").reference(ctx.get(\"updated_time\"),ctx,\"h\").write(\"\\\">\").reference(ctx.get(\"updated_time\"),ctx,\"h\").write(\"</abbr>.\").write(\"\\n        \").write(\"</div>\").write(\"\\n    \");}return body_0;})();(function(){dust.register(\"flow.html\",body_0);var blocks={what:body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.partial(\"user_header.html\",ctx).write(\"\\n\").write(\"\\n\").write(\"<div class=\\\"navigation\\\" >\").write(\"\\n    \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_2},null).write(\"\\n    \").write(\"\\n    \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_11,\"block\":body_13},null).write(\"\\n\").write(\"\\n\").write(\"</div>\").write(\"\\n\").write(\"\\n\").exists(ctx.get(\"query_tag\"),ctx,{\"block\":body_18},null).write(\"\\n    \").write(\"\\n\").write(\"\\n\").section(ctx.get(\"quotes\"),ctx,{\"block\":body_19},null).write(\"\\n\").write(\"\\n\").write(\"\\n\").write(\"\\n\").partial(\"footer_event.html\",ctx);}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"notes\");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_3},null).write(\"\\n    \");}function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_4,\"block\":body_8},null).write(\"\\n        \");}function body_4(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").notexists(ctx.get(\"no_sources\"),ctx,{\"block\":body_5},null).write(\"\\n            \");}function body_5(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                    \").write(\"-- see &amp; edit <a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).reference(ctx.get(\"query_source_url\"),ctx,\"h\").reference(ctx.get(\"query_tag_url\"),ctx,\"h\").write(\"\\\">only your notes \").exists(ctx.get(\"query_tag\"),ctx,{\"block\":body_6},null).exists(ctx.get(\"query_source\"),ctx,{\"block\":body_7},null).write(\"</a>; <br />\").write(\"\\n                \");}function body_6(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"with this tag\");}function body_7(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"on this source\");}function body_8(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"-- see &amp; edit <a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).reference(ctx.get(\"query_source_url\"),ctx,\"h\").reference(ctx.get(\"query_tag_url\"),ctx,\"h\").write(\"\\\">your notes \").exists(ctx.get(\"query_tag\"),ctx,{\"block\":body_9},null).exists(ctx.get(\"query_source\"),ctx,{\"block\":body_10},null).write(\"</a>; <br />\").write(\"\\n            \");}function body_9(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"with this tag\");}function body_10(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"on this source\");}function body_11(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_12},null).write(\"\\n    \");}function body_12(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"--        \").write(\"\\n            \").write(\"go to \").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/sources\\\">your sources</a>,\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/authors\\\">authors</a> or\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/tags\\\">tags</a> \").write(\"\\n        \");}function body_13(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_14,\"block\":body_16},null).write(\"\\n    \");}function body_14(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"\\n            \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_15},null).write(\"\\n        \");}function body_15(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"--        \").write(\"\\n                \").write(\"go to \").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/sources\\\">your sources</a>,\").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/authors\\\">authors</a> or\").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/tags\\\">tags</a> \").write(\"\\n            \");}function body_16(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"--        \").write(\"\\n            \").write(\"see\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/sources\\\">\").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\"'s sources</a>,\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/authors\\\">authors</a> or\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/tags\\\">tags</a>\").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_17},null).write(\"\\n        \");}function body_17(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"; \");}function body_18(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n    \").write(\"<h1>#\").reference(ctx.get(\"query_tag\"),ctx,\"h\").write(\"</h1>\").write(\"\\n\");}function body_19(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n    \").write(\"<div class=\\\"_nrama-quote\\\" id=\\\"\").reference(ctx.get(\"hash\"),ctx,\"h\").write(\"\\\" >\").write(\"\\n        \").write(\"<div class=\\\"quote-line flow\\\">\").write(\"\\n            \").write(\"\\\"<span class=\\\"quote-content\\\">\").reference(ctx.get(\"content\"),ctx,\"h\").write(\"</span>\\\"\").write(\"\\n            \").write(\"\\n            \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_20},null).write(\"\\n        \").write(\"</div>\").write(\"\\n        \").write(\"\\n        \").write(\"<div class=\\\"source-for-single-quote\\\">\").write(\"\\n            \").section(ctx.get(\"source\"),ctx,{\"block\":body_21},null).write(\"\\n            \").write(\"<div class=\\\"cited-by\\\">\").write(\"\\n                \").notexists(ctx.get(\"query_user\"),ctx,{\"block\":body_22},null).write(\"\\n            \").write(\"</div>\").write(\"\\n        \").write(\"</div>\").write(\"\\n        \").write(\"<ul class=\\\"notes _sort-me \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_25},null).write(\"\\\">\").write(\"\\n            \").section(ctx.get(\"notes\"),ctx,{\"block\":body_26},null).write(\"\\n        \").write(\"</ul>\").write(\"\\n    \").write(\"</div>\").write(\"\\n\");}function body_20(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"<a class=\\\"add-a-note\\\">[+]</a>\").write(\"\\n                \").write(\"\\n            \");}function body_21(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").partial(\"bibliographic_details_compact.html\",ctx).write(\"\\n            \");}function body_22(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                    \").write(\"[cited by\").write(\"\\n                    \").section(ctx.get(\"users\"),ctx,{\"block\":body_23},null).write(\"]\").write(\"\\n                \");}function body_23(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                        \").write(\"<span class='quote-user_id'><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(true,[]),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.getPath(true,[]),ctx,\"h\").write(\"</a></span>\").helper(\"sep\",ctx,{\"block\":body_24},null).write(\"\\n                    \");}function body_24(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\", \");}function body_25(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"_not_user_page\");}function body_26(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"<li id=\\\"\").reference(ctx.get(\"_id\"),ctx,\"h\").write(\"\\\" class=\\\"_nrama-note\\\">\").write(\"\\n                    \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_27,\"block\":body_29},null).write(\"\\n                \").write(\"</li>\").write(\"\\n            \");}function body_27(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                        \").notexists(ctx.get(\"query_user\"),ctx,{\"block\":body_28},null).write(\"\\n                        \").write(\"<span class=\\\"_nrama-note-content\\\">\").reference(ctx.get(\"content\"),ctx,\"h\").write(\"</span>\").write(\"\\n                    \");}function body_28(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                            \").write(\"<span class='quote-user_id'><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.get(\"user_id\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.get(\"user_id\"),ctx,\"h\").write(\"</a></span>]\").write(\"\\n                        \");}function body_29(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                        \").write(\"<textarea class=\\\"_nrama-note-content\\\" rows=\\\"1\\\">\").reference(ctx.get(\"content\"),ctx,\"h\").write(\"</textarea>\").write(\"\\n                    \");}return body_0;})();(function(){dust.register(\"footer_event.html\",body_0);function body_0(chk,ctx){return chk.write(\"<script>\").write(\"\\n    \").write(\"if( typeof $ !== 'undefined' ) {\").write(\"\\n        \").write(\"$(document).trigger('nrama_page_loaded');\").write(\"\\n    \").write(\"}\").write(\"\\n\").write(\"</script>\").write(\"\\n\").write(\"\\n\");}return body_0;})();(function(){dust.register(\"quotes.html\",body_0);var blocks={what:body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.partial(\"user_header.html\",ctx).write(\"\\n\").write(\"\\n\").write(\"<div class=\\\"navigation\\\" >\").write(\"\\n    \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_2,\"block\":body_14},null).write(\"\\n    \").write(\"\\n    \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_17,\"block\":body_19},null).write(\"\\n\").write(\"\\n\").write(\"</div>\").write(\"\\n\").write(\"\\n\").write(\"\\n\").write(\"<h1>\").write(\"\\n    \").exists(ctx.get(\"query_tag\"),ctx,{\"block\":body_24},null).write(\"\\n    \").reference(ctx.get(\"query_author\"),ctx,\"h\").write(\"\\n\").write(\"</h1>\").write(\"\\n\").write(\"\\n\").section(ctx.get(\"sources\"),ctx,{\"block\":body_25},null).write(\"\\n\").exists(ctx.get(\"no_sources\"),ctx,{\"block\":body_46},null).write(\"\\n\").write(\"\\n\").partial(\"footer_event.html\",ctx);}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"notes\");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"else\":body_3,\"block\":body_5},null).write(\"\\n    \");}function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").exists(ctx.get(\"query_user\"),ctx,{\"block\":body_4},null).write(\"\\n        \");}function body_4(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"-- see <a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_source_url\"),ctx,\"h\").write(\"\\\">everyone's notes on this</a>;\").write(\"\\n            \");}function body_5(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_6,\"block\":body_11},null).write(\"\\n        \");}function body_6(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").notexists(ctx.get(\"no_sources\"),ctx,{\"else\":body_7,\"block\":body_8},null).write(\"\\n            \");}function body_7(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \");}function body_8(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                    \").write(\"-- see &amp; edit <a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).reference(ctx.get(\"query_source_url\"),ctx,\"h\").reference(ctx.get(\"query_tag_url\"),ctx,\"h\").write(\"\\\">only your notes \").exists(ctx.get(\"query_tag\"),ctx,{\"block\":body_9},null).exists(ctx.get(\"query_source\"),ctx,{\"block\":body_10},null).write(\"</a>;\").write(\"\\n                \");}function body_9(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"with this tag\");}function body_10(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"on this source\");}function body_11(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"-- see &amp; edit <a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).reference(ctx.get(\"query_source_url\"),ctx,\"h\").reference(ctx.get(\"query_tag_url\"),ctx,\"h\").write(\"\\\">your notes \").exists(ctx.get(\"query_tag\"),ctx,{\"block\":body_12},null).exists(ctx.get(\"query_source\"),ctx,{\"block\":body_13},null).write(\"</a>;\").write(\"\\n            \");}function body_12(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"with this tag\");}function body_13(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"on this source\");}function body_14(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").write(\"-- see <a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_tag_url\"),ctx,\"h\").reference(ctx.get(\"query_source_url\"),ctx,\"h\").write(\"\\\">everyone's notes \").exists(ctx.get(\"query_tag\"),ctx,{\"block\":body_15},null).exists(ctx.get(\"query_source\"),ctx,{\"block\":body_16},null).write(\"</a>;\").write(\"\\n    \");}function body_15(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"with this tag\");}function body_16(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"on this source\");}function body_17(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_18},null).write(\"\\n    \");}function body_18(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"<br />--        \").write(\"\\n            \").write(\"go to \").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/sources\\\">your sources</a>,\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/authors\\\">authors</a> or\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/tags\\\">tags</a> \").write(\"\\n        \");}function body_19(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_20,\"block\":body_22},null).write(\"\\n    \");}function body_20(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"\\n            \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_21},null).write(\"\\n        \");}function body_21(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"<br />--        \").write(\"\\n                \").write(\"go to \").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/sources\\\">your sources</a>,\").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/authors\\\">authors</a> or\").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/tags\\\">tags</a> \").write(\"\\n            \");}function body_22(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"<br />--        \").write(\"\\n            \").write(\"see\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/sources\\\">\").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\"'s sources</a>,\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/authors\\\">authors</a> or\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/tags\\\">tags</a>\").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_23},null).write(\"\\n        \");}function body_23(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"; \");}function body_24(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"#\").reference(ctx.get(\"query_tag\"),ctx,\"h\");}function body_25(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n    \").write(\"<h2 class=\\\"title-line\\\">\").write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/sources/\").reference(ctx.get(\"page_id\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").write(\"\\n        \").reference(ctx.get(\"TITLE\"),ctx,\"h\").notexists(ctx.get(\"TITLE\"),ctx,{\"block\":body_26},null).write(\"\\n        \").write(\"</a>\").write(\"\\n        \").exists(ctx.get(\"YEAR\"),ctx,{\"block\":body_28},null).write(\"\\n    \").write(\"</h2>\").write(\"\\n    \").partial(\"bibliographic_details.html\",ctx).write(\"\\n    \").write(\"\\n    \").write(\"<div class='quotes'>\").write(\"\\n        \").exists(ctx.get(\"quotes\"),ctx,{\"else\":body_29,\"block\":body_34},null).write(\"\\n    \").write(\"</div>\").write(\"\\n\");}function body_26(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.reference(ctx.get(\"page_title\"),ctx,\"h\").notexists(ctx.get(\"page_title\"),ctx,{\"block\":body_27},null);}function body_27(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"untitled\");}function body_28(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"(<span class=\\\"year\\\">\").reference(ctx.get(\"YEAR\"),ctx,\"h\").write(\"</span>)\");}function body_29(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_30,\"block\":body_33},null).write(\"\\n        \");}function body_30(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_31,\"block\":body_32},null).write(\"\\n            \");}function body_31(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                    \").write(\"<p>There are no notes on this source.</p>\").write(\"\\n                \");}function body_32(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                    \").write(\"<p>\").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\" has notes on this source.</p>\").write(\"\\n                \");}function body_33(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"<p>You have no notes on this source.</p>\").write(\"\\n            \");}function body_34(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").section(ctx.get(\"quotes\"),ctx,{\"block\":body_35},null).write(\"\\n        \");}function body_35(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"<div class=\\\"_nrama-quote\\\" id=\\\"\").reference(ctx.get(\"hash\"),ctx,\"h\").write(\"\\\" >\").write(\"\\n                    \").write(\"<div class=\\\"quote-line\\\">\").write(\"\\n                        \").write(\"\\\"<span class=\\\"quote-content\\\">\").reference(ctx.get(\"content\"),ctx,\"h\").write(\"</span>\\\"\").write(\"\\n                        \").write(\"\\n                        \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_36,\"block\":body_40},null).write(\"\\n                    \").write(\"</div>\").write(\"\\n                    \").write(\"\\n                    \").write(\"<ul class=\\\"notes _sort-me \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_41},null).write(\"\\\">\").write(\"\\n                        \").section(ctx.get(\"notes\"),ctx,{\"block\":body_42},null).write(\"\\n                    \").write(\"</ul>\").write(\"\\n                \").write(\"</div>\").write(\"\\n            \");}function body_36(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                            \").notexists(ctx.get(\"query_user\"),ctx,{\"block\":body_37},null).write(\"\\n                            \").write(\"\\n                        \");}function body_37(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                                \").write(\"[cited by\").write(\"\\n                                \").section(ctx.get(\"users\"),ctx,{\"block\":body_38},null).write(\"]\").write(\"\\n                            \");}function body_38(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                                    \").write(\"<span class='quote-user_id'><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(true,[]),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.getPath(true,[]),ctx,\"h\").write(\"</a></span>\").helper(\"sep\",ctx,{\"block\":body_39},null).write(\"\\n                                \");}function body_39(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\", \");}function body_40(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                            \").write(\"<a class=\\\"add-a-note\\\">[+]</a>\").write(\"\\n                        \");}function body_41(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"_not_user_page\");}function body_42(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                            \").write(\"<li id=\\\"\").reference(ctx.get(\"_id\"),ctx,\"h\").write(\"\\\" class=\\\"_nrama-note\\\">\").write(\"\\n                                \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_43,\"block\":body_45},null).write(\"\\n                            \").write(\"</li>\").write(\"\\n                        \");}function body_43(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                                    \").notexists(ctx.get(\"query_user\"),ctx,{\"block\":body_44},null).write(\"\\n                                    \").write(\"<span class=\\\"_nrama-note-content\\\">\").reference(ctx.get(\"content\"),ctx,\"h\").write(\"</span>\").write(\"\\n                                \");}function body_44(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                                        \").write(\"<span class='quote-user_id'><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.get(\"user_id\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.get(\"user_id\"),ctx,\"h\").write(\"</a></span>]\").write(\"\\n                                    \");}function body_45(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                                    \").write(\"<textarea class=\\\"_nrama-note-content\\\" rows=\\\"1\\\">\").reference(ctx.get(\"content\"),ctx,\"h\").write(\"</textarea>\").write(\"\\n                                \");}function body_46(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n    \").write(\"<p>\").write(\"\\n        \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_47,\"block\":body_50},null).write(\"\\n        \").write(\"no notes\").write(\"\\n        \").exists(ctx.get(\"query_source\"),ctx,{\"else\":body_51,\"block\":body_56},null).write(\"\\n    \").write(\"</p>\").write(\"\\n\");}function body_47(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_48,\"block\":body_49},null).write(\"\\n        \");}function body_48(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"No one has\").write(\"\\n            \");}function body_49(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\" has no notes\").write(\"\\n            \");}function body_50(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"You have\").write(\"\\n        \");}function body_51(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").exists(ctx.get(\"query_tag\"),ctx,{\"else\":body_52,\"block\":body_55},null).write(\"\\n        \");}function body_52(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").exists(ctx.get(\"query_author\"),ctx,{\"else\":body_53,\"block\":body_54},null).write(\"\\n            \");}function body_53(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                    \").write(\"on this.\").write(\"\\n                \");}function body_54(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                    \").write(\"for author \").reference(ctx.get(\"query_author\"),ctx,\"h\").write(\"\\n                \");}function body_55(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"tagged with #\").reference(ctx.get(\"query_tag\"),ctx,\"h\").write(\"\\n            \");}function body_56(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"on this source\").write(\"\\n        \");}return body_0;})();(function(){dust.register(\"registration.html\",body_0);function body_0(chk,ctx){return chk.section(ctx.get(\"userCtx\"),ctx,{\"block\":body_1},null).write(\"\\n\");}function body_1(chk,ctx){return chk.write(\"\\n  \").write(\"<div id=\\\"registration\\\">\").write(\"\\n    \").write(\"\\n    \").write(\"<div class=\\\"column-container\\\" style=\\\"position:relative;\\\">\").write(\"\\n      \").write(\"<div class=\\\"left-column\\\"\").write(\"\\n           \").write(\"style=\\\"width: 375px\\\" >\").write(\"\\n        \").write(\"<div class=\\\"left-column-inner\\\"\").write(\"\\n             \").write(\"style=\\\"padding-right: 15px;\\\">\").write(\"\\n            \").write(\"<h2 >Get it</h2>\").write(\"\\n              \").write(\"<p>Step 1: \").write(\"\\n                \").notexists(ctx.get(\"name\"),ctx,{\"else\":body_2,\"block\":body_3},null).write(\"\\n                \").write(\"<br />\").write(\"\\n                \").write(\"<span \").exists(ctx.get(\"name\"),ctx,{\"block\":body_4},null).write(\">\").write(\"\\n                  \").write(\"(You don't need to sign up, but if you choose not to others may edit\").write(\"\\n                  \").write(\"or delete your notes.)\").write(\"\\n                \").write(\"<span>\").write(\"\\n              \").write(\"</p>\").write(\"\\n            \").write(\"\\n              \").write(\"<p>Step 2: drag the link below to the bookmark bar in your browser (or otherwise bookmark it).</p>\").write(\"\\n              \").write(\"\\n              \").write(\"<p style=\\\"text-align:center\\\">\").write(\"\\n                \").notexists(ctx.get(\"name\"),ctx,{\"else\":body_5,\"block\":body_6},null).write(\"\\n              \").write(\"</p>\").write(\"\\n            \").write(\"</div>\").write(\"\\n          \").write(\"</div>\").write(\"\\n        \").write(\"\\n        \").write(\"<div class=\\\"right-column\\\"\").write(\"\\n             \").write(\"style=\\\"position:absolute; right:0; top:0; width: 374px;\").write(\"\\n                    \").write(\"border-left: 1px solid #BBB;\").write(\"\\n                    \").exists(ctx.get(\"name\"),ctx,{\"block\":body_8},null).write(\"\\\">\").write(\"\\n            \").write(\"<div class=\\\"right-column-inner\\\"\").write(\"\\n                 \").write(\"style=\\\"padding-left: 25px\\\" >\").write(\"\\n                \").write(\"<h2 style=\\\"margin-top: 0;\\\">... or try it first</h2>\").write(\"\\n                \").write(\"<p>Click to\").write(\"\\n                    \").notexists(ctx.get(\"name\"),ctx,{\"else\":body_9,\"block\":body_10},null).write(\"\\n                \").write(\"</p>\").write(\"\\n                \").write(\"<ul class=\\\"instructions\\\" >\").write(\"\\n                    \").write(\"<li>Selecting text highlights it and adds it to\").write(\"\\n                        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").notexists(ctx.get(\"name\"),ctx,{\"else\":body_11,\"block\":body_12},null).write(\"\\\">\").write(\"\\n                            \").write(\"your quotes\").write(\"\\n                        \").write(\"</a>\").write(\"\\n                    \").write(\"</li>\").write(\"\\n                    \").write(\"<li>Clicking highlighted text adds a note to the page.\").write(\"\\n                    \").write(\"</li>\").write(\"\\n                    \").write(\"<li>You can\").write(\"\\n                        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").notexists(ctx.get(\"name\"),ctx,{\"else\":body_13,\"block\":body_14},null).write(\"\\\">\").write(\"\\n                            \").write(\"review your notes\").write(\"\\n                        \").write(\"</a>\").write(\"\\n                    \").write(\"</li>\").write(\"\\n                    \").write(\"<li>If you come back to this page, notes will\").write(\"\\n                        \").write(\"re-load when you\").write(\"\\n                        \").notexists(ctx.get(\"name\"),ctx,{\"else\":body_15,\"block\":body_16},null).write(\"\\n                    \").write(\"</li>\").write(\"\\n                \").write(\"</ul>\").write(\"\\n            \").write(\"</div>\").write(\"\\n        \").write(\"</div>\").write(\"\\n    \").write(\"</div>\").write(\"\\n  \").write(\"</div>\").write(\"\\n\");}function body_2(chk,ctx){return chk.write(\"\\n                  \").write(\"done! (welcome \").reference(ctx.get(\"name\"),ctx,\"h\").write(\")\").write(\"\\n                \");}function body_3(chk,ctx){return chk.write(\"\\n                  \").write(\"(optional)\").write(\"\\n                  \").write(\"<span class=\\\"signup\\\"><a href=\\\"#\\\">Sign up</a></span>\").write(\"\\n                  \").write(\"or\").write(\"\\n                  \").write(\"<span class=\\\"login\\\"><a href=\\\"#\\\">login</a></span>.\").write(\"\\n                \");}function body_4(chk,ctx){return chk.write(\"style=\\\"color:grey; text-decoration: line-through;\\\"\");}function body_5(chk,ctx){return chk.write(\"\\n                \").write(\"<a href=\\\"javascript:(function(){delete module;delete exports;_nrama_bkmklt=true;_nrama_user='\").reference(ctx.get(\"name\"),ctx,\"h\").write(\"';document.body.appendChild(document.createElement('script')).src='http://localhost:5984/nrama/_design/nrama/bkmrklt/nrama2.js?now=new Date().getTime()'; })();\\\">\").write(\"\\n                  \").write(\"!Note-o-rama Bookmarklet -- \").reference(ctx.get(\"name\"),ctx,\"h\").write(\"\\n                \").write(\"</a>\").write(\"\\n                \");}function body_6(chk,ctx){return chk.write(\"\\n                \").write(\"<a href=\\\"javascript:(function(){delete module;delete exports;_nrama_bkmklt=true;\").exists(ctx.get(\"anon_user_name\"),ctx,{\"block\":body_7},null).write(\"document.body.appendChild(document.createElement('script')).src='http://localhost:5984/nrama/_design/nrama/bkmrklt/nrama2.js?now=new Date().getTime()'; })();\\\">\").write(\"\\n                  \").write(\"!Note-o-rama Bookmarklet -- Anon. User \").reference(ctx.get(\"anon_user_name\"),ctx,\"h\").write(\"\\n                \").write(\"</a>\").write(\"\\n                \");}function body_7(chk,ctx){return chk.write(\"_nrama_user='\").reference(ctx.get(\"anon_user_name\"),ctx,\"h\").write(\"';\");}function body_8(chk,ctx){return chk.write(\"color:grey; text-decoration: line-through;\");}function body_9(chk,ctx){return chk.write(\"\\n                        \").write(\"enable note-o-rama for this page.\").write(\"\\n                    \");}function body_10(chk,ctx){return chk.write(\"\\n                    \").write(\"<a href=\\\"javascript:(function(){delete module;delete exports;_nrama_bkmklt=true;_nrama_user='*tryit';document.body.appendChild(document.createElement('script')).src='http://localhost:5984/nrama/_design/nrama/bkmrklt/nrama2.js?now=new Date().getTime()'; })();\\\">\").write(\"\\n                        \").write(\"enable note-o-rama for this page.\").write(\"\\n                    \").write(\"</a>\").write(\"\\n                    \");}function body_11(chk,ctx){return chk.reference(ctx.get(\"name\"),ctx,\"h\",[\"uc\"]);}function body_12(chk,ctx){return chk.write(\"*tryit\");}function body_13(chk,ctx){return chk.reference(ctx.get(\"name\"),ctx,\"h\",[\"uc\"]);}function body_14(chk,ctx){return chk.write(\"*tryit\");}function body_15(chk,ctx){return chk.write(\"\\n                          \").write(\"enable note-o-rama.\").write(\"\\n                        \");}function body_16(chk,ctx){return chk.write(\"\\n                          \").write(\"<a href=\\\"javascript:(function(){delete module;delete exports;_nrama_bkmklt=true;_nrama_user='*tryit';document.body.appendChild(document.createElement('script')).src='http://localhost:5984/nrama/_design/nrama/bkmrklt/nrama2.js?now=new Date().getTime()'; })();\\\">\").write(\"\\n                              \").write(\"enable note-o-rama</a>.\").write(\"\\n                        \");}return body_0;})();(function(){dust.register(\"session.html\",body_0);function body_0(chk,ctx){return chk.section(ctx.get(\"userCtx\"),ctx,{\"block\":body_1},null).write(\"\\n\");}function body_1(chk,ctx){return chk.write(\"\\n  \").write(\"<div id=\\\"session\\\" class=\\\"\").exists(ctx.get(\"name\"),ctx,{\"else\":body_2,\"block\":body_3},null).write(\"\\\">\").write(\"\\n    \").write(\"<span class=\\\"username\\\"><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.get(\"name\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.get(\"name\"),ctx,\"h\").write(\"</a></span>\").write(\"\\n    \").write(\"<ul class=\\\"actions\\\">\").write(\"\\n      \").write(\"<li class=\\\"logout\\\"><a href=\\\"#\\\">Logout</a></li>\").write(\"\\n      \").write(\"<li class=\\\"signup\\\"><a href=\\\"#\\\">Signup</a></li>\").write(\"\\n      \").write(\"<li class=\\\"login\\\"><a href=\\\"#\\\">Login</a></li>\").write(\"\\n    \").write(\"</ul>\").write(\"\\n  \").write(\"</div>\").write(\"\\n\");}function body_2(chk,ctx){return chk.write(\"loggedout\");}function body_3(chk,ctx){return chk.write(\"loggedin\");}return body_0;})();(function(){dust.register(\"sources.html\",body_0);var blocks={what:body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.partial(\"user_header.html\",ctx).write(\"\\n\").write(\"\\n\").write(\"<div class=\\\"navigation\\\">\").write(\"\\n    \").write(\"--\").write(\"\\n    \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_2},null).write(\"\\n    \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_5},null).write(\"\\n\").write(\"</div>\").write(\"\\n\").write(\"\\n\").write(\"\\n\").write(\"\\n\").write(\"<ul class=\\\"sources\\\">\").write(\"\\n    \").section(ctx.get(\"sources\"),ctx,{\"block\":body_8},null).write(\"\\n\").write(\"</ul>\").write(\"\\n\").notexists(ctx.get(\"sources\"),ctx,{\"block\":body_12},null).write(\"\\n\").write(\"\\n\").write(\"\\n\");}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.reference(ctx.getPath(false,[\"sources\",\"length\"]),ctx,\"h\").write(\" sources\");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.get(\"query_user\"),ctx,{\"block\":body_3},null).write(\"\\n    \");}function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"see \").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/authors\\\">\").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\"'s authors</a> or\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/tags\\\">tags</a>\").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_4},null).write(\"\\n        \");}function body_4(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"; <br />-- \");}function body_5(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").write(\"go to\").write(\"\\n        \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_6},null).write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/authors\\\">\").exists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_7},null).write(\"authors</a> or\").write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/tags\\\">tags</a>\").write(\"\\n    \");}function body_6(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/sources\\\">your sources</a>,\").write(\"\\n        \");}function body_7(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"your \");}function body_8(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").write(\"<li class=\\\"source\\\">\").write(\"\\n            \").write(\"<div class=\\\"title-line\\\">\").write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.get(\"user_id\"),ctx,\"h\",[\"uc\"]).write(\"/sources/\").reference(ctx.get(\"page_id\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.get(\"TITLE\"),ctx,\"h\").notexists(ctx.get(\"TITLE\"),ctx,{\"block\":body_9},null).write(\"</a>\").write(\"\\n                \").write(\"\\n                \").exists(ctx.get(\"YEAR\"),ctx,{\"block\":body_11},null).write(\"\\n                \").write(\"\\n                \").write(\"\\n            \").write(\"</div>\").write(\"\\n            \").write(\"<div class=\\\"citation\\\">\").partial(\"bibliographic_details.html\",ctx).write(\"</div>\").write(\"\\n        \").write(\"</li>\").write(\"\\n    \");}function body_9(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.reference(ctx.get(\"page_title\"),ctx,\"h\").notexists(ctx.get(\"page_title\"),ctx,{\"block\":body_10},null);}function body_10(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"untitled\");}function body_11(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"(<span class=\\\"year\\\">\").reference(ctx.get(\"YEAR\"),ctx,\"h\").write(\"</span>)\");}function body_12(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n    \").write(\"<p>\").write(\"\\n        \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_13,\"block\":body_14},null).write(\"\\n        \").write(\"sources\").write(\"\\n        \").exists(ctx.get(\"query_author\"),ctx,{\"block\":body_15},null).write(\"\\n    \").write(\"</p>\").write(\"\\n\");}function body_13(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"No one has \").write(\"\\n        \");}function body_14(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\" has no \").write(\"\\n        \");}function body_15(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"by \").reference(ctx.get(\"query_author\"),ctx,\"h\").write(\"\\n        \");}return body_0;})();(function(){dust.register(\"tags.html\",body_0);var blocks={what:body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.partial(\"user_header.html\",ctx).write(\"\\n\").write(\"\\n\").write(\"<div class=\\\"navigation\\\">\").write(\"\\n    \").write(\"--\").write(\"\\n    \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_2},null).write(\"\\n    \").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_5},null).write(\"\\n\").write(\"</div>\").write(\"\\n\").write(\"\\n\").write(\"<div style=\\\"position:relative;\\\">\").write(\"\\n    \").write(\"<div style=\\\"margin-right: 551px\\\">\").write(\"\\n        \").write(\"<ul class='tags-list' >\").write(\"\\n            \").section(ctx.get(\"tags\"),ctx,{\"block\":body_8},null).write(\"\\n        \").write(\"</ul>\").write(\"\\n    \").write(\"</div>\").write(\"\\n    \").write(\"<div class='tags-cloud' id=\\\"tag_cloud\\\"\").write(\"\\n         \").write(\"style=\\\"position:absolute; right:0; top:0; width: 550px; height: 350px;\\\">\").write(\"\\n    \").write(\"</div>\").write(\"\\n\").write(\"</div>\").write(\"\\n\").write(\"\\n\").partial(\"footer_event.html\",ctx);}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"tags\");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").exists(ctx.get(\"query_user\"),ctx,{\"block\":body_3},null).write(\"\\n    \");}function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"see \").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/sources\\\">\").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\"'s sources</a> or\").write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/authors\\\">authors</a>\").exists(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,{\"block\":body_4},null).write(\"\\n        \");}function body_4(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"; <br />-- \");}function body_5(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n        \").write(\"go to \").write(\"\\n        \").notexists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_6},null).write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/sources\\\">\").exists(ctx.get(\"is_users_own_page\"),ctx,{\"block\":body_7},null).write(\"sources</a> or\").write(\"\\n        \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/authors\\\">authors</a>\").write(\"\\n    \");}function body_6(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"/tags\\\">your tags</a>,\").write(\"\\n        \");}function body_7(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"your \");}function body_8(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(\"\\n                \").write(\"<li class=\\\"tag\\\"><a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"/tags/\").reference(ctx.get(\"text\"),ctx,\"h\",[\"uc\"]).write(\"\\\">\").reference(ctx.get(\"text\"),ctx,\"h\").write(\"</a></li>\").write(\"\\n            \");}return body_0;})();(function(){dust.register(\"user_header.html\",body_0);function body_0(chk,ctx){return chk.write(\"<h2 class=\\\"user-line\\\">\").write(\"\\n    \").write(\"<span class=\\\"user-name\\\">\").write(\"\\n        \").exists(ctx.get(\"is_users_own_page\"),ctx,{\"else\":body_1,\"block\":body_4},null).write(\"\\n    \").write(\"</span>\").write(\"\\n    \").block(ctx.getBlock(\"what\"),ctx,{\"block\":body_5},null).write(\"\\n\").write(\"</h2>\").write(\"\\n\");}function body_1(chk,ctx){return chk.write(\"\\n            \").exists(ctx.get(\"query_user\"),ctx,{\"else\":body_2,\"block\":body_3},null).write(\"\\n        \");}function body_2(chk,ctx){return chk.write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/sources\\\">Everyone</a>'s\").write(\"\\n            \");}function body_3(chk,ctx){return chk.write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"\\\">\").reference(ctx.get(\"query_user\"),ctx,\"h\").write(\"</a>'s\").write(\"\\n            \");}function body_4(chk,ctx){return chk.write(\"\\n            \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").reference(ctx.get(\"query_user_url\"),ctx,\"h\").write(\"\\\">Your</a>\").write(\"\\n        \");}function body_5(chk,ctx){return chk.write(\"\\n        \").write(\"things\").write(\"\\n    \");}return body_0;})();(function(){dust.register(\"welcome.html\",body_0);function body_0(chk,ctx){return chk.write(\"<h1 style=\\\"margin-bottom:0;\\\">Note-o-rama</h1>\").write(\"\\n\").write(\"\\n\").write(\"<div class=\\\"instructions\\\">\").write(\"\\n    \").write(\"<p style=\\\"margin-top:0;\\\">Add notes and highlights to any web page.\").write(\"\\n        \").write(\"<br />Organise and review your notes by source, author and #tag.\").write(\"\\n    \").write(\"<p>\").write(\"\\n    \").write(\"\\n    \").write(\"<div>\").write(\"\\n        \").write(\"<img src=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/static/img/nrama_demo.png\\\"\").write(\"\\n             \").write(\"style=\\\"display: block; margin-left: auto; margin-right: auto;\\\" />\").write(\"\\n        \").write(\"<p style=\\\"text-align: center\\\">\").write(\"\\n            \").write(\"<i>Figure</i>.\").write(\"\\n            \").write(\"Left panel: annotate any web page.\").write(\"\\n            \").write(\"Right panel: organise your notes.\").write(\"\\n        \").write(\"</p>\").write(\"\\n    \").write(\"</div>\").write(\"\\n    \").write(\"\\n    \").write(\"\\n    \").write(\"\\n    \").partial(\"registration.html\",ctx).write(\"\\n            \").write(\"\\n    \").write(\"\\n    \").write(\"<h2>How to use it</h2>\").write(\"\\n    \").write(\"<p>You can use Note-o-rama on any page you visit.</p>\").write(\"\\n    \").write(\"<p>When browsing a page, hit the bookmark you just made (step 2 above) to start making notes.\").write(\"\\n    \").write(\"(This bookmark won't take you to another page, it just injects some code.)\").write(\"\\n    \").write(\"\\n    \").write(\"<p>\").write(\"\\n        \").section(ctx.get(\"userCtx\"),ctx,{\"block\":body_1},null).write(\"\\n    \").write(\"</p>\").write(\"\\n\").write(\"\\n    \").write(\"<hr />\").write(\"\\n    \").write(\"\\n    \").write(\"<h2>Problems?</h2>\").write(\"\\n    \").write(\"<p>\").write(\"\\n        \").write(\"Note-o-rama should work in recent versions of Firefox, Chrome and Safari.\").write(\"\\n        \").write(\"<br />\").write(\"\\n        \").write(\"We don't promise that it will work in older browsers or Internet Explorer. <i>Tant pis</i>.\").write(\"\\n        \").write(\"<br />\").write(\"\\n    \").write(\"</p><p>\").write(\"\\n        \").write(\"If it doesn't work, you may need to set your browser to accept cookies\").write(\"\\n        \").write(\"from all websites (sorry).\").write(\"\\n    \").write(\"</p><p>\").write(\"\\n        \").write(\"Issues <a href=\\\"https://github.com/butterfill/note-o-rama/issues\\\">may be reported here</a>.\").write(\"\\n    \").write(\"</p>\").write(\"\\n    \").write(\"\\n        \").write(\"\\n    \").write(\"<h2>Pro tips</h2>\").write(\"\\n    \").write(\"<ul class=\\\"instructions\\\" >\").write(\"\\n        \").write(\"<li>Move notes by dragging any edge.</li>\").write(\"\\n        \").write(\"<li>alt- or meta- click a quote to delete it.</li>\").write(\"\\n        \").write(\"<li>Use #tags in notes (***LINK your tags).</li>\").write(\"\\n        \").write(\"<li>Paste a bibtex entry into a note to organise by author (***LINK your authors).</li>\").write(\"\\n    \").write(\"</ul>\").write(\"\\n    \").write(\"\\n    \").write(\"<hr />\").write(\"\\n\").write(\"\\n    \").write(\"<h2>About</h2>\").write(\"\\n    \").write(\"<p>Note-o-rama is copyright (c) 2007-11 Stephen A. Butterfill.\").write(\"\\n        \").write(\"<a href=\\\"https://github.com/butterfill/note-o-rama\\\" target=\\\"_blank\\\">Source code is publicly availble.</a>\").write(\"\\n    \").write(\"</p>\").write(\"\\n\").write(\"</div>\").write(\"\\n\");}function body_1(chk,ctx){return chk.write(\"\\n            \").write(\"To see all your notes\").notexists(ctx.get(\"name\"),ctx,{\"block\":body_2},null).write(\",\").write(\"\\n            \").write(\"click your user name on the top right of this page\").exists(ctx.get(\"name\"),ctx,{\"block\":body_3},null).write(\".\").write(\"\\n        \");}function body_2(chk,ctx){return chk.write(\" sign up or log in, then\");}function body_3(chk,ctx){return chk.write(\"\\n                \").write(\"<a href=\\\"\").reference(ctx.get(\"baseURL\"),ctx,\"h\").write(\"/users/\").reference(ctx.getPath(false,[\"userCtx\",\"name\"]),ctx,\"h\",[\"uc\"]).write(\"\\\">\").write(\"\\n                    \").write(\"or here</a>\");}return body_0;})();\n}(dust_module, dust_module.exports));\nvar dust = dust_module.exports;\n/*global dust: true, log: false */\n\n/**\n * CAUTION WHEN EDITING THIS FILE!\n *\n * The rest of this  module is automatically generated by kanso when the app\n * is pushed to the database.\n *\n * This is to work around the fact that dust templates store state\n * on the module itself but couchdb doesn't yet provide a module cache,\n * meaning state does not persist between each require(). The workaround\n * involves writing all templates directly into the module, so they are added on\n * each require.\n *\n * TODO: When a module cache is implemented in CouchDB, stop this module from\n * being auto-generated, see: https://issues.apache.org/jira/browse/COUCHDB-890\n *\n * For the code that generates the rest of this file, see: lib/templates.js\n */\n\n/**\n * Kanso uses Dust templates for rendering pages.\n * To learn more about the syntax, see the\n * <a href=\"http://akdubya.github.com/dustjs/\">Dust site</a>.\n *\n * Since Dust stores compiled templates on the module itself, the\n * templates module does some interesting things to work around the lack\n * of a module cache in CouchDB. Because of this, compiled templates are\n * automatically added to this module from your templates folder each time\n * your app is pushed to CouchDB. You can see a list of the loaded template\n * names on the 'loaded' property of this module.\n *\n * @module\n */\n\n\n/**\n * Module dependencies\n */\n\nvar utils = require('./utils'),\n    flashmessages = require('./flashmessages');\n\n\n/**\n * Synchronously render dust template and return result, automatically adding\n * baseURL to the template's context. The request object is required so we\n * can determine the value of baseURL.\n *\n * @name render(name, req, context)\n * @param {String} name\n * @param {Object} req\n * @param {Object} context\n * @returns {String}\n * @api public\n */\n\nexports.render = function (name, req, context) {\n    context.baseURL = utils.getBaseURL(req);\n    context.isBrowser = utils.isBrowser();\n    context.userCtx = req.userCtx;\n    if (!context.flashMessages) {\n        context.flashMessages = flashmessages.getMessages(req);\n    }\n    var r = '';\n    dust.render(name, context, function (err, result) {\n        if (err) {\n            throw err;\n        }\n        r = result;\n    });\n    return r;\n};\n\n\n/**\n * Exports the names of all templates loaded into the dust cache\n */\n\nexports.loaded = [];\nfor (var k in dust.cache) {\n    if (dust.cache.hasOwnProperty(k)) {\n        exports.loaded.push(k);\n    }\n}\n",
        "actions": "/*global $: false, kanso: true*/\n\nvar utils = require('./utils');\n\n/**\n * Implementation of widget actions. These are procedures\n * that can be referenced by widgets to present/collect information,\n * manipulate the DOM, or otherwise affect the application state\n * when a widget is acted upon.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar widgets = require('./widgets'),\n    sanitize = require('./sanitize'),\n    _ = require('./underscore')._;\n\nvar h = sanitize.escapeHtml;\n\n/**\n * Create a closure that loads {module}, and invokes {method}\n * on it. The {options} parameter is prepenced to the method's\n * argument list. This separate function silences a lint warning.\n * See the parse method for details.\n */\nexports.make_action_handler = function (module, method, options) {\n    return function () {\n        var args = [ options ].concat(\n            Array.prototype.slice.apply(arguments)\n        );\n        return require(module)[method].apply(null, args);\n    };\n};\n\n/**\n * Convert an object containing several [ module, callback ] or\n * { module: x, callback: y } items in to an object containing\n * several native javascript functions, by using require.\n *\n * @param actions An object, containing items describing a\n *          function that can be obtained via require().\n */\nexports.parse = function (actions) {\n    var rv = {};\n    for (var k in actions) {\n        var module, callback, options;\n        var action = actions[k];\n        if (action === false) {\n            rv[k] = utils.emptyFunction;\n        } else {\n            if (_.isArray(action)) {\n                module = action[0];\n                callback = action[1];\n                options = action[2];\n            } else if (_.isFunction(action)) {\n                rv[k] = action;\n                continue;\n            } else if (typeof(action) === 'object') {\n                module = action.module;\n                callback = action.callback;\n                options = action.options;\n            } else {\n                throw new Error(\n                    'Action `' + k + '` is `' + typeof(action) + '`, ' +\n                        \"which this function doesn't know how to interpret\"\n                );\n            }\n            /* Resolve function description to actual function */\n            rv[k] = exports.make_action_handler(module, callback, options);\n        }\n    }\n    return rv;\n};\n\n/**\n * An action that produces a modal dialog box, with buttons along\n * its bottom. The contents of the dialog can be controlled by\n * setting either options.widget or options.type. If both are\n * specified, the widget will be used. If only type is specified,\n * this function transparently instansiates an embedForm widget,\n * which does the actual form rendering and presentation.\n */\n\nexports.modalDialog = function (action_options, action_name,\n                                type_name, field, path, value,\n                                raw, errors, options, callback) {\n    options = (options || {});\n    action_options = (action_options || {});\n\n    var widget = action_options.widget;\n    var name = sanitize.generateDomName(path);\n    var path_extra = (options.path_extra || []).concat([ 'modal' ]);\n    var operation = 'update';\n    if (action_name !== 'edit') {\n        operation = action_name;\n    }\n    var widget_options = {\n        path_extra: path_extra,\n        operation: operation\n    };\n\n    /* Resolve widget */\n    if (!widget && action_options.type) {\n        widget = widgets.embedForm(\n            _.defaults(action_options.options || {}, {\n                type: action_options.type\n            })\n        );\n    }\n\n    if (!widget) {\n        throw new Error(\n            'modalDialog: Unable to determine the widget to' +\n            ' use for the field named `' + path.join('.') + '`;' +\n            ' widget or field type was not correctly specified'\n        );\n    }\n\n    /* Dialog setup and event handling:\n        This is wrapped in a closure to allow it to easily be\n        used inside both synchronous and asynchronous functions. */\n\n    var generateModalDialog = function () {\n\n        /* Generate strings for content */\n        var cancel_label = 'Cancel';\n        var type_label = utils.titleize(type_name);\n        var action_label = utils.titleize(action_name);\n\n        /* Generate inner elements */\n        var title_elt = $(\n            '<h2>' + [ action_label, type_label ].join(' ') + '</h2>'\n        );\n        var ok_elt = $(\n            '<input type=\"submit\" value=\"' + h(action_label) + '\" />'\n        );\n        var cancel_elt = $(\n            '<input type=\"button\" value=\"' + h(cancel_label) + '\" />'\n        );\n        var actions_elt = $(\n            '<div class=\"actions\" />'\n        );\n\n        /* Create widget's parent element */\n        var div = $('<div />');\n\n        /* Add dialog title */\n        div.append(title_elt);\n\n        /* Draw widget */\n        div.append(\n            widget.toHTML(\n                name, value, raw, field, widget_options\n            )\n        );\n\n        /* Find the form element:\n            This is created by the call to widget.toHTML, above. */\n\n        var form_elt = div.closestChild('form');\n\n        if (form_elt.length <= 0) {\n\n            /* No form element found?\n                Generate one and wrap the contents of the dialog with it.\n                This provides support for widgets other than embedForm. */\n\n            var wrapper_elt = $('<div />');\n            form_elt = $('<form />');\n            form_elt.append(div);\n            wrapper_elt.append(form_elt);\n            div = wrapper_elt;\n        }\n\n        /* Handle success */\n        ok_elt.click(function (ev) {\n\n            /* Validate widget:\n                This usually defers to a form type's implementation.\n                Most simple widgets just return true for this method. */\n\n            errors = widget.validate(div, path, widget_options);\n\n            if (errors.length > 0) {\n\n                /* Repost dialog box:\n                    This will replace the current dialog box.\n                    The modal dialog returns to the event loop before\n                    actually removing its elements, so we do the same. */\n\n                $.modal.close();\n\n                setTimeout(function () {\n                    exports.modalDialog(\n                        action_options, action_name, type_name, field,\n                            path, value, raw, errors, options, callback\n                    );\n                }, 0);\n\n            } else {\n\n                /* Close the dialog box:\n                    Again, note that the dialog box won't actually disappear\n                    until we've unwound and returned to the main event\n                    loop. If you depend upon closure, use setTimeout(). */\n\n                callback(\n                    true, widget.getValue(div, path, widget_options)\n                );\n\n                /* Order matters:\n                    The callback may refer to elements inside of the modal\n                    dialog, so don't destroy it until after it returns, and\n                    has had a chance to register any callbacks / timeouts. */\n\n                $.modal.close();\n            }\n\n            ev.preventDefault();\n        });\n\n        /* Handle failure */\n        cancel_elt.click(function () {\n            callback(\n                false, widget.getValue(div, path, widget_options)\n            );\n            $.modal.close();\n        });\n\n        /* Make default form action 'ok' */\n        form_elt.submit(function (ev) {\n            ev.preventDefault();\n            ok_elt.click();\n            return false;\n        });\n\n        /* Insert dialog-managed elements */\n        actions_elt.append(ok_elt);\n        actions_elt.append(cancel_elt);\n        form_elt.append(actions_elt);\n\n        /* Launch dialog */\n        div.modal();\n\n        /* Initialize widget:\n            We do this last -- this makes sure all elements are present\n            and initialized prior to client-side widget initialization. */\n\n        widget.clientInit(\n            field, path, value, raw, errors, widget_options\n        );\n    };\n\n    return generateModalDialog();\n};\n\n",
        "cookies": "/*global escape: false */\n\n/**\n * Functions related to the manipulation and reading of cookies.\n *\n * @module\n */\n\nvar utils = require('./utils');\n\n\n/**\n * Read cookies currently stored in the browser, returning an object\n * keyed by cookie name.\n *\n * @name readBrowserCookies()\n * @returns Object\n * @api public\n */\n\nexports.readBrowserCookies = function () {\n    if (!utils.isBrowser()) {\n        throw new Error('readBrowserCookies cannot be called server-side');\n    }\n    var cookies = {};\n    var parts = document.cookie.split(';');\n    for (var i = 0, len = parts.length; i < len; i++) {\n        var name = parts[i].split('=')[0];\n        var value = parts[i].split('=').slice(1).join('=');\n        cookies[name] = value;\n    }\n    return cookies;\n};\n\n/**\n * Reads browser cookies and returned the value of the named cookie.\n *\n * @name readBrowserCookie(name)\n * @returns {String}\n * @api public\n */\n\nexports.readBrowserCookie = function (name) {\n    return exports.readBrowserCookies()[name];\n};\n\n/**\n * Creates a string for storing a cookie on the browser.\n *\n * @name cookieString(req, opt)\n * @param {Request Object} req\n * @param {Object} opt\n * @returns {String}\n * @api public\n */\n\nexports.cookieString = function (req, opt) {\n    var path = opt.path || utils.getBaseURL(req) + '/';\n    var str = escape(opt.name) + '=' + escape(opt.value) + '; path=' + path;\n    if (opt.days) {\n        var expires = new Date().setTime(\n            new Date().getTime() + 1000 * 60 * 60 * 24 * opt.days\n        );\n        str += '; expires=' + expires.toGMTString();\n    }\n    return str;\n};\n\n/**\n * Sets a cookie on the browser, for use client-side only.\n *\n * @name setBrowserCookie(req, opt)\n * @param {Request Object} req\n * @param {Object} opt\n * @api public\n */\n\nexports.setBrowserCookie = function (req, opt) {\n    if (!utils.isBrowser()) {\n        throw new Error('setBrowserCookie cannot be called server-side');\n    }\n    var str = (typeof opt === 'string') ? opt: exports.cookieString(req, opt);\n    //console.log('document.cookie = ' + str);\n    document.cookie = str;\n};\n\n/**\n * Creates a Set-Cookie header on a response object.\n *\n * @name setResponseCookie(req, res, opt)\n * @param {Request Object} req\n * @param {Response Object} res\n * @param {Object} opt\n * @api public\n */\n\nexports.setResponseCookie = function (req, res, opt) {\n    var str = (typeof opt === 'string') ? opt: exports.cookieString(req, opt);\n    if (typeof res !== 'object') {\n        res = {code: 200, body: res};\n    }\n    if (!res.headers) {\n        res.headers = {};\n    }\n    // TODO: is it possible to send multiple set-cookie headers by turning\n    // headers into an array like in node?\n    // XXX: just replacing all cookies for now - not ideal!\n    res.headers['Set-Cookie'] = str;\n};\n",
        "core": "/*global window: false, getRow: true, start: true, $: false, pageTracker: true,\n  kanso: true, log: true, console: true, send: true */\n\n/**\n * The core module contains functions used by kanso to facilitate the running\n * of your app. You shouldn't need to use any of the functions here directly\n * unless you're messing with the internals of Kanso.\n *\n * @module\n */\n\n\n/**\n * Module dependencies\n */\n\nvar settings = require('./settings'), // module auto-generated\n    url = require('./url'),\n    db = require('./db'),\n    utils = require('./utils'),\n    session = require('./session'),\n    cookies = require('./cookies'),\n    flashmessages = require('./flashmessages'),\n    templates = require('./templates'),\n    events = require('./events'),\n    urlParse = url.parse,\n    urlFormat = url.format,\n    _ = require('./underscore')._;\n\n\n/**\n * This is because the first page hit also triggers kanso to handle the url\n * client-side. Knowing it is the first page being loaded means we can stop\n * the pageTracker code from submitting the URL twice. Exported because this\n * might be useful information to other modules, it should not be modified\n * by them.\n */\n\n//exports.initial_hit = utils.initial_hit;\n\n\n/**\n * This variable keeps track of whether or not the browser supports\n * pushstate for manipulating browser history.\n */\n\nexports.history_support = false;\n\n/**\n * Stores the current html5 history state to detect duplicate popstate events\n */\n\nexports.current_state = null;\n\n/**\n * Set to true when setURL is called so the onpopstate which fires afterwards\n * knows it is the result of an explicit call to setURL (as opposed to clicking\n * the back, forward or reload buttons). This means we can avoid showing a\n * confirmation dialog for POST requests in these circumstances.\n */\n\nexports.set_called = false;\n\n\nif (typeof window !== 'undefined') {\n    if (!window.console) {\n        // console.log is going to cause errors, just stub the functions\n        // for now. TODO: add logging utility for IE?\n        window.console = {\n            log: function () {},\n            error: function () {},\n            info: function () {},\n            warn: function () {}\n        };\n    }\n    var console = window.console;\n}\n\n\n/**\n * Global functions required to match the CouchDB JavaScript environment.\n */\n\nif (typeof getRow === 'undefined' && typeof window !== 'undefined') {\n    window.getRow = function () {\n        return null;\n    };\n}\nif (typeof start === 'undefined' && typeof window !== 'undefined') {\n    window.start = function (options) {\n        //console.log('start');\n        //console.log(options);\n    };\n}\nif (typeof send === 'undefined' && typeof window !== 'undefined') {\n    window.send = function (options) {\n        //console.log('send');\n        //console.log(options);\n    };\n}\nif (typeof log === 'undefined' && typeof window !== 'undefined') {\n    window.log = function () {\n        return console.log.apply(console, arguments);\n    };\n}\n\n\n/**\n * Used to store userCtx, periodically updated like on session.login and\n * session.logout. TODO: Or if a permissions error is returned from a db method?\n */\n\n// TODO: added to utils to avoid circular dependency bug in couchdb\n//exports.userCtx = utils.userCtx;\n\n\n\n\n/**\n * The module loaded as the design document (load property in kanso.json).\n * Likely to cause circular require in couchdb so only run browser side.\n * TODO: when circular requires are fixed in couchdb, remove the isBrowser check\n */\n\nif (utils.isBrowser) {\n    exports.app = {};\n    if (settings.load) {\n        exports.app = require(settings.load);\n    }\n}\n\n\n/**\n * Called by kanso.js once the design doc has been loaded.\n */\n\nexports.init = function () {\n\n    if (window.history && history.pushState) {\n        exports.history_support = true;\n\n        $('form').live('submit', function (ev) {\n            var action = $(this).attr('action') || exports.getURL();\n            var method = $(this).attr('method').toUpperCase();\n\n            // _session is a special case always available at the root url\n            if (action !== '/_session' && exports.isAppURL(action)) {\n                var url = exports.appPath(action);\n                ev.preventDefault();\n                var fields = $(this).serializeArray();\n                var data = {};\n                for (var i = 0; i < fields.length; i++) {\n                    data[fields[i].name] = fields[i].value;\n                }\n                exports.setURL(method, url, data);\n            }\n        });\n\n        $('a').live('click', function (ev) {\n            var href = $(this).attr('href');\n\n            if (href && exports.isAppURL(href)) {\n                var url = exports.appPath(href);\n                ev.preventDefault();\n                exports.setURL('GET', url, {});\n            }\n        });\n\n        window.onpopstate = function (ev) {\n            var url = exports.getURL();\n            var state = ev.state || {};\n            var method = state.method || 'GET';\n            var data = state.data;\n            var count = state.history_count;\n\n            if (method !== 'GET' && method !== 'HEAD') {\n                // unsafe method, unless caused by an explicit call to setURL\n                // show a confirmation dialog\n                if (!exports.set_called) {\n                    // TODO: at this point is it too late to undo the popstate?\n                    var resend = confirm(\n                        'In order to complete this request the browser will ' +\n                        'have to re-send information, repeating any ' +\n                        'previous action (such as creating a document).\\n\\n' +\n                        'Re-send information?'\n                    );\n                    if (!resend) {\n                        var curr_count = exports.current_state.history_count;\n                        window.history.go(curr_count - count);\n                        return;\n                    }\n                }\n            }\n            // reset set_called\n            exports.set_called = false;\n\n            var curr = exports.current_state;\n            if (curr &&\n                curr.url === url &&\n                curr.timestamp === state.timestamp &&\n                (curr.method || 'GET') === (state.method || 'GET')) {\n                // duplicate popstate event\n                // console.log('duplicate popstate event');\n                return;\n            }\n            exports.current_state = {\n                method: method,\n                url: url,\n                data: data,\n                timestamp: state.timestamp,\n                history_count: count\n            };\n            exports.handle(method, url, data);\n        };\n        window.onpopstate({});\n    }\n    else {\n        // This browser has no html5  history support, attempt to\n        // enhance the page anyway\n        // TODO: figure out the data from the initial request as this\n        // re-rendering might wipe relevant data from the response\n        // TODO: figure out the method from the initial request\n        // because the initial request may have been a POST (pointing to\n        // an update function instead of the show this GET might render)\n        //\n        // - perhaps use cookies to pass the method and data back to the client?\n        //\n        exports.handle('GET', exports.getURL(), {});\n    }\n\n    // TODO: should this be after userCtx is available??\n    // call init on app too\n    events.emit('init');\n};\n\n\n/**\n * Extracts groups from a url, eg:\n * '/some/path' with pattern '/some/:name' -> {name: 'path'}\n *\n * @name rewriteGroups(pattern, url)\n * @param {String} pattern\n * @param {String} url\n * @returns {Object}\n * @api public\n */\n\nexports.rewriteGroups = function (pattern, url) {\n    var pathname = urlParse(url).pathname;\n    var re = new RegExp(\n        '^' + pattern.replace(/:\\w+/g, '([^/]+)').replace(/\\*/g, '.*') + '$'\n    );\n    var m = re.exec(pathname);\n    if (!m) {\n        return [];\n    }\n    var values = m.slice(1);\n    var keys = [];\n    var matches = pattern.match(/:\\w+/g) || [];\n    for (var i = 0; i < matches.length; i++) {\n        keys.push(matches[i].substr(1));\n    }\n    var groups = {};\n    for (var j = 0; j < keys.length; j++) {\n        groups[keys[j]] = values[j];\n    }\n    return groups;\n};\n\n/**\n * Extracts a splat value from a rewrite pattern and matching URL.\n *\n * @name rewriteSplat(pattern, url)\n * @param {String} pattern\n * @param {String} url\n * @returns {String}\n * @api public\n */\n\nexports.rewriteSplat = function (pattern, url) {\n    // splats are only supported at the end of a rewrite pattern\n    if (pattern.charAt(pattern.length - 1) === '*') {\n        var re = new RegExp(pattern.substr(0, pattern.length - 1) + '(.*)');\n        var match = re.exec(url);\n        if (match) {\n            return match[1];\n        }\n    }\n};\n\n\n/**\n * Attempts to match rewrite from patterns to a URL, returning the\n * matching rewrite object if successful.\n *\n * @name matchURL(method, url)\n * @param {String} method\n * @param {String} url\n * @returns {Object}\n * @api public\n */\n\nexports.matchURL = function (method, url) {\n    var pathname = urlParse(url).pathname;\n    var rewrites = kanso.app.rewrites;\n    for (var i = 0; i < rewrites.length; i++) {\n        var r = rewrites[i];\n        if (!r.method || method === r.method) {\n            var from = r.from;\n            from = from.replace(/\\*$/, '(.*)');\n            from = from.replace(/:\\w+/g, '([^/]+)');\n            var re = new RegExp('^' + from + '$');\n            if (re.test(pathname)) {\n                return r;\n            }\n        }\n    }\n};\n\n/**\n * Replace group names in a string with the value of that group\n * eg: \"/:name\" with groups {name: 'test'} -> \"/test\"\n *\n * @name replaceGroups(val, groups, splat)\n * @param {String} val\n * @param {Object} groups\n * @param {String} splat\n * @returns {String}\n * @api public\n */\n\nexports.replaceGroups = function (val, groups, splat) {\n    var k, match, result = val;\n\n    if (typeof val === 'string') {\n        result = val.split('/');\n        for (var i = 0; i < result.length; i++) {\n            match = false;\n            for (k in groups) {\n                if (result[i] === ':' + k) {\n                    result[i] = decodeURIComponent(groups[k]);\n                    match = true;\n                }\n            }\n            if (!match && result[i] === '*') {\n                result[i] = splat;\n            }\n        }\n        result = result.join('/');\n    }\n    else if (val.length) {\n        result = val.slice();\n        for (var j = 0; j < val.length; j++) {\n            match = false;\n            for (k in groups) {\n                if (val[j] === ':' + k) {\n                    result[j] = decodeURIComponent(groups[k]);\n                    match = true;\n                }\n            }\n            if (!match && val[j] === '*') {\n                result[j] = splat;\n            }\n        }\n    }\n    return result;\n};\n\n\n/**\n * Creates a new request object from a url and matching rewrite object.\n * Query parameters are automatically populated from rewrite pattern.\n *\n * @name createRequest(method, url, data, match, callback)\n * @param {String} method\n * @param {String} url\n * @param {Object} data\n * @param {Object} match\n * @param {Function} callback\n * @api public\n */\n\nexports.createRequest = function (method, url, data, match, callback) {\n    var groups = exports.rewriteGroups(match.from, url);\n    var query = urlParse(url, true).query || {};\n    var k;\n    if (match.query) {\n        for (k in match.query) {\n            if (match.query.hasOwnProperty(k)) {\n                query[k] = exports.replaceGroups(match.query[k], groups);\n            }\n        }\n    }\n    if (groups) {\n        for (k in groups) {\n            if (groups.hasOwnProperty(k)) {\n                query[k] = decodeURIComponent(groups[k]);\n            }\n        }\n    }\n    // splats are available for rewriting match.to, but not accessible on\n    // the request object (couchdb 1.1.x), storing in a separate variable\n    // for now\n    var splat = exports.rewriteSplat(match.from, url);\n    var to = exports.replaceGroups(match.to, query, splat);\n    var req = {\n        method: method,\n        query: query,\n        headers: {},\n        path: to.split('/'),\n        client: true,\n        initial_hit: utils.initial_hit,\n        cookie: cookies.readBrowserCookies()\n    };\n    if (data) {\n        req.form = data;\n    }\n\n    db.newUUID(100, function (err, uuid) {\n        if (err) {\n            return callback(err);\n        }\n        req.uuid = uuid;\n\n        if (utils.userCtx) {\n            req.userCtx = utils.userCtx;\n            return callback(null, req);\n        }\n        else {\n            session.info(function (err, session) {\n                if (err) {\n                    return callback(err);\n                }\n                req.userCtx = session.userCtx;\n                callback(null, req);\n            });\n        }\n    });\n};\n\n\n/**\n * Handles return values from show / list / update functions\n */\n\nexports.handleResponse = function (req, res) {\n    //console.log('response');\n    //console.log(res);\n    if (req && typeof res === 'object') {\n        if (res.headers) {\n            if (res.headers['Set-Cookie']) {\n                document.cookie = res.headers['Set-Cookie'];\n            }\n            var loc = res.headers['Location'];\n            if (loc && _.indexOf([301, 302, 303, 307], res.code) !== -1) {\n                if (exports.isAppURL(loc)) {\n                    // reset method to GET unless response is a 307\n                    var method = res.code === 307 ? req.method || 'GET': 'GET';\n                    exports.setURL(method, exports.appPath(loc));\n                }\n                else {\n                    document.location = loc;\n                }\n            }\n        }\n    }\n};\n\n\n/**\n * Fetches the relevant document and calls the named show function.\n *\n * @name runShowBrowser(req, name, docid, callback)\n * @param {Object} req\n * @param {String} name\n * @param {String} docid\n * @param {Function} callback\n * @api public\n */\n\nexports.runShowBrowser = function (req, name, docid, callback) {\n    var result;\n    var fn = kanso.app.shows[name];\n\n    var info = {\n        type: 'show',\n        name: name,\n        target: docid,\n        query: req.query,\n        fn: fn\n    };\n    events.emit('beforeResource', info);\n\n    if (docid) {\n        db.getDoc(docid, req.query, function (err, doc) {\n            var current_req = (utils.currentRequest() || {});\n            if (current_req.uuid === req.uuid) {\n                if (err) {\n                    return callback(err);\n                }\n                var res = exports.runShow(fn, doc, req);\n                events.emit('afterResponse', info, req, res);\n                if (res) {\n                    exports.handleResponse(req, res);\n                }\n                else {\n                    // returned without response, meaning cookies won't be set\n                    // by handleResponseHeaders\n                    if (req.outgoing_flash_messages) {\n                        flashmessages.setCookieBrowser(\n                            req, req.outgoing_flash_messages\n                        );\n                    }\n                }\n                callback();\n            }\n        });\n    }\n    else {\n        var res = exports.runShow(fn, null, req);\n        events.emit('afterResponse', info, req, res);\n        if (res) {\n            exports.handleResponse(req, res);\n        }\n        else {\n            // returned without response, meaning cookies won't be set by\n            // handleResponseHeaders\n            if (req.outgoing_flash_messages) {\n                flashmessages.setCookieBrowser(\n                    req, req.outgoing_flash_messages\n                );\n            }\n        }\n        callback();\n    }\n};\n\n/**\n * Helper for runShow/runList.\n *\n * @name parseResponse(req, res)\n * @param {Object} req\n * @param {Object} res\n * @api public\n */\n\nexports.parseResponse = function (req, res) {\n    var ids = _.without(_.keys(res), 'title', 'code', 'headers', 'body');\n    if (req.client) {\n        if (res.title) {\n            document.title = res.title;\n        }\n        _.each(ids, function (id) {\n            $('#' + id).html(res[id]);\n        });\n    }\n    else if (!res.body) {\n        var context = {title: res.title || ''};\n        _.each(ids, function (id) {\n            context[id] = res[id];\n        });\n        var body = templates.render(\n            settings.base_template || 'base.html', req, context\n        );\n        res = {\n            body: body,\n            code: res.code || 200,\n            headers: res.headers\n        };\n    }\n    return {\n        body: res.body,\n        code: res.code,\n        headers: res.headers\n    };\n};\n\n/**\n * Runs a show function with the given document and request object,\n * emitting relevant events. This function runs both server and client-side.\n *\n * @name runShow(fn, doc, req)\n * @param {Function} fn\n * @param {Object} doc\n * @param {Object} req\n * @api public\n */\n\nexports.parseResponse = function (req, res) {\n    var ids = _.without(_.keys(res), 'title', 'code', 'headers', 'body');\n    if (req.client) {\n        if (res.title) {\n            document.title = res.title;\n        }\n        _.each(ids, function (id) {\n            $('#' + id).html(res[id]);\n        });\n    }\n    else if (!res.body) {\n        var context = {title: res.title || ''};\n        _.each(ids, function (id) {\n            context[id] = res[id];\n        });\n        var body = templates.render(\n            settings.base_template || 'base.html', req, context\n        );\n        res = {\n            body: body,\n            code: res.code || 200,\n            headers: res.headers\n        };\n    }\n    return {\n        body: res.body,\n        code: res.code,\n        headers: res.headers\n    };\n};\n\nexports.runShow = function (fn, doc, req) {\n    req = flashmessages.updateRequest(req);\n    utils.currentRequest(req);\n    var info = {\n        type: 'show',\n        name: req.path[1],\n        target: req.path[2],\n        query: req.query,\n        fn: fn\n    };\n    events.emit('beforeRequest', info, req);\n    var res = fn(doc, req);\n\n    if (!(res instanceof Object)) {\n        res = {code: 200, body: res};\n    }\n    else {\n        res = exports.parseResponse(req, res);\n    }\n    events.emit('beforeResponseStart', info, req, res);\n    events.emit('beforeResponseData', info, req, res, res.body || '');\n\n    res = flashmessages.updateResponse(req, res);\n    req.response_received = true;\n    return res;\n};\n\n/**\n * Fetches the relevant document and calls the named update function.\n *\n * @name runUpdateBrowser(req, name, docid, callback)\n * @param {Object} req\n * @param {String} name\n * @param {String} docid\n * @param {Function} callback\n * @api public\n */\n\nexports.runUpdateBrowser = function (req, name, docid, callback) {\n    var result;\n    var fn = kanso.app.updates[name];\n\n    var info = {\n        type: 'update',\n        name: name,\n        target: docid,\n        query: req.query,\n        fn: fn\n    };\n    events.emit('beforeResource', info);\n\n    if (docid) {\n        db.getDoc(docid, req.query, function (err, doc) {\n            var current_req = (utils.currentRequest() || {});\n            if (current_req.uuid === req.uuid) {\n                if (err) {\n                    return callback(err);\n                }\n                exports.runUpdate(fn, doc, req, function (err, res) {\n                    if (err) {\n                        events.emit('updateFailure', err, info, req, res, doc);\n                        return callback(err);\n                    }\n                    events.emit('afterResponse', info, req, res);\n                    if (res) {\n                        exports.handleResponse(req, res[1]);\n                    }\n                    else {\n                        // returned without response, meaning cookies won't be\n                        // set by handleResponseHeaders\n                        if (req.outgoing_flash_messages) {\n                            flashmessages.setCookieBrowser(\n                                req, req.outgoing_flash_messages\n                            );\n                        }\n                    }\n                    callback();\n                });\n            }\n        });\n    }\n    else {\n        exports.runUpdate(fn, null, req, function (err, res) {\n            if (err) {\n                events.emit('updateFailure', err, info, req, res, null);\n                return callback(err);\n            }\n            events.emit('afterResponse', info, req, res);\n            if (res) {\n                exports.handleResponse(req, res[1]);\n            }\n            else {\n                // returned without response, meaning cookies won't be set by\n                // handleResponseHeaders\n                if (req.outgoing_flash_messages) {\n                    flashmessages.setCookieBrowser(\n                        req, req.outgoing_flash_messages\n                    );\n                }\n            }\n            callback();\n        });\n    }\n};\n\n/**\n * Runs a update function with the given document and request object,\n * emitting relevant events. This function runs both server and client-side.\n *\n * @name runUpdate(fn, doc, req)\n * @param {Function} fn\n * @param {Object} doc\n * @param {Object} req\n * @api public\n */\n\nexports.runUpdate = function (fn, doc, req, cb) {\n    req = flashmessages.updateRequest(req);\n    utils.currentRequest(req);\n    var info = {\n        type: 'update',\n        name: req.path[1],\n        target: req.path[2],\n        query: req.query,\n        fn: fn\n    };\n    events.emit('beforeRequest', info, req);\n    var val = fn(doc, req);\n\n    var res = val ? val[1]: null;\n    if (!(res instanceof Object)) {\n        res = {code: 200, body: res};\n    }\n    else {\n        res = exports.parseResponse(req, res);\n    }\n    events.emit('beforeResponseStart', info, req, res);\n    events.emit('beforeResponseData', info, req, res, res.body || '');\n\n    var r = [\n        val ? val[0]: null,\n        flashmessages.updateResponse(req, res)\n    ];\n    if (req.client && r[0]) {\n        db.saveDoc(r[0], function (err, res) {\n            if (err) {\n                return cb(err);\n            }\n            req.response_received = true;\n            cb(null, r);\n        });\n    }\n    else {\n        req.response_received = true;\n        cb(null, r);\n    }\n};\n\n\n/**\n * Creates a fake head object from view results for passing to a list function\n * being run client-side.\n *\n * @name createHead(data)\n * @param {Object} data\n * @returns {Object}\n * @api public\n */\n\nexports.createHead = function (data) {\n    var head = {};\n    for (var k in data) {\n        if (k !== 'rows') {\n            head[k] = data[k];\n        }\n    }\n    return head;\n};\n\n\n/**\n * Fetches the relevant view and calls the named list function with the results.\n *\n * @name runListBrowser(req, name, view, callback)\n * @param {Object} req\n * @param {String} name\n * @param {String} view\n * @param {Function} callback\n * @api public\n */\n\nexports.runListBrowser = function (req, name, view, callback) {\n    var fn = kanso.app.lists[name];\n\n    var info = {\n        type: 'list',\n        name: name,\n        target: view,\n        query: req.query,\n        fn: fn\n    };\n    events.emit('beforeResource', info);\n\n    if (view) {\n        // update_seq used in head parameter passed to list function\n        req.query.update_seq = true;\n        db.getView(view, req.query, function (err, data) {\n            var current_req = (utils.currentRequest() || {});\n            if (current_req.uuid === req.uuid) {\n                if (err) {\n                    return callback(err);\n                }\n                getRow = function () {\n                    return data.rows.shift();\n                };\n                start = function (res) {\n                    //console.log('start');\n                    //console.log(res);\n                    exports.handleResponse(req, res);\n                };\n                var head = exports.createHead(data);\n                var res = exports.runList(fn, head, req);\n                events.emit('afterResponse', info, req, res);\n                if (res) {\n                    exports.handleResponse(req, res);\n                }\n                else {\n                    // returned without response, meaning cookies won't be set\n                    // by handleResponseHeaders\n                    if (req.outgoing_flash_messages) {\n                        flashmessages.setCookieBrowser(\n                            req, req.outgoing_flash_messages\n                        );\n                    }\n                }\n                getRow = function () {\n                    return null;\n                };\n                callback();\n            }\n        });\n    }\n    // TODO: check if it should throw here\n    else {\n        var e = new Error('no view specified');\n        if (callback) {\n            callback(e);\n        }\n        else {\n            throw e;\n        }\n    }\n};\n\n/**\n * Runs a list function with the given document and request object,\n * emitting relevant events. This function runs both server and client-side.\n *\n * @name runList(fn, head, req)\n * @param {Function} fn\n * @param {Object} head\n * @param {Object} req\n * @api public\n */\n\nexports.runList = function (fn, head, req) {\n    req = flashmessages.updateRequest(req);\n    utils.currentRequest(req);\n    var info = {\n        type: 'list',\n        name: req.path[1],\n        target: req.path[2],\n        query: req.query,\n        fn: fn\n    };\n    // cache response from start call\n    var start_res;\n    var _start = start;\n    start = function (res) {\n        start_res = res;\n        events.emit('beforeResponseStart', info, req, res);\n        if (res.body) {\n            events.emit('beforeResponseData', info, req, res, res.body);\n        }\n        _start(flashmessages.updateResponse(req, res));\n    };\n    var _send = send;\n    send = function (data) {\n        if (!start_res.body) {\n            start_res.body = '';\n        }\n        // TODO: does it make sense to store data here and use up memory\n        // on the server?\n        start_res.body += data;\n        events.emit('beforeResponseData', info, req, start_res, data);\n        _send(data);\n    };\n    events.emit('beforeRequest', info, req);\n    var val = fn(head, req);\n\n    if (val instanceof Object) {\n        val = exports.parseResponse(req, val).body;\n    }\n    if (!start_res) {\n        start_res = {code: 200, body: val};\n        events.emit('beforeResponseStart', info, req, start_res);\n        events.emit('beforeResponseData', info, req, start_res, val);\n        start = _start;\n        send = _send;\n    }\n    else {\n        start_res.body = start_res.body ? start_res.body + val: val;\n        events.emit('beforeResponseData', info, req, start_res, val);\n    }\n    start = _start;\n    send = _send;\n    req.response_received = true;\n    return val;\n};\n\n\n/**\n * Creates a request object for the url and runs appropriate show, list or\n * update functions.\n *\n * @name handle(method, url, data)\n * @param {String} method\n * @param {String} url\n * @param {Object} data\n * @api public\n */\n\nexports.handle = function (method, url, data) {\n    var match = exports.matchURL(method, url);\n    if (match) {\n        var parsed = urlParse(url);\n        exports.createRequest(method, url, data, match, function (err, req) {\n            if (err) {\n                throw err;\n            }\n            //console.log(req);\n\n            var msg = method + ' ' + url + ' -> ' +\n                JSON.stringify(req.path.join('/')) + ' ' +\n                JSON.stringify(req.query);\n\n            if (data) {\n                msg += ' data: ' + JSON.stringify(data);\n            }\n\n            console.log(msg);\n            utils.currentRequest(req);\n\n            var after = function () {\n                if (parsed.hash) {\n                    // we have to handle in-page anchors manually because we've\n                    // hijacked the hash part of the url\n                    // TODO: don't re-handle the page if only the hash has\n                    // changed\n\n                    // test if a valid element name or id\n                    if (/#[A-Za-z_\\-:\\.]+/.test(parsed.hash)) {\n                        var el = $(parsed.hash);\n                        if (el.length) {\n                            window.scrollTo(0, el.offset().top);\n                        }\n                    }\n                    else if (parsed.hash === '#') {\n                        // scroll to top of page\n                        window.scrollTo(0, 0);\n                    }\n                    // TODO: handle invalid values?\n                }\n            };\n\n            var src, fn, name;\n\n            if (req.path[0] === '_show') {\n                exports.runShowBrowser(\n                    req, req.path[1], req.path.slice(2).join('/'), after\n                );\n            }\n            else if (req.path[0] === '_list') {\n                exports.runListBrowser(\n                    req, req.path[1], req.path.slice(2).join('/'), after\n                );\n            }\n            else if (req.path[0] === '_update') {\n                exports.runUpdateBrowser(\n                    req, req.path[1], req.path.slice(2).join('/'), after\n                );\n            }\n            else {\n                console.log('Unknown rewrite target: ' + req.path.join('/'));\n                var newurl = exports.getBaseURL() + '/_db/_design/' +\n                    settings.name + '/' + req.path.join('/');\n                console.log('redirecting to: ' + newurl);\n                window.location = newurl;\n            }\n\n        });\n    }\n    else {\n        console.log(method + ' ' + url + ' -> [404]');\n        window.location = exports.getBaseURL() + url;\n    }\n\n    /**\n     * if google analytics is included on the page, and this url\n     * has not been tracked (not the initial hit) then manually\n     * track a page view. This is done consistently for hash-based\n     * and pushState urls\n     */\n    if (window.pageTracker && !utils.initial_hit) {\n        pageTracker._trackPageview(url);\n    }\n    utils.initial_hit = false;\n};\n\n\n/**\n * Add a history entry for the given url, prefixed with the baseURL for the app.\n *\n * @name setURL(method, url, data)\n * @param {String} method\n * @param {String} url\n * @param {Object} data (optional)\n * @api public\n */\n\nexports.setURL = function (method, url, data) {\n    var fullurl = exports.getBaseURL() + url;\n    var state = {\n        method: method,\n        data: data,\n        timestamp: new Date().getTime(),\n        history_count: window.history.length + 1\n    };\n    // this is the result of a direct call to setURL\n    // (don't show confirmation dialog for unsafe states needing to re-submit)\n    exports.set_called = true;\n\n    /**\n     * if the current request is unsafe, we replace it so clicking the back\n     * button 'skips' it without showing a dialog.\n     *\n     * This means GET1, POST2, GET3 would result in a history of GET1, GET3.\n     * Clicking back after GET3 wouldn't re-submit a form.\n     *\n     * Doing GET1, POST2, then clicking back and forward again would result\n     * in a confirmation dialog asking if you want to re-submit.\n     */\n\n    var curr_state = exports.current_state;\n    var curr_method = curr_state ? (curr_state.method || 'GET'): 'GET';\n\n    if (curr_method !== 'GET' && curr_method !== 'HEAD') {\n        // unsafe method on current request, replace it\n        window.history.replaceState(state, document.title, fullurl);\n    }\n    else {\n        // last request was safe, add a new entry in the history\n        window.history.pushState(state, document.title, fullurl);\n    }\n    // manually fire popstate event\n    window.onpopstate({state: state});\n};\n\n\n/**\n * This was moved to utils to avoid a circular dependency between\n * core.js and db.js... however, it should be accessed via the core.js module\n * as it may get moved back once circular dependencies are fixed in couchdb's\n * commonjs implementation.\n */\n\nexports.getBaseURL = utils.getBaseURL;\n\n\n/**\n * Gets the current app-level URL (without baseURL prefix).\n *\n * @name getURL()\n * @returns {String}\n * @api public\n */\n\nexports.getURL = function () {\n    var re = new RegExp('\\\\/_rewrite(.*)$');\n\n    var loc = urlParse(window.location),\n        match = re.exec(loc.pathname);\n\n    if (match) {\n        var newurl = {\n            pathname: match[1] || '/',\n            hash: loc.hash\n        };\n        if (loc.search) {\n            newurl.search = loc.search;\n        }\n        return urlFormat(newurl) || '/';\n    }\n    return '' + window.location || '/';\n};\n\n/**\n * Tests is two urls are of the same origin. Accepts parsed url objects\n * or strings as arguments.\n *\n * @name sameOrigin(a, b)\n * @param a\n * @param b\n * @returns Boolean\n * @api public\n */\n\nexports.sameOrigin = function (a, b) {\n    var ap = (typeof a === 'string') ? urlParse(a): a;\n    var bp = (typeof b === 'string') ? urlParse(b): b;\n    // if one url is relative to current origin, return true\n    if (ap.protocol === undefined || bp.protocol === undefined) {\n        return true;\n    }\n    return (\n        ap.protocol === bp.protocol &&\n        ap.hostname === bp.hostname &&\n        ap.port === bp.port\n    );\n};\n\n/**\n * Converts a full url to an app-level url (without baseURL prefix).\n * example: {baseURL}/some/path -> /some/path\n *\n * @name appPath(p)\n * @param {String} p\n * @returns {String}\n * @api public\n */\n\nexports.appPath = function (p) {\n    // hash links need current URL prepending\n    if (p.charAt(0) === '#') {\n        var newurl = urlParse(exports.getURL());\n        newurl.hash = p;\n        return exports.appPath(urlFormat(newurl));\n    }\n    else if (p.charAt(0) === '?') {\n        // if the request is just a query, then prepend the current app path\n        // as a browser would\n        var newurl2 = urlParse(exports.getURL());\n        delete newurl2.query;\n        delete newurl2.search;\n        delete newurl2.href;\n        newurl2.search = p;\n        return exports.appPath(urlFormat(newurl2));\n    }\n    else if (/\\w+:/.test(p)) {\n        // include protocol\n        var origin = p.split('/').slice(0, 3).join('/');\n        // coerce window.location to a real string so we can use split in IE\n        var loc = '' + window.location;\n        if (origin === loc.split('/').slice(0, 3).join('/')) {\n            // remove origin, set p to pathname only\n            // IE often adds this to a tags, hence why we strip it out now\n            p = p.substr(origin.length);\n        }\n        else {\n            // not same origin, return original full path\n            return p;\n        }\n    }\n    var base = exports.getBaseURL();\n    if (p.substr(0, base.length) === base) {\n        return p.substr(base.length);\n    }\n    return p;\n};\n\n\n/**\n * Used to decide whether to handle a link or not. Should detect app vs.\n * external urls.\n *\n * @name isAppURL(url)\n * @param {String} url\n * @returns {Boolean}\n * @api public\n */\n\nexports.isAppURL = function (url) {\n    // coerce window.location to a real string in IE\n    return exports.sameOrigin(url, '' + window.location);\n};\n",
        "events": "/*global __kansojs_event_listeners: true*/\n\n/**\n * The events module handles events emitted by Kanso as well as custom\n * events defined by a Kanso app. These events can be used client-side\n * or server-side. Although you are limited to synchronous operation on\n * the server, so events are less likely to be useful there.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar _ = require('./underscore')._;\n\n\n/**\n * Stores the bound listeners\n *\n * These must be stored in a global since the forms code fires some events using\n * script tags, which will fail to reference the listeners object if a local var\n * is used.\n *\n * We test for a pre-existing global as admin app might require this module\n * in multiple contexts, and we don't want to lose previous event listeners.\n */\n\nif (typeof __kansojs_event_listeners === 'undefined') {\n    __kansojs_event_listeners = {};\n}\n\n\n/**\n * Adds a listener function for the given event name.\n *\n * @name on(name, listener)\n * @param {String} name\n * @param {Function} listener\n * @api public\n */\n\nexports.on = function (name, listener) {\n    if (!__kansojs_event_listeners[name]) {\n        __kansojs_event_listeners[name] = [];\n    }\n    __kansojs_event_listeners[name].push(listener);\n};\n\n/**\n * Binds an event listener to the given event name, but unbinds it\n * after its first invocation.\n *\n * @name once(name, listener)\n * @param {String} name\n * @param {Function} listener\n * @api public\n */\n\nexports.once = function (name, listener) {\n    var fn = function () {\n        var result = listener.apply(this, arguments);\n        exports.removeListener(name, listener);\n        return result;\n    };\n    fn.listener = listener;\n    exports.on(name, fn);\n};\n\n/**\n * Triggers any event listeners bound to the given event name. Listeners\n * are called in the order they were bound. If a listener returns false\n * subsequent event listeners in the chain are not called.\n *\n * The first argument is the event name to emit any additional arguments\n * are used as arguments to the bound event listeners.\n *\n * @name emit(name, [...])\n * @param {String} name\n * @param ...\n * @api public\n */\n\nexports.emit = function (name) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    var fns = exports.listeners(name);\n    for (var i = 0, len = fns.length; i < len; i++) {\n        var result = fns[i].apply(null, args);\n        if (result === false) {\n            return;\n        }\n    }\n};\n\n/**\n * Returns an array of the bound event listeners for the given event name.\n * If no events are bound, an empty array is returned.\n *\n * @name listeners(name)\n * @param {String} name\n * @returns {Array}\n * @api public\n */\n\nexports.listeners = function (name) {\n    var fns = __kansojs_event_listeners[name] || [];\n    return __kansojs_event_listeners[name] || [];\n};\n\n/**\n * Removes all bound event listeners for a given event name.\n *\n * @name removeAllListeners(name)\n * @param {String} name\n * @api public\n */\n\nexports.removeAllListeners = function (name) {\n    delete __kansojs_event_listeners[name];\n};\n\n/**\n * Removes a specific event listener for a given event name.\n *\n * @name removeListener(name, listener)\n * @param {String} name\n * @param {Function} listener\n * @api public\n */\n\nexports.removeListener = function (name, listener) {\n    __kansojs_event_listeners[name] = _.filter(exports.listeners(name), function (l) {\n        return l !== listener && (!l.listener || l.listener !== listener);\n    });\n};\n",
        "db": "/*global $: false, kanso: true */\n\n/**\n * Contains functions for querying and storing data in CouchDB.\n *\n * @module\n */\n\n\n/**\n * Module dependencies\n */\n\nvar utils = require('./utils'),\n    settings = require('./settings'),\n    session = null;\n\n/* Avoid a circular require in CouchDB */\n\nif (utils.isBrowser) {\n    session = require('./session');\n}\n\n\n/**\n * When a db call results in an unauthorized response, the user's session is\n * checked to see if their session has timed out or they've logged out in\n * another screen.\n *\n * This check is throttled to once per second, to avoid flooding the server if\n * multiple requests are made with incorrect permissions.\n */\n\nvar last_session_check = 0;\n\n\n/**\n * Cache for design documents fetched via getDesignDoc.\n */\n\nexports.design_docs = {};\n\n\n/**\n * Taken from jQuery 1.4.4 so we can support more recent versions of jQuery.\n */\n\nvar httpData = function (xhr, type, s) {\n    var ct = xhr.getResponseHeader(\"content-type\") || \"\",\n        xml = type === \"xml\" || !type && ct.indexOf(\"xml\") >= 0,\n        data = xml ? xhr.responseXML : xhr.responseText;\n\n    if (xml && data.documentElement.nodeName === \"parsererror\") {\n        $.error(\"parsererror\");\n    }\n    if (s && s.dataFilter) {\n        data = s.dataFilter(data, type);\n    }\n    if (typeof data === \"string\") {\n        if (type === \"json\" || !type && ct.indexOf(\"json\") >= 0) {\n            data = $.parseJSON(data);\n        }\n        else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) {\n            $.globalEval(data);\n        }\n    }\n    return data;\n};\n\n\n/**\n * Returns a function for handling ajax responsed from jquery and calls\n * the callback with the data or appropriate error.\n *\n * @param {Function} callback\n * @api private\n */\n\nfunction onComplete(options, callback) {\n    return function (req) {\n        var resp;\n        var ctype = req.getResponseHeader('Content-Type');\n        if (ctype === 'application/json' || ctype === 'text/json') {\n            try {\n                resp = httpData(req, \"json\");\n            }\n            catch (e) {\n                return callback(e);\n            }\n        }\n        else {\n            if (options.expect_json) {\n                return callback(\n                    new Error('Expected JSON response, got ' + ctype)\n                );\n            }\n            resp = req.responseText;\n        }\n        if (req.status === 401) {\n            // returned 'Unauthorized', check the user's session if it's not\n            // been checked on an 'Unauthorized' repsonse in the last second\n            if (session && last_session_check < new Date().getTime() - 1000) {\n                session.info();\n            }\n        }\n        if (req.status === 200 || req.status === 201 || req.status === 202) {\n            callback(null, resp);\n        }\n        else if (resp.error) {\n            var err = new Error(resp.reason || resp.error);\n            err.error = resp.error;\n            err.reason = resp.reason;\n            err.status = req.status;\n            callback(err);\n        }\n        else {\n            // TODO: map status code to meaningful error message\n            callback(new Error('Returned status code: ' + req.status));\n        }\n    };\n}\n\n/**\n * Encodes a document id or view, list or show name.\n *\n * @name encode(str)\n * @param {String} str\n * @returns {String}\n * @api public\n */\n\nexports.encode = function (str) {\n    return encodeURIComponent(str).replace(/^_design%2F/, '_design/');\n};\n\n\n/**\n * Make a request, with some default settings and proper callback\n * handling. Used behind-the-scenes by most other DB module functions.\n *\n * @name request(options, callback)\n * @param {Object} options\n * @param {Function} callback\n * @api public\n */\n\nexports.request = function (options, callback) {\n    options.complete = onComplete(options, callback);\n    options.dataType = 'json';\n    $.ajax(options);\n};\n\n\n/**\n * Fetches a rewrite from the database the app is running on. Results\n * are passed to the callback, with the first argument of the callback\n * reserved for any exceptions that occurred (node.js style).\n *\n * @name getRewrite(path, [q], callback)\n * @param {String} path\n * @param {Object} q (optional)\n * @param {Function} callback\n * @api public\n */\n\nexports.getRewrite = function (path, /*optional*/q, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('getRewrite cannot be called server-side');\n    }\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    // prepend forward-slash if missing\n    path = (path[0] === '/') ? path: '/' + path;\n\n    var base = utils.getBaseURL();\n    var name = exports.encode(settings.name);\n    var req = {\n        url: base + '/_db/_design/' + name + '/_rewrite' + path,\n        data: exports.stringifyQuery(q)\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Fetches a document from the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name getDoc(id, [q, options], callback)\n * @param {String} id\n * @param {Object} q (optional)\n * @param {Object} options (optional)\n * @param {Function} callback\n * @api public\n */\n\nexports.getDoc = function (id, /*optional*/q, /*optional*/options, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('getDoc cannot be called server-side');\n    }\n    if (!id) {\n        throw new Error('getDoc requires an id parameter to work properly');\n    }\n    if (!callback) {\n        if (!options) {\n            /* Arity = 2: Omits q, options */\n            callback = q;\n            options = {};\n            q = {};\n        } else {\n          /* Arity = 3: Omits options */\n            callback = options;\n            options = {};\n        }\n    }\n    var url;\n    if (options.db) {\n        /* Force leading slash; make absolute path */\n        url = (options.db.substr(0, 1) !== '/' ? '/' : '') + options.db;\n    } else {\n        url = utils.getBaseURL() + '/_db';\n    }\n    var req = {\n        url: url + '/' + exports.encode(id),\n        data: exports.stringifyQuery(q),\n        expect_json: true\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Saves a document to the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name saveDoc(doc, [options], callback)\n * @param {Object} doc\n * @param {Object} options (optional)\n * @param {Function} callback\n * @api public\n */\n\nexports.saveDoc = function (doc, /*optional*/options, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('saveDoc cannot be called server-side');\n    }\n    var method, url;\n    if (options.db) {\n        /* Force leading slash; make absolute path */\n        url = (options.db.substr(0, 1) !== '/' ? '/' : '') + options.db;\n    } else {\n        url = utils.getBaseURL() + '/_db';\n    }\n    if (!callback) {\n        /* Arity = 2: Omits options */\n        callback = options;\n        options = {};\n    }\n    if (doc._id === undefined) {\n        method = \"POST\";\n    }\n    else {\n        method = \"PUT\";\n        url += '/' + doc._id;\n    }\n    var req = {\n        type: method,\n        url: url,\n        data: JSON.stringify(doc),\n        processData: false,\n        contentType: 'application/json',\n        expect_json: true\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Deletes a document from the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name removeDoc(doc, [options], callback)\n * @param {Object} doc\n * @param {Function} callback\n * @api public\n */\n\nexports.removeDoc = function (doc, /*optional*/options, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('removeDoc cannot be called server-side');\n    }\n    if (!doc._id) {\n        throw new Error('removeDoc requires an _id field in your document');\n    }\n    if (!doc._rev) {\n        throw new Error('removeDoc requires a _rev field in your document');\n    }\n    if (!callback) {\n        /* Arity = 2: Omits options */\n        callback = options;\n        options = {};\n    }\n    var url;\n    if (options.db) {\n        /* Force leading slash; make absolute path */\n        url = (options.db.substr(0, 1) !== '/' ? '/' : '') + options.db + '/';\n    } else {\n        url = utils.getBaseURL() + '/_db/';\n    }\n    url += exports.encode(doc._id) + '?rev=' + exports.encode(doc._rev);\n    var req = {\n        type: 'DELETE',\n        url: url\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Fetches a view from the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name getView(view, [q], callback)\n * @param {String} view\n * @param {Object} q (optional)\n * @param {Function} callback\n * @api public\n */\n\nexports.getView = function (view, /*optional*/q, /*optional*/options, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('getView cannot be called server-side');\n    }\n    if (!callback) {\n        if (!options) {\n            /* Arity = 2: Omits q, options */\n            callback = q;\n            options = {};\n            q = {};\n        } else {\n          /* Arity = 3: Omits options */\n            callback = options;\n            options = {};\n        }\n    }\n    var base;\n    if (options.db) {\n        /* Force leading slash; make absolute path */\n        base = (options.db.substr(0, 1) !== '/' ? '/' : '') + options.db;\n    } else {\n        base = utils.getBaseURL();\n    }\n    var name = exports.encode(settings.name);\n    var viewname = exports.encode(view);\n    var req = {\n        url: (\n            base + (options.db ? '' : '/_db') + '/_design/' +\n                (options.db || name) + '/_view/' + viewname\n        ),\n        data: exports.stringifyQuery(q),\n        expect_json: true\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Transforms and fetches a view through a list from the database the app\n * is running on. Results are passed to the callback, with the first\n * argument of the callback reserved for any exceptions that occurred\n * (node.js style).\n *\n * @name getList(list, view, [q], callback)\n * @param {String} list\n * @param {String} view\n * @param {Object} q (optional)\n * @param {Function} callback\n * @api public\n */\n\n// TODO: run list function client-side?\nexports.getList = function (list, view, /*optional*/q, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('getList cannot be called server-side');\n    }\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    var base = utils.getBaseURL();\n    var name = exports.encode(settings.name);\n    var listname = exports.encode(list);\n    var viewname = exports.encode(view);\n    var req = {\n        url: base + '/_db/_design/' + name + '/_list/' + listname +\n             '/' + viewname,\n        data: exports.stringifyQuery(q)\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Transforms and fetches a document through a show from the database the app\n * is running on. Results are passed to the callback, with the first\n * argument of the callback reserved for any exceptions that occurred\n * (node.js style).\n *\n * @name getShow(show, docid, [q], callback)\n * @param {String} show\n * @param {String} docid\n * @param {Object} q (optional)\n * @param {Function} callback\n * @api public\n */\n\n// TODO: run show function client-side?\nexports.getShow = function (show, docid, /*optional*/q, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('getShow cannot be called server-side');\n    }\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    var base = utils.getBaseURL();\n    var name = exports.encode(settings.name);\n    var showname = exports.encode(show);\n    var show_url = base + '/_db/_design/' + name + '/_show/' + showname;\n    var req = {\n        url: show_url + (docid ? '/' + exports.encode(docid): ''),\n        data: exports.stringifyQuery(q)\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Get all documents (including design docs).\n *\n * @name all([q], callback)\n * @param {Object} q (optional)\n * @param {Function} callback\n * @api public\n */\n\nexports.all = function (/*optional*/q, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('all cannot be called server-side');\n    }\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    var base = utils.getBaseURL();\n    var req = {\n        url: base + '/_db/_all_docs',\n        data: exports.stringifyQuery(q),\n        expect_json: true\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Properly encodes query parameters to CouchDB views etc. Handle complex\n * keys and other non-string parameters by passing through JSON.stringify.\n * Returns a shallow-copied clone of the original query after complex values\n * have been stringified.\n *\n * @name stringifyQuery(query)\n * @param {Object} query\n * @returns {Object}\n * @api public\n */\n\nexports.stringifyQuery = function (query) {\n    var q = {};\n    for (var k in query) {\n        if (typeof query[k] !== 'string') {\n            q[k] = JSON.stringify(query[k]);\n        }\n        else {\n            q[k] = query[k];\n        }\n    }\n    return q;\n};\n\n\n/**\n * Returns a new UUID generated by CouchDB. Its possible to cache\n * multiple UUIDs for later use, to avoid making too many requests.\n *\n * @name newUUID(cacheNum, callback)\n * @param {Number} cacheNum (optional, default: 1)\n * @param {Function} callback\n * @api public\n */\n\nvar uuidCache = [];\n\nexports.newUUID = function (cacheNum, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('newUUID cannot be called server-side');\n    }\n    if (!callback) {\n        callback = cacheNum;\n        cacheNum = 1;\n    }\n    if (uuidCache.length) {\n        return callback(null, uuidCache.shift());\n    }\n    var base = utils.getBaseURL();\n    var req = {\n        url: '/_uuids',\n        data: {count: cacheNum},\n        expect_json: true\n    };\n    exports.request(req, function (err, resp) {\n        if (err) {\n            return callback(err);\n        }\n        uuidCache = resp.uuids;\n        callback(null, uuidCache.shift());\n    });\n};\n\n/**\n * Creates a CouchDB database.\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites for a PUT request to '/' and turn off safe rewrites.\n *\n * @name createDatabase(name, callback)\n * @param {String} name\n * @param {Function} callback\n * @api public\n */\n\nexports.createDatabase = function (name, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('createDatabase cannot be called server-side');\n    }\n    var req = {\n        type: 'PUT',\n        url: '/' + exports.encode(name.replace(/^\\/+/, ''))\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Deletes a CouchDB database.\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites for a DELETE request to '/' and turn off safe rewrites.\n *\n * @name deleteDatabase(name, callback)\n * @param {String} name\n * @param {Function} callback\n * @api public\n */\n\nexports.deleteDatabase = function (name, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('deleteDatabase cannot be called server-side');\n    }\n    var req = {\n        type: 'DELETE',\n        url: '/' + exports.encode(name.replace(/^\\/+/, ''))\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Fetches the most recent revision of the replication document\n * referred to by the id parameter.\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites to /_replicator, which will also mean turning\n * off safe rewrites.\n *\n * This function only works with CouchDB >= 1.1, since it uses the\n * _replicator database.\n *\n * @name getReplication(id, callback)\n * @param {String} id\n * @param {Function} callback\n * @api public\n */\n\nexports.getReplication = function (id, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('getReplication cannot be called server-side');\n    }\n    var req = {\n        url: '/_replicator/' + exports.encode(id),\n        cache: false /* Work around IE7 issue */\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Replicates options.source to options.target. The strings\n * options.source and options.target are each either a\n * CouchDB database name or a CouchDB database URI.\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites to /_replicator, which will also mean turning\n * off safe rewrites.\n *\n * This function only works with CouchDB >= 1.1, since it uses the\n * _replicator database.\n *\n * @name startReplication(options, callback)\n * @param {Object} options\n * @param {Function} callback\n * @api public\n */\n\nexports.startReplication = function (options, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('startReplication cannot be called server-side');\n    }\n    if (!options.source) {\n        throw new Error('source parameter must be provided');\n    }\n    if (!options.target) {\n        throw new Error('target parameter must be provided');\n    }\n    var req = {\n        type: 'POST',\n        url: '/_replicator',\n        data: JSON.stringify(options),\n        contentType: 'application/json'\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Waits for a replication operation to enter a specific state.\n * waitReplication polls the _replication database using the\n * doc provided, and evaluates state_function(doc) at each iteration.\n * This function stops polling and invokes callback when the\n * state_function evaluates to true. If state_function is not\n * provided, waitReplication waits for the doc's _replication_state\n * to change from 'triggered' to 'completed' (or 'error').\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites to /_replicator, which will also mean turning\n * off safe rewrites.\n *\n * This function only works with CouchDB >= 1.1, since it uses the\n * _replicator database.\n *\n * @name waitReplication(doc, [options, state_function], callback)\n * @param {Object} doc\n * @param {Function} state_function (optional)\n * @param {Function} callback\n * @api public\n */\n\nexports.waitReplication = function (doc, /*optional*/options, /*optional*/state_function, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('waitReplication cannot be called server-side');\n    }\n    var default_state_function = function (recent_doc, initial_doc) {\n        return (\n          recent_doc._replication_state === 'completed' ||\n              recent_doc._replication_state === 'error'\n        );\n    };\n    if (!callback) {\n        if (!state_function) {\n            /* Arity = 2: doc, callback */\n            callback = options;\n            options = {};\n            state_function = default_state_function;\n        } else {\n            /* Arity = 3: doc, options, callback */\n            callback = state_function;\n            state_function = default_state_function;\n        }\n    }\n    if (options === undefined) {\n        options = {};\n    }\n    if (options.limit === undefined) {\n        options.limit = 100; /* times */\n    }\n    if (options.delay === undefined) {\n        options.delay = 2000; /* ms */\n    }\n\n    /* Fetch latest revision */\n    exports.getReplication(doc.id, function (err, rv) {\n\n        /* Check for error, then for an interesting event */\n        if (err || state_function(rv, doc)) {\n            return callback(err, rv, doc);\n        }\n        /* Termination condition for recursion... */\n        if (options.limit > 0) {\n\n            /* ...with well-defined progress toward it */\n            options.limit -= 1;\n\n            /* Go around */\n            return setTimeout(function () {\n                return exports.waitReplication(\n                    doc, options, state_function, callback\n                );\n            }, options.delay);\n        }\n    });\n};\n\n/**\n * Stops a replication operation already in progress.\n * The doc parameter can be obtained by calling getReplication.\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites to /_replicator, which will also mean turning\n * off safe rewrites.\n *\n * This function only works with CouchDB >= 1.1, since it uses the\n * _replicator database.\n *\n * @name stopReplication(doc, callback, [options])\n * @param {String} id\n * @param {Function} callback\n * @param {Function} options\n * @api public\n */\n\nexports.stopReplication = function (doc, callback, /*optional*/options) {\n\n    if (!utils.isBrowser()) {\n        throw new Error('stopReplication cannot be called server-side');\n    }\n\n    if (options === undefined) {\n        options = {};\n    }\n    if (options.limit === undefined || options.limit === null) {\n        options.limit = 3; /* times */\n    }\n    if (options.delay === undefined || options.delay === null) {\n        options.delay = 500; /* ms */\n    }\n\n    var req = {\n        type: 'DELETE',\n        url: '/_replicator/' +\n          exports.encode(doc._id) +\n          '?rev=' + exports.encode(doc._rev)\n    };\n\n    exports.request(req, function (err, rv) {\n\n        if (err && err.status === 409) {  /* Document update conflict */\n\n            /* Race condition:\n                The CouchDB replication finished (or was updated) between\n                the caller's getReplication and now. Subject to restrictions\n                in options, call getReplication and then try again. */\n\n            /* Termination condition for recursion... */\n            if (options.limit > 0) {\n\n                /* ...with well-defined progress toward it */\n                options.limit -= 1;\n\n                return exports.getReplication(doc._id, function (e, d) {\n                    if (e) {\n                        throw new Error(\n                          'The specified replication document changed ' +\n                          'since last read, and we failed to re-request it'\n                        );\n                    }\n                    /* Go around */\n                    setTimeout(function () {\n                        return exports.stopReplication(d, callback, options);\n                    }, options.delay);\n                });\n            }\n\n        } else {\n\n            /* Normal case:\n                Replication document was not changed since the last\n                read; go ahead and invoke the callback and return. */\n\n            return callback(err, rv);\n        }\n\n        /* Not reached */\n        return false;\n\n    });\n\n};\n\n/**\n * Deletes an existing user document, given its username. You\n * must be logged in as an administrative user for this function\n * to succeed.\n *\n * @name deleteUser(username, callback)\n * @param {String} username\n * @param {Function} callback\n * @api public\n */\n\nexports.deleteUser = function (username, callback) {\n    var id = 'org.couchdb.user:' + username;\n\n    exports.userDb(function (err, userdb) {\n        if (err) {\n            return callback(err);\n        }\n        var req = {\n            type: 'DELETE',\n            url: '/' + exports.encode(userdb) + '/' + exports.encode(id),\n            contentType: 'application/json'\n        };\n        exports.request(req, callback);\n    });\n};\n\n/**\n * Fetch a design document from CouchDB. By default, the\n * results of this function are cached within the javascript\n * engine. To avoid this, pass true for the no_cache argument.\n *\n * @name getDesignDoc(name, callback, no_cache)\n * @param name The name of (i.e. path to) the design document.\n * @param callback The callback to invoke when the request completes.\n * @param no_cache optional; true to force a cache miss for this request.\n * @api public\n */\n\nexports.getDesignDoc = function (name, callback, no_cache) {\n    if (!no_cache && exports.design_docs[name]) {\n        return callback(null, exports.design_docs[name]);\n    }\n    exports.getDoc('_design/' + name, {}, function (err, ddoc) {\n        if (err) {\n            return callback(err);\n        }\n        exports.design_docs[name] = ddoc;\n        return callback(null, exports.design_docs[name]);\n    });\n};\n\n",
        "fieldset": "/**\n * Functions for dealing with collections of fields. Used by both the\n * types and forms modules.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar _ = require('./underscore')._,\n    utils = require('./utils');\n\n\n/**\n * Returns a hierachy of default values for a given set of Field objects\n *\n * @name createDefaults(fields, req)\n * @param {Object} fields\n * @param {Object} req - the request object to pass to default_value functions\n * @returns {Object}\n * @api public\n */\n\nexports.createDefaults = function (fields, /*optional*/req) {\n    if (!req) {\n        req = utils.currentRequest();\n    }\n    var fields_module = require('./fields');\n    return _.reduce(_.keys(fields), function (result, k) {\n        var f = fields[k];\n        if (f instanceof fields_module.Field ||\n            f instanceof fields_module.Embedded ||\n            f instanceof fields_module.EmbeddedList) {\n            if (f.hasOwnProperty('default_value')) {\n                if (_.isFunction(f.default_value)) {\n                    result[k] = f.default_value(req);\n                }\n                else {\n                    result[k] = f.default_value;\n                }\n            }\n        }\n        else if (f instanceof Object) {\n            result[k] = exports.createDefaults(f, req);\n        } else {\n            throw new Error(\n                'The field type `' + (typeof f) + '` is not supported.'\n            );\n        }\n        return result;\n    }, {});\n};\n\n/**\n * Validate a specific field, returning all validation errors as an array with\n * each error's field property prefixed by the current path.\n *\n * @name validateField(field, doc, value, raw, path)\n * @param {Field} field\n * @param {Object} doc\n * @param value\n * @param raw\n * @param {Array} path\n * @returns {Array}\n * @api public\n */\n\nexports.validateField = function (field, doc, value, raw, path) {\n    return _.map(field.validate(doc, value, raw), function (err) {\n        err.field = path.concat(err.field || []);\n        err.has_field = true;\n        return err;\n    });\n};\n\n/**\n * Validates an object containing fields or other sub-objects, iterating over\n * each property and recursing through sub-objects to find all Fields.\n *\n * Returns an array of validation errors, each with a field property set to the\n * path of the field which caused the error.\n *\n * @name validate(fields, doc, values, raw, path, extra)\n * @param {Object} fields\n * @param {Object} doc\n * @param {Object} values\n * @param {Object} raw\n * @param {Array} path\n * @param {Boolean} extra - whether to allow extra values not covered by a field\n * @returns {Array}\n * @api public\n */\n\nexports.validate = function (fields, doc, values, raw, path, extra) {\n    values = values || {};\n    fields = fields || {};\n    raw = raw || {};\n\n    // Expecting sub-object, not a value\n    if (typeof values !== 'object') {\n        var e = new Error('Unexpected property - validation 1');\n        e.field = path;\n        e.has_field = false;\n        return [e];\n    }\n\n    // Ensure we walk through all paths of both fields and values by combining\n    // the keys of both. Otherwise, we might miss out checking for missing\n    // required fields, or may not detect the presence of extra fields.\n\n    var keys = _.uniq(_.keys(fields).concat(_.keys(values)));\n    var fields_module = require('./fields');\n\n    return _.reduce(keys, function (errs, k) {\n        var f = fields[k];\n        if (f === undefined) {\n            // Extra value with no associated field detected\n            if (!extra) {\n                // ignore system properties\n                if (!(path.length === 0 && k.charAt(0) === '_')) {\n                    var e = new Error('Unexpected property - validation 2');\n                    e.field = path.concat([k]);\n                    e.has_field = false;\n                    errs.push(e);\n                }\n            }\n            return errs;\n        }\n        var fn = exports.validate;\n        if (f instanceof fields_module.Field ||\n            f instanceof fields_module.Embedded ||\n            f instanceof fields_module.EmbeddedList) {\n            fn = exports.validateField;\n        }\n        return errs.concat(\n            fn.call(this, f, doc, values[k], raw[k], path.concat([k]), extra)\n        );\n    }, []);\n};\n\n/**\n * Authorize a specific field, returning all permissions errors as an array with\n * each error's field property prefixed by the current path.\n *\n * @name authField(f, nDoc, oDoc, nVal, oVal, user, path)\n * @param {Field} f     - field object\n * @param {Object} nDoc - new document\n * @param {Object} oDoc - old document\n * @param nVal          - new field value\n * @param oVal          - old field value\n * @param {Object} user - user context object\n * @param {Array} path  - current path\n * @returns {Array}\n * @api public\n */\n\nexports.authField = function (f, nDoc, oDoc, nVal, oVal, user, path) {\n    //log('authField: ' + path.join('.'));\n    return _.map(f.authorize(nDoc, oDoc, nVal, oVal, user), function (err) {\n        err.field = path.concat(err.field || []);\n        err.has_field = true;\n        return err;\n    });\n};\n\n/**\n * Authorizes an object containing fields or other sub-objects, iterating over\n * each property and recursing through sub-objects to find all Fields.\n *\n * Returns an array of permissions errors, each with a field property set to the\n * path of the field which caused the error.\n *\n * @name authFieldSet(f, nDoc, oDoc, nVal, oVal, user, path)\n * @param {Field} f     - field object\n * @param {Object} nDoc - new document\n * @param {Object} oDoc - old document\n * @param nVal          - new field value\n * @param oVal          - old field value\n * @param {Object} user - user context object\n * @param {Array} path  - current path\n * @param {Boolean} extra - whether to raise an error on additional fields\n * @returns {Array}\n * @api public\n */\n\nexports.authFieldSet = function (f, nDoc, oDoc, nVal, oVal, user, path, extra) {\n    //log('authFieldSet: ' + path.join('.'));\n    nVal = nVal || {};\n    oVal = oVal || {};\n    f = f || {};\n\n    // Expecting sub-object, not a value\n    // This *should* be picked up by validation, and be raised as a validation\n    // error before it gets to the auth stage\n    if (typeof nVal !== 'object') {\n        var e = new Error('Unexpected property 1');\n        e.field = path;\n        e.has_field = false;\n        return [e];\n    }\n\n    // Ensure we walk through all paths of both fields and values by combining\n    // the keys of both. Otherwise, we might miss out checking for missing\n    // required fields, or may not detect the presence of extra fields.\n\n    var fKeys = _.keys(f);\n    var newKeys = _.keys(nVal);\n    var oldKeys = _.keys(oVal);\n    var keys = _.uniq(fKeys.concat(newKeys).concat(oldKeys));\n\n    var fields_module = require('./fields');\n\n    return _.reduce(keys, function (errs, k) {\n        var field = f[k];\n        if (field === undefined) {\n            // Extra value with no associated field detected\n            // This *should* be picked up by validation, and be raised as a\n            // validation error before it gets to the auth stage\n            if (!extra) {\n                // ignore system properties\n                if (!(path.length === 0 && k.charAt(0) === '_')) {\n                    var e = new Error('Unexpected property 2');\n                    e.field = path.concat([k]);\n                    e.has_field = false;\n                    errs.push(e);\n                }\n            }\n            return errs;\n        }\n        var fn = exports.authFieldSet;\n        if (field instanceof fields_module.Field ||\n            field instanceof fields_module.Embedded ||\n            field instanceof fields_module.EmbeddedList) {\n            fn = exports.authField;\n        }\n        return errs.concat(fn(\n            field, nDoc, oDoc, nVal[k], oVal[k], user, path.concat([k]), extra\n        ));\n    }, []);\n};\n\n",
        "flashmessages": "/*global unescape: false */\n\n/**\n * Flash messages help you store state between requests, such as reporting a\n * successful or failed operation after a redirect.\n *\n * The flash message implementation in this module handles both fallback couchdb\n * mode, using cookies to persist state between requests, as well as supporting\n * client-side operation, correctly handling new messages even inside the\n * callbacks of async functions.\n *\n * Flash messages only persist for the next request or the next template render!\n * That means 2 redirects without explicitly currying the flash messages will\n * cause the messages to be lost.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar utils = require('./utils'),\n    cookies = require('./cookies'),\n    _ = require('./underscore');\n\n\n/**\n * Reads the flash messages cookie from a request object, returning an\n * array of incoming messages.\n *\n * @name readRequestCookie(req)\n * @param {Object} req\n * @returns {Array}\n * @api public\n */\n\nexports.readRequestCookie = function (req) {\n    var cookie = req.cookie._kanso_flash;\n    var messages = cookie ? JSON.parse(unescape(cookie)): [];\n    return _.map(messages, function (val) {\n        val.incoming = true;\n        val.outgoing = false;\n        return val;\n    });\n};\n\n/**\n * Reads the flash messages cookie from the browser, returning an\n * array of incoming messages.\n *\n * @name readBrowserCookie()\n * @returns {Array}\n * @api public\n */\n\nexports.readBrowserCookie = function () {\n    var cookie = cookies.readBrowserCookie('_kanso_flash');\n    var messages = cookie ? JSON.parse(unescape(cookie)): [];\n    return _.map(messages, function (val) {\n        val.incoming = true;\n        val.outgoing = false;\n        return val;\n    });\n};\n\n/**\n * Adds a flash_messages property to a request containing all incoming\n * messages.\n *\n * @name updateRequest(req)\n * @param {Object} req\n * @returns {Request Object}\n * @api public\n */\n\nexports.updateRequest = function (req) {\n    var messages = exports.readRequestCookie(req);\n    req.flash_messages = _.map(messages, function (val) {\n        val.incoming = true;\n        val.outgoing = false;\n        return val;\n    });\n    return req;\n};\n\n/**\n * Get's all current flash messages, stopping them from being outgoing on the\n * next request so they're not repeated.\n *\n * @name getMessages(req)\n * @param {Object} req\n * @returns {Array}\n * @api public\n */\n\nexports.getMessages = function (req) {\n    if (utils.isBrowser()) {\n        // also remove any messages from this request already set in the cookie\n        var cookie_messages = exports.readBrowserCookie();\n        var bmessages = _.filter(cookie_messages, function (val) {\n            return val.req !== req.uuid;\n        });\n        if (bmessages.length !== cookie_messages.length) {\n            exports.setBrowserCookie(req, bmessages);\n        }\n    }\n\n    var messages = _.map(req.flash_messages, function (val) {\n        val.outgoing = false;\n        return val;\n    });\n    req.flash_messages = messages;\n\n    return _.map(messages, function (val) {\n        return val.data;\n    });\n};\n\n/**\n * Filters all available messages on a request object, returning only those\n * flagged as outgoing (sending in the response to be made available to the next\n * request).\n *\n * @name getOutgoingMessages(req)\n * @param {Object} req\n * @returns {Array}\n * @api public\n */\n\nexports.getOutgoingMessages = function (req) {\n    return _.filter(req.flash_messages, function (val) {\n        return val.outgoing;\n    });\n};\n\n/**\n * Updates a response object after a list, show or update function has returned,\n * setting the flash messages cookie to include the outgoing messages.\n *\n * @name updateResponse(req, res)\n * @param {Object} req\n * @param {Object} res\n * @returns {Response Object}\n * @api public\n */\n\nexports.updateResponse = function (req, res) {\n    var messages = _.map(exports.getOutgoingMessages(req), function (val) {\n        delete val.outgoing;\n        delete val.incoming;\n        return val;\n    });\n    if (req.response_received) {\n        exports.setBrowserCookie(req, messages);\n    }\n    else {\n        cookies.setResponseCookie(req, res, {\n            name: '_kanso_flash',\n            value: JSON.stringify(messages)\n        });\n    }\n    return res;\n};\n\n/**\n * Creates a new flash message object, associating it with the given request.\n *\n * @name createMessage(req, msg)\n * @param {Object} req\n * @param {String} msg\n * @returns {Object}\n * @api public\n */\n\nexports.createMessage = function (req, msg) {\n    return {\n        req: req.uuid,\n        data: msg\n    };\n};\n\n/**\n * Stores a list of messages in the flash messages cookie. This function is for\n * client-side use.\n *\n * @name setBrowserCookie(req, messages)\n * @param {Object} req\n * @param {Array} messages\n * @api public\n */\n\nexports.setBrowserCookie = function (req, messages) {\n    cookies.setBrowserCookie(req, {\n        name: '_kanso_flash',\n        value: JSON.stringify(messages)\n    });\n};\n\n/**\n * Adds a new flash message for the current request. If the list, show or update\n * function has not returned, it's added to the response Set-Cookie header,\n * otherwise (if its the result of a client-side async operation) it's added\n * directly to the browsers cookies.\n *\n * @name addMessage(req, msg)\n * @param {Object} req\n * @param {String} msg\n * @api public\n */\n\nexports.addMessage = function (req, msg) {\n    if (!req.flash_messages) {\n        req.flash_messages = [];\n    }\n    var message = exports.createMessage(req, msg);\n    if (req.response_received) {\n        // the function has already returned, addMessage must have been called\n        // in a callback for some client-side only function, set the cookie\n        // directly\n        var messages = exports.readBrowserCookie();\n\n        messages.push(message);\n        exports.setBrowserCookie(req, messages);\n        req.flash_messages.push(message);\n    }\n    else {\n        message.outgoing = true;\n        req.flash_messages.push(message);\n    }\n};\n\n",
        "forms": "/**\n * Functions for the rendering, parsing and validation of forms.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar core = require('./core'),\n    utils = require('./utils'),\n    fieldset = require('./fieldset'),\n    render = require('./render'),\n    _ = require('./underscore')._;\n\n\n/**\n * Form object, presents fields and parses responses.\n *\n * #### Options ####\n *\n * <table class=\"options\">\n *   <tr>\n *      <td class=\"name\">exclude</td>\n *      <td class=\"type\">Array</td>\n *      <td class=\"description\">a list of field names to exclude</td>\n *   </tr>\n *   <tr>\n *      <td class=\"name\">fields</td>\n *      <td class=\"type\">Array</td>\n *      <td class=\"description\">\n *          a subset of fields to use (inverse of excluded)\n *      </td>\n *   </tr>\n * </table>\n *\n * @name Form(fields | type, [doc])\n * @param {Object} fields  - an object literal containing fields or a Type\n * @param {Object} doc     - (optional) the original document being edited\n * @param {Object} options - (optional) see available options above\n * @constructor\n * @api public\n */\n\nvar Form = exports.Form = function Form(fields, doc, options) {\n    this.options = options || {};\n\n    this.values = null;\n    if (doc) {\n        this.values = JSON.parse(JSON.stringify(doc)); /* Copy */\n        this.initial_doc = doc;\n    }\n    if (fields && fields.fields) {\n        this.type = fields;\n        this.fields = this.type.fields;\n    }\n    else {\n        this.fields = fields;\n    }\n    /*if (utils.constructorName(fields) === 'Type') {\n        this.type = fields;\n        this.fields = this.type.field;\n    }\n    else {\n        this.fields = fields;\n    }*/\n};\n\n\n/**\n * Overrides values in doc_a with values in doc_b, only when a field is present\n * for that value. This means properties not in fields (or in excluded fields)\n * are retained, while properties which are covered by the fieldset are\n * replaced.\n *\n * This is used when updating the form's values with a request when its been\n * initiated with a previous document. You shouldn't normally need to call this\n * directly.\n *\n * Returns the updated doc_a object.\n *\n * @name override(excludes, field_subset, fields, doc_a, doc_b, path)\n * @param {Array | null} excludes\n * @param {Array | null} field_subset\n * @param {Object} Fields\n * @param {Object} doc_a\n * @param {Object} doc_b\n * @param {Array} path\n * @returns {Object}\n * @api public\n */\n\nexports.override = function (excludes, field_subset, fields, doc_a, doc_b, path) {\n    fields = fields || {};\n    doc_a = doc_a || {};\n\n    var fields_module = require('./fields');\n    var exclude_paths = _.map((excludes || []), function (p) {\n        return p.split('.');\n    });\n    var subset_paths = _.map((field_subset || []), function (p) {\n        return p.split('.');\n    });\n\n    var keys = _.keys(doc_b);\n\n    _.each(keys, function (k) {\n        var f = fields[k];\n        var b = doc_b[k];\n        var f_path = path.concat([k]);\n\n        if (typeof b !== 'object' ||\n            f instanceof fields_module.Field ||\n            f instanceof fields_module.Embedded ||\n            f instanceof fields_module.EmbeddedList) {\n\n            if (excludes) {\n                for (var i = 0; i < exclude_paths.length; i++) {\n                    if (utils.isSubPath(exclude_paths[i], f_path)) {\n                        return;\n                    }\n                }\n            }\n            if (field_subset) {\n                var in_subset = false;\n                for (var j = 0; j < subset_paths.length; j++) {\n                    if (utils.isSubPath(subset_paths[j], f_path)) {\n                        in_subset = true;\n                    }\n                }\n                if (!in_subset) {\n                    return;\n                }\n            }\n            doc_a[k] = b;\n        }\n        else {\n            doc_a[k] = exports.override(\n                excludes, field_subset, fields[k], doc_a[k], b, f_path\n            );\n        }\n    });\n    return doc_a;\n};\n\n/**\n * Parses a request and validates the result, binding values and errors to\n * the form instance.\n *\n * @name Form.validate(req)\n * @param {Object} req\n * @returns {Form}\n * @api public\n */\n\nForm.prototype.validate = function (/*optional*/req) {\n    if (!req) {\n        req = utils.currentRequest();\n    }\n\n    /* This is the request payload:\n        This contains all of the form fields that are used by\n        formValuesToTree and parseRaw, and must be copied first. */\n\n    this.raw = (req.form || {});\n\n    var type_class = require('./types').Type;\n    var tree = exports.formValuesToTree(this.raw);\n\n    this.values = exports.override(\n        this.options.exclude,\n        this.options.fields,\n        this.fields,\n        this.values || fieldset.createDefaults(this.fields, req) || {},\n        exports.parseRaw(this.fields, tree),\n        []\n    );\n    \n    this.errors = fieldset.validate(\n        this.fields, this.values, this.values, this.raw, [], false\n    );\n\n    if (this.type) {\n        if (this.type instanceof type_class) {\n            // run top level permissions first\n            var type_errs = this.type.authorizeTypeLevel(\n                this.values, this.initial_doc, req.userCtx\n            );\n            if (type_errs.length) {\n                this.errors = this.errors.concat(type_errs);\n            }\n            else {\n                // if no top-level permissions errors, check each field\n                this.errors = this.errors.concat(\n                    this.type.authorize(\n                        this.values, this.initial_doc, req.userCtx\n                    )\n                );\n            }\n        } else {\n            /* Programmer error: display a useful diagnostic message */\n            throw new Error(\n                'Encountered a type object that is not an instance of' +\n                    ' `Type`; check lib/types.js for proper instansiation'\n            );\n        }\n        \n    }\n    else {\n        this.errors = this.errors.concat(fieldset.authFieldSet(\n            this.fields, this.values, this.initial_doc, this.values,\n            this.initial_doc, req.userCtx, [], true\n        ));\n    }\n\n    // clear field properties on errors for excluded fields\n    var excludes = this.options.exclude;\n    if (excludes) {\n        var excl_paths = _.map(excludes, function (p) {\n            return p.split('.');\n        });\n        this.errors = _.map(this.errors, function (e) {\n            if (!e.field) {\n                return e;\n            }\n            for (var i = 0, len = excl_paths.length; i < len; i++) {\n                var path = excl_paths[i];\n                if (utils.isSubPath(path, e.field)) {\n                    e.message = e.field.join('.') + ': ' + (\n                        e.message || e.toString()\n                    );\n                    delete e.field;\n                    return e;\n                }\n            }\n            return e;\n        });\n    }\n\n    // clear field properties on errors not in fields subset\n    var field_subset = this.options.fields;\n    if (field_subset) {\n        var subset_paths = _.map(field_subset, function (p) {\n            return p.split('.');\n        });\n        this.errors = _.map(this.errors, function (e) {\n            if (!e.field) {\n                return e;\n            }\n            for (var i = 0, len = subset_paths.length; i < len; i++) {\n                var path = subset_paths[i];\n                if (!utils.isSubPath(path, e.field)) {\n                    e.message = e.field.join('.') + ': ' + (\n                        e.message || e.toString()\n                    );\n                    delete e.field;\n                    return e;\n                }\n            }\n            return e;\n        });\n    }\n\n    return this;\n};\n\n/**\n * After a form has called validate, this function will return true if the form\n * is valid, false otherwise.\n *\n * @name Form.isValid()\n * @returns {Boolean}\n * @api public\n */\n\nForm.prototype.isValid = function () {\n    return !(this.errors && this.errors.length);\n};\n\n/**\n * Filters an array of errors, returning only those below a specific field path\n *\n * @param {Array} errs\n * @param {Array} path\n * @returns {Array}\n */\n\nvar errsBelowPath = function (errs, path) {\n    if (!path || !path.length) {\n        return errs;\n    }\n    return _.filter(errs, function (e) {\n        if (!e.field) {\n            return false;\n        }\n        return utils.isSubPath(path, e.field);\n    });\n};\n\n/**\n * Filters a list of errors, returning only those without a field property.\n * This is used to populate the errors at the top of the form, which apply\n * generally, or cannot be attributed to a single field.\n *\n * @param {Array} errs\n * @returns {Array}\n */\n\nvar errsWithoutFields = function (errs) {\n    return _.filter(errs, function (e) {\n        return !e.field;\n    });\n};\n\n/**\n * Converts current form to a HTML string, using an optional renderer class.\n *\n * @name Form.toHTML(req, [RendererClass])\n * @param {Object} req Kanso request object; null for most recent. (optional)\n * @param {Renderer} RendererClass (optional)\n * @param {Object} options An object containing widget options, which\n *          will ultimately be provided to each widget's toHTML method.\n * @param {Boolean} create_defaults (optional) Set this to true if you've\n *          provided a document in {doc}, but would still like default\n *          values to be merged in to it via createDefaults. For a field f,\n *          the default value is added to {doc} if and only if doc[f]\n *          is undefined, null, or not present. Defaults to off.\n * @returns {String}\n * @returns {String}\n * @api public\n */\n\nForm.prototype.toHTML = function (/* optional */ req,\n                                  /* optional */ RendererClass,\n                                  /* optional */ options,\n                                  /* optional */ create_defaults) {\n    if (!req) {\n        req = utils.currentRequest();\n    }\n    var values = this.values;\n\n    options = options || {};\n    options.operation = options.operation || (values ? 'update': 'add');\n\n    if (create_defaults) {\n        values = _.defaults(\n            values, fieldset.createDefaults(this.fields, req)\n        );\n    } else if (!values) {\n        values = fieldset.createDefaults(this.fields, req);\n    }\n\n    RendererClass = (RendererClass || render.defaultRenderer());\n    var renderer = new RendererClass();\n    return (\n        renderer.start(\n            errsWithoutFields(this.errors)\n        ) +\n        this.renderFields(\n            renderer, this.fields, values, this.raw, this.errors, [], options\n        ) +\n        renderer.end() +\n        render.scriptTagForEvent('renderFinish')\n    );\n};\n\n/**\n * Filters an array of errors, returning only those below a specific field path\n *\n * @param {Array} errs\n * @param {Array} path\n * @returns {Array}\n */\n\nvar errsBelowPath = function (errs, path) {\n    return _.filter(errs, function (e) {\n        for (var i = 0, len = path.length; i < len; ++i) {\n            if (path[i] !== e.field[i]) {\n                return false;\n            }\n        }\n        return true;\n    });\n};\n\n/**\n * Iterates over fields and sub-objects calling the correct renderer function on\n * each. Returns a HTML representation of the fields. Used internally by the\n * toHTML method, you should not need to call this function directly.\n *\n * @name Form.renderFields(renderer, fields, values, raw, err, path)\n * @param {Object} renderer\n * @param {Object} fields\n * @param {Object} values\n * @param {Array} errs\n * @param {Array} path\n * @param {Object} options An object containing widget options, which\n *          will ultimately be provided to each widget's toHTML method.\n * @returns {String}\n * @api public\n */\n\nForm.prototype.renderFields = function (renderer, fields, values,\n                                        raw, errs, path, options) {\n    fields = fields || {};\n    values = values || {};\n    raw = raw || {};\n    errs = errs || [];\n    path = path || [];\n\n    var that = this;\n    var excludes = this.options.exclude;\n    var field_subset = this.options.fields;\n    var keys = _.keys(fields);\n\n    var fields_module = require('./fields');\n\n    return _.reduce(keys, function (html, k) {\n\n        var f_path = path.concat([k]);\n\n        if (excludes) {\n            if (_.indexOf(excludes, f_path.join('.')) !== -1) {\n                return html;\n            }\n        }\n        if (field_subset) {\n            if (_.indexOf(field_subset, f_path.join('.')) === -1) {\n                return html;\n            }\n        }\n\n        var f_errs = errsBelowPath(errs, f_path);\n        var f = fields[k];\n\n        if (f instanceof fields_module.Field ||\n            f instanceof fields_module.Embedded ||\n            f instanceof fields_module.EmbeddedList) {\n\n            return html + renderer.field(\n                f,\n                f_path,\n                values[k],\n                (raw[k] === undefined) ? values[k]: raw[k],\n                f_errs,\n                (options || {})\n            );\n        }\n        else if (f instanceof Object) {\n            return html + (k ? renderer.beginGroup(f_path) : '') +\n                that.renderFields(\n                    renderer,\n                    f,\n                    values[k],\n                    (raw[k] === undefined) ? values[k]: raw[k],\n                    errs,\n                    f_path,\n                    (options || {})\n                ) + (k ? renderer.endGroup(f_path) : '');\n        } else {\n            throw new Error(\n                'The field type `' + (typeof f) + '` is not supported.'\n            );\n        }\n    }, '');\n};\n\n\n/**\n * Transforms a flat object from a request query to a proper\n * hierarchy of properties.\n *\n * <pre>{'one.two': 'val'} --> {one: {two: 'val'}}</pre>\n *\n * @name formValuesToTree(form)\n * @param {Object} query\n * @api public\n */\n\nexports.formValuesToTree = function (form) {\n    var tree = {};\n    for (var k in form) {\n        utils.setPropertyPath(tree, k.split('.'), form[k]);\n    }\n    return tree;\n};\n\n\n/**\n * Transforms a raw query object from formValuesToTree to a\n * document which follows the schema for the given type.\n *\n * @name parseRaw(fields, raw)\n * @param {Object} fields\n * @param {Object} raw\n * @returns {Object}\n * @api public\n */\n\nexports.parseRaw = function (fields, raw) {\n    var doc = {};\n    raw = raw || {};\n    var fields_module = require('./fields');\n\n    for (var k in fields) {\n        var f = fields[k];\n        var r = raw[k];\n\n        if (f instanceof fields_module.Field) {\n            if (!f.isEmpty(r)) {\n                doc[k] = f.parse(r);\n            }\n            else if (!f.omit_empty) {\n                doc[k] = undefined;\n            }\n        }\n        else if (f instanceof fields_module.Embedded) {\n            if (!f.isEmpty(r)) {\n                if (typeof r === 'string') {\n                    if (r !== '') {\n                        doc[k] = JSON.parse(r);\n                    } else {\n                        doc[k] = {};\n                    }\n                }\n                else {\n                    doc[k] = exports.parseRaw(f.type.fields, r);\n                }\n            }\n        }\n        else if (f instanceof fields_module.EmbeddedList) {\n            doc[k] = [];\n            for (var i in r) {\n                if (typeof r[i] === 'string') {\n                    if (r[i] !== '') {\n                        doc[k][i] = JSON.parse(r[i]);\n                    } else {\n                        doc[k][i] = {};\n                    }\n                }\n                else {\n                    doc[k][i] = exports.parseRaw(f.type.fields, r[i]);\n                }\n            }\n            if (!doc[k].length && f.omit_empty) {\n                delete doc[k];\n            }\n        }\n        else if (f instanceof Object) {\n            doc[k] = exports.parseRaw(f, r);\n        } else {\n            throw new Error(\n                'The field type `' + (typeof f) + '` is not supported.'\n            );\n        }\n    }\n    return doc;\n};\n\n",
        "path": "/**\n * Path functions ported from node.js to work in CouchDB and the browser.\n * This module is used internally by Kanso, although you can use it in your\n * apps too if you find the functions useful.\n *\n * @module\n */\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * From node.js v0.2.6\n */\n\n/**\n * Joins multiple paths together using '/'. Accepts a arbitrary number of\n * strings as arguments, returning the joined result as a single string.\n *\n * @name join(path, [...])\n * @returns {String}\n * @api public\n */\n\nexports.join = function () {\n    return exports.normalize(Array.prototype.join.call(arguments, \"/\"));\n};\n\n/**\n * Normalizes a path split into an array, taking care of '..' and '.' parts.\n *\n * @name normalizeArray(parts, [keepBlanks])\n * @param {Array} parts\n * @param {Boolean} keepBlanks\n * @returns {Array}\n * @api public\n */\n\nexports.normalizeArray = function (parts, keepBlanks) {\n    var directories = [], prev;\n    for (var i = 0, l = parts.length - 1; i <= l; i++) {\n        var directory = parts[i];\n\n        // if it's blank, but it's not the first thing, and not the last\n        // thing, skip it.\n        if (directory === \"\" && i !== 0 && i !== l && !keepBlanks) {\n            continue;\n        }\n\n        // if it's a dot, and there was some previous dir already, then\n        // skip it.\n        if (directory === \".\" && prev !== undefined) {\n            continue;\n        }\n\n        // if it starts with \"\", and is a . or .., then skip it.\n        if (directories.length === 1 && directories[0] === \"\" && (directory === \".\" || directory === \"..\")) {\n            continue;\n        }\n\n        if (directory === \"..\" && directories.length && prev !== \"..\" && prev !== \".\" && prev !== undefined && (prev !== \"\" || keepBlanks)) {\n            directories.pop();\n            prev = directories.slice(-1)[0];\n        }\n        else {\n            if (prev === \".\") {\n                directories.pop();\n            }\n            directories.push(directory);\n            prev = directory;\n        }\n    }\n    return directories;\n};\n\n/**\n * Normalize a string path, taking care of '..' and '.' parts.\n *\n * @name normalize(path, [keepBlanks])\n * @param {String} path\n * @param {Boolean} keepBlanks\n * @returns string\n * @api public\n */\n\nexports.normalize = function (path, keepBlanks) {\n    return exports.normalizeArray(path.split(\"/\"), keepBlanks).join(\"/\");\n};\n\n/**\n * Return the directory name of a path. Similar to the Unix dirname command.\n *\n * @name dirname(path)\n * @param {String} path\n * @returns {String}\n * @api public\n */\n\nexports.dirname = function (path) {\n    if (path.length > 1 && '/' === path[path.length - 1]) {\n        path = path.replace(/\\/+$/, '');\n    }\n    var lastSlash = path.lastIndexOf('/');\n    switch (lastSlash) {\n    case -1:\n        return '.';\n    case 0:\n        return '/';\n    default:\n        return path.substring(0, lastSlash);\n    }\n};\n\n/**\n * Return the last portion of a path. Similar to the Unix basename command.\n *\n * **Example**\n * <pre><code class=\"javascript\">path.basename('/foo/bar/baz/asdf/quux.html')\n * // returns\n * 'quux.html'\n *\n * path.basename('/foo/bar/baz/asdf/quux.html', '.html')\n * // returns\n * 'quux'\n * </code></pre>\n *\n * @name basename(path, ext)\n * @param {String} path\n * @param {String} ext\n * @returns {String}\n * @api public\n */\n\nexports.basename = function (path, ext) {\n    var f = path.substr(path.lastIndexOf(\"/\") + 1);\n    if (ext && f.substr(-1 * ext.length) === ext) {\n        f = f.substr(0, f.length - ext.length);\n    }\n    return f;\n};\n\n/**\n * Return the extension of the path. Everything after the last '.' in the last\n * portion of the path. If there is no '.' in the last portion of the path or\n * the only '.' is the first character, then it returns an empty string.\n *\n * <pre><code class=\"javascript\">path.extname('index.html')\n * // returns\n * '.html'\n *\n * path.extname('index')\n * // returns\n * ''\n * </code></pre>\n *\n * @name extname(path)\n * @param {String} path\n * @returns {String}\n * @api public\n */\n\nexports.extname = function (path) {\n    var dot = path.lastIndexOf('.'),\n        slash = path.lastIndexOf('/');\n    // The last dot must be in the last path component, and it (the last dot)\n    // must not start the last path component (i.e. be a dot that signifies a\n    // hidden file in UNIX).\n    return dot <= slash + 1 ? '' : path.substring(dot);\n};\n\n",
        "permissions": "/**\n * Permissions functions are used on both Fields and Types to check a given\n * user is authorized to make a change to a document.\n *\n * @module\n */\n\n\n/**\n * Module dependencies\n */\n\nvar utils = require('./utils'),\n    _ = require('./underscore')._;\n\n\n/**\n * Field's new value should match current user's name\n *\n * @name matchUsername()\n * @returns {Function}\n * @api public\n */\n\nexports.matchUsername = function () {\n    return function (newDoc, oldDoc, newVal, oldVal, userCtx) {\n        var name = userCtx.name;\n        if (name !== newVal) {\n            // if both are empty-like, then consider them the same\n            if ((name !== null && name !== undefined && name !== '') ||\n                (newVal !== null && newVal !== undefined && newVal !== '')) {\n                throw new Error('Field does not match your username');\n            }\n        }\n    };\n};\n\n/**\n * Checks if the user has a specific role\n *\n * @name hasRole(role)\n * @param {String} role\n * @returns {Function}\n * @api public\n */\n\nexports.hasRole = function (role) {\n    return function (newDoc, oldDoc, newVal, oldVal, userCtx) {\n        var roles = userCtx ? (userCtx.roles || []): [];\n        if (!_.include(roles, role)) {\n            throw new Error('User must have \"' + role + '\" role.');\n        }\n    };\n};\n\n/**\n * The value of this field should never change after the document has been\n * created.\n *\n * @name fieldUneditable()\n * @returns {Function}\n * @api public\n */\n\nexports.fieldUneditable = function () {\n    return function (newDoc, oldDoc, newValue, oldValue, userCtx) {\n        if (oldDoc) {\n            if (newValue !== oldValue) {\n                throw new Error('Field cannot be edited once created');\n            }\n        }\n    };\n};\n\n/**\n * User's name should match the *old* value of the given field. A field can be\n * specified using a string or an array of strings (like a path).\n *\n * <pre>\n * eg: usernameMatchesField('creator')\n *     usernameMatchesField(['meta','creator'])\n *\n *     {\n *         creator: 'name',\n *         meta: {creator: 'name2'}\n *     }\n * </pre>\n *\n * @name usernameMatchesField(path)\n * @param {String | Array} path\n * @returns {Function}\n * @api public\n */\n\nexports.usernameMatchesField = function (path) {\n    if (!_.isArray(path)) {\n        path = [path];\n    }\n    return function (newDoc, oldDoc, newValue, oldValue, userCtx) {\n        var field = utils.getPropertyPath(oldDoc, path);\n        if (userCtx.name !== field) {\n            throw new Error('Username does not match field ' + path.join('.'));\n        }\n    };\n};\n\n/**\n * Checks that user's context has a username\n *\n * @name loggedIn()\n * @returns {Function}\n * @api public\n */\n\nexports.loggedIn = function () {\n    return function (newDoc, oldDoc, newValue, oldValue, userCtx) {\n        if (!userCtx || !userCtx.name) {\n            throw new Error('You must be logged in');\n        }\n    };\n};\n\n/**\n * Runs an array of permissions functions and checks that all of them pass,\n * returning all failures.\n *\n * @name all(perms)\n * @param {Array} perms\n * @returns {Function}\n * @api public\n */\n\nexports.all = function (perms) {\n    return function () {\n        var args = arguments;\n        return _.reduce(perms, function (errs, p) {\n            return errs.concat(utils.getErrors(p, args));\n        }, []);\n    };\n};\n\n/**\n * Tests to see if any one permission function passes, returning on the\n * first success. If all permissions fail, then all errors are returned.\n *\n * @name any(perms)\n * @param {Array} perms\n * @api public\n */\n\nexports.any = function (perms) {\n    return function () {\n        var errs = [];\n        for (var i = 0, len = perms.length; i < len; i++) {\n            try {\n                var p_errs = (perms[i].apply(this, arguments) || []);\n                errs = errs.concat(p_errs);\n                if (!p_errs.length) {\n                    // return as soon as one passes\n                    return [];\n                }\n            }\n            catch (e) {\n                // store the first error to re-throw if none pass\n                errs.push(e);\n            }\n        }\n        return errs;\n    };\n};\n\n/**\n * Treat new and old values like new documents of a given type, and attempt to\n * authorize the value against the type's permissions. Useful when handling\n * permissions for an embedded type.\n *\n * Can be combined with permissions.any or permissions.all to extend the\n * permissions for an embedded type field. For example, the following might\n * allow both the owner of the parent document and the owner of the comment\n * itself to remove it.\n *\n * <pre><code class=\"javascript\">\n *     comment: fields.embed({\n *         type: types.comment,\n *         permissions: {\n *             remove: permissions.any([\n *                 permissions.usernameMatchesField('creator'),\n *                 permissions.inherit(types.comment)\n *             ])\n *         }\n *     });\n * </code></pre>\n *\n * @name inherit(type)\n * @param {Type} type\n * @api public\n */\n\nexports.inherit = function (type) {\n    return function (newDoc, oldDoc, newValue, oldValue, userCtx) {\n        return type.authorize(newValue || {_deleted: true}, oldValue, userCtx);\n    };\n};\n",
        "querystring": "var _ = require('./underscore')._;\n\n/**\n * Querystring functions ported from node.js to work in CouchDB and the browser.\n * This module is used internally by Kanso, although you can use it in your\n * apps too if you find the functions useful.\n *\n * @module\n */\n\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Query String Utilities\n\nvar QueryString = exports;\n\n/**\n * Decodes a URI Component, provided so that it could be overridden if\n * necessary.\n *\n * @name unescape(str)\n * @param {String} str\n * @returns {String}\n * @api public\n */\n\nQueryString.unescape = function (str) {\n    return decodeURIComponent(str);\n};\n\n/**\n * Encodes a URI Component, provided so that it could be overridden if\n * necessary.\n *\n * @name escape(str)\n * @param {String} str\n * @returns {String}\n * @api public\n */\n\nQueryString.escape = function (str) {\n    return encodeURIComponent(str);\n};\n\nvar stringifyPrimitive = function (v) {\n    switch (typeof v) {\n    case 'string':\n        return v;\n\n    case 'boolean':\n        return v ? 'true' : 'false';\n\n    case 'number':\n        return isFinite(v) ? v : '';\n\n    default:\n        return '';\n    }\n};\n\n/**\n * Serialize an object to a query string. Optionally override the default\n * separator and assignment characters.\n *\n * **Example:**\n *\n * <pre><code class=\"javascript\">\n * querystring.stringify({foo: 'bar'})\n * // returns\n * 'foo=bar'\n *\n * querystring.stringify({foo: 'bar', baz: 'bob'}, ';', ':')\n * // returns\n * 'foo:bar;baz:bob'\n * </code></pre>\n *\n * @name stringify(obj, [sep, eq, name])\n * @param {Object} obj\n * @param {String} sep\n * @param {String} eq\n * @param {String} name\n * @returns {String}\n * @api public\n */\n\nQueryString.stringify = QueryString.encode = function (obj, sep, eq, name) {\n    sep = sep || '&';\n    eq = eq || '=';\n    obj = (obj === null) ? undefined : obj;\n\n    if (typeof obj === 'object') {\n        return _.map(_.keys(obj), function (k) {\n            if (_.isArray(obj[k])) {\n                return _.map(obj[k], function (v) {\n                    return QueryString.escape(stringifyPrimitive(k)) +\n                           eq +\n                           QueryString.escape(stringifyPrimitive(v));\n                }).join(sep);\n            }\n            else {\n                return QueryString.escape(stringifyPrimitive(k)) +\n                       eq +\n                       QueryString.escape(stringifyPrimitive(obj[k]));\n            }\n        }).join(sep);\n    }\n    if (!name) {\n        return '';\n    }\n    return QueryString.escape(stringifyPrimitive(name)) + eq +\n           QueryString.escape(stringifyPrimitive(obj));\n};\n\n/**\n * Deserialize a query string to an object. Optionally override the default\n * separator and assignment characters.\n *\n * **Example:**\n *\n * <pre><code class=\"javascript\">\n * querystring.parse('a=b&b=c')\n * // returns\n * // { a: 'b', b: 'c' }\n * </code></pre>\n *\n * @name decode(qs, [sep, eq])\n * @param {String} qs\n * @param {String} sep\n * @param {String} eq\n * @returns {Object}\n * @api public\n */\n\nQueryString.parse = QueryString.decode = function (qs, sep, eq) {\n    sep = sep || '&';\n    eq = eq || '=';\n    var obj = {};\n\n    if (typeof qs !== 'string' || qs.length === 0) {\n        return obj;\n    }\n\n    qs.split(sep).forEach(function (kvp) {\n        var x = kvp.split(eq);\n        var k = QueryString.unescape(x[0]);\n        var v = QueryString.unescape(x.slice(1).join(eq));\n\n        if (!(k in obj)) {\n            obj[k] = v;\n        }\n        else if (!_.isArray(obj[k])) {\n            obj[k] = [obj[k], v];\n        }\n        else {\n            obj[k].push(v);\n        }\n    });\n\n    return obj;\n};\n",
        "render": "/**\n * Renderer constructors and general utilities for rendering Form objects\n * as HTML.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar events = require('kanso/events'),\n    sanitize = require('kanso/sanitize'),\n    _ = require('./underscore')._;\n\nvar h = sanitize.escapeHtml;\n\n\n/**\n * Generates a script tag that fires the event named {name}.\n */\n\nexports.scriptTagForEvent = function (name) {\n    var rv = (\n        '<script type=\"text/javascript\">' +\n        \"// <![CDATA[\\n\" +\n            \"require('kanso/events').emit('\" +\n                sanitize.cdata(sanitize.js(name)) +\n            \"');\" +\n        \"// ]]>\" +\n        '</script>'\n    );\n\n    return rv;\n}; \n\n/**\n * Renders HTML for error messages.\n *\n * @name errorHTML(errors)\n * @param {Array} errors\n * @returns {String}\n * @api public\n */\n\nexports.errorHTML = function (errors) {\n    if (errors && errors.length) {\n        var html = '<ul class=\"errors right\">';\n        for (var i = 0; i < errors.length; i++) {\n            html += (\n                '<li class=\"error_msg\">' +\n                    h(errors[i].message || errors[i].toString()) +\n                '</li>'\n            );\n        }\n        html += '</ul>';\n        return html;\n    }\n    return '';\n};\n\n/**\n * Generates the text for a field's label, depending on whether\n * a custom label is defined or not. If not, the name is captialized and\n * underscores are replaces with spaces to produce the label's text.\n *\n * @name labelText(field, name)\n * @param {Object} field\n * @param {String} name\n * @returns {String}\n * @api public\n */\n\nexports.labelText = function (field, name) {\n    if (field.label) {\n        return field.label;\n    }\n    return name.substr(0, 1).toUpperCase() + name.substr(1).replace(/_/g, ' ');\n};\n\n/**\n * Generates HTML for label tags.\n *\n * @name labelHTML(field, name, id)\n * @param {Object} field\n * @param {String} name\n * @param {String} id\n * @returns {String}\n * @api public\n */\n\nexports.labelHTML = function (field, name, id) {\n    return '<label for=\"' + h(id || sanitize.id(name)) + '\">' +\n        h(exports.labelText(field, name, id)) +\n    '</label>';\n};\n\n/**\n * Generates HTML for field descriptions (if defined).\n *\n * @name descriptionHTML(obj)\n * @param {Object} obj\n * @returns {String}\n * @api public\n */\n\nexports.descriptionHTML = function (obj) {\n    if (obj.description) {\n        return '<div class=\"description\">' + h(obj.description) + '</div>';\n    }\n    return '';\n};\n\n/**\n * Generates HTML for field hints (if defined).\n *\n * @name hintHTML(obj)\n * @param {Object} obj\n * @returns {String}\n * @api public\n */\n\nexports.hintHTML = function (obj) {\n    if (obj.hint) {\n        return '<div class=\"hint\">' + h(obj.hint) + '</div>';\n    }\n    return '';\n};\n\n/**\n * Creates an array of default class names for a field. This includes\n * 'required' for required fields and 'error' for fields failing validation.\n *\n * All fields are given a 'field' class.\n *\n * @name classes(field, errors)\n * @param {Object} field\n * @param {Array} errors\n * @returns {Array}\n * @api public\n */\n\nexports.classes = function (field, errors) {\n    var r = ['field'];\n    if (errors && errors.length) {\n        r.push('error');\n    }\n    if (field.required) {\n        r.push('required');\n    }\n    return r;\n};\n\n/**\n * Determines the default renderer class, to be used globally by \n * instances of forms.Form that fail to specify a renderer class.\n *\n * @name defaultRenderer()\n * @returns {Function}\n * @api public\n */\n\nexports.defaultRenderer = function () {\n    return exports.table;\n};\n\n/**\n * The default table renderer class, passed to the toHTML method of a\n * form. Renders a form using a single table, with <tbody> tags to\n * represent nested field groups. The <tbody>s are labelled with\n * specific CSS classes, including depth information. See style.css\n * for details on how to style this output.\n *\n * @name table\n * @constructor\n * @api public\n */\n\nexports.table = function () {\n\n    /**\n     * Constructor for renderer; initializes object. The string returned\n     * from this function is prepended to the form's markup.\n     *\n     * @constructor\n    */\n    this.start = function (errs) {\n        this.depth = 0;\n        var html = '<table class=\"render-table\">';\n        if (errs && errs.length) {\n            html += '<ul class=\"form-errors\">';\n            _.each(errs, function (e) {\n                html += '<li>' + (e.message || e.toString()) + '</li>';\n            });\n            html += '</ul>';\n        }\n        return html;\n    };\n\n    /**\n     * Called by the forms layer when it encounters a new\n     * nesting context (i.e. a new grouping of fields). The\n     * path parameter is an array of strings that describes\n     * the path (in terms of document keys) to the new group.\n     * When concatenated together with a dot, this array yields\n     * the new prefix for named HTML form fields.\n     *\n     * @param {Array} path\n    */\n    this.beginGroup = function (path) {\n        this.depth += 1;\n        var name = _.last(path);\n        var css_class = 'level-' + this.depth;\n\n        return (\n            '<tbody class=\"head ' + h(css_class) + '\">' +\n            '<tr>' +\n                '<th colspan=\"3\">' +\n                    h(name.substr(0, 1).toUpperCase() +\n                        name.substr(1).replace(/_/g, ' ')) +\n                '</th>' +\n            '</tr>' +\n            '</tbody>' +\n            '<tbody class=\"group ' + h(css_class) + '\">'\n        );\n    };\n\n    /**\n     * Called by the forms layer when it encounters the end\n     * of a nesting context. In the absence of errors, this\n     * function is guaranteed to be called once for each time\n     * that beginGroup is called; the order will be nested and\n     * properly balanced. The path argument is the same as it was\n     * for the corresponding beginGroup call; see beginGroup.\n     *\n     * @param {Array} path\n     */\n    this.endGroup = function (path) {\n        this.depth -= 1;\n        return '</tbody>';\n    };\n\n    /**\n     * Called by the forms layer when it encounters any regular\n     * field -- i.e. one that is neither an embed nor an embedList.\n     *\n     * @param {Object} field\n     * @param {Array} path\n     * @param {Object} value\n     * @param {String} raw\n     * @param {Array} errors\n     * @param {Object} options An object containing widget options, which\n     *          will ultimately be provided to each widget's toHTML method.\n     */\n    this.field = function (field, path, value, raw, errors, options) {\n        var name = path.join('.');\n        var id = (path.join('_') + '_field');\n        var caption = path.slice(this.depth).join(' ');\n\n        events.once('renderFinish', function () {\n            if (field.widget.clientInit) {\n                setTimeout(function () {\n                    field.widget.clientInit(\n                        field, path, value, raw, errors, (options || {})\n                    );\n                }, 0);\n            }\n        });\n\n        if (field.widget.type === 'hidden') {\n            return field.widget.toHTML(\n                name, value, raw, field, (options || {})\n            );\n        }\n\n        var rv = (\n            '<tr id=\"' + id + '\" class=\"' +\n                exports.classes(field, errors).join(' ') + '\">' +\n                '<th>' +\n                    exports.labelHTML(field, caption) +\n                    exports.descriptionHTML(field) +\n                '</th>' +\n                '<td>' +\n                    exports.errorHTML(errors) +\n                    field.widget.toHTML(\n                        name, value, raw, field, (options || {})\n                    ) +\n                    exports.hintHTML(field) +\n                '</td>' +\n            '</tr>'\n        );\n        return rv;\n    };\n\n    /**\n     * Called by the forms layer when it is finished rendering a form.\n     * Markup returned from this function is appended to the form output.\n     *\n     * @param {String} field\n     * @param {Array} path\n     * @param {Object} value\n     * @param {String} raw\n     * @param {Array} errors\n    */\n    this.end = function () {\n        return '</table>';\n    };\n\n};\n\n/**\n *  Renders a form using a series of properly-nested <div> tags.\n *  These <div>s are labelled with specific CSS classes, some of which\n *  provide depth information (with the aim of simplifying CSS rules).\n *  See style.css for details on how to style this output.\n */\nexports.div = function () {\n    /**\n     * Constructor for renderer; initializes object. The string returned\n     * from this function is prepended to the form's markup.\n     *\n     * @constructor\n    */\n    this.start = function (errs) {\n        this.depth = 0;\n        var html = '<div class=\"render-div\">';\n        if (errs && errs.length) {\n            html += '<ul class=\"errors\">';\n            _.each(errs, function (e) {\n                html += '<li>' + (e.message || e.toString()) + '</li>';\n            });\n            html += '</ul>';\n        }\n        return html;\n    };\n\n    /**\n     * Called by the forms layer when it encounters a new\n     * nesting context (i.e. a new grouping of fields). The\n     * path parameter is an array of strings that describes\n     * the path (in terms of document keys) to the new group.\n     * When concatenated together with a dot, this array yields\n     * the new prefix for named HTML form fields.\n     *\n     * @param {Array} path\n    */\n    this.beginGroup = function (path) {\n        this.depth += 1;\n        var name = _.last(path);\n        var css_class = 'level-' + this.depth;\n        return (\n            '<div class=\"group ' + h(css_class) + '\">' +\n            '<div class=\"heading\">' +\n                h(name.substr(0, 1).toUpperCase() +\n                    name.substr(1).replace(/_/g, ' ')) +\n            '</div>'\n        );\n    };\n\n    /**\n     * Called by the forms layer when it encounters the end\n     * of a nesting context. In the absence of errors, this\n     * function is guaranteed to be called once for each time\n     * that beginGroup is called; the order will be nested and\n     * properly balanced. The path argument is the same as it was\n     * for the corresponding beginGroup call; see beginGroup.\n     *\n     * @param {Array} path\n    */\n    this.endGroup = function (path) {\n        this.depth -= 1;\n        return '</div>';\n    };\n\n    /**\n     * Called by the forms layer when it encounters any regular\n     * field -- i.e. one that is neither an embed nor an embedList.\n     *\n     * @param {Object} field\n     * @param {Array} path\n     * @param {Object} value\n     * @param {String} raw\n     * @param {Array} errors\n     * @param {Object} options An object containing widget options, which\n     *          will ultimately be provided to each widget's toHTML method.\n    */\n    this.field = function (field, path, value, raw, errors, options) {\n        var name = path.join('.');\n        var caption = path.slice(this.depth).join(' ');\n        if (field.widget.type === 'hidden') {\n            return field.widget.toHTML(\n                name, value, raw, field, (options || {})\n            );\n        }\n        return (\n            '<div class=\"' +\n                exports.classes(field, errors).join(' ') + '\">' +\n            '<div class=\"scalar\">' +\n                '<div class=\"label\">' +\n                    '<label for=\"' + h(name) + '\">' +\n                        exports.labelHTML(field, caption) +\n                        exports.descriptionHTML(field) +\n                    '</label>' +\n                '</div>' +\n                '<div class=\"content\">' +\n                    '<div class=\"inner\">' +\n                        field.widget.toHTML(\n                            name, value, raw, field, (options || {})\n                        ) +\n                    '</div>' +\n                    '<div class=\"hint\">' +\n                        exports.hintHTML(field) +\n                    '</div>' +\n                    '<div class=\"errors\">' +\n                        exports.errorHTML(errors) +\n                    '</div>' +\n                '</div>' +\n            '</div>' +\n            '</div>'\n        );\n    };\n\n    /**\n     * Called by the forms layer when it is finished rendering a form.\n     * Markup returned from this function is appended to the form output.\n     *\n     * @param {String} field\n     * @param {Array} path\n     * @param {Object} value\n     * @param {String} raw\n     * @param {Array} errors\n    */\n    this.end = function () {\n        return '</div>';\n    };\n};\n\n",
        "fields": "/**\n * The building blocks of Types and Forms, Fields help to validate and authorize\n * changes to docuemnt values.\n *\n * @module\n */\n\n\n/**\n * Module dependencies\n */\n\nvar permissions = require('./permissions'),\n    validators = require('./validators'),\n    widgets = require('./widgets'),\n    utils = require('./utils'),\n    _ = require('./underscore')._;\n\n\n/**\n * Field objects are used when constructing content types and forms.\n *\n * #### Options ####\n *\n * * **omit_empty**  *Boolean* - whether to omit the field from a document when\n *                               the field is empty\n * * **permissions** *Object*  - a permissions check function or an object\n *                               containing separate functions to run on create,\n *                               edit and update operations.\n * * **validators**  *Array*   - an array of validation functions (default: [])\n * * **required**    *Boolean* - whether the field is required (default: true)\n *\n * @constructor\n * @name Field\n * @param {Object} options\n * @api public\n */\n\nvar Field = exports.Field = function Field(options) {\n    _.extend(this, _.defaults(options || {}, {\n        widget: widgets.text(),\n        omit_empty: false,\n        permissions: {},\n        validators: [],\n        required: true\n    }));\n    return this;\n};\n\n\n/**\n * Parses a raw value returning the correct JavaScript type for this field.\n * This will usually be overridden by other field types.\n *\n * @name Field.parse(raw)\n * @param raw\n * @api public\n */\n\nField.prototype.parse = function (raw) {\n    return raw;\n};\n\n\n/**\n * Test values to see if field is considered empty.\n *\n * This function accepts the raw value even though by default it only\n * checks the parsed value, so that other field types overridding this method\n * have the raw data available.\n *\n * @name Field.isEmpty(value, raw)\n * @param value - the parsed value for the field\n * @param raw - the raw value for this field\n * @returns {Boolean}\n * @api public\n */\n\nField.prototype.isEmpty = function (value, raw) {\n    if (raw === undefined) {\n        if (typeof value === 'number' && isNaN(value)) {\n            return true;\n        }\n        raw = value;\n    }\n    return (raw === '' || raw === null || raw === undefined);\n};\n\n/**\n * Run the field's validation functions against a value. Returns an\n * array of validation errors, or an empty array if valid.\n *\n * @name Field.validate(doc, value, raw)\n * @param {Object} doc\n * @param value\n * @param raw\n * @returns {Array}\n * @api public\n */\n\nField.prototype.validate = function (doc, value, raw) {\n    // don't validate empty fields, but check if required\n    if (this.isEmpty(value, raw)) {\n        if (this.required) {\n            return [ new Error('Required field') ];\n        }\n        return [];\n    }\n    return _.reduce(this.validators, function (errs, v) {\n        try {\n            // check that v is actually a function, since IE likes to\n            // insert nulls here for some reason\n            if (v) {\n                errs = errs.concat(v(doc, value, raw) || []);\n            }\n        }\n        catch (e) {\n            errs.push(e);\n        }\n        return errs;\n    }, []);\n};\n\n/**\n * Check relevant field permissions to see if user is authorised to make\n * changes. Returns an array of permissions errors, or an empty array if the\n * changes are permissible.\n *\n * @name Field.authorize(newDoc, oldDoc, newVal, oldVal, userCtx)\n * @param {Object} newDoc\n * @param {Object} oldDoc\n * @param newVal\n * @param oldVal\n * @param {Object} userCtx\n * @returns {Array}\n * @api public\n */\n\nField.prototype.authorize = function (newDoc, oldDoc, newVal, oldVal, userCtx) {\n    var perms = this.permissions;\n    var errors = [];\n    if (_.isFunction(perms)) {\n        errors = errors.concat(\n            utils.getErrors(perms, arguments)\n        );\n    }\n    // on update\n    var fn;\n    // on add\n    if (newDoc && !oldDoc) {\n        fn = perms.add;\n    }\n    // on remove\n    else if (!newDoc || newDoc._deleted) {\n        fn = perms.remove;\n    }\n    // on update\n    else if (newVal !== oldVal) {\n        fn = perms.update;\n    }\n    if (fn) {\n        errors = errors.concat(\n            utils.getErrors(fn, arguments)\n        );\n    }\n    return errors;\n};\n\n\n/**\n * Embedded objects represent a Type embedded within another Type or set of\n * Fields. Its not a true field, but like the Field constructor it acts as a\n * marker when walking through the sub-objects that make up a schema.\n *\n * Exposes the same methods as Field objects.\n *\n * #### Options ####\n *\n * * **type**        *Type Object*  - Required, the Type definition to embed\n * * **omit_empty**  *Boolean* - whether to omit the field from a document when\n *                               the field is empty\n * * **permissions** *Object*  - a permissions check function or an object\n *                               containing separate functions to run on create,\n *                               edit and update operations.\n * * **validators**  *Array*   - an array of validation functions (default: [])\n * * **required**    *Boolean* - whether the field is required (default: true)\n *\n * @name Embedded\n * @param {Object} options\n * @constructor\n * @api public\n */\n\nvar Embedded = exports.Embedded = function Embedded(options) {\n    options = options || {};\n    var type = options.type;\n    if (!type) {\n        throw new Error('No type specified');\n    }\n    options.permissions = _.defaults((options.permissions || {}), {\n        add: permissions.inherit(type),\n        remove: permissions.inherit(type),\n        update:   permissions.inherit(type)\n    });\n    _.extend(this, _.defaults(options, {\n        required: true\n    }));\n    this.type = type;\n};\n\n/**\n * Test values to see if field is considered empty.\n *\n * This function accepts the raw value even though by default it only\n * checks the parsed value, so that other field types overridding this method\n * have the raw data available.\n *\n * @name Embedded.isEmpty(value, raw)\n * @param value - the parsed value for the field\n * @param raw - the raw value for this field\n * @api public\n */\n\nEmbedded.prototype.isEmpty = function (value, raw) {\n    return (value === '' || value === null || value === undefined);\n};\n\n/**\n * Run the type's validate function against a value. Returns an\n * array of validation errors, or an empty array if valid.\n *\n * @name Embedded.validate(doc, value, raw)\n * @param {Object} doc\n * @param value\n * @param raw\n * @returns {Array}\n * @api public\n */\n\nEmbedded.prototype.validate = function (doc, value, raw) {\n    // don't validate empty fields, but check if required\n    if (this.isEmpty(value, raw)) {\n        if (this.required) {\n            return [ new Error('Required field') ];\n        }\n        return [];\n    }\n    if (!value._id) {\n        return [new Error('Embedded document missing _id')];\n    }\n    return this.type.validate(value, raw);\n};\n\n/**\n * Check relevant type permissions to see if user is authorised to make\n * changes. Returns an array of permissions errors, or an empty array if the\n * changes are permissible.\n *\n * @name Embedded.authorize(newDoc, oldDoc, newVal, oldVal, user)\n * @param {Object} newDoc\n * @param {Object} oldDoc\n * @param newVal\n * @param oldVal\n * @param {Object} user\n * @returns {Array}\n * @api public\n */\n\nEmbedded.prototype.authorize = function (newDoc, oldDoc, newVal, oldVal, user) {\n    if (newVal && oldVal && newVal._id !== oldVal._id) {\n        oldVal = undefined;\n    }\n    return this.type.authorize(newVal || {_deleted: true}, oldVal, user);\n};\n\n/**\n * EmbeddedList objects represent multiple instances of a Type embedded within\n * another Type or set of Fields. Its not a true field, but like the Field\n * constructor it acts as a marker when walking through the sub-objects that\n * make up a schema.\n *\n * Exposes the same methods as Field objects.\n *\n * #### Options ####\n *\n * * **type**        *Type Object*  - Required, the Type definition to embed\n * * **omit_empty**  *Boolean* - whether to omit the field from a document when\n *                               the field is empty\n * * **permissions** *Object*  - a permissions check function or an object\n *                               containing separate functions to run on create,\n *                               edit and update operations.\n * * **validators**  *Array*   - an array of validation functions (default: [])\n * * **required**    *Boolean* - whether the field is required (default: true)\n *\n * @name EmbeddedList\n * @param {Object} options\n * @constructor\n * @api public\n */\n\nvar EmbeddedList = exports.EmbeddedList = function EmbeddedList(options) {\n    options = options || {};\n    var type = options.type;\n    if (!type) {\n        throw new Error('No type specified');\n    }\n    options.permissions = _.defaults((options.permissions || {}), {\n        add: permissions.inherit(type),\n        remove: permissions.inherit(type),\n        update:   permissions.inherit(type)\n    });\n    _.extend(this, _.defaults(options, {\n        required: true\n    }));\n    this.type = type;\n};\n\n/**\n * Test values to see if field is considered empty.\n *\n * This function accepts the raw value even though by default it only\n * checks the parsed value, so that other field types overridding this method\n * have the raw data available.\n *\n * @name EmbeddedList.isEmpty(value, raw)\n * @param value - the parsed value for the field\n * @param raw - the raw value for this field\n * @api public\n */\n\nEmbeddedList.prototype.isEmpty = function (value, raw) {\n    return (value === '' || value === null || value === undefined);\n};\n\n/**\n * Detects embedded documents with missing _id properties and returns an\n * array of Error objects for each occurence. Returns an empty array if\n * all documents have a populated _id property.\n *\n * @name EmbeddedList.missingIDs(list)\n * @param {Array} list\n * @returns {Array}\n * @api public\n */\n\nEmbeddedList.prototype.missingIDs = function (list) {\n    var errs = [];\n    _.each(list, function (v, i) {\n        if (!v._id) {\n            var e = new Error('Embedded document missing _id');\n            e.field = [i];\n            errs.push(e);\n        }\n    });\n    return errs;\n};\n\n/**\n * Detects embedded documents with duplicate _id properties and returns an\n * array of Error objects for each occurence. Returns an empty array if\n * all documents have a unique _id property.\n *\n * @name EmbeddedList.duplicateIDs(list)\n * @param {Array} list\n * @returns {Array}\n * @api public\n */\n\nEmbeddedList.prototype.duplicateIDs = function (list) {\n    var ids = {};\n    var errs = [];\n    _.each(list, function (v, i) {\n        if (v._id in ids) {\n            var e = new Error('Embedded document duplicates an existing _id');\n            e.field = [i];\n            errs.push(e);\n        }\n        ids[v._id] = true;\n    });\n    return errs;\n};\n\n/**\n * Checks for missing or duplicate _ids then runs the type's validate function\n * against each embedded document. Returns an array of validation errors, or\n * an empty array if valid.\n *\n * @name EmbeddedList.validate(doc, value, raw)\n * @param {Object} doc\n * @param value\n * @param raw\n * @returns {Array}\n * @api public\n */\n\nEmbeddedList.prototype.validate = function (doc, value, raw) {\n    var type = this.type;\n\n    // don't validate empty fields, but check if required\n    if (this.isEmpty(value, raw)) {\n        if (this.required) {\n            return [ new Error('Required field') ];\n        }\n        return [];\n    }\n\n    // check all values are objects\n    var non_objects = _.filter(value, function (v) {\n\n        /* Workaround for interpreter bug:\n            Saving embedList() data throws an error when running in a\n            CouchDB linked against js-1.8.0. We encounter a situation where\n            typeof(v) === 'object', but the 'v instanceof Object' test\n            incorrectly returns false. We suspect an interpreter bug.\n            Please revisit this using a CouchDB linked against js-1.8.5.\n            We don't currently have the infrastructure for a test case. */\n        \n        /* Before: return !(v instanceof Object) || _.isArray(v); */\n        return (typeof(v) !== 'object' || _.isArray(v));\n    });\n    if (non_objects.length) {\n        return _.map(non_objects, function (v) {\n            return new Error(v + ' is not an object');\n        });\n    }\n\n    // check for missing ids\n    var missing = this.missingIDs(value);\n    if (missing.length) {\n        return missing;\n    }\n\n    // check for duplicate ids\n    var duplicates = this.duplicateIDs(value);\n    if (duplicates.length) {\n        return duplicates;\n    }\n\n    // run type validation against each embedded document\n    return _.reduce(value, function (errs, v, i) {\n        var r = raw ? raw[i]: undefined;\n        return errs.concat(\n            _.map(type.validate(v, r), function (err) {\n                err.field = [i].concat(err.field || []);\n                return err;\n            })\n        );\n    }, []);\n};\n\n/**\n * Check relevant type permissions to see if user is authorised to make\n * changes. Returns an array of permissions errors, or an empty array if the\n * changes are permissible.\n *\n * @name EmbeddedList.authorize(nDoc, oDoc, nVal, oVal, user)\n * @param {Object} nDoc\n * @param {Object} oDoc\n * @param nVal\n * @param oVal\n * @param {Object} user\n * @returns {Array}\n * @api public\n */\n\nEmbeddedList.prototype.authorize = function (nDoc, oDoc, nVal, oVal, user) {\n    var type = this.type;\n    var perms = this.permissions;\n\n    nVal = nVal || [];\n    oVal = oVal || [];\n\n    // a unique list of embedded ids from both the old and new document\n    var ids = _.uniq(_.pluck(nVal, '_id').concat(_.pluck(oVal, '_id')));\n\n    return _.reduce(ids, function (errs, id, i) {\n\n        var curr_errs = [];\n        var nd = _.detect(nVal, function (v) {\n            return v && v._id === id;\n        });\n        nd = nd || {_deleted: true};\n        var od = _.detect(oVal, function (v) {\n            return v && v._id === id;\n        });\n        var args = [nDoc, oDoc, nd, od, user];\n\n        if (_.isFunction(perms)) {\n            curr_errs = utils.getErrors(perms, args);\n        }\n        var fn;\n        // on add\n        if (nd && !od) {\n            fn = perms.add;\n        }\n        // on remove\n        else if (nd._deleted) {\n            fn = perms.remove;\n        }\n        // on update\n        else if (JSON.stringify(nd) !== JSON.stringify(od)) {\n            fn = perms.update;\n        }\n        if (fn) {\n            curr_errs = curr_errs.concat(utils.getErrors(fn, args));\n        }\n        curr_errs = _.map(curr_errs, function (e) {\n            e.field = [i].concat(e.field || []);\n            return e;\n        });\n        return errs.concat(curr_errs);\n\n    }, []);\n};\n\n\n/**\n * Prepends a validator to an array of validator functions.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @api private\n */\n\nvar prependValidator = function (options, fn) {\n    options = options || {};\n    options.validators = [fn].concat(options.validators || []);\n    return options;\n};\n\n\n/**\n * Creates a new string Field\n *\n * @name string([options])\n * @param {Object} options\n * @api public\n */\n\nexports.string = function (options) {\n    return new Field(_.defaults((options || {}), {\n        parse: function (raw) {\n            if (raw === null || raw === undefined) {\n                return '';\n            }\n            return '' + raw;\n        }\n    }));\n};\n\n\n/**\n * Creates a new number Field\n *\n * @name number([options])\n * @param {Object} options\n * @api public\n */\n\nexports.number = function (options) {\n    options = prependValidator(options, function (doc, value) {\n        if (isNaN(value)) {\n            throw new Error('Not a number');\n        }\n    });\n    return new Field(_.defaults((options || {}), {\n        parse: function (raw) {\n            if (raw === '' || raw === null || raw === undefined) {\n                return NaN;\n            }\n            return Number(raw);\n        }\n    }));\n};\n\n\n/**\n * Creates a new boolean Field\n *\n * @name boolean([options])\n * @param {Object} options\n * @api public\n */\n\nexports.boolean = function (options) {\n    return new Field(_.defaults((options || {}), {\n        widget: widgets.checkbox(),\n        required: false,\n        parse: Boolean\n    }));\n};\n\n\n/**\n * Creates a URL Field\n *\n * @name url([options])\n * @param {Object} options\n * @api public\n */\n\nexports.url = function (options) {\n    options = prependValidator(options, validators.url());\n    return exports.string(options);\n};\n\n\n/**\n * Creates an email Field\n *\n * @name email([options])\n * @param {Object} options\n * @api public\n */\n\nexports.email = function (options) {\n    options = prependValidator(options, validators.email());\n    return exports.string(options);\n};\n\n\n/**\n * Creates a creator Field\n *\n * @name creator([options])\n * @param {Object} options\n * @api public\n */\n\nexports.creator = function (options) {\n    options = options || {};\n    if (!options.permissions) {\n        options.permissions = {};\n    }\n    var p = options.permissions;\n    if (p.add) {\n        p.add = permissions.all([\n            permissions.matchUsername(),\n            p.add\n        ]);\n    }\n    else {\n        p.add = permissions.matchUsername();\n    }\n    if (p.update) {\n        p.update = permissions.all([\n            permissions.fieldUneditable(),\n            p.update\n        ]);\n    }\n    else {\n        p.update = permissions.fieldUneditable();\n    }\n    return exports.string(_.defaults(options, {\n        required: false,\n        widget: widgets.creator(),\n        default_value: function (req) {\n            return (req.userCtx && req.userCtx.name) || '';\n        }\n    }));\n};\n\n\n/**\n * Creates a createdTime timestamp Field\n *\n * @name createdTime([options])\n * @param {Object} options\n * @api public\n */\n\nexports.createdTime = function (options) {\n    options = options || {};\n    if (!options.permissions) {\n        options.permissions = {};\n    }\n    var p = options.permissions;\n    if (p.update) {\n        p.update = permissions.all([\n            permissions.fieldUneditable(),\n            p.update\n        ]);\n    }\n    else {\n        p.update = permissions.fieldUneditable();\n    }\n    return exports.number(_.defaults(options, {\n        widget: widgets.computed(),\n        default_value: function (req) {\n            return new Date().getTime();\n        }\n    }));\n};\n\n\n/**\n * Creates a choice Field\n *\n * Required option: values - an array of possible choices, each an array\n * with the first item as the value and the second as its label.\n *\n * @name choice([options])\n * @param {Object} options\n * @api public\n */\n\nexports.choice = function (options) {\n    if (!options || !options.values) {\n        throw new Error('No values defined');\n    }\n    options = prependValidator(options, function (doc, value) {\n        for (var i = 0; i < options.values.length; i++) {\n            if (value === options.values[i][0]) {\n                return;\n            }\n        }\n        throw new Error('Invalid choice');\n    });\n    // use value as label if no label defined\n    options.values = _.map(options.values, function (v) {\n        return _.isArray(v) ? v: [v, v];\n    });\n    return new Field(_.defaults(options, {\n        widget: widgets.select({values: options.values})\n    }));\n};\n\n\n/**\n * Creates a number choice Field\n *\n * @name numberChoice([options])\n * @param {Object} options\n * @api public\n */\n\nexports.numberChoice = function (options) {\n    options = options || {};\n    prependValidator(options, function (doc, value) {\n        if (isNaN(value)) {\n            throw new Error('Not a number');\n        }\n    });\n    return exports.choice(_.defaults(options, {\n        parse: function (raw) {\n            if (raw === null || raw === '') {\n                return '';\n            }\n            return Number(raw);\n        }\n    }));\n};\n\n\n/**\n * Creates an Embedded Field\n *\n * Required option: type - the Type definition to embed\n *\n * @name embed([options])\n * @param {Object} options\n * @api public\n */\n\nexports.embed = function (options) {\n    return new Embedded(_.defaults((options || {}), {\n        widget: widgets.embedList({\n            singleton: true,\n            widget: widgets.defaultEmbedded()\n        })\n    }));\n};\n\n\n/**\n * Creates an EmbeddedList Field\n *\n * Required option: type - the Type definition to embed\n *\n * @name embedList([options])\n * @param {Object} options\n * @api public\n */\n\nexports.embedList = function (options) {\n    return new EmbeddedList(_.defaults((options || {}), {\n        widget: widgets.embedList({\n            singleton: false,\n            widget: widgets.defaultEmbedded()\n        })\n    }));\n};\n\n\n/**\n * Creates a array Field. The default parse function expects a single row of\n * comma separated values.\n *\n * To accept an array of values other than strings, add a function to options\n * called parseEach which accepts the string value for each item and performs\n * the transformation.\n *\n * @name array([options])\n * @param {Object} options\n * @api public\n */\n\nexports.array = function (options) {\n    options = options || {};\n    options.hint = options.hint || \"Values should be comma separated\";\n    prependValidator(options, function (doc, value) {\n        if (!_.isArray(value)) {\n            throw new Error('Not an array');\n        }\n    });\n    return exports.string(_.defaults(options, {\n        parse: function (raw) {\n            var result = utils.parseCSV(raw || '')[0] || [];\n            if (options.parseEach) {\n                result = _.map(result, options.parseEach);\n            }\n            return result;\n        }\n    }));\n};\n\n/**\n * Creates a number array Field, same as the array field only each value is\n * parsed as a number instead of a string.\n *\n * @name numberArray([options])\n * @param {Object} options\n * @api public\n */\n\nexports.numberArray = function (options) {\n    options = options || {};\n    options.parseEach = options.parseEach || function (v) {\n        return Number(v);\n    };\n    prependValidator(options, function (doc, value) {\n        for (var i = 0, len = value.length; i < len; i++) {\n            if (isNaN(value[i])) {\n                throw new Error('Not a number');\n            }\n        }\n    });\n    return exports.array(options);\n};\n\n",
        "sanitize": "/**\n * Input sanitization, escaping, and construction functions\n * covering security-sensitive areas.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar _ = require('./underscore')._;\n\n\n/**\n * Encodes required characters as HTML entities so a string\n * can be included in a page. This function must be used to\n * avoid Cross-site Scripting attacks.\n *\n * @name escapeHtml(s)\n * @param {String} s\n * @returns {String}\n * @api public\n */\n\nexports.escapeHtml = exports.h = function (s)\n{\n    s = ('' + s); /* Coerce to string */\n    s = s.replace(/&/g, '&amp;');\n    s = s.replace(/</g, '&lt;');\n    s = s.replace(/>/g, '&gt;');\n    s = s.replace(/\"/g, '&quot;');\n    s = s.replace(/'/g, '&#39;');\n    return s;\n};\n\n\n/**\n * Encodes selected characters in a string, so that the string\n * can be safely used within a Javascript string constant. This\n * function must be used to avoid cross-site scripting attacks\n * (or, in some cases, arbitrary server-side code execution).\n *\n * @name escapeJavascriptString(s)\n * @param {String} s\n * @returns {String}\n * @api public\n */\n\nexports.escapeJavascriptString = exports.js = function (s)\n{\n    s = ('' + s); /* Coerce to string */\n    s = s.replace(/'/g, \"\\\\'\");\n    s = s.replace(/'/g, \"\\\\'\");\n    s = s.replace(/'/g, \"\\\\'\");\n    s = s.replace(/\"/g, '\\\\\"');\n    return s;\n};\n\n\n/**\n * Encodes selected characters in a string, so that the string\n * can be safely used within an XML character data section.\n * This function must be used to avoid cross-site scripting attacks.\n *\n * @name escapeJavascriptString(s)\n * @param {String} s\n * @returns {String}\n * @api public\n */\n\nexports.escapeXmlCharacterData = exports.cdata = function (s)\n{\n    s = ('' + s); /* Coerce to string */\n    s = s.replace(/\\]\\]>/g, '');\n    return s;\n};\n\n\n/**\n * Takes any number of arguments, and combines them together\n * to safely form a string that's suitable for use as a DOM\n * element identifier.\n *\n * @name generateDomIdentifier(s)\n * @param {String} s\n * @returns {String}\n * @api public\n */\n\nexports.generateDomIdentifier = exports.id = function (/* ... */) {\n    if (arguments.length <= 0) {\n        return null;\n    }\n    var rv = [ 'id' ];\n    var esc = function (x) {\n        return ('' + x).replace(/[^A-Za-z0-9_]+/, '_');\n    };\n\n    for (var i = 0, len = arguments.length; i < len; ++i) {\n        var arg = arguments[i];\n        if (arg !== undefined && arg !== null) {\n            if (_.isArray(arg)) {\n                /* Avoid recursion; limit to one level deep */\n                for (var j = 0, lenj = arg.length; j < lenj; ++j) {\n                    if (arg[j] !== undefined && arg[j] !== null) {\n                        rv.push(esc(arg[j]));\n                    }\n                }\n            } else {\n                rv.push(esc(arg));\n            }\n        }\n    }\n    return rv.join('_');\n};\n\n\n/**\n * Takes any number of arguments, and combines them together\n * to safely form a string that's suitable for use in a DOM\n * element's name attribute.\n *\n * @name generateDomName(s)\n * @param {String} s\n * @returns {String}\n * @api public\n */\n\nexports.generateDomName = exports.name = function (/* ... */) {\n    if (arguments.length <= 0) {\n        return null;\n    }\n    var rv = [];\n    var esc = function (x) {\n        return ('' + x).replace(/[\\'\\\"]+/, '_');\n    };\n\n    for (var i = 0, len = arguments.length; i < len; ++i) {\n        var arg = arguments[i];\n        if (arg !== undefined && arg !== null) {\n            if (_.isArray(arg)) {\n                /* Avoid recursion; limit to one level deep */\n                for (var j = 0, lenj = arg.length; j < lenj; ++j) {\n                    if (arg[j] !== undefined && arg[j] !== null) {\n                        rv.push(esc(arg[j]));\n                    }\n                }\n            } else {\n                rv.push(esc(arg));\n            }\n        }\n    }\n    return rv.join('.');\n};\n\n\n",
        "session": "/**\n * Functions related to the management of user sessions and account information.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar db = require('./db'),\n    sha1 = require('./sha1'),\n    cookies = require('./cookies'),\n    events = require('./events'),\n    utils = require('./utils');\n\n\n/**\n * Creates a fake request to /_session to pass to sessionChange, useful\n * when using functions such as templates.render\n *\n * @name fakeRequest(userCtx, callback)\n * @param {Object} userCtx\n * @param {Function} callback\n * @api public\n */\n\nexports.fakeRequest = function (userCtx, callback) {\n    db.newUUID(100, function (err, uuid) {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            userCtx: userCtx,\n            uuid: uuid,\n            method: 'GET',\n            query: {},\n            headers: {},\n            path: ['_session'],\n            client: true,\n            initial_hit: utils.initial_hit,\n            cookie: cookies.readBrowserCookies()\n        });\n    });\n};\n\n/**\n * Calls sessionChange if exported from the currently loaded app.\n *\n * @name sessionChange(userCtx, callback)\n * @param {Object} userCtx\n * @param {Function} callback\n * @api public\n */\n\nexports.sessionChange = function (userCtx, callback) {\n    var req = exports.fakeRequest(userCtx, function (err, req) {\n        if (err) {\n            if (callback) {\n                return callback(err);\n            }\n            throw err;\n        }\n        events.emit('sessionChange', userCtx, req);\n        if (callback) {\n            callback();\n        }\n    });\n};\n\n/**\n * Logs out the current user.\n *\n * @name logout(callback)\n * @param {Function} callback\n * @api public\n */\n\nexports.logout = function (callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('logout cannot be called server-side');\n    }\n    db.request({\n        type: \"DELETE\",\n        url: \"/_session\", // don't need baseURL, /_session always available\n        username: \"_\",\n        password : \"_\"\n    },\n    function (err, resp) {\n        if (resp && resp.ok) {\n            utils.userCtx = {name: null, roles: []};\n            utils.session = {userCtx: utils.userCtx};\n            exports.sessionChange(utils.userCtx);\n        }\n        if (callback) {\n            callback(err, resp);\n        }\n    });\n};\n\n/**\n * Attempt to login using the username and password provided.\n *\n * @name login(username, password, callback)\n * @param {String} username\n * @param {String} password\n * @param {Function} callback\n * @api public\n */\n\nexports.login = function (username, password, callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('login cannot be called server-side');\n    }\n    db.request({\n        type: \"POST\",\n        url: \"/_session\",\n        data: {name: username, password: password}\n    },\n    function (err, resp) {\n        if (resp && resp.ok) {\n            // TODO: for some reason resp.name is set to null in the response\n            // even though the roles are correct for the user! Look into this\n            // and see if its a bug in couchdb, for now, just using the username\n            // given to the login function instead, since we know the login\n            // request was accepted.\n            //utils.userCtx = {name: resp.name, roles: resp.roles};\n            utils.userCtx = {name: username, roles: resp.roles};\n            utils.session = {userCtx: utils.userCtx};\n            exports.sessionChange(utils.userCtx);\n        }\n        if (callback) {\n            callback(err, resp);\n        }\n    });\n};\n\n\n/**\n * Returns the current user's session information.\n *\n * @name info(callback)\n * @param {Function} callback\n * @api public\n */\n\nexports.info = function (callback) {\n    if (!utils.isBrowser()) {\n        throw new Error('info cannot be called server-side');\n    }\n    db.request({\n        type: \"GET\",\n        url: \"/_session\"\n    },\n    function (err, resp) {\n        var oldUserCtx = utils.userCtx;\n        utils.session = resp;\n        utils.userCtx = (resp && resp.userCtx) || {name: null, roles: []};\n        // TODO: should this check for differences in more than just name?\n        if (!oldUserCtx || oldUserCtx.name !== utils.userCtx.name) {\n            exports.sessionChange(utils.userCtx);\n        }\n        if (callback) {\n            callback(err, resp);\n        }\n    });\n};\n\n/**\n * Returns the authentication database for the current user's session.\n *\n * @name userDb(callback)\n * @param {Function} callback\n * @api public\n */\n\nexports.userDb = function (callback) {\n    if (utils.session && utils.session.authentication_db) {\n        return callback(null, utils.session.authentication_db);\n    }\n    exports.info(function (err, session) {\n        callback(err, session ? session.info.authentication_db: null);\n    });\n};\n\n/**\n * Creates a new user document with given username and password.\n *\n * @name signup(username, password, callback)\n * @param {String} username\n * @param {String} password\n * @param {Function} callback\n * @api public\n */\n\nexports.signup = function (username, password, callback) {\n    var doc = {};\n    doc._id = 'org.couchdb.user:' + username;\n    doc.name = username;\n    doc.type = 'user';\n    doc.roles = [];\n\n    db.newUUID(100, function (err, uuid) {\n        if (err) {\n            return callback(err);\n        }\n        doc.salt = uuid;\n        doc.password_sha = sha1.hex(password + doc.salt);\n        exports.userDb(function (err, userdb) {\n            if (err) {\n                return callback(err);\n            }\n            var url = '/' + userdb + '/' + doc._id;\n            var req = {\n                type: 'PUT',\n                url: url,\n                data: JSON.stringify(doc),\n                processData: false,\n                contentType: 'application/json'\n            };\n            db.request(req, callback);\n        });\n    });\n};\n",
        "sha1": "/**\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS PUB 180-1. This module is used to hash user passwords in a way that's\r\n * compatible with CouchDB.\r\n *\r\n * This module is Copyright Paul Johnston 2000 - 2002 and distributed under the\r\n * BSD License. See http://pajhome.org.uk/crypt/md5 for details.\r\n *\r\n * @module\r\n */\r\n\r\n/*\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS PUB 180-1\r\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for details.\r\n */\r\n\r\n/*\r\n * Configurable variables. You may need to tweak these to be compatible with\r\n * the server-side, but the defaults work in most cases.\r\n */\r\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r\nvar b64pad  = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r\nvar chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */\r\n\r\n/*\r\n * These are the functions you'll usually want to call\r\n * They take string arguments and return either hex or base-64 encoded strings\r\n */\r\nfunction hex_sha1(s){return binb2hex(core_sha1(str2binb(s),s.length * chrsz));}\r\nfunction b64_sha1(s){return binb2b64(core_sha1(str2binb(s),s.length * chrsz));}\r\nfunction str_sha1(s){return binb2str(core_sha1(str2binb(s),s.length * chrsz));}\r\nfunction hex_hmac_sha1(key, data){ return binb2hex(core_hmac_sha1(key, data));}\r\nfunction b64_hmac_sha1(key, data){ return binb2b64(core_hmac_sha1(key, data));}\r\nfunction str_hmac_sha1(key, data){ return binb2str(core_hmac_sha1(key, data));}\r\n\r\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\r\nfunction sha1_vm_test()\r\n{\r\n  return hex_sha1(\"abc\") == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\r\n}\r\n\r\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\r\nfunction core_sha1(x, len)\r\n{\r\n  /* append padding */\r\n  x[len >> 5] |= 0x80 << (24 - len % 32);\r\n  x[((len + 64 >> 9) << 4) + 15] = len;\r\n\r\n  var w = Array(80);\r\n  var a =  1732584193;\r\n  var b = -271733879;\r\n  var c = -1732584194;\r\n  var d =  271733878;\r\n  var e = -1009589776;\r\n\r\n  for(var i = 0; i < x.length; i += 16)\r\n  {\r\n    var olda = a;\r\n    var oldb = b;\r\n    var oldc = c;\r\n    var oldd = d;\r\n    var olde = e;\r\n\r\n    for(var j = 0; j < 80; j++)\r\n    {\r\n      if(j < 16) w[j] = x[i + j];\r\n      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\r\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\r\n      e = d;\r\n      d = c;\r\n      c = rol(b, 30);\r\n      b = a;\r\n      a = t;\r\n    }\r\n\r\n    a = safe_add(a, olda);\r\n    b = safe_add(b, oldb);\r\n    c = safe_add(c, oldc);\r\n    d = safe_add(d, oldd);\r\n    e = safe_add(e, olde);\r\n  }\r\n  return Array(a, b, c, d, e);\r\n\r\n}\r\n\r\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\r\nfunction sha1_ft(t, b, c, d)\r\n{\r\n  if(t < 20) return (b & c) | ((~b) & d);\r\n  if(t < 40) return b ^ c ^ d;\r\n  if(t < 60) return (b & c) | (b & d) | (c & d);\r\n  return b ^ c ^ d;\r\n}\r\n\r\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\r\nfunction sha1_kt(t)\r\n{\r\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n         (t < 60) ? -1894007588 : -899497514;\r\n}\r\n\r\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data\r\n */\r\nfunction core_hmac_sha1(key, data)\r\n{\r\n  var bkey = str2binb(key);\r\n  if(bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);\r\n\r\n  var ipad = Array(16), opad = Array(16);\r\n  for(var i = 0; i < 16; i++)\r\n  {\r\n    ipad[i] = bkey[i] ^ 0x36363636;\r\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n  }\r\n\r\n  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);\r\n  return core_sha1(opad.concat(hash), 512 + 160);\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nfunction safe_add(x, y)\r\n{\r\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n  return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nfunction rol(num, cnt)\r\n{\r\n  return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\n/*\r\n * Convert an 8-bit or 16-bit string to an array of big-endian words\r\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\r\n */\r\nfunction str2binb(str)\r\n{\r\n  var bin = Array();\r\n  var mask = (1 << chrsz) - 1;\r\n  for(var i = 0; i < str.length * chrsz; i += chrsz)\r\n    bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i%32);\r\n  return bin;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a string\r\n */\r\nfunction binb2str(bin)\r\n{\r\n  var str = \"\";\r\n  var mask = (1 << chrsz) - 1;\r\n  for(var i = 0; i < bin.length * 32; i += chrsz)\r\n    str += String.fromCharCode((bin[i>>5] >>> (32 - chrsz - i%32)) & mask);\r\n  return str;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a hex string.\r\n */\r\nfunction binb2hex(binarray)\r\n{\r\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n  var str = \"\";\r\n  for(var i = 0; i < binarray.length * 4; i++)\r\n  {\r\n    str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +\r\n           hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);\r\n  }\r\n  return str;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a base-64 string\r\n */\r\nfunction binb2b64(binarray)\r\n{\r\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n  var str = \"\";\r\n  for(var i = 0; i < binarray.length * 4; i += 3)\r\n  {\r\n    var triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)\r\n                | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )\r\n                |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\r\n    for(var j = 0; j < 4; j++)\r\n    {\r\n      if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;\r\n      else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);\r\n    }\r\n  }\r\n  return str;\r\n}\r\n\r\n\r\n/**\r\n * Hashes a string using SHA1 and returns a hex representation of it.\r\n *\r\n * @name hex(s)\r\n * @param {String} s\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.hex = hex_sha1;\r\n\r\n/**\r\n * Hashes a string using SHA1 and returns a base64 representation of it.\r\n *\r\n * @name base64(s)\r\n * @param {String} s\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.base64 = b64_sha1;\r\n\r\n/**\r\n * Hashes a string using SHA1 and returns a string representation of it.\r\n *\r\n * @name str(s)\r\n * @param {String} s\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.str = str_sha1;\r\n\r\n/**\r\n * Calculates the HMAC-SHA1 of a key and some data, returning a hex\r\n * representation of it.\r\n *\r\n * @name hex_hmac(key, data)\r\n * @param {String} key\r\n * @param {String} data\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.hex_hmac = hex_hmac_sha1;\r\n\r\n/**\r\n * Calculates the HMAC-SHA1 of a key and some data, returning a base64\r\n * representation of it.\r\n *\r\n * @name base64_hmac(key, data)\r\n * @param {String} key\r\n * @param {String} data\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.base64_hmac = b64_hmac_sha1;\r\n\r\n/**\r\n * Calculates the HMAC-SHA1 of a key and some data, returning a string\r\n * representation of it.\r\n *\r\n * @name str_hmac(key, data)\r\n * @param {String} key\r\n * @param {String} data\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.str_hmac = str_hmac_sha1;\r\n",
        "types": "/**\n * Document types can be used to ease the validation of updates and check\n * permissions when creating, editing or deleting documents.\n *\n * @module\n */\n\n\n/**\n * Module dependencies\n */\n\nvar utils = require('./utils'),\n    kanso_utils = require('kanso/utils'),\n    db = require('./db'),\n    fields = require('./fields'),\n    fieldset = require('./fieldset'),\n    widgets = require('./widgets'),\n    permissions = require('./permissions'),\n    _ = require('./underscore')._;\n\n\n/**\n * Creates a new Type object\n *\n * #### Options ####\n *\n * * **fields**       *Object* - Field objects to use as the Types's schema\n * * **permissions**  *Object* - a permissions check function or an object\n *                    containing separate functions to run on add, remove\n *                    and update operations.\n * * **display_name** *Function|String|Array* - name to be used when displaying\n *                    the document in the admin tool. A string or array\n *                    will become the property to display. A function\n *                    should take the document as a object and return\n *                    the display name.\n *\n * @name Type(name, options)\n * @param {Object} options\n * @constructor\n * @api public\n */\n\nvar Type = exports.Type = function Type(name, options) {\n    if (typeof name !== 'string') {\n        throw new Error('First argument must be the type name');\n    }\n    this.name = name;\n    options = options || {};\n\n    var f = {};\n    f._id = fields.string({\n        omit_empty: true,\n        required: false,\n        widget: widgets.hidden(),\n        permissions: {\n            update: permissions.fieldUneditable()\n        },\n        default_value: function (req) {\n            return req.uuid;\n        }\n    });\n    f._rev = fields.string({\n        omit_empty: true,\n        required: false,\n        widget: widgets.hidden()\n    });\n    f._deleted = fields.boolean({\n        omit_empty: true,\n        required: false,\n        widget: widgets.hidden()\n    });\n    f.type = fields.string({\n        default_value: name,\n        widget: widgets.hidden(),\n        validators: [\n            function (doc, val, raw) {\n                if (val !== name) {\n                    throw new Error('Unexpected value for type');\n                }\n            },\n        ]\n    });\n    for (var k in options.fields) {\n        if (options.fields.hasOwnProperty(k)) {\n            f[k] = options.fields[k];\n        }\n    }\n\n    options.fields = f;\n    _.extend(this, _.defaults(options, {\n        permissions: []\n    }));\n\n    if (options.display_name) {\n        if (typeof options.display_name !== 'function') {\n            this.display_name = function (doc) {\n                if (typeof options.display_name === 'string') {\n                    options.display_name = [options.display_name];\n                }\n                return kanso_utils.getPropertyPath(doc, options.display_name);\n            };\n        }\n    }\n};\n\n/**\n * Run field validators against document and check for missing required\n * fields or extra fields when the Types's allow_extra_fields property is\n * set to false.\n *\n * @name Type.validate(doc, rawDoc)\n * @param {Object} doc\n * @param {Object} rawDoc\n * @returns {Array}\n * @api public\n */\n\nType.prototype.validate = function (doc, rawDoc) {\n    rawDoc = rawDoc || doc;\n    return fieldset.validate(\n        this.fields,\n        doc,\n        doc,\n        rawDoc,\n        [],\n        this.allow_extra_fields\n    );\n};\n\n\n/**\n * Run field permissions checks against userCtx and document.\n *\n * @name Type.authorize(nDoc, oDoc, user)\n * @param {Object} nDoc - new document\n * @param {Object} oDoc - old document\n * @param {Object} userCtx - user context object\n * @returns {Array}\n * @api public\n */\n\nType.prototype.authorize = function (nDoc, oDoc, user) {\n    var errs = this.authorizeTypeLevel(nDoc, oDoc, user);\n    return errs.concat(fieldset.authFieldSet(\n        this.fields, nDoc, oDoc, nDoc, oDoc, user, [], this.allow_extra_fields\n    ));\n};\n\n/**\n * Runs top type-level permissions checks only.\n *\n * @name Type.authorizeTypeLevel(nDoc, oDoc, user)\n * @param {Object} nDoc - new document\n * @param {Object} oDoc - old document\n * @param {Object} userCtx - user context object\n * @returns {Array}\n * @api public\n */\n\nType.prototype.authorizeTypeLevel = function (nDoc, oDoc, user) {\n    var perms = this.permissions;\n    var errs = [];\n    if (_.isFunction(perms)) {\n        errs = errs.concat(\n            utils.getErrors(perms, [nDoc, oDoc, null, null, user])\n        );\n    }\n    // on update\n    var fn = perms.update;\n    // on add\n    if (nDoc && !oDoc) {\n        fn = perms.add;\n    }\n    // on remove\n    else if (!nDoc || nDoc._deleted) {\n        fn = perms.remove;\n    }\n    if (fn) {\n        errs = errs.concat(\n            utils.getErrors(fn, [nDoc, oDoc, null, null, user])\n        );\n    }\n    return errs;\n};\n\n/**\n * Create's a new object for this Type. Pre-filling any default values and\n * providing a new _id value. This is a convenient function to use when creating\n * a type to embed within another.\n *\n * @name Type.create(userCtx, callback)\n * @param {Object} userCtx\n * @param {Function} callback\n * @api public\n */\n\nType.prototype.create = function (userCtx, callback) {\n    var doc = fieldset.createDefaults(this.fields, {userCtx: userCtx});\n    db.newUUID(100, function (err, uuid) {\n        if (err) {\n            return callback(err);\n        }\n        doc._id = uuid;\n        callback(null, doc);\n    });\n};\n\n/**\n * Calls validation and permissions functions relevant to a document update.\n * This should be called from your app's exported validate_doc_update function\n * if you wish to use kanso Types in you project.\n *\n * Throws on error.\n *\n * @name validate_doc_update(types, newDoc, oldDoc, userCtx)\n * @param {Object} types\n * @param {Object} newDoc\n * @param {Object} oldDoc\n * @param {Object} userCtx\n * @api public\n */\n\nexports.validate_doc_update = function (types, newDoc, oldDoc, userCtx) {\n    var type = (oldDoc && oldDoc.type) || newDoc.type;\n    if (type && types[type]) {\n        var t = types[type];\n        if (!newDoc._deleted) {\n            var validation_errors = t.validate(newDoc);\n            if (validation_errors.length) {\n                var err = validation_errors[0];\n                var msg = err.message || err.toString();\n                if (err.field && err.field.length) {\n                    msg = err.field.join('.') + ': ' + msg;\n                }\n                throw {forbidden: msg};\n            }\n        }\n        var permissions_errors = t.authorize(newDoc, oldDoc, userCtx);\n        if (permissions_errors.length) {\n            var err2 = permissions_errors[0];\n            var msg2 = err2.message || err2.toString();\n            if (err2.field && err2.field.length) {\n                msg2 = err2.field.join('.') + ': ' + msg2;\n            }\n            throw {unauthorized: msg2};\n        }\n        if (t.validate_doc_update) {\n            t.validate_doc_update(newDoc, oldDoc, userCtx);\n        }\n    }\n};\n\n/**\n * This type wraps a reference to a document. The _id attribute is\n * auto-generated as usual; the id of the document being referred to\n * is stored in the 'ref' attribute. In lists, this has the effect of\n * allowing multiple references to a single document.\n */\n\nexports.reference = function (options) {\n    if (!(options.type instanceof Type)) {\n        throw new Error(\n            'reference: The `type` option was not specified,' +\n                'or is not an instance of the `Type` class.'\n        );\n    }\n    var type = new Type('reference', {\n        fields: {\n            ref: fields.string({\n                omit_empty: true,\n                required: !!options.required,\n                widget: widgets.hidden(),\n                permissions: {},\n                default_value: function (req) {\n                    return undefined;\n                }\n            })\n        }\n    });\n    type.type = options.type;\n    return type;\n};\n\n/**\n * This type wraps a reference to a document. The _id attribute is\n * made writeable, and is used to store the id of the document being\n * referred to. In lists, has the effect of constraining each reference\n * to appear no more than once.\n */\n\nexports.uniqueReference = function (options) {\n    if (!(options.type instanceof Type)) {\n        throw new Error(\n            'uniqueReference: The `type` option was not specified,' +\n                'or is not an instance of the `Type` class.'\n        );\n    }\n    var type = new Type('unique_reference', {\n        fields: {}\n    });\n    type.fields._id = fields.string({\n        omit_empty: true,\n        required: !!options.required,\n        widget: widgets.hidden(),\n        permissions: {},\n        default_value: function (req) {\n            return req.uuid;\n        }\n    });\n    type.type = options.type;\n    return type;\n};\n",
        "underscore": "/**\n * Used by Kanso internally, the excellent Underscore.js library is also\n * included in the standard set of CommonJS modules pushed with your app.\n *\n * For more information on the Underscore.js API, see the website:\n * http://documentcloud.github.com/underscore/\n *\n * @module\n */\n\n\n//     Underscore.js 1.1.5\n//     (c) 2011 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore is freely distributable under the MIT license.\n//     Portions of Underscore are inspired or borrowed from Prototype,\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\n//     For all details and documentation:\n//     http://documentcloud.github.com/underscore\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice            = ArrayProto.slice,\n      unshift          = ArrayProto.unshift,\n      toString         = ObjProto.toString,\n      hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) { return new wrapper(obj); };\n\n  // Export the Underscore object for **CommonJS**, with backwards-compatibility\n  // for the old `require()` API. If we're not in CommonJS, add `_` to the\n  // global object.\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = _;\n    _._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.1.5';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects implementing `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (_.isNumber(obj.length)) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    return results;\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = memo !== void 0;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial && index === 0) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(\"Reduce of empty array with no initial value\");\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return memo !== void 0 ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var reversed = (_.isArray(obj) ? obj.slice() : _.toArray(obj)).reverse();\n    return _.reduce(reversed, iterator, memo, context);\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    each(obj, function(value, index, list) {\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    iterator = iterator || _.identity;\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator = iterator || _.identity;\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result = iterator.call(context, value, index, list)) return breaker;\n    });\n    return result;\n  };\n\n  // Determine if a given value is included in the array or object using `===`.\n  // Aliased as `contains`.\n  _.include = _.contains = function(obj, target) {\n    var found = false;\n    if (obj == null) return found;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    any(obj, function(value) {\n      if (found = value === target) return true;\n    });\n    return found;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    return _.map(obj, function(value) {\n      return (method ? value[method] : value).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Return the maximum element or (element-based computation).\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj)) return Math.max.apply(Math, obj);\n    var result = {computed : -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj)) return Math.min.apply(Math, obj);\n    var result = {computed : Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, iterator, context) {\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value : value,\n        criteria : iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria, b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  };\n\n  // Use a comparator function to figure out at what index an object should\n  // be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator) {\n    iterator = iterator || _.identity;\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >> 1;\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely convert anything iterable into a real, live array.\n  _.toArray = function(iterable) {\n    if (!iterable)                return [];\n    if (iterable.toArray)         return iterable.toArray();\n    if (_.isArray(iterable))      return iterable;\n    if (_.isArguments(iterable))  return slice.call(iterable);\n    return _.values(iterable);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    return _.toArray(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head`. The **guard** check allows it to work\n  // with `_.map`.\n  _.first = _.head = function(array, n, guard) {\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail`.\n  // Especially useful on the arguments object. Passing an **index** will return\n  // the rest of the values in the array from that index onward. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = function(array, index, guard) {\n    return slice.call(array, (index == null) || guard ? 1 : index);\n  };\n\n  // Get the last element of an array.\n  _.last = function(array) {\n    return array[array.length - 1];\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, function(value){ return !!value; });\n  };\n\n  // Return a completely flattened version of an array.\n  _.flatten = function(array) {\n    return _.reduce(array, function(memo, value) {\n      if (_.isArray(value)) return memo.concat(_.flatten(value));\n      memo[memo.length] = value;\n      return memo;\n    }, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    var values = slice.call(arguments, 1);\n    return _.filter(array, function(value){ return !_.include(values, value); });\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted) {\n    return _.reduce(array, function(memo, el, i) {\n      if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el))) memo[memo.length] = el;\n      return memo;\n    }, []);\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersect = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var args = slice.call(arguments);\n    var length = _.max(_.pluck(args, 'length'));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) results[i] = _.pluck(args, \"\" + i);\n    return results;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i, l;\n    if (isSorted) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n    for (i = 0, l = array.length; i < l; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item) {\n    if (array == null) return -1;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\n    var i = array.length;\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while(idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Binding with arguments is also known as `curry`.\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\n  _.bind = function(func, obj) {\n    if (nativeBind && func.bind === nativeBind) return func.bind.apply(func, slice.call(arguments, 1));\n    var args = slice.call(arguments, 2);\n    return function() {\n      return func.apply(obj, args.concat(slice.call(arguments)));\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length == 0) funcs = _.functions(obj);\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher = hasher || _.identity;\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return hasOwnProperty.call(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(func, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Internal function used to implement `_.throttle` and `_.debounce`.\n  var limit = function(func, wait, debounce) {\n    var timeout;\n    return function() {\n      var context = this, args = arguments;\n      var throttler = function() {\n        timeout = null;\n        func.apply(context, args);\n      };\n      if (debounce) clearTimeout(timeout);\n      if (debounce || !timeout) timeout = setTimeout(throttler, wait);\n    };\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n  _.throttle = function(func, wait) {\n    return limit(func, wait, false);\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds.\n  _.debounce = function(func, wait) {\n    return limit(func, wait, true);\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      return memo = func.apply(this, arguments);\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func].concat(slice.call(arguments));\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = slice.call(arguments);\n    return function() {\n      var args = slice.call(arguments);\n      for (var i=funcs.length-1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (hasOwnProperty.call(obj, key)) keys[keys.length] = key;\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    return _.map(obj, _.identity);\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    return _.filter(_.keys(obj), function(key){ return _.isFunction(obj[key]); }).sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) obj[prop] = source[prop];\n    });\n    return obj;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) if (obj[prop] == null) obj[prop] = source[prop];\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    // Check object identity.\n    if (a === b) return true;\n    // Different types?\n    var atype = typeof(a), btype = typeof(b);\n    if (atype != btype) return false;\n    // Basic equality test (watch out for coercions).\n    if (a == b) return true;\n    // One is falsy and the other truthy.\n    if ((!a && b) || (a && !b)) return false;\n    // Unwrap any wrapped objects.\n    if (a._chain) a = a._wrapped;\n    if (b._chain) b = b._wrapped;\n    // One of them implements an isEqual()?\n    if (a.isEqual) return a.isEqual(b);\n    // Check dates' integer values.\n    if (_.isDate(a) && _.isDate(b)) return a.getTime() === b.getTime();\n    // Both are NaN?\n    if (_.isNaN(a) && _.isNaN(b)) return false;\n    // Compare regular expressions.\n    if (_.isRegExp(a) && _.isRegExp(b))\n      return a.source     === b.source &&\n             a.global     === b.global &&\n             a.ignoreCase === b.ignoreCase &&\n             a.multiline  === b.multiline;\n    // If a is not an object by this point, we can't handle it.\n    if (atype !== 'object') return false;\n    // Check for different array lengths before comparing contents.\n    if (a.length && (a.length !== b.length)) return false;\n    // Nothing else worked, deep compare the contents.\n    var aKeys = _.keys(a), bKeys = _.keys(b);\n    // Different object sizes?\n    if (aKeys.length != bKeys.length) return false;\n    // Recursive comparison of contents.\n    for (var key in a) if (!(key in b) || !_.isEqual(a[key], b[key])) return false;\n    return true;\n  };\n\n  // Is a given array or object empty?\n  _.isEmpty = function(obj) {\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (hasOwnProperty.call(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType == 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an arguments object?\n  _.isArguments = function(obj) {\n    return !!(obj && hasOwnProperty.call(obj, 'callee'));\n  };\n\n  // Is a given value a function?\n  _.isFunction = function(obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  };\n\n  // Is a given value a string?\n  _.isString = function(obj) {\n    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n  };\n\n  // Is a given value a number?\n  _.isNumber = function(obj) {\n    return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));\n  };\n\n  // Is the given value `NaN`? `NaN` happens to be the only value in JavaScript\n  // that does not equal itself.\n  _.isNaN = function(obj) {\n    return obj !== obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false;\n  };\n\n  // Is a given value a date?\n  _.isDate = function(obj) {\n    return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);\n  };\n\n  // Is the given value a regular expression?\n  _.isRegExp = function(obj) {\n    return !!(obj && obj.test && obj.exec && (obj.ignoreCase || obj.ignoreCase === false));\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iterator, context) {\n    for (var i = 0; i < n; i++) iterator.call(context, i);\n  };\n\n  // Add your own custom functions to the Underscore object, ensuring that\n  // they're correctly added to the OOP wrapper as well.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name){\n      addToWrapper(name, _[name] = obj[name]);\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(str, data) {\n    var c  = _.templateSettings;\n    var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' +\n      'with(obj||{}){__p.push(\\'' +\n      str.replace(/\\\\/g, '\\\\\\\\')\n         .replace(/'/g, \"\\\\'\")\n         .replace(c.interpolate, function(match, code) {\n           return \"',\" + code.replace(/\\\\'/g, \"'\") + \",'\";\n         })\n         .replace(c.evaluate || null, function(match, code) {\n           return \"');\" + code.replace(/\\\\'/g, \"'\")\n                              .replace(/[\\r\\n\\t]/g, ' ') + \"__p.push('\";\n         })\n         .replace(/\\r/g, '\\\\r')\n         .replace(/\\n/g, '\\\\n')\n         .replace(/\\t/g, '\\\\t')\n         + \"');}return __p.join('');\";\n    var func = new Function('obj', tmpl);\n    return data ? func(data) : func;\n  };\n\n  // The OOP Wrapper\n  // ---------------\n\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  var wrapper = function(obj) { this._wrapped = obj; };\n\n  // Expose `wrapper.prototype` as `_.prototype`\n  _.prototype = wrapper.prototype;\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj, chain) {\n    return chain ? _(obj).chain() : obj;\n  };\n\n  // A method to easily add functions to the OOP wrapper.\n  var addToWrapper = function(name, func) {\n    wrapper.prototype[name] = function() {\n      var args = slice.call(arguments);\n      unshift.call(args, this._wrapped);\n      return result(func.apply(_, args), this._chain);\n    };\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      method.apply(this._wrapped, arguments);\n      return result(this._wrapped, this._chain);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n  });\n\n  // Start chaining a wrapped Underscore object.\n  wrapper.prototype.chain = function() {\n    this._chain = true;\n    return this;\n  };\n\n  // Extracts the result from a wrapped and chained object.\n  wrapper.prototype.value = function() {\n    return this._wrapped;\n  };\n\n})();\n",
        "url": "/**\n * URL functions ported from node.js to work in CouchDB and the browser.\n * This module is used internally by Kanso, although you can use it in your\n * apps too if you find the functions useful.\n *\n * @module\n */\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * From node.js v0.2.6\n */\n\nvar path = require('kanso/path'),\n    querystring = require('kanso/querystring'),\n    _ = require('kanso/underscore')._;\n\n\n// define these here so at least they only have to be compiled once on the\n// first module load.\nvar protocolPattern = /^([a-z0-9]+:)/,\n    portPattern = /:[0-9]+$/,\n    nonHostChars = [\"/\", \"?\", \";\", \"#\"],\n    hostlessProtocol = {\n        \"file\": true,\n        \"file:\": true\n    },\n    slashedProtocol = {\n        \"http\": true,\n        \"https\": true,\n        \"ftp\": true,\n        \"gopher\": true,\n        \"file\": true,\n        \"http:\": true,\n        \"https:\": true,\n        \"ftp:\": true,\n        \"gopher:\": true,\n        \"file:\": true\n    };\n\n\nfunction parseHost(host) {\n    var out = {};\n    var at = host.indexOf(\"@\");\n    if (at !== -1) {\n        out.auth = host.substr(0, at);\n        host = host.substr(at + 1); // drop the @\n    }\n    var port = portPattern.exec(host);\n    if (port) {\n        port = port[0];\n        out.port = port.substr(1);\n        host = host.substr(0, host.length - port.length);\n    }\n    if (host) {\n        out.hostname = host;\n    }\n    return out;\n}\n\n/**\n * Take a URL string, and return an object. Pass true as the second argument\n * to also parse the query string using the querystring module.\n *\n * @name parse(url, [parseQueryString, slashesDenoteHost])\n * @param {String} url\n * @param {Boolean} parseQueryString\n * @param {Boolean} slashesDenoteHost\n * @returns Object\n * @api public\n */\n\nexports.parse = function (url, parseQueryString, slashesDenoteHost) {\n    if (url && typeof(url) === \"object\" && url.href) {\n        return url;\n    }\n\n    var out = { href : url },\n        rest = url;\n\n    var proto = protocolPattern.exec(rest);\n    if (proto) {\n        proto = proto[0];\n        out.protocol = proto;\n        rest = rest.substr(proto.length);\n    }\n\n    // figure out if it's got a host\n    // user@server is *always* interpreted as a hostname, and url\n    // resolution will treat //foo/bar as host=foo,path=bar because that's\n    // how the browser resolves relative URLs.\n    var slashes;\n    var re = new RegExp('^\\\\/\\\\/[^@\\\\/]+@[^@\\\\/]+');\n    if (slashesDenoteHost || proto || rest.match(re)) {\n        slashes = rest.substr(0, 2) === \"//\";\n        if (slashes && !(proto && hostlessProtocol[proto])) {\n            rest = rest.substr(2);\n            out.slashes = true;\n        }\n    }\n    if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {\n        // there's a hostname.\n        // the first instance of /, ?, ;, or # ends the host.\n        // don't enforce full RFC correctness, just be unstupid about it.\n        var firstNonHost = -1;\n        for (var i = 0, l = nonHostChars.length; i < l; i++) {\n            var index = rest.indexOf(nonHostChars[i]);\n            if (index !== -1 && (firstNonHost < 0 || index < firstNonHost)) {\n                firstNonHost = index;\n            }\n        }\n        if (firstNonHost !== -1) {\n            out.host = rest.substr(0, firstNonHost);\n            rest = rest.substr(firstNonHost);\n        } else {\n            out.host = rest;\n            rest = \"\";\n        }\n\n        // pull out the auth and port.\n        var p = parseHost(out.host);\n        var keys = _.keys(p);\n        for (var j = 0, l2 = keys.length; j < l2; j++) {\n            var key = keys[j];\n            out[key] = p[key];\n        }\n        // we've indicated that there is a hostname, so even if it's empty, it has to be present.\n        out.hostname = out.hostname || \"\";\n    }\n\n    // now rest is set to the post-host stuff.\n    // chop off from the tail first.\n    var hash = rest.indexOf(\"#\");\n    if (hash !== -1) {\n        // got a fragment string.\n        out.hash = rest.substr(hash);\n        rest = rest.slice(0, hash);\n    }\n    var qm = rest.indexOf(\"?\");\n    if (qm !== -1) {\n        out.search = rest.substr(qm);\n        out.query = rest.substr(qm + 1);\n        if (parseQueryString) {\n            out.query = querystring.parse(out.query);\n        }\n        rest = rest.slice(0, qm);\n    }\n    if (rest) {\n        out.pathname = rest;\n    }\n\n    return out;\n};\n\n/**\n * Take a parsed URL object, and return a formatted URL string.\n *\n * @name format(obj)\n * @param {Object} obj\n * @api public\n */\n\n// format a parsed object into a url string\nexports.format = function (obj) {\n    // ensure it's an object, and not a string url. If it's an obj, this is a no-op.\n    // this way, you can call url_format() on strings to clean up potentially wonky urls.\n    if (typeof(obj) === \"string\") {\n        obj = exports.parse(obj);\n    }\n\n    var protocol = obj.protocol || \"\",\n        host = (obj.host !== undefined) ? obj.host\n            : obj.hostname !== undefined ? ((obj.auth ? obj.auth + \"@\" : \"\") + obj.hostname + (obj.port ? \":\" + obj.port : \"\"))\n            : false,\n        pathname = obj.pathname || \"\",\n        search = obj.search || (\n                obj.query && (\"?\" + (typeof(obj.query) === \"object\" ? querystring.stringify(obj.query) : String(obj.query)))\n                ) || \"\",\n        hash = obj.hash || \"\";\n\n    if (protocol && protocol.substr(-1) !== \":\") {\n        protocol += \":\";\n    }\n\n    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n    // unless they had them to begin with.\n    if (obj.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n        host = \"//\" + (host || \"\");\n        if (pathname && pathname.charAt(0) !== \"/\") {\n            pathname = \"/\" + pathname;\n        }\n    }\n    else if (!host) {\n        host = \"\";\n    }\n\n    if (hash && hash.charAt(0) !== \"#\") {\n        hash = \"#\" + hash;\n    }\n    if (search && search.charAt(0) !== \"?\") {\n        search = \"?\" + search;\n    }\n\n    return protocol + host + pathname + search + hash;\n};\n\n/**\n * Take a base URL, and a href URL, and resolve them as a browser would for\n * an anchor tag.\n *\n * @name resolve(source, relative)\n * @param {String} source\n * @param {String} relative\n * @returns {String}\n * @api public\n */\n\nexports.resolve = function (source, relative) {\n    return exports.format(exports.resolveObject(source, relative));\n};\n\nexports.resolveObject = function (source, relative) {\n    if (!source) {\n        return relative;\n    }\n    var relPath;\n\n    source = exports.parse(exports.format(source), false, true);\n    relative = exports.parse(exports.format(relative), false, true);\n\n    // hash is always overridden, no matter what.\n    source.hash = relative.hash;\n\n    if (relative.href === \"\") {\n        return source;\n    }\n\n    // hrefs like //foo/bar always cut to the protocol.\n    if (relative.slashes && !relative.protocol) {\n        relative.protocol = source.protocol;\n        return relative;\n    }\n\n    if (relative.protocol && relative.protocol !== source.protocol) {\n        // if it's a known url protocol, then changing the protocol does weird things\n        // first, if it's not file:, then we MUST have a host, and if there was a path\n        // to begin with, then we MUST have a path.\n        // if it is file:, then the host is dropped, because that's known to be hostless.\n        // anything else is assumed to be absolute.\n\n        if (!slashedProtocol[relative.protocol]) {\n            return relative;\n        }\n\n        source.protocol = relative.protocol;\n        if (!relative.host && !hostlessProtocol[relative.protocol]) {\n            relPath = (relative.pathname || \"\").split(\"/\");\n            while (relPath.length && !(relative.host = relPath.shift())) {}\n            if (!relative.host) {\n                relative.host = \"\";\n            }\n            if (relPath[0] !== \"\") {\n                relPath.unshift(\"\");\n            }\n            if (relPath.length < 2) {\n                relPath.unshift(\"\");\n            }\n            relative.pathname = relPath.join(\"/\");\n        }\n        source.pathname = relative.pathname;\n        source.search = relative.search;\n        source.query = relative.query;\n        source.host = relative.host || \"\";\n        delete source.auth;\n        delete source.hostname;\n        source.port = relative.port;\n        return source;\n    }\n\n    var isSourceAbs = (source.pathname && source.pathname.charAt(0) === \"/\"),\n        isRelAbs = (relative.host !== undefined || relative.pathname && relative.pathname.charAt(0) === \"/\"),\n        mustEndAbs = (isRelAbs || isSourceAbs || (source.host && relative.pathname)),\n        removeAllDots = mustEndAbs,\n        srcPath = source.pathname && source.pathname.split(\"/\") || [],\n        psychotic = source.protocol && !slashedProtocol[source.protocol] && source.host !== undefined;\n    relPath = relative.pathname && relative.pathname.split(\"/\") || [];\n\n    // if the url is a non-slashed url, then relative links like ../.. should be able\n    // to crawl up to the hostname, as well.  This is strange.\n    // source.protocol has already been set by now.\n    // Later on, put the first path part into the host field.\n    if (psychotic) {\n\n        delete source.hostname;\n        delete source.auth;\n        delete source.port;\n        if (source.host) {\n            if (srcPath[0] === \"\") {\n                srcPath[0] = source.host;\n            }\n            else {\n                srcPath.unshift(source.host);\n            }\n        }\n        delete source.host;\n\n        if (relative.protocol) {\n            delete relative.hostname;\n            delete relative.auth;\n            delete relative.port;\n            if (relative.host) {\n                if (relPath[0] === \"\") {\n                    relPath[0] = relative.host;\n                }\n                else {\n                    relPath.unshift(relative.host);\n                }\n            }\n            delete relative.host;\n        }\n        mustEndAbs = mustEndAbs && (relPath[0] === \"\" || srcPath[0] === \"\");\n    }\n\n    if (isRelAbs) {\n        // it's absolute.\n        source.host = (relative.host || relative.host === \"\") ? relative.host : source.host;\n        source.search = relative.search;\n        source.query = relative.query;\n        srcPath = relPath;\n        // fall through to the dot-handling below.\n    }\n    else if (relPath.length) {\n        // it's relative\n        // throw away the existing file, and take the new path instead.\n        if (!srcPath) {\n            srcPath = [];\n        }\n        srcPath.pop();\n        srcPath = srcPath.concat(relPath);\n        source.search = relative.search;\n        source.query = relative.query;\n    }\n    else if (\"search\" in relative) {\n        // just pull out the search.\n        // like href=\"?foo\".\n        // Put this after the other two cases because it simplifies the booleans\n        if (psychotic) {\n            source.host = srcPath.shift();\n        }\n        source.search = relative.search;\n        source.query = relative.query;\n        return source;\n    }\n    if (!srcPath.length) {\n        // no path at all.  easy.\n        // we've already handled the other stuff above.\n        delete source.pathname;\n        return source;\n    }\n\n    // resolve dots.\n    // if a url ENDs in . or .., then it must get a trailing slash.\n    // however, if it ends in anything else non-slashy, then it must NOT get a trailing slash.\n    var last = srcPath.slice(-1)[0];\n    var hasTrailingSlash = ((source.host || relative.host) && (last === \".\" || last === \"..\") || last === \"\");\n\n    // Figure out if this has to end up as an absolute url, or should continue to be relative.\n    srcPath = path.normalizeArray(srcPath, true);\n    if (srcPath.length === 1 && srcPath[0] === \".\") {\n        srcPath = [];\n    }\n    if (mustEndAbs || removeAllDots) {\n        // all dots must go.\n        var dirs = [];\n        srcPath.forEach(function (dir, i) {\n            if (dir === \"..\") {\n                dirs.pop();\n            }\n            else if (dir !== \".\") {\n                dirs.push(dir);\n            }\n        });\n\n        if (mustEndAbs && dirs[0] !== \"\") {\n            dirs.unshift(\"\");\n        }\n        srcPath = dirs;\n    }\n    if (hasTrailingSlash && (srcPath.length < 2 || srcPath.slice(-1)[0] !== \"\")) {\n        srcPath.push(\"\");\n    }\n\n    // put the host back\n    if (psychotic) {\n        source.host = srcPath[0] === \"\" ? \"\" : srcPath.shift();\n    }\n\n    mustEndAbs = mustEndAbs || (source.host && srcPath.length);\n\n    if (mustEndAbs && srcPath[0] !== \"\") {\n        srcPath.unshift(\"\");\n    }\n\n    source.pathname = srcPath.join(\"/\");\n\n    return source;\n};\n",
        "utils": "/*global window: false, __kansojs_current_request: true*/\n\n\n/**\n * General utility functions used by Kanso. Some functions were moved here from\n * other modules (such as core), to avoid a circular dependency bug in CouchDB.\n *\n * This module also stores some useful properties such as 'isBrowser', which is\n * true if the code is running in a browser environment, and 'initial_hit' which\n * is set to true when a page is first requested from CouchDB (and set to false\n * for subsequent requests).\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar settings = require('./settings'), // settings module is auto-generated\n    events = require('./events'),\n    _ = require('./underscore')._;\n\n\n/**\n * Some functions calculate results differently depending on the execution\n * environment. The isBrowser value is used to set the correct environment\n * for these functions, and is only exported to make unit testing easier.\n */\n\nexports.isBrowser = function () {\n    return (typeof(window) !== 'undefined');\n};\n\n/**\n * Keeps track of the last *triggered* request. This is to avoid a race\n * condition where two link clicks in quick succession can cause the rendered\n * page to not match the current URL. If the first link's document or view takes\n * longer to return than the second, the URL was updated for the second link\n * click but the page for the first link will render last, overwriting the\n * correct page. Now, callbacks for fetching documents and views check against\n * this value to see if they should continue rendering the result or not.\n */\n\nexports.currentRequest = function (v) {\n    if (v) {\n        __kansojs_current_request = v;\n    } else if (typeof(__kansojs_current_request) === 'undefined') {\n        __kansojs_current_request = null;\n    }\n    return __kansojs_current_request;\n};\n\n// make sure currentRequest() always provided the latest session information\nevents.on('sessionChange', function (userCtx, req) {\n    var curr_req = exports.currentRequest();\n    if (curr_req) {\n        curr_req.userCtx = userCtx;\n        exports.currentRequest(curr_req);\n    }\n});\n\n/**\n * This is because the first page hit also triggers kanso to handle the url\n * client-side. Knowing it is the first page being loaded means we can stop\n * the pageTracker code from submitting the URL twice. Exported because this\n * might be useful information to other modules, it should not be modified\n * by them.\n */\n\n// TODO: this was moved to this module from core.js to avoid a circular\n// dependency between core.js and session.js\n\nexports.initial_hit = true;\n\n/**\n * Used to store userCtx, periodically updated like on session.login and\n * session.logout.\n */\n\n// TODO: added to utils to avoid circular dependency bug in couchdb\n\nexports.userCtx = null;\n\n/**\n * Caches extended session info (like the current authentication db) after\n * a call to session.info\n */\nexports.session = null;\n\n/**\n * This is used to make unit testing in the browser easier.\n * Because it can be overridden without actually changing the window's location.\n * (and navigating away from the test suite)\n */\n\nexports.getWindowLocation = function () {\n    return window.location;\n};\n\n/**\n * Returns the path to prefix to any URLs. When running behind a\n * virtual host, there is nothing to prefix URLs with. When accessing the\n * app directly, URLs need to be prefixed with /db/_design/appname/_rewrite.\n *\n * The request object argument is only required when run server-side, but its\n * a good idea to include it whenever you call getBaseURL.\n *\n * @name getBaseURL(req)\n * @param {Object} req\n * @returns {String}\n * @api public\n */\n\n// TODO: this was moved to this module from core.js to avoid a circular\n// dependency between core.js and db.js ...once circular dependencies in\n// couchdb's commonjs implementation are fixed it can be moved back into\n// core.js. For now, this is also exported from core.js and should\n// be accessed from there.\n\nexports.getBaseURL = function (/*optional*/req) {\n    if (!req) {\n        req = exports.currentRequest();\n    }\n    if ('baseURL' in settings) {\n        return settings.baseURL;\n    }\n    if (exports.isBrowser()) {\n        var re = new RegExp('(.*\\\\/_rewrite).*$');\n        var match = re.exec(exports.getWindowLocation().pathname);\n        if (match) {\n            return match[1];\n        }\n        return '';\n    }\n    if (req.headers['x-couchdb-vhost-path']) {\n        return '';\n    }\n    return '/' + req.path.slice(0, 3).join('/') + '/_rewrite';\n};\n\n/**\n * A named empty function. Use this when you wish to take\n * no action for a callback or string-generating  function.\n */\n\nexports.emptyFunction = function ()\n{\n    return '';\n};\n\n/**\n * A named no-opfunction. Use this when you need to supply\n * a map/transform function, but do not wish to modify anything\n */\n\nexports.identity = function (x)\n{\n    return x;\n};\n\n/**\n * Traverses an object and its sub-objects using an array of property names.\n * Returns the value of the matched path, or undefined if the property does not\n * exist.\n *\n * If a string if used for the path, it is assumed to be a path with a single\n * key (the given string).\n *\n * <pre>\n * getPropertyPath({a: {b: 'foo'}}, ['a','b']) -> 'foo'\n * getPropertyPath({a: {b: 'foo'}}, 'a') -> {b: 'foo'}\n * </pre>\n *\n * @name getPropertyPath(obj, path)\n * @param {Object} obj\n * @param {Array|String} path\n * @api public\n */\n\nexports.getPropertyPath = function (obj, path) {\n    if (!_.isArray(path)) {\n        path = [path];\n    }\n    if (!path.length || !obj) {\n        return obj;\n    }\n    return exports.getPropertyPath(obj[path[0]], path.slice(1));\n};\n\n/**\n * Traverses an object and its sub-objects using an array of property names.\n * Sets the value of the matched property.\n *\n * If a string if used for the path, it is assumed to be a path with a single\n * key (the given string).\n *\n * <pre>\n * setPropertyPath({}, ['a','b'], 'foo') -> {a: {b: 'foo'}}\n * setPropertyPath({}, 'a', 'foo') -> {a: 'foo'}\n * </pre>\n *\n * @name setPropertyPath(obj, path, val)\n * @param {Object} obj\n * @param {Array|String} path\n * @api public\n */\n\nexports.setPropertyPath = function (obj, path, val) {\n    if (!_.isArray(path)) {\n        path = [path];\n    }\n    if (!path.length) {\n        throw new Error('No property path given');\n    }\n    if (path.length === 1) {\n        obj[path[0]] = val;\n        return;\n    }\n    var next = path[0];\n    path = path.slice(1);\n    if (obj[next] === undefined) {\n        obj[next] = {};\n    }\n    else if (typeof obj[next] !== 'object' && path.length) {\n        throw new Error('Property path conflicts with existing value');\n    }\n    exports.setPropertyPath(obj[next], path, val);\n};\n\n/**\n * Call function with arguments, catch any errors and add to an array,\n * returning the modified array.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Array} args\n * @returns {Array}\n * @api private\n */\n\nexports.getErrors = function (fn, args) {\n    var arr = [];\n    try {\n        arr = arr.concat(fn.apply(this, args) || []);\n    }\n    catch (e) {\n        arr.push(e);\n    }\n    return arr;\n};\n\n/**\n * Encodes required characters as HTML entities so a string can be included\n * in a page.\n *\n * @name escapeHTML(s)\n * @param {String} s\n * @returns {String}\n * @api public\n */\n\nexports.escapeHTML = function (s) {\n    s = '' + s; /* Coerce to string */\n    s = s.replace(/&/g, '&amp;');\n    s = s.replace(/</g, '&lt;');\n    s = s.replace(/>/g, '&gt;');\n    s = s.replace(/\"/g, '&quot;');\n    s = s.replace(/'/g, '&#39;');\n    return s;\n};\n\n/**\n * Parse CSV strings into an array of rows, each row an array of values.\n * Used by the array field's default CSV widget.\n *\n * @name parseCSV(csvString)\n * @param {String} csvString\n * @returns {Array}\n * @api public\n */\n\n// Parsing comma-separated values (CSV) in JavaScript by M. A. SRIDHAR\n// http://yawgb.blogspot.com/2009/03/parsing-comma-separated-values-in.html\nexports.parseCSV = function (csvString) {\n    var fieldEndMarker  = /([,\\015\\012] *)/g;\n    var qFieldEndMarker = /(\"\")*\"([,\\015\\012] *)/g;\n    var startIndex = 0;\n    var records = [], currentRecord = [];\n    do {\n        var ch = csvString.charAt(startIndex);\n        var endMarkerRE = (ch === '\"') ? qFieldEndMarker : fieldEndMarker;\n        endMarkerRE.lastIndex = startIndex;\n        var matchArray = endMarkerRE.exec(csvString);\n        if (!matchArray || !matchArray.length) {\n            break;\n        }\n        var endIndex = endMarkerRE.lastIndex;\n        endIndex -= matchArray[matchArray.length - 1].length;\n        var match = csvString.substring(startIndex, endIndex);\n        if (match.charAt(0) === '\"') {\n            match = match.substring(1, match.length - 1).replace(/\"\"/g, '\"');\n        }\n        currentRecord.push(match);\n        var marker = matchArray[0];\n        if (marker.indexOf(',') < 0) {\n            records.push(currentRecord);\n            currentRecord = [];\n        }\n        startIndex = endMarkerRE.lastIndex;\n    } while (true);\n    if (startIndex < csvString.length) {\n        var remaining = csvString.substring(startIndex).trim();\n        if (remaining) {\n            currentRecord.push(remaining);\n        }\n    }\n    if (currentRecord.length > 0) {\n        records.push(currentRecord);\n    }\n    return records;\n};\n\n/**\n * Creates CouchDB response object for returning from a show, list or update\n * function, which redirects to the given app url (automatically prepending the\n * baseURL)\n *\n * @name redirect(req, url)\n * @param {Object} req\n * @param {String} url\n * @returns {Object}\n * @api public\n */\n\nexports.redirect = function (/*optional*/req, url) {\n    if (!url) {\n        /* Arity = 1: url only */\n        url = req;\n        req = exports.currentRequest();\n    }\n    var baseURL = exports.getBaseURL(req);\n    return {code: 302, headers: {'Location': baseURL + url}};\n};\n\n/**\n * Tests if path b is equal to or a sub-path of a.\n *\n * @name isSubPath(a, b)\n * @param {Array} a\n * @param {Array} b\n * @returns {Boolean}\n * @api public\n */\n\nexports.isSubPath = function (a, b) {\n    for (var i = 0, len = a.length; i < len; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Return a title-case version of the supplied string.\n * @name titleize(str)\n * @param str The string to transform.\n * @returns {String}\n * @api public\n */\n\nexports.titleize = function (str) {\n    return (str || '').toLowerCase().replace(/(?:^|\\s+)\\w/g, function (m) {\n        return m.toUpperCase();\n    });\n};\n\n/**\n * Returns a function that executes {closure} in the context of {context}.\n * Use this function if you'd like to preserve the current context\n * across callbacks, event handlers, and other cases where the value of\n * {this} is set for you.\n *\n * @name bindContext(context, closure)\n * @param {Object} context The context to use when executing closure.\n *          Usually, you will specify the current value of 'this'.\n * @param {Function} closure The function to to bind to {context}.\n * @api public\n */\n\nexports.bindContext = function (context, closure) {\n    return function () {\n        return closure.apply(context, arguments);\n    };\n};\n\n",
        "validators": "/**\n * Validation functions used to validate Field contents.\n *\n * @module\n */\n\nvar _ = require('./underscore')._;\n\n\n/**\n * Tests that the field's value is greater than 'min'.\n *\n * @name min(min)\n * @param {Number} min\n * @returns {Function}\n * @api public\n */\n\nexports.min = function (min) {\n    return function (doc, value) {\n        if (value < min) {\n            throw new Error(\n                'Please enter a value greater than or equal to ' + min\n            );\n        }\n    };\n};\n\n/**\n * Tests that the field's value is less than 'max'\n *\n * @name max(max)\n * @param {Number} max\n * @returns {Function}\n * @api public\n */\n\nexports.max = function (max) {\n    return function (doc, value) {\n        if (value > max) {\n            throw new Error(\n                'Please enter a value less than or equal to ' + max\n            );\n        }\n    };\n};\n\n/**\n * Tests that the field's value is greater than 'min' AND less than 'max'\n *\n * @name range(min, max)\n * @param {Number} min\n * @param {Number} max\n * @returns {Function}\n * @api public\n */\n\nexports.range = function (min, max) {\n    return function (doc, value) {\n        if (value < min || value > max) {\n            throw new Error(\n                'Please enter a value between ' + min + ' and ' + max\n            );\n        }\n    };\n};\n\n/**\n * Tests that the field's value length is greater than 'val'\n *\n * @name minlength(val)\n * @param {Number} val\n * @returns {Function}\n * @api public\n */\n\nexports.minlength = function (val) {\n    return function (doc, value) {\n        if (value.length < val) {\n            throw new Error('Please enter at least ' + val + ' characters');\n        }\n    };\n};\n\n/**\n * Tests that the field's value length is less than 'val'\n *\n * @name maxlength(val)\n * @param {Number} val\n * @returns {Function}\n * @api public\n */\n\nexports.maxlength = function (val) {\n    return function (doc, value) {\n        if (value.length > val) {\n            throw new Error('Please enter no more than ' + val + ' characters');\n        }\n    };\n};\n\n/**\n * Tests that the field's value length is greater than 'min' AND less than 'max'\n *\n * @name rangelength(min, max)\n * @param {Number} min\n * @param {Number} max\n * @returns {Function}\n * @api public\n */\n\nexports.rangelength = function (min, max) {\n    return function (doc, value) {\n        if (value.length < min || value.length > max) {\n            throw new Error(\n                'Please enter a value between ' + min + ' and ' + max +\n                ' characters long'\n            );\n        }\n    };\n};\n\n/**\n * Tests field's value against a regular expression\n *\n * @name regexp(re, message)\n * @param {RegExp} re - can be a string or RegExp object\n * @param {String} message - (optional) a custom error message to throw\n * @returns {Function}\n * @api public\n */\n\nexports.regexp = function (re, message) {\n    re = (typeof re === 'string') ? new RegExp(re): re;\n    return function (doc, value) {\n        if (!re.test(value)) {\n            throw new Error(message || 'Invalid format');\n        }\n    };\n};\n\n/**\n * Tests that field's value is a valid email address using a regular expression.\n *\n * @name email()\n * @returns {Function}\n * @api public\n */\n\nexports.email = function () {\n    // regular expression by Scott Gonzalez:\n    // http://projects.scottsplayground.com/email_address_validation/\n    return exports.regexp(new RegExp(\"^((([a-z]|\\\\d|[!#\\\\$%&'\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])+(\\\\.([a-z]|\\\\d|[!#\\\\$%&'\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])+)*)|((\\\\x22)((((\\\\x20|\\\\x09)*(\\\\x0d\\\\x0a))?(\\\\x20|\\\\x09)+)?(([\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x7f]|\\\\x21|[\\\\x23-\\\\x5b]|[\\\\x5d-\\\\x7e]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(\\\\\\\\([\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0d-\\\\x7f]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]))))*(((\\\\x20|\\\\x09)*(\\\\x0d\\\\x0a))?(\\\\x20|\\\\x09)+)?(\\\\x22)))@((([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.)+(([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.?$\", \"i\"), 'Please enter a valid email address');\n};\n\n/**\n * Tests that field's value is a valid URL using a regular expression.\n *\n * @name url()\n * @returns {Function}\n * @api public\n */\n\nexports.url = function () {\n    // regular expression by Scott Gonzalez:\n    // http://projects.scottsplayground.com/iri/\n    return exports.regexp(new RegExp(\"^(https?|ftp):\\\\/\\\\/(((([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:)*@)?(((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5]))|((([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.)+(([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.?)(:\\\\d*)?)(\\\\/((([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)+(\\\\/(([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)*)*)?)?(\\\\?((([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)|[\\\\uE000-\\\\uF8FF]|\\\\/|\\\\?)*)?(\\\\#((([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)|\\\\/|\\\\?)*)?$\", \"i\"), 'Please enter a valid URL');\n};\n\n/**\n * Detects embedded documents with missing _id properties and returns an\n * array of Error objects for each occurence. Returns an empty array if\n * all documents have a populated _id property.\n *\n * Used by the EmbeddedList field type.\n *\n * @name missingIDs()\n * @param {Object} doc\n * @param {Array} value\n * @returns {Array}\n * @api public\n */\n\nexports.missingIDs = function () {\n    return function (doc, value) {\n        var errs = [];\n        _.each(value, function (v, i) {\n            if (!v._id) {\n                var e = new Error('Embedded document missing _id');\n                e.field = [i];\n                errs.push(e);\n            }\n        });\n        return errs;\n    };\n};\n\n",
        "widgets": "/*global $: false, kanso: true*/\n\n/**\n * Widgets define the way a Field object is displayed when rendered as part of a\n * Form. Changing a Field's widget will be reflected in the admin app.\n *\n * @module\n */\n\n/**\n * Module dependencies\n */\n\nvar db = require('./db'),\n    forms = require('./forms'),\n    actions = require('./actions'),\n    render = require('./render'),\n    sanitize = require('./sanitize'),\n    utils = require('./utils'),\n    events = require('./events'),\n    querystring = require('./querystring'),\n    _ = require('./underscore')._;\n\nvar h = sanitize.escapeHtml;\n\n\n/**\n * Widget constructor, creates a new Widget object.\n *\n * @name Widget(type, [options])\n * @param {String} type\n * @param {Object} options\n * @constructor\n * @returns {Widget Object}\n * @api public\n */\n\nvar Widget = exports.Widget = function Widget(type, options) {\n    options = (options || {});\n    this.classes = (options.classes || []);\n    this.id = options.id;\n    this.type = type;\n};\n\n/**\n * Generates an id string for a widget.\n *\n * @param {String} name - field name on the HTML form\n * @param {String} extension - optional; a string to be added\n *                  to the generated identifier. Use this when you\n *                  want to make an identifier that is related to\n *                  an existing identifier, but is still unique.\n * @returns {String}\n */\n\nWidget.prototype._id = function (name /* , ... */) {\n    return sanitize.generateDomIdentifier.apply(\n        this, [ this.id || name ].concat(\n            Array.prototype.slice.call(arguments, 1)\n        )\n    );\n};\n\n/**\n * Generates a name string for a widget.\n *\n * @param {String} name - field name on the HTML form\n * @param {String} extension - optional; a string to be added\n *                  to the generated identifier. Use this when you\n *                  want to make an identifier that is related to\n *                  an existing identifier, but is still unique.\n * @returns {String}\n */\n\nWidget.prototype._name = function (name /* , ... */) {\n    return sanitize.generateDomName.apply(\n        this, [ name ].concat(\n            Array.prototype.slice.call(arguments, 1)\n        )\n    );\n};\n\n/**\n * Converts an input element's value attribute to a valid\n * in-memory representation of the document or document fragment.\n * This function tries to interpret the string as JSON if it's\n * appropriate; otherwise the string is left alone.\n *\n * @name _parse_value(str, type_name)\n * @param {String} str The string value to parse\n * @param {String} type_name The type of field that the input control\n *          belongs to. This value may influence how str is parsed.\n * @returns {Object}\n */\n\nWidget.prototype._parse_value = function (str, type_name)\n{\n    /* TODO:\n        This function needs to actually check type_name. */\n\n    var rv = null;\n\n    try {\n        rv = JSON.parse(str);\n    } catch (e) {\n        rv = str;\n    }\n\n    return rv;\n};\n\n/**\n * Converts an in-memory representation of the document or\n * document fragment in to an encoded string. If the value\n * passed is already encoded, this function does nothing.\n *\n * @name _stringify_value(str, type_name)\n * @param {String} value The value to encode.\n * @param {String} type_name The type of field that the input control\n *          belongs to. This value may influence how value is encoded.\n * @returns {Object}\n */\n\nWidget.prototype._stringify_value = function (value, type_name)\n{\n    /* TODO:\n        This function needs to actually check type_name. */\n\n    var rv = null;\n\n    try {\n        rv = JSON.stringify(value);\n    } catch (e) {\n        rv = value;\n    }\n\n    return rv;\n};\n\n/**\n * Converts a widget to HTML using the provided name and parsed and raw values\n *\n * @name Widget.toHTML(name, value, raw, field, options)\n * @param {String} name\n * @param value\n * @param raw\n * @param field\n * @param options\n * @returns {String}\n * @api public\n */\n\nWidget.prototype.toHTML = function (name, value, raw, field, options) {\n    if (raw === undefined) {\n        raw = (value === undefined) ? '': '' + value;\n    }\n    if (raw === null || raw === undefined) {\n        raw = '';\n    }\n    var html = '<input';\n    html += (this.type ? ' type=\"' + h(this.type) + '\"': '');\n    html += ' value=\"' + h(raw) + '\"';\n    html += ' name=\"' + this._name(name, options.offset) + '\" id=\"';\n    html += this._id(name, options.offset, options.path_extra) + '\"';\n    return html + ' />';\n};\n\n/**\n * Initializes a widget on the client-side only, using the browser's\n * script interpreter. This function is guaranteed to be called\n * after toHTML, and any DOM elements created by toHTML are\n * guaranteed to be accessible\n *\n * @name Widget.clientInit(path, value, raw, field, options)\n * @param {Array} path\n * @param value\n * @param raw\n * @param field\n * @param options\n * @returns {Boolean}\n * @api public\n */\n\nWidget.prototype.clientInit = function (path, value, raw, field, options) {\n    return true;\n};\n\n/**\n * Called by Kanso when it becomes necessary to rename this widget\n * instance. The widget should respond by updating the id and name\n * attributes.\n *\n * @name Widget.updateName(path)\n * @param {String} elt An element that contains one or\n *          more instances of the widget referenced by `this'.\n * @param {String} path The widget's new path; combine this using\n *          the _name or _id function to generate a usable string.\n * @param {Object} options A new set of toHTML/clientInit options.\n *          This may or may not influence the widget's name.\n * @api public\n */\n\nWidget.prototype.updateName = function (elt, path, options) {\n    var e = $('input[type=hidden]', elt);\n    e.attr('id', this._id(path, options.offset, options.path_extra));\n    e.attr('name', this._name(path, options.offset, options.path_extra));\n};\n\n/**\n * Called by Kanso when it becomes necessary to rename this widget\n * instance. The widget should respond by updating the value attribute.\n *\n * @name Widget.updateValue(elt, path, value, options)\n * @param {String} elt An element that contains one or\n *          more instances of the widget referenced by `this'.\n * @param {String} path The path to the widget.\n * @param {Object} value The new value for the widget, unencoded.\n * @param {Object} options An up-to-date set of toHTML/clientInit options.\n * @api public\n */\n\nWidget.prototype.updateValue = function (elt, path, value, options) {\n    elt = $(elt).closestChild('input[type=hidden]');\n    elt.val(this._stringify_value(value));\n};\n\n/**\n * Called by Kanso when it becomes necessary to interrogate this\n * widget to determine its value. The widget should respond by\n * returning an unencoded value (typically as an object).\n *\n * @name Widget.getValue(elt, path, options)\n * @param {String} elt An element that contains one or\n *          more instances of the widget referenced by `this'.\n * @param {String} path The path to the widget.\n * @param {Object} options An up-to-date set of toHTML/clientInit options.\n * @api public\n */\n\nWidget.prototype.getValue = function (elt, path, options) {\n    return this._parse_value(\n        $(elt).closestChild('input[type=hidden]').val()\n    );\n};\n\n/**\n * Called by Kanso when it becomes necessary to validate the\n * contents of this widget -- i.e. to ensure it's in a consistent\n * state before using its value or proceeding. Most widgets will\n * not implement this method; its primary use is complex widgets\n * that host validation-enabled forms and/or types. Returns true\n * if the contents is consistent and valid; false otherwise.\n *\n * @name Widget.validate(elt, path, options)\n * @param {String} elt An element that contains one or\n *          more instances of the widget referenced by `this'.\n * @param {String} path The path to the widget.\n * @param {Object} options An up-to-date set of toHTML/clientInit options.\n * @api public\n */\n\nWidget.prototype.validate = function (elt, path, options) {\n    return true;\n};\n\n/**\n * Creates a new text input widget.\n *\n * @name text([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.text = function (options) {\n    return new Widget('text', options);\n};\n\n/**\n * Creates a new password input widget.\n *\n * @name password([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.password = function (options) {\n    return new Widget('password', options);\n};\n\n/**\n * Creates a new hidden input widget.\n *\n * @name hidden([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.hidden = function (options) {\n    return new Widget('hidden', options);\n};\n\n/**\n * Creates a new textarea widget.\n *\n * @name textarea([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.textarea = function (_options) {\n    var w = new Widget('textarea', _options || {});\n    w.options = _options;\n    w.toHTML = function (name, value, raw, field, options) {\n        if (raw === undefined) {\n            raw = (value === undefined) ? '': '' + value;\n        }\n        if (raw === null || raw === undefined) {\n            raw = '';\n        }\n        var html = '<textarea';\n        html += ' name=\"' + this._name(name, options.offset) + '\" id=\"';\n        html += this._id(name, options.offset, options.path_extra) + '\"';\n\n        if (this.options.hasOwnProperty('cols')) {\n            html += ' cols=\"' + h(this.options.cols) + '\"';\n        }\n        if (this.options.hasOwnProperty('rows')) {\n            html += ' rows=\"' + h(this.options.rows) + '\"';\n        }\n        html += '>' + h(raw);\n        html += '</textarea>';\n        return html;\n    };\n    return w;\n};\n\n/**\n * Creates a new checkbox widget.\n *\n * @name checkbox([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.checkbox = function (_options) {\n    var w = new Widget('checkbox', _options || {});\n    w.toHTML = function (name, value, raw, field, options) {\n        var html = '<input type=\"checkbox\"';\n        html += ' name=\"' + this._name(name, options.offset) + '\" id=\"';\n        html += this._id(name, options.offset, options.path_extra) + '\"';\n        html += (value ? ' checked=\"checked\"': '');\n        return (html + ' />');\n    };\n    return w;\n};\n\n/**\n * Creates a new select widget.\n *\n * @name select([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.select = function (_options) {\n    var w = new Widget('select', _options || {});\n    w.values = _options.values;\n    w.toHTML = function (name, value, raw, field, options) {\n        if (value === null || value === undefined) {\n            value = '';\n        }\n\n        var html = '<select';\n        html += ' name=\"' + this._name(name, options.offset) + '\" id=\"';\n        html += this._id(name, options.offset, options.path_extra) + '\">';\n\n        for (var i = 0; i < this.values.length; i++) {\n            var opt = this.values[i];\n            html += '<option value=\"' + h(opt[0]) + '\"';\n            if (opt[0] === value) {\n                html += ' selected=\"selected\"';\n            }\n            html += '>';\n            html += h(opt[1]);\n            html += '</option>';\n        }\n        html += '</select>';\n        return html;\n    };\n    return w;\n};\n\n/**\n * Creates a new computed widget. Computed widgets display a string, but are\n * uneditable, working as a hidden field behind the scenes.\n *\n * @name computed([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.computed = function (_options) {\n    var w = new Widget('computed', _options);\n    w.toHTML = function (name, value, raw, field, options) {\n        if (raw === undefined) {\n            raw = (value === undefined) ? '': '' + value;\n        }\n        if (raw === null || raw === undefined) {\n            raw = '';\n        }\n        var html = '<div id=\"';\n        html += this._id(name, options.offset, options.path_extra) + '\">';\n        html += '<input type=\"hidden\" value=\"' + h(raw) + '\"';\n        html += ' name=\"' + this._name(name, options.offset) + '\" />';\n        html += '<span>' + h(raw) + '</span>';\n        html += '</div>';\n        return html;\n    };\n    return w;\n};\n\n/**\n * Creates a new computed input widget which sets the value of the field to\n * the current user on new documents, responding to sessionChange events\n *\n * @name creator([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.creator = function (options) {\n    var w = exports.computed(options);\n    var _toHTML = w.toHTML;\n    var el_name; // store input name provided by renderer\n    var el; // store reference to element so we can detect when its been removed\n\n    w.toHTML = function (name/*, ...*/) {\n        el_name = name;\n        return _toHTML.apply(this, arguments);\n    };\n    w.clientInit = function (field, path, value, raw, errors, options) {\n        if (options.operation === 'add') {\n\n            var id = w._id(el_name, options.offset, options.path_extra);\n\n            // store reference to container element\n            el = $('#' + id)[0];\n\n            var update_val = function (userCtx, req) {\n                var container = $('#' + id)[0];\n                if (el !== container) {\n                    // element has been removed\n                    events.removeListener('sessionChange', update_val);\n                    return;\n                }\n                if (container) {\n                    $('input', container).val(userCtx.name || '');\n                    $('span', container).text(userCtx.name || '');\n                }\n                else {\n                    // element has been removed from page (or was never there?)\n                    events.removeListener('sessionChange', update_val);\n                }\n            };\n            events.on('sessionChange', update_val);\n        }\n    };\n    return w;\n};\n\n\n\n/**\n * Creates a new field for storing/displaying an embedded object.\n * This is automatically added to embed and embedList field types\n * that don't specify a widget.\n *\n * @name embedded([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.embedList = function (_options) {\n    var w = new Widget('embedList', _options);\n\n    w.sortable = _options.sortable;\n    w.singleton = _options.singleton;\n    w.widget = (_options.widget || exports.defaultEmbedded());\n    w.actions = actions.parse(_options.actions || {});\n\n    w.toHTML = function (name, value, raw, field, options) {\n\n        this.cacheInit();\n        value = this.normalizeValue(value);\n\n        this.field = field;\n        this.render_options = (options || {});\n\n        var id = this._id(\n            name, 'list', this.render_options.offset,\n                this.render_options.path_extra\n        );\n        var html = (\n            '<div class=\"embedlist\" rel=\"' +\n                h(this.field.type.name) + '\" id=\"' + h(id) + '\">'\n        );\n\n        value = (value instanceof Array ? value : []);\n        html += '<div class=\"items\" rel=\"' + h(name) + '\">';\n\n        for (var i = 0, len = value.length; i < len; ++i) {\n            html += this.htmlForListItem({\n                offset: (this.singleton ? null : i),\n                name: name,\n                value: value[i],\n                raw: raw\n            });\n        }\n        html += (\n                '</div>' +\n                '<div class=\"actions\">' +\n                    this.htmlForAddButton() +\n                '</div>' +\n            '</div>'\n        );\n        return html;\n    };\n\n    w.clientInit = function (field, path, value, raw, errors, options) {\n\n        this.cacheInit();\n        value = this.normalizeValue(value);\n\n        this.path = path;\n        this.field = field;\n        this.render_options = (options || {});\n\n        var item_elts = (\n            this.discoverListItemsElement().children('.item')\n        );\n\n        for (var i = 0, len = item_elts.length; i < len; ++i) {\n            this.bindEventsForListItem(item_elts[i]);\n\n            if (_.isFunction(this.widget.clientInit)) {\n                this.widget.clientInit(\n                    this.field, this.path, value[i], value[i], [], {\n                        offset: (this.singleton ? null : i)\n                    }\n                );\n            }\n        }\n\n        this.renumberList();\n        this.bindEventsForList();\n    };\n\n    /** private: **/\n\n    w.cacheInit = function () {\n        this.discoverListElement = _.memoize(this._discoverListElement);\n        this.discoverListName = _.memoize(this._discoverListName);\n        this.discoverListType = _.memoize(this._discoverListType);\n        this.discoverListItemsElement = _.memoize(this._discoverListItemsElement);\n    };\n\n    w.normalizeValue = function (value) {\n        if (this.singleton) {\n            if (value && !_.isArray(value)) {\n                value = [ value ];\n            }\n        }\n        return value;\n    };\n\n    w._discoverListElement = function () {\n        return $('#' + this._id(\n            this.path, 'list', this.render_options.offset,\n                this.render_options.path_extra\n        ));\n    };\n\n    w._discoverListName = function () {\n        var list_elt = this.discoverListElement();\n        var actions_elt = $(list_elt).closestChild('.actions');\n        return actions_elt.attr('rel');\n    };\n    \n    w._discoverListType = function () {\n        var list_elt = this.discoverListElement();\n        return list_elt.attr('rel');\n    };\n\n    w._discoverListItemsElement = function () {\n        var list_elt = this.discoverListElement();\n        return list_elt.closestChild('.items');\n    };\n\n    w.discoverListItems = function () {\n        return (\n            this.discoverListItemsElement().children('.item')\n        );\n    };\n\n    w.countListItems = function () {\n        return this.discoverListItems().length;\n    };\n\n    w.bindEventsForList = function () {\n        var list_elt = this.discoverListElement();\n        var add_elt = $(list_elt).closestChild('.actions .add');\n\n        add_elt.bind('click', utils.bindContext(this, function (ev) {\n            return this.handleAddButtonClick(ev);\n        }));\n    };\n\n    w.bindEventsForListItem = function (item_elt) {\n        item_elt = $(item_elt);\n        var edit_elt = item_elt.closestChild('.actions .edit');\n        var delete_elt = item_elt.closestChild('.actions .delete');\n\n        edit_elt.bind('click', utils.bindContext(this, function (ev) {\n            return this.handleEditButtonClick(ev);\n        }));\n\n        delete_elt.bind('click', utils.bindContext(this, function (ev) {\n            return this.handleDeleteButtonClick(ev);\n        }));\n\n        if (this.sortable) {\n            var up_elt = item_elt.closestChild('.actions .up');\n            var down_elt = item_elt.closestChild('.actions .down');\n\n            up_elt.bind('click', utils.bindContext(this, function (ev) {\n                return this.handleUpButtonClick(ev);\n            }));\n\n            down_elt.bind('click', utils.bindContext(this, function (ev) {\n                return this.handleDownButtonClick(ev);\n            }));\n        }\n    };\n\n    w.renumberList = function () {\n        var item_elts =\n            this.discoverListItemsElement().children('.item');\n\n        for (var i = 0, len = item_elts.length; i < len; ++i) {\n            var item = $(item_elts[i]);\n            this.renumberListItem(item, i);\n            this.updateListItemActions(item, i, len);\n\n        }\n        return this.updateListActions(len);\n    };\n\n    w.renumberListItem = function (elt, offset) {\n        var widget_options = {\n            offset: (this.singleton ? null : offset)\n        };\n        if (_.isFunction(this.widget.updateName)) {\n            this.widget.updateName(elt, this.path, widget_options);\n        }\n    };\n\n    w.updateListActions = function (offset) {\n        var list_elt = this.discoverListElement();\n        var add_elt = list_elt.closestChild('.actions .add');\n\n        if (this.singleton && offset > 0) {\n            add_elt.hide();\n        } else {\n            add_elt.show();\n        }\n        return offset;\n    };\n\n    w.updateListItemActions = function (item_elt, offset, count) {\n        if (this.sortable) {\n            var attr = 'disabled';\n            var up_elt = item_elt.closestChild('.actions .up');\n            var down_elt = item_elt.closestChild('.actions .down');\n\n            if (offset <= 0) {\n                up_elt.attr(attr, attr);\n            } else {\n                up_elt.removeAttr(attr);\n            }\n            if (offset + 1 >= count) {\n                down_elt.attr(attr, attr);\n            } else {\n                down_elt.removeAttr(attr);\n            }\n        }\n    };\n\n    w.moveExistingItem = function (after_elt, item_elt) {\n        if (after_elt) {\n            $(after_elt).after(item_elt);\n        } else {\n            var items_elt = this.discoverListItemsElement();\n            items_elt.append(item_elt);\n        }\n        this.renumberList();\n        this.bindEventsForListItem(item_elt);\n    };\n\n    w.deleteExistingItem = function (item_elt) {\n        $(item_elt).remove();\n        this.renumberList();\n    };\n\n    w.insertNewItemAtEnd = function (callback) {\n        var list_elt = this.discoverListElement();\n\n        var item_elts =\n            this.discoverListItemsElement().children('.item');\n\n        var last_elt = item_elts.last();\n\n        return this.insertNewItem(\n            (this.singleton ? null : item_elts.length),\n                last_elt[0], callback\n        );\n    };\n\n    w.insertNewItem = function (offset, after_elt, callback) {\n        var list_elt = this.discoverListElement();\n        var list_type = this.discoverListType();\n\n        db.newUUID(100, utils.bindContext(this, function (err, uuid) {\n            var value = { type: list_type, _id: uuid };\n\n            var item_elt = $(this.htmlForListItem({\n                name: this._name(this.path),\n                offset: offset,\n                value: value,\n                raw: value\n            }));\n\n            this.moveExistingItem(after_elt, item_elt);\n\n            if (_.isFunction(this.widget.clientInit)) {\n                this.widget.clientInit(\n                    this.field, this.path, value, null, [], {\n                        offset: (this.singleton ? null : offset)\n                    }\n                );\n            }\n\n            if (callback) {\n                callback(item_elt[0]);\n            }\n        }));\n    };\n\n    w.setListItemValue = function (elt, value, offset) {\n        if (this.widget.updateValue) {\n            this.widget.updateValue(\n                elt, this.path, value, { offset: offset }\n            );\n        }\n    };\n\n    w.htmlForListItem = function (item) {\n        var html = (\n            '<div class=\"item\">' +\n                '<div class=\"actions\">' +\n                    (this.sortable ?\n                        this.htmlForDownButton() : '') +\n                    (this.sortable ?\n                        this.htmlForUpButton() : '') +\n                    this.htmlForEditButton() +\n                    this.htmlForDeleteButton() +\n                '</div>' +\n                this.widget.toHTML(\n                    item.name, item.value, item.raw, this.field,\n                        { offset: item.offset }\n                ) +\n            '</div>'\n        );\n        return html;\n    };\n\n    w.htmlForAddButton = function () {\n        return (\n            '<input type=\"button\" class=\"add action\" value=\"Add\" />'\n        );\n    };\n\n    w.htmlForEditButton = function () {\n        return (\n            '<input type=\"button\" class=\"edit action\" value=\"Edit\" />'\n        );\n    };\n\n    w.htmlForDeleteButton = function () {\n        return (\n            '<input type=\"button\" class=\"delete action\" value=\"Delete\" />'\n        );\n    };\n\n    w.htmlForUpButton = function () {\n        return (\n            '<input type=\"button\" class=\"up action\" value=\"&uarr;\" />'\n        );\n    };\n\n    w.htmlForDownButton = function () {\n        return (\n            '<input type=\"button\" class=\"down action\" value=\"&darr;\" />'\n        );\n    };\n\n    w.dispatchEventToAction = function (target_elt,\n                                        action_name, callback) {\n        var name = this._name(this.path);\n        var type_name = this.discoverListType();\n        var item_elt = $(target_elt).closest('.item');\n        var offset = item_elt.prevAll('.item').length;\n        var value = this.widget.getValue(\n            item_elt, this.path, this.render_options\n        );\n\n        var widget_options = {\n            offset: offset,\n            path_extra: (this.render_options.path_extra || [])\n        };\n\n        /* Action handler will transfer control here when finished */\n        var cb = utils.bindContext(this, function (successful, new_value) {\n            if (callback) {\n                callback.call(\n                    this, target_elt, offset, successful, new_value\n                );\n            }\n        });\n\n        var action_handler = (\n            this.actions[action_name] ||\n                this.defaultActionFor(action_name)\n        );\n\n        if (action_handler) {\n            action_handler(\n                action_name, type_name, this.field, this.path,\n                    value, null, [], widget_options, cb\n            );\n        }\n    };\n\n    w.handleUpButtonClick = function (ev) {\n        var item_elt = $(ev.target).closest('.item');\n        item_elt.insertBefore(item_elt.prev('.item'));\n        this.renumberList();\n    };\n\n    w.handleDownButtonClick = function (ev) {\n        var item_elt = $(ev.target).closest('.item');\n        item_elt.insertAfter(item_elt.next('.item'));\n        this.renumberList();\n    };\n\n    w.handleAddButtonClick = function (ev) {\n        var callback = utils.bindContext(\n            this, this.handleAddCompletion\n        );\n        this.insertNewItemAtEnd(\n            utils.bindContext(this, function (item_elt) {\n                this.dispatchEventToAction(item_elt, 'add', callback);\n            })\n        );\n    };\n\n    w.handleEditButtonClick = function (ev) {\n        var callback = utils.bindContext(\n            this, this.handleEditCompletion\n        );\n        this.dispatchEventToAction(ev.target, 'edit', callback);\n    };\n\n    w.handleDeleteButtonClick = function (ev) {\n        var callback = utils.bindContext(\n            this, this.handleDeleteCompletion\n        );\n        var item_elt = $(ev.target).closest('.item', this);\n        this.deleteExistingItem(item_elt);\n        this.dispatchEventToAction(ev, 'delete');\n    };\n\n    w.handleAddCompletion = function (target_elt, offset,\n                                      is_successful, new_value) {\n        var item_elt = $(target_elt).closest('.item', this);\n\n        if (is_successful) {\n            this.setListItemValue(\n                item_elt, new_value, offset\n            );\n        } else {\n            this.deleteExistingItem(item_elt);\n        }\n    };\n\n    w.handleEditCompletion = function (target_elt, offset,\n                                       is_successful, new_value) {\n        if (is_successful) {\n            var item_elt = $(target_elt).closest('.item', this);\n            this.setListItemValue(\n                item_elt, new_value, offset\n            );\n        }\n    };\n\n    w.handleDeleteCompletion = function (target_elt, offset,\n                                         is_successful, new_value) {\n        return;\n    };\n\n    w.defaultActionFor = function (action_name) {\n        switch (action_name) {\n        case 'add':\n        case 'edit':\n            return utils.bindContext(this, function () {\n                var action_options = {\n                    widget: exports.embedForm({\n                        type: this.field.type\n                    })\n                };\n                var args = Array.prototype.slice.apply(arguments);\n                actions.modalDialog.apply(\n                    this, [ action_options ].concat(args)\n                );\n            });\n            /* break */\n        case 'delete':\n            break;\n        }\n        return null;\n    };\n\n    return w;\n};\n\n/**\n * Creates a new field for storing/displaying an embedded object.\n * This is automatically added to embed and embedList field types\n * that don't specify a widget.\n *\n * @name defaultEmbedded([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.defaultEmbedded = function (_options) {\n    var w = new Widget('defaultEmbedded', _options);\n    w.toHTML = function (name, value, raw, field, options) {\n        var display_name = (value ? value._id: '');\n        var fval = (value ? this._stringify_value(value) : '');\n\n        if (field && field.type.display_name && value) {\n            display_name = field.type.display_name(value);\n        }\n        var html = (\n            '<div class=\"embedded embed\">' +\n                '<input type=\"hidden\" value=\"' + h(fval) + '\" name=\"' +\n                    h(this._name(name, options.offset)) + '\" />' +\n                '<span class=\"value\">' + h(display_name) + '</span>' +\n            '</div>'\n        );\n        return html;\n    };\n    return w;\n};\n\n/**\n * Creates a new instance of an embedded *form* for the specified type.\n * This is the basis for the presentation of complex data types in Kanso,\n * and is used within an embedList to add and/or edit items.\n *\n * @name embedForm([options])\n * @param options\n * @returns {Widget Object}\n * @api public\n */\n\nexports.embedForm = function (_options) {\n    var w = new Widget('embedForm', _options);\n\n    w.embedded_type = _options.type;\n    w.form = new forms.Form(w.embedded_type);\n\n    w.toHTML = function (name, value, raw, field, options) {\n\n        this.field = field;\n        this.form.values = value;\n        this.render_options = (options || {});\n\n        var id = this._id(\n            name, 'form', this.render_options.offset,\n                this.render_options.path_extra\n        );\n        var html = (\n            '<div id=\"' + id + '\" class=\"embedded form\">' +\n                '<form>' +\n                    this.form.toHTML(\n                        null, render.defaultRenderer(),\n                            this.render_options, true /* create defaults */\n                    ) +\n                '</form>' +\n            '</div>'\n        );\n        return html;\n    };\n\n    w.getValue = function (elt, path, options) {\n        var container_elt = this._discoverContainerElement(path);\n        var form_elt = container_elt.closestChild('form');\n        var rv = querystring.parse(\n            form_elt.serialize().replace(/\\+/g, '%20')\n        );\n        return rv;\n    };\n\n    w.validate = function (elt, path, options) {\n        this.form.validate({\n            form: this.getValue(elt, path, options),\n            userCtx: (utils.userCtx || utils.currentRequest().userCtx)\n        });\n        return this.form.errors;\n    };\n\n    /** private: **/\n\n    w._discoverContainerElement = function (path) {\n        var id = this._id(\n            path, 'form', this.render_options.offset,\n                this.render_options.path_extra\n        );\n        return $('#' + id);\n    };\n\n    return w;\n};\n\n/**\n * Creates a new document selector widget. This widget allows the\n * user to select a document from a CouchDB view (specified in options).\n * The options available for this widget are explained briefly below:\n *\n * <table class=\"options\">\n *   <tr>\n *      <td class=\"name\">viewName</td>\n *      <td class=\"type\">String</td>\n *      <td class=\"description\">\n *          The name of the CouchDB view that you'd like to select\n *          documents from. If this option is not specified, it will\n *          look for a view with the same name as this widget's field.\n *      </td>\n *   </tr>\n *   <tr>\n *      <td class=\"name\">db</td>\n *      <td class=\"type\">String</td>\n *      <td class=\"description\">\n *          The CouchDB database containing the view for this widget. If\n *          this option is not specified, the current database will be used.\n *      </td>\n *   </tr>\n *   <tr>\n *      <td class=\"name\">useJSON</td>\n *      <td class=\"type\">String</td>\n *      <td class=\"description\">\n *          Set this option to false if this widget should yield a string\n *          containing a single document id. Set this option to true (the\n *          default) to yield a JSON string.\n *      </td>\n *   </tr>\n *   <tr>\n *      <td class=\"name\">storeEntireDocument</td>\n *      <td class=\"type\">String</td>\n *      <td class=\"description\">\n *          Set this option to false if this widget should yield *only*\n *          a document identifier, effectively storing a reference to a\n *          document. Set this option to true (the default) to include\n *          all fields from the selected document. If useJSON is false,\n *          then this option is ignored and treated as if it were false.\n *      </td>\n *   </tr>\n * </table>\n *\n * @constructor\n * @param options\n */\n\nexports.documentSelector = function (_options) {\n    var w = new Widget('documentSelector', _options);\n\n    w.options = _.defaults(_options || {}, {\n        useJSON: true,\n        storeEntireDocument: true\n    });\n\n    w.toHTML = function (name, value, raw, field, options) {\n        this.cacheInit();\n        var html_name = this._name(\n            name, options.offset\n        );\n        var container_id = this._id(\n            name, 'selector', options.offset, options.path_extra\n        );\n        var hidden_id = this._id(\n            name, options.offset, options.path_extra\n        );\n        var select_id = this._id(\n            name, 'select', options.offset, options.path_extra\n        );\n        var input_html = (\n            '<input class=\"backing\" type=\"hidden\" value=\"\"' +\n                'id=\"' + hidden_id + '\" name=\"' + html_name + '\" />'\n        );\n        var select_html = (\n            '<select class=\"selector\" id=\"' + select_id + '\"></select>'\n        );\n        var html = (\n            '<div id=\"' + container_id + '\" class=\"selector widget\">' +\n                input_html + select_html +\n                '<div class=\"spinner\" style=\"display: none;\"></div>' +\n            '</div>'\n        );\n\n        return html;\n    };\n\n    w.updateName = function (elt, path, options) {\n        this.cacheInit();\n        var hidden_elt = this.discoverBackingElement(elt);\n        var select_elt = this.discoverSelectionElement(elt);\n\n        select_elt.attr('id', this._id(\n            path, 'select', options.offset, options.path_extra\n        ));\n        hidden_elt.attr('id', this._id(\n            path, options.offset, options.path_extra\n        ));\n        hidden_elt.attr('name', this._name(\n            path, options.offset\n        ));\n    };\n\n    w.updateValue = function (elt, path, value, options) {\n        elt = $(elt);\n        value = this._stringify_value(value);\n\n        var hidden_elt = this.discoverBackingElement(elt);\n        var select_elt = this.discoverSelectionElement(elt);\n\n        hidden_elt.val(value);\n        select_elt.val(value);\n    };\n\n    w.getValue = function (elt, path, options) {\n        var hidden_elt = this.discoverBackingElement(elt);\n        return this._parse_value(hidden_elt.attr('value'));\n    };\n\n    w.clientInit = function (field, path, value, raw, errors, options) {\n        var id = this._id(\n            path, 'selector', options.offset, options.path_extra\n        );\n        var container_elt = $('#' + id);\n        var widget_options = (this.options || {});\n        var spinner_elt = container_elt.closestChild('.spinner');\n        var select_elt = this.discoverSelectionElement(container_elt);\n        var hidden_elt = this.discoverBackingElement(container_elt);\n\n        /* Start progress */\n        spinner_elt.show();\n\n        /* Copy data to backing element */\n        select_elt.bind('change', function () {\n            hidden_elt.val(select_elt.val());\n        });\n\n        this.populateSelectElement(\n            select_elt, field, path, value, widget_options, function () {\n                spinner_elt.hide();\n            }\n        );\n    };\n\n    /** private: **/\n\n    w.populateSelectElement = function (elt, field, path,\n                                        val, options, callback) {\n\n        db.getView(\n            options.viewName,\n            { include_docs: options.storeEntireDocument },\n            { db: options.db },\n            utils.bindContext(this, function (err, rv) {\n                /* Error handling */\n                if (err) {\n                    throw new Error(\n                        'Failed to request content from view `' +\n                            options.viewName + '`'\n                    );\n                }\n                /* Option element for 'no selection' */\n                var nil_option = $('<option />');\n                if (!val) {\n                    nil_option.attr('selected', 'selected');\n                }\n                elt.append(nil_option);\n\n                /* All other option elements */\n                _.each(rv.rows || [], utils.bindContext(this, function (r) {\n                    var option_elt = $('<option />');\n\n                    if (this.isOptionSelected(r, val, options)) {\n                        option_elt.attr('selected', 'selected');\n                    }\n                    this.generateOptionValue(\n                        field, r, val, options,\n                        utils.bindContext(this, function (err, v) {\n                            if (err) {\n                                throw new Error(\n                                    'Failed to generate identifier for' +\n                                        ' field `' + this._name(path) + '`'\n                                );\n                            }\n                            option_elt.val(v);\n                            option_elt.text(r.value);\n                            elt.append(option_elt);\n                            elt.trigger('change');\n                        })\n                    );\n\n                }));\n                callback();\n            })\n        );\n    };\n\n    w.isOptionSelected = function (row, value, options) {\n        if (options.useJSON) {\n            if (options.storeEntireDocument || options.unique) {\n                return ((value || {})._id === row.id);\n            } else {\n                return ((value || {}).ref === row.id);\n            }\n        } else {\n            return (value === row.id);\n        }\n    };\n\n    w.generateOptionValue = function (field, row, value, options, callback) {\n        if (options.useJSON) {\n            if (options.storeEntireDocument) {\n\n                /* Embed actual document:\n                    Duplicates are automatically disallowed. */\n\n                callback(false, JSON.stringify(row.doc));\n\n            } else if (options.unique) {\n\n                /* Reference, duplicates disallowed:\n                    Store id inside of _id attribute. */\n\n                callback(false, JSON.stringify({\n                    _id: row.id,\n                    type: field.type.name\n                }));\n\n            } else {\n\n                /* Reference, duplicates allowed:\n                    Store id inside of the ref attribute, and generate\n                    a new UUID for the _id attribute if it's necessary. */\n\n                var return_value = function (uuid) {\n                    callback(false, JSON.stringify({\n                        _id: uuid,\n                        ref: row.id,\n                        type: field.type.name\n                    }));\n                };\n\n                var forward_error = function (err) {\n                    callback(err, null);\n                };\n\n                if (value && value._id) {\n                    return_value(value._id);\n                } else {\n                    db.newUUID(100, function (err, uuid) {\n                        if (err) {\n                            forward_error(err);\n                        } else {\n                            return_value(uuid);\n                        }\n                    });\n                }\n            }\n        } else {\n\n            /* Not using JSON:\n                The type is a scalar; just use the _id. */\n\n            callback(false, row.id);\n        }\n\n        return this;\n    };\n\n    w.cacheInit = function () {\n        this.discoverBackingElement = this._discoverBackingElement;\n        this.discoverSelectionElement = this._discoverSelectionElement;\n    };\n\n    w._discoverBackingElement = function (container_elt) {\n        return $(container_elt).closestChild('input[type=hidden].backing');\n    };\n\n    w._discoverSelectionElement = function (container_elt) {\n        return $(container_elt).closestChild('select.selector');\n    };\n\n    return w;\n};\n\n/* \n * closestChild for jQuery\n * Copyright 2011, Tobias Lindig\n * \n * Dual licensed under the MIT license and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.opensource.org/licenses/gpl-license.php\n * \n */\n\nif (utils.isBrowser()) {\n    (function ($) {\n        $.fn.closestChild = function (selector) {\n            /* Breadth-first search for the first matched node */\n            if (selector && selector !== '') {\n                var queue = [];\n                queue.push(this);\n                while (queue.length > 0) {\n                    var node = queue.shift();\n                    var children = node.children();\n                    for (var i = 0; i < children.length; ++i) {\n                        var child = $(children[i]);\n                        if (child.is(selector)) {\n                            return child;\n                        }\n                        queue.push(child);\n                    }\n                }\n            }\n            return $(); /* Nothing found */\n        };\n    }($));\n}\n\n",
        "settings": "module.exports = {\"name\":\"nrama\",\"load\":\"lib/app\",\"modules\":\"lib\",\"templates\":\"templates\",\"attachments\":[\"static\",\"xdm\",\"bkmrklt\"],\"base_template\":\"base.html\"};"
    },
    "types": {},
    "shows": {
        "welcome": "function(doc, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"shows\"][\"welcome\"];return core.runShow(fn, doc, req);}",
        "not_found": "function(doc, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"shows\"][\"not_found\"];return core.runShow(fn, doc, req);}"
    },
    "lists": {
        "all_users": "function(head, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"lists\"][\"all_users\"];return core.runList(fn, head, req);}",
        "sources": "function(head, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"lists\"][\"sources\"];return core.runList(fn, head, req);}",
        "authors": "function(head, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"lists\"][\"authors\"];return core.runList(fn, head, req);}",
        "tags": "function(head, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"lists\"][\"tags\"];return core.runList(fn, head, req);}",
        "flow": "function(head, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"lists\"][\"flow\"];return core.runList(fn, head, req);}",
        "quotes": "function(head, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"lists\"][\"quotes\"];return core.runList(fn, head, req);}"
    },
    "views": {
        "pageId_type_userId": {
            "map": "function (doc) {\n        if( doc.page_id && doc.type ) {\n            if( doc.user_id ) {\n                emit([doc.page_id, doc.type, doc.user_id],doc);\n            } else {\n            //no user_id\n            emit([doc.page_id, doc.type, null],doc);\n            }\n        }\n    }"
        },
        "all_user_ids": {
            "map": "function (doc) {\n        if( doc.type == 'source' && doc.updated) {\n            emit(doc.user_id, doc.updated);\n        }\n    }",
            "reduce": "_stats"
        },
        "source": {
            "map": "function (doc) {\n        if( doc.type && doc.type == \"source\" ) {\n            if( doc.updated && doc.page_id ) {\n                emit([doc.updated, doc.page_id], null);\n            }\n        }\n    }"
        },
        "userId_source": {
            "map": "function (doc) {\n        if( doc.type && doc.type == \"source\" ) {\n            if( doc.user_id && doc.page_id && doc.updated ) {\n                emit([doc.user_id, doc.updated], null);\n            }\n        }\n    }"
        },
        "pageId_userId": {
            "map": "function (doc) {\n    if( doc.user_id && doc.page_id ) {\n      emit([doc.page_id, doc.user_id], null);\n    }\n  }"
        },
        "userId_author": {
            "map": "function (doc) {\n    if( doc.type && doc.type == 'source' ) {\n      if( doc.AUTHOR && doc.user_id ) {\n        var year = doc.YEAR || 0;    //order is [null, 1965, 1990, 2000],  (typically reversed)\n        for( idx in doc.AUTHOR ) {\n          emit( [ doc.user_id, doc.AUTHOR[idx], 5000-year ], 1 );\n        }\n      }\n    }\n  }",
            "reduce": "_count"
        },
        "author_userId": {
            "map": "function (doc) {\n    if( doc.type && doc.type == 'source' ) {\n      if( doc.AUTHOR && doc.user_id ) {\n        var year_order = 5000 - parseInt(doc.YEAR) || 5000;    //order is [null, 1965, 1990, 2000],  (typically reversed)\n        for( idx in doc.AUTHOR ) {\n          emit( [doc.AUTHOR[idx], doc.user_id, year_order], 1 );\n        }\n      }\n    }\n  }",
            "reduce": "_count"
        },
        "tags_all": {
            "map": "function (doc) {\n    if( doc.type && doc.type == 'note' ) {\n      if( doc.tags ) {\n        for( idx in doc.tags ) {\n          var tag = doc.tags[idx];\n          emit([tag], 1);\n        }\n      }\n    }\n  }",
            "reduce": "_count"
        },
        "tags_user": {
            "map": "function (doc) {\n    if( doc.type && doc.type == 'note' ) {\n      if( doc.tags && doc.user_id ) {\n        for( idx in doc.tags ) {\n          var tag = doc.tags[idx];\n          emit([doc.user_id, tag], 1);\n        }\n      }\n    }\n  }",
            "reduce": "_count"
        },
        "tags": {
            "map": "function (doc) {\n    if( doc.type && doc.type == 'note' ) {\n      var note = doc;\n      if( note.tags ) {\n        if( note.user_id && note.source_id && note.quote_id && note.updated) {\n          for( var idx in note.tags ) {\n            var tag = note.tags[idx];\n            emit([ tag, note.user_id, note.updated ], null);                  //include the note iteself\n            emit([ tag, note.user_id, note.updated ], {_id:note.source_id});  //include the source\n            emit([ tag, note.user_id, note.updated ], {_id:note.quote_id});   //include the quote\n          }\n        }\n      }\n    }\n  }",
            "reduce": "_count"
        },
        "quotes": {
            "map": "function (doc) {\n    if( doc.type && doc.user_id && doc.source_id && doc.updated ) {\n      if( doc.type == 'note' && doc.quote_id ) {\n        var note = doc;\n        emit([ note.user_id, note.updated ], null);                  //include the note iteself\n        emit([ note.user_id, note.updated ], {_id:note.source_id});  //include the source\n        //emit([ note.user_id, note.updated ], {_id:note.quote_id});   //include the quote\n      }\n      if( doc.type == 'quote' ) {\n        var quote = doc;\n        emit([ quote.user_id, quote.created ], null);\n        emit([ quote.user_id, quote.created ], {_id:quote.source_id})\n      }\n    }\n  }"
        }
    },
    "updates": {
        "source": "function(doc, req){var core = require(\"kanso/core\");var fn = require(\"lib/app\")[\"updates\"][\"source\"];var r;core.runUpdate(fn, doc, req, function (err, res) { r = res; });return r;}"
    },
    "filters": {},
    "rewrites": [
        {
            "from": "/kanso.js",
            "to": "kanso.js"
        },
        {
            "from": "/_db/*",
            "to": "../../*"
        },
        {
            "from": "/_db",
            "to": "../.."
        },
        {
            "from": "/static/*",
            "to": "static/*"
        },
        {
            "from": "/xdm/*",
            "to": "xdm/*"
        },
        {
            "from": "/sources",
            "to": "_list/sources/source",
            "query": {
                "include_docs": "true",
                "descending": "true"
            }
        },
        {
            "from": "/users",
            "to": "_list/all_users/all_user_ids",
            "method": "GET",
            "query": {
                "group": "true"
            }
        },
        {
            "from": "/users/:user",
            "to": "_list/flow/quotes",
            "query": {
                "end_key": [
                    ":user"
                ],
                "start_key": [
                    ":user",
                    {}
                ],
                "include_docs": "true",
                "descending": "true"
            }
        },
        {
            "from": "/users/:user/sources",
            "to": "_list/sources/userId_source",
            "query": {
                "end_key": [
                    ":user"
                ],
                "start_key": [
                    ":user",
                    {}
                ],
                "include_docs": "true",
                "descending": "true"
            }
        },
        {
            "from": "/authors",
            "to": "_list/authors/author_userId",
            "query": {
                "include_docs": "true",
                "descending": "false",
                "reduce": "false",
                "author_index_in_key": "0"
            }
        },
        {
            "from": "/authors/:author",
            "to": "_list/authors/author_userId",
            "query": {
                "start_key": [
                    ":author"
                ],
                "end_key": [
                    ":author",
                    {}
                ],
                "include_docs": "true",
                "descending": "false",
                "reduce": "false",
                "author_index_in_key": "0"
            }
        },
        {
            "from": "/users/:user/authors",
            "to": "_list/authors/userId_author",
            "query": {
                "start_key": [
                    ":user"
                ],
                "end_key": [
                    ":user",
                    {}
                ],
                "reduce": "false",
                "include_docs": "true",
                "author_index_in_key": "1"
            }
        },
        {
            "from": "/users/:user/authors/:author",
            "to": "_list/authors/author_userId",
            "query": {
                "start_key": [
                    ":author",
                    ":user"
                ],
                "end_key": [
                    ":author",
                    ":user",
                    {}
                ],
                "include_docs": "true",
                "descending": "false",
                "reduce": "false",
                "author_index_in_key": "0"
            }
        },
        {
            "from": "/sources/:source",
            "to": "_list/quotes/pageId_userId",
            "query": {
                "startkey": [
                    ":source"
                ],
                "endkey": [
                    ":source",
                    {}
                ],
                "include_docs": "true"
            }
        },
        {
            "from": "/users/:user/sources/:source",
            "to": "_list/quotes/pageId_userId",
            "query": {
                "key": [
                    ":source",
                    ":user"
                ],
                "include_docs": "true"
            }
        },
        {
            "from": "/tags",
            "to": "_list/tags/tags_all",
            "query": {
                "group": "true",
                "tag_index_in_key": "0"
            }
        },
        {
            "from": "/tags/:tag",
            "to": "_list/quotes/tags",
            "query": {
                "endkey": [
                    ":tag"
                ],
                "startkey": [
                    ":tag",
                    {}
                ],
                "reduce": "false",
                "descending": "true",
                "include_docs": "true"
            }
        },
        {
            "from": "/tags/:tag/recent",
            "to": "_list/flow/tags",
            "query": {
                "endkey": [
                    ":tag"
                ],
                "startkey": [
                    ":tag",
                    {}
                ],
                "reduce": "false",
                "descending": "true",
                "include_docs": "true"
            }
        },
        {
            "from": "/users/:user/tags",
            "to": "_list/tags/tags_user",
            "query": {
                "startkey": [
                    ":user"
                ],
                "endkey": [
                    ":user",
                    {}
                ],
                "group_level": "2",
                "tag_index_in_key": "1"
            }
        },
        {
            "from": "/users/:user/tags/:tag",
            "to": "_list/quotes/tags",
            "query": {
                "endkey": [
                    ":tag",
                    ":user"
                ],
                "startkey": [
                    ":tag",
                    ":user",
                    {}
                ],
                "reduce": "false",
                "descending": "true",
                "include_docs": "true"
            }
        },
        {
            "from": "/users/:user/tags/:tag/recent",
            "to": "_list/flow/tags",
            "query": {
                "endkey": [
                    ":tag",
                    ":user"
                ],
                "startkey": [
                    ":tag",
                    ":user",
                    {}
                ],
                "reduce": "false",
                "descending": "true",
                "include_docs": "true"
            }
        },
        {
            "from": "/update/source/:id",
            "to": "_update/source/:id"
        },
        {
            "from": "/",
            "to": "_show/welcome"
        },
        {
            "from": "*",
            "to": "_show/not_found"
        }
    ],
    "validate_doc_update": "function(){return require(\"lib/app\")[\"validate_doc_update\"].apply(this, arguments);}",
    "events": {},
    "format": "kanso"
}
